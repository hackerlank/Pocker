// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg {

namespace {

const ::google_public::protobuf::Descriptor* ClientRequestHead_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ClientRequestHead_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ClientResponseHead_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ClientResponseHead_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ServerMessageHead_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ServerMessageHead_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RoomResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RoomResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ClientInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ClientInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserLoginInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserLoginInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserDetailInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserDetailInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1_VersionCheck_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1_VersionCheck_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_10_LoginCoreServer_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_10_LoginCoreServer_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_10_LoginCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_10_LoginCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_11_CONSOLEHEARTJUMP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_11_CONSOLEHEARTJUMP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_30_UploadFile_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_30_UploadFile_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_31_DownloadFile_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_31_DownloadFile_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_31_DownloadFile_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_31_DownloadFile_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_97_SendVerificationByUserID_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_97_SendVerificationByUserID_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_98_ResetPassword_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_98_ResetPassword_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_99_Login_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_99_Login_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_99_Login_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_99_Login_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_100_LoginResource_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_100_LoginResource_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_100_LoginResource_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_100_LoginResource_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RoomInfomation_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RoomInfomation_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* IntValue_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  IntValue_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* EnumValue_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  EnumValue_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* EnumItem_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  EnumItem_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_103_FeedBack_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_103_FeedBack_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_104_Register_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_104_Register_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_105_Device_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_105_Device_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_106_ReceiveIOSPayReceipt_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_106_ReceiveIOSPayReceipt_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_106_ReceiveIOSPayReceipt_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_106_ReceiveIOSPayReceipt_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GoodInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GoodInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_107_GetGoodsInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_107_GetGoodsInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_108_BuyGood_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_108_BuyGood_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_109_AndroidPay_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_109_AndroidPay_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_109_AndroidPayDown_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_109_AndroidPayDown_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FeedBack_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FeedBack_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserGameSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserGameSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserGameSettings_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserGameSettings_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_111_GetUserSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_111_GetUserSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_112_ChangeUserSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_112_ChangeUserSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_113_GetUserPermission_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_113_GetUserPermission_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_113_GetUserPermission_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_113_GetUserPermission_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_114_ChangePermission_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_114_ChangePermission_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupPermission_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupPermission_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_115_GetGroupSetting_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_115_GetGroupSetting_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_115_GetGroupSetting_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_115_GetGroupSetting_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_116_ChangeGroupSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_116_ChangeGroupSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_118_SendVerification_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_118_SendVerification_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_119_BindPhone_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_119_BindPhone_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_120_GetFriendList_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_120_GetFriendList_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_121_SearchUser_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_121_SearchUser_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_121_SearchUser_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_121_SearchUser_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_122_SendRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_122_SendRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_123_ReceiveRequestList_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_123_ReceiveRequestList_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Invitation_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Invitation_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_124_DealRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_124_DealRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_124_DealRequest_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_124_DealRequest_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_125_DeleteFriend_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_125_DeleteFriend_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_126_Set_MomentBlock_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_126_Set_MomentBlock_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_127_SearchFriendByPhoneNumber_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_127_SearchFriendByPhoneNumber_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FriendByPhoneNumber_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FriendByPhoneNumber_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_127_SearchFriendByPhoneNumber_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_128_GetMomentBlockUsers_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_128_GetMomentBlockUsers_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_130_Send_Diamond_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_130_Send_Diamond_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TextMessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TextMessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PicMessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PicMessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* VoiceMessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  VoiceMessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CreateRoomMessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CreateRoomMessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupNoticeMessageInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupNoticeMessageInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* InviteIntoGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  InviteIntoGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OutGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OutGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* IntoGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  IntoGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_140_CreateGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_140_CreateGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_140_CreateGroup_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_140_CreateGroup_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_141_EditGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_141_EditGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_142_SearchGroup_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_142_SearchGroup_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_142_SearchGroup_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_142_SearchGroup_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_144_KickUserFromGroup_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_144_KickUserFromGroup_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_145_GetGroupInfo_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_145_GetGroupInfo_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_145_GetGroupInfo_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_145_GetGroupInfo_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_146_GetGroupDetailInfo_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_146_GetGroupDetailInfo_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupUserInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupUserInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GroupManageSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GroupManageSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_146_GetGroupDetailInfo_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_146_GetGroupDetailInfo_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_147_SetGroupManageSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_147_SetGroupManageSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_148_SetGroupAdmin_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_148_SetGroupAdmin_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RoomTypeInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RoomTypeInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_150_GetRoomInfo_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_150_GetRoomInfo_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_150_GetRoomInfo_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_150_GetRoomInfo_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CreateRoomInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CreateRoomInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* BlindLevel_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  BlindLevel_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TournamentLevel_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TournamentLevel_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PrizeLevel_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PrizeLevel_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TournamentPrize_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TournamentPrize_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TournamentInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TournamentInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RoomProp_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RoomProp_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_151_GetRoomInfomation_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_151_GetRoomInfomation_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_152_CreateRoom_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_152_CreateRoom_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_152_CreateRoom_down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_152_CreateRoom_down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_154_CancelTournament_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_154_CancelTournament_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_160_SendChatMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_160_SendChatMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_160_SendChatMessage_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_160_SendChatMessage_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_161_ReceiveChatMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_161_ReceiveChatMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_161_ReceiveChatMessage_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_161_ReceiveChatMessage_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_170_GetHistoryScore_Up_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_170_GetHistoryScore_Up_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* HistoryScore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  HistoryScore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_170_GetHistoryScore_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_170_GetHistoryScore_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_171_GetGroupUserRank_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_171_GetGroupUserRank_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_171_GetGroupUserRank_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_171_GetGroupUserRank_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_181_JoinTournament_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_181_JoinTournament_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_182_TournamentStart_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_182_TournamentStart_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_190_ReceiveMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_190_ReceiveMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_190_ReceiveMessage_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_190_ReceiveMessage_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_191_NotifyChange_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_191_NotifyChange_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Moment_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Moment_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CommentInfos_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CommentInfos_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MomentInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MomentInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* NormalMomentInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  NormalMomentInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_200_PublishMoment_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_200_PublishMoment_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_201_GetMoment_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_201_GetMoment_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_201_GetMoment_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_201_GetMoment_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_202_DeleteMoment_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_202_DeleteMoment_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CommentInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CommentInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_203_PublishComment_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_203_PublishComment_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_204_GetComment_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_204_GetComment_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_204_GetComment_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_204_GetComment_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_205_DeleteMoment_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_205_DeleteMoment_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_400_LoginRoom_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_400_LoginRoom_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_400_LoginRoom_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_400_LoginRoom_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_410_EnterRoom_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_410_EnterRoom_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_410_EnterRoom_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_410_EnterRoom_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_411_SendSeatInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_411_SendSeatInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_411_SendSeatInfo_Down_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_411_SendSeatInfo_Down_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PlayerSitStatus_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PlayerSitStatus_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_412_ReceiveSeatInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_412_ReceiveSeatInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_413_ReceiveGameStart_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_413_ReceiveGameStart_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_414_ReceiveGameEnd_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_414_ReceiveGameEnd_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_415_DisableAutoAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_415_DisableAutoAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ActionRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ActionRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_417_ReceiveOtherPlayerAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_417_ReceiveOtherPlayerAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_420_PokerGetScore_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_420_PokerGetScore_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PlayerScore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PlayerScore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PlayerScores_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PlayerScores_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_420_PokerGetScore_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_420_PokerGetScore_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_430_SendGameVoice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_430_SendGameVoice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_431_ReceiveGameVoice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_431_ReceiveGameVoice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_440_SetGameStatus_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_440_SetGameStatus_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_441_KickPlayer_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_441_KickPlayer_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_442_ReceiveGameStatus_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_442_ReceiveGameStatus_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_490_ReceiveRoomClose_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_490_ReceiveRoomClose_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_491_ReceiveRoomMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_491_ReceiveRoomMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_495_ReceiveRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_495_ReceiveRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_496_ReplyRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_496_ReplyRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CommonRoomInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CommonRoomInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CommonPlayerInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CommonPlayerInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_500_PokerRefreshAll_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_500_PokerRefreshAll_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerPlayerSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerPlayerSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerPlayerInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerPlayerInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TableInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TableInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TableAndUserUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TableAndUserUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerActionRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerActionRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_501_PokerRequestAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_501_PokerRequestAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_502_PokerSendAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_502_PokerSendAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_503_PokerReceivePropUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_503_PokerReceivePropUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_510_PokerAddChips_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_510_PokerAddChips_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_511_PokerReceiveNeedChip_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_511_PokerReceiveNeedChip_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_512_PokerRequestChoice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_512_PokerRequestChoice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_513_PokerReplyChoice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_513_PokerReplyChoice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_514_PokerReceiveTableNote_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_514_PokerReceiveTableNote_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_515_PokerSendSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_515_PokerSendSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_516_PokerReceiveSettingChange_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_516_PokerReceiveSettingChange_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_517_PokerSendShowCard_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_517_PokerSendShowCard_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PlayerWin_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PlayerWin_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PlayerHandResult_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PlayerHandResult_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Pot_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Pot_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* HandResultInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  HandResultInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_520_PokerReceiveHandResult_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_520_PokerReceiveHandResult_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_530_PokerGetTourmentStatus_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_530_PokerGetTourmentStatus_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_530_PokerGetTourmentStatus_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_530_PokerGetTourmentStatus_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TourmentTableInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TourmentTableInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_531_PokerTourmentChangeTable_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_531_PokerTourmentChangeTable_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_532_PokerTournamentRequestAddon_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_532_PokerTournamentRequestAddon_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_533_PokerTournamentAddon_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_533_PokerTournamentAddon_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPlayerInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPlayerInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPlayerSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPlayerSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPropUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPropUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCResult_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCResult_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_600_OFCRefreshAll_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_600_OFCRefreshAll_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_601_OFCReceivePropUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_601_OFCReceivePropUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPlayerCard_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPlayerCard_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_602_OFCSendPlayerCard_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_602_OFCSendPlayerCard_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserCompare_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserCompare_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPlayerHandResult_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPlayerHandResult_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_610_OFCReceiveResult_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_610_OFCReceiveResult_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_615_OFCSendSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_615_OFCSendSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_616_OFCReceiveSettingChange_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_616_OFCReceiveSettingChange_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongPlayerInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongPlayerInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongFu_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongFu_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongScoreChange_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongScoreChange_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongPlayerSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongPlayerSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongPropUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongPropUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongTing_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongTing_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongPossibleTing_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongPossibleTing_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongActionRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongActionRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_700_MahjongRefreshAll_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_700_MahjongRefreshAll_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_701_MahjongReceivePropUpdate_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_701_MahjongReceivePropUpdate_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_702_MahjongSendPlayerChoice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_702_MahjongSendPlayerChoice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongTestAllWinCardAndType_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongTestAllWinCardAndType_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongWinCardAndType_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongWinCardAndType_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_703_MahjongReceivePlayerAction_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_703_MahjongReceivePlayerAction_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_715_MahjongSendSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_715_MahjongSendSetting_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_716_MahjongReceiveSettingChange_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_716_MahjongReceiveSettingChange_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_300_PokerGetHandHistory_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_300_PokerGetHandHistory_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerStep_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerStep_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerBlinds_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerBlinds_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerBlind_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerBlind_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* PokerPlayerActionInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  PokerPlayerActionInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCStep_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCStep_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OFCPlayerActionInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OFCPlayerActionInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* MahjongStep_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MahjongStep_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ReplayStep_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ReplayStep_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ReplaySteps_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ReplaySteps_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ReplayPlayers_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ReplayPlayers_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ReplayPlayer_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ReplayPlayer_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* HandBaseInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  HandBaseInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_300_PokerGetHandHistory_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_300_PokerGetHandHistory_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1000_RegisterServer_OtherToCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1000_RegisterServer_OtherToCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1000_RegisterServer_CoreToOther_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1000_RegisterServer_CoreToOther_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ServerInfos_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ServerInfos_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_HTMLRegister_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_HTMLRegister_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_HTMLRegisterEnterRoom_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_HTMLRegisterEnterRoom_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1003_ChangeUserInfo_ResToCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1003_ChangeUserInfo_ResToCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1004_ChangeUserInfo_CoreToOther_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1004_ChangeUserInfo_CoreToOther_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1005_OnlineInfo_OtherToCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1005_OnlineInfo_OtherToCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ServerRoomInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ServerRoomInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1006_RoomInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1006_RoomInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1009_CreateRoom_ResToCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1009_CreateRoom_ResToCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1010_CreateRoom_CoreToRoom_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1010_CreateRoom_CoreToRoom_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1011_ChangeServerProp_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1011_ChangeServerProp_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1012_WXPayMsg_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1012_WXPayMsg_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1100_ShutDown_ConsoleToCore_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1100_ShutDown_ConsoleToCore_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1101_ShutDown_CoreToOther_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1101_ShutDown_CoreToOther_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1105_ServerInformation_CoreToConsole_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1105_ServerInformation_CoreToConsole_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1107_SERVER_RESET_TOURMENT_CREDIT_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1108_SEARCH_CREDIT_RANK_UP_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1108_SEARCH_CREDIT_RANK_DOWN_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1109_PUBLISH_SYS_MESSAGE_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UserTourCreditInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UserTourCreditInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ChatMessages_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ChatMessages_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* InvitationsForSave_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  InvitationsForSave_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ChatMessageForSave_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ChatMessageForSave_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OldChatMessageForSave_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OldChatMessageForSave_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GameRecord_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GameRecord_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GameRecordForSave_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GameRecordForSave_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CreateRoomInfoForSave_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CreateRoomInfoForSave_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ClientUserSetting_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ClientUserSetting_reflection_ = NULL;
const ::google_public::protobuf::EnumDescriptor* Language_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* Platform_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* Game_Tool_Type_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* Sex_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* VersionStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* PropertyType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* VerificationType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MessageStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* InvitationStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* GroupType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* GroupUserStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* GroupSearchType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* RoomType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MomentDisplayType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* CommentType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* SittingStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* GameStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* ActionChoice_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* ActionStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* ChoiceType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* TournamentStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* OFCRule_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* OFCCardType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* OFCActionStatus_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* OFCCardLocation_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongFuType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongPosition_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongCard_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* SiChuanMahjongRule_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* SiChuanMahjongWinType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongCardSwitchType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongCardZone_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongRequestType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongActionChoice_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* MahjongSuit_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* PokerStepType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* PokerRoundType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* BlindType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* OFCStepType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* HandType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* RoomStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  ClientRequestHead_descriptor_ = file->message_type(0);
  static const int ClientRequestHead_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, testcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, timemark_),
  };
  ClientRequestHead_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ClientRequestHead_descriptor_,
      ClientRequestHead::default_instance_,
      ClientRequestHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequestHead, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequestHead));
  ClientResponseHead_descriptor_ = file->message_type(1);
  static const int ClientResponseHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponseHead, testcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponseHead, timemark_),
  };
  ClientResponseHead_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ClientResponseHead_descriptor_,
      ClientResponseHead::default_instance_,
      ClientResponseHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponseHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponseHead, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientResponseHead));
  ServerMessageHead_descriptor_ = file->message_type(2);
  static const int ServerMessageHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessageHead, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessageHead, timemark_),
  };
  ServerMessageHead_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ServerMessageHead_descriptor_,
      ServerMessageHead::default_instance_,
      ServerMessageHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessageHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessageHead, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessageHead));
  Response_descriptor_ = file->message_type(3);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, message_),
  };
  Response_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  RoomResponse_descriptor_ = file->message_type(4);
  static const int RoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomResponse, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomResponse, response_),
  };
  RoomResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RoomResponse_descriptor_,
      RoomResponse::default_instance_,
      RoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomResponse));
  ClientInfo_descriptor_ = file->message_type(5);
  static const int ClientInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, screen_height_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, systemversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, platform_),
  };
  ClientInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ClientInfo_descriptor_,
      ClientInfo::default_instance_,
      ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInfo));
  UserLoginInfo_descriptor_ = file->message_type(6);
  static const int UserLoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, phonenum_),
  };
  UserLoginInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserLoginInfo_descriptor_,
      UserLoginInfo::default_instance_,
      UserLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginInfo));
  UserDetailInfo_descriptor_ = file->message_type(7);
  static const int UserDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, picname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, userid_),
  };
  UserDetailInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserDetailInfo_descriptor_,
      UserDetailInfo::default_instance_,
      UserDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetailInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDetailInfo));
  Processor_1_VersionCheck_descriptor_ = file->message_type(8);
  static const int Processor_1_VersionCheck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, resserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, versionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, versioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, ischeckversion_),
  };
  Processor_1_VersionCheck_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1_VersionCheck_descriptor_,
      Processor_1_VersionCheck::default_instance_,
      Processor_1_VersionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1_VersionCheck, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1_VersionCheck));
  Processor_10_LoginCoreServer_descriptor_ = file->message_type(9);
  static const int Processor_10_LoginCoreServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCoreServer, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCoreServer, password_),
  };
  Processor_10_LoginCoreServer_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_10_LoginCoreServer_descriptor_,
      Processor_10_LoginCoreServer::default_instance_,
      Processor_10_LoginCoreServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCoreServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCoreServer, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_10_LoginCoreServer));
  Processor_10_LoginCore_descriptor_ = file->message_type(10);
  static const int Processor_10_LoginCore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCore, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCore, response_),
  };
  Processor_10_LoginCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_10_LoginCore_descriptor_,
      Processor_10_LoginCore::default_instance_,
      Processor_10_LoginCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_10_LoginCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_10_LoginCore));
  Processor_11_CONSOLEHEARTJUMP_descriptor_ = file->message_type(11);
  static const int Processor_11_CONSOLEHEARTJUMP_offsets_[1] = {
  };
  Processor_11_CONSOLEHEARTJUMP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_11_CONSOLEHEARTJUMP_descriptor_,
      Processor_11_CONSOLEHEARTJUMP::default_instance_,
      Processor_11_CONSOLEHEARTJUMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_11_CONSOLEHEARTJUMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_11_CONSOLEHEARTJUMP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_11_CONSOLEHEARTJUMP));
  Processor_30_UploadFile_descriptor_ = file->message_type(12);
  static const int Processor_30_UploadFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_30_UploadFile, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_30_UploadFile, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_30_UploadFile, iscompress_),
  };
  Processor_30_UploadFile_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_30_UploadFile_descriptor_,
      Processor_30_UploadFile::default_instance_,
      Processor_30_UploadFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_30_UploadFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_30_UploadFile, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_30_UploadFile));
  Processor_31_DownloadFile_UP_descriptor_ = file->message_type(13);
  static const int Processor_31_DownloadFile_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_UP, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_UP, iscompress_),
  };
  Processor_31_DownloadFile_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_31_DownloadFile_UP_descriptor_,
      Processor_31_DownloadFile_UP::default_instance_,
      Processor_31_DownloadFile_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_31_DownloadFile_UP));
  Processor_31_DownloadFile_DOWN_descriptor_ = file->message_type(14);
  static const int Processor_31_DownloadFile_DOWN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_DOWN, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_DOWN, filename_),
  };
  Processor_31_DownloadFile_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_31_DownloadFile_DOWN_descriptor_,
      Processor_31_DownloadFile_DOWN::default_instance_,
      Processor_31_DownloadFile_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_31_DownloadFile_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_31_DownloadFile_DOWN));
  Processor_97_SendVerificationByUserID_descriptor_ = file->message_type(15);
  static const int Processor_97_SendVerificationByUserID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_97_SendVerificationByUserID, username_),
  };
  Processor_97_SendVerificationByUserID_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_97_SendVerificationByUserID_descriptor_,
      Processor_97_SendVerificationByUserID::default_instance_,
      Processor_97_SendVerificationByUserID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_97_SendVerificationByUserID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_97_SendVerificationByUserID, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_97_SendVerificationByUserID));
  Processor_98_ResetPassword_descriptor_ = file->message_type(16);
  static const int Processor_98_ResetPassword_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_98_ResetPassword, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_98_ResetPassword, verification_),
  };
  Processor_98_ResetPassword_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_98_ResetPassword_descriptor_,
      Processor_98_ResetPassword::default_instance_,
      Processor_98_ResetPassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_98_ResetPassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_98_ResetPassword, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_98_ResetPassword));
  Processor_99_Login_UP_descriptor_ = file->message_type(17);
  static const int Processor_99_Login_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_UP, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_UP, clientinfo_),
  };
  Processor_99_Login_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_99_Login_UP_descriptor_,
      Processor_99_Login_UP::default_instance_,
      Processor_99_Login_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_99_Login_UP));
  Processor_99_Login_DOWN_descriptor_ = file->message_type(18);
  static const int Processor_99_Login_DOWN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, fileserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, user_),
  };
  Processor_99_Login_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_99_Login_DOWN_descriptor_,
      Processor_99_Login_DOWN::default_instance_,
      Processor_99_Login_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_99_Login_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_99_Login_DOWN));
  Processor_100_LoginResource_descriptor_ = file->message_type(19);
  static const int Processor_100_LoginResource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource, key_),
  };
  Processor_100_LoginResource_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_100_LoginResource_descriptor_,
      Processor_100_LoginResource::default_instance_,
      Processor_100_LoginResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_100_LoginResource));
  Processor_100_LoginResource_Down_descriptor_ = file->message_type(20);
  static const int Processor_100_LoginResource_Down_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, offlinemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, offlinerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, roomserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, roominfomation_),
  };
  Processor_100_LoginResource_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_100_LoginResource_Down_descriptor_,
      Processor_100_LoginResource_Down::default_instance_,
      Processor_100_LoginResource_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_100_LoginResource_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_100_LoginResource_Down));
  RoomInfomation_descriptor_ = file->message_type(21);
  static const int RoomInfomation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, createroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, tournamentsizetemplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, tournamentspeedtemplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, blindtime_),
  };
  RoomInfomation_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RoomInfomation_descriptor_,
      RoomInfomation::default_instance_,
      RoomInfomation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfomation, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfomation));
  Property_descriptor_ = file->message_type(22);
  static const int Property_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, enumvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, primary_),
  };
  Property_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  IntValue_descriptor_ = file->message_type(23);
  static const int IntValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, defaultvalue_),
  };
  IntValue_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      IntValue_descriptor_,
      IntValue::default_instance_,
      IntValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntValue, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(IntValue));
  EnumValue_descriptor_ = file->message_type(24);
  static const int EnumValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, items_),
  };
  EnumValue_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      EnumValue_descriptor_,
      EnumValue::default_instance_,
      EnumValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(EnumValue));
  EnumItem_descriptor_ = file->message_type(25);
  static const int EnumItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumItem, text_),
  };
  EnumItem_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      EnumItem_descriptor_,
      EnumItem::default_instance_,
      EnumItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumItem, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(EnumItem));
  Processor_103_FeedBack_descriptor_ = file->message_type(26);
  static const int Processor_103_FeedBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_103_FeedBack, feedback_),
  };
  Processor_103_FeedBack_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_103_FeedBack_descriptor_,
      Processor_103_FeedBack::default_instance_,
      Processor_103_FeedBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_103_FeedBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_103_FeedBack, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_103_FeedBack));
  Processor_104_Register_descriptor_ = file->message_type(27);
  static const int Processor_104_Register_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, referee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, verification_),
  };
  Processor_104_Register_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_104_Register_descriptor_,
      Processor_104_Register::default_instance_,
      Processor_104_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_104_Register, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_104_Register));
  Processor_105_Device_descriptor_ = file->message_type(28);
  static const int Processor_105_Device_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_105_Device, devicetoken_),
  };
  Processor_105_Device_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_105_Device_descriptor_,
      Processor_105_Device::default_instance_,
      Processor_105_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_105_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_105_Device, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_105_Device));
  Processor_106_ReceiveIOSPayReceipt_descriptor_ = file->message_type(29);
  static const int Processor_106_ReceiveIOSPayReceipt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt, receipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt, userid_),
  };
  Processor_106_ReceiveIOSPayReceipt_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_106_ReceiveIOSPayReceipt_descriptor_,
      Processor_106_ReceiveIOSPayReceipt::default_instance_,
      Processor_106_ReceiveIOSPayReceipt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_106_ReceiveIOSPayReceipt));
  Processor_106_ReceiveIOSPayReceipt_Down_descriptor_ = file->message_type(30);
  static const int Processor_106_ReceiveIOSPayReceipt_Down_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt_Down, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt_Down, receiptmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt_Down, type_),
  };
  Processor_106_ReceiveIOSPayReceipt_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_106_ReceiveIOSPayReceipt_Down_descriptor_,
      Processor_106_ReceiveIOSPayReceipt_Down::default_instance_,
      Processor_106_ReceiveIOSPayReceipt_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_106_ReceiveIOSPayReceipt_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_106_ReceiveIOSPayReceipt_Down));
  GoodInfo_descriptor_ = file->message_type(31);
  static const int GoodInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, picname_),
  };
  GoodInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GoodInfo_descriptor_,
      GoodInfo::default_instance_,
      GoodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodInfo));
  Processor_107_GetGoodsInfo_descriptor_ = file->message_type(32);
  static const int Processor_107_GetGoodsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_107_GetGoodsInfo, goodsinfo_),
  };
  Processor_107_GetGoodsInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_107_GetGoodsInfo_descriptor_,
      Processor_107_GetGoodsInfo::default_instance_,
      Processor_107_GetGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_107_GetGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_107_GetGoodsInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_107_GetGoodsInfo));
  Processor_108_BuyGood_descriptor_ = file->message_type(33);
  static const int Processor_108_BuyGood_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_108_BuyGood, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_108_BuyGood, userid_),
  };
  Processor_108_BuyGood_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_108_BuyGood_descriptor_,
      Processor_108_BuyGood::default_instance_,
      Processor_108_BuyGood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_108_BuyGood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_108_BuyGood, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_108_BuyGood));
  Processor_109_AndroidPay_descriptor_ = file->message_type(34);
  static const int Processor_109_AndroidPay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPay, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPay, productid_),
  };
  Processor_109_AndroidPay_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_109_AndroidPay_descriptor_,
      Processor_109_AndroidPay::default_instance_,
      Processor_109_AndroidPay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPay, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_109_AndroidPay));
  Processor_109_AndroidPayDown_descriptor_ = file->message_type(35);
  static const int Processor_109_AndroidPayDown_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, prepayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, noncestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, sign_),
  };
  Processor_109_AndroidPayDown_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_109_AndroidPayDown_descriptor_,
      Processor_109_AndroidPayDown::default_instance_,
      Processor_109_AndroidPayDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_109_AndroidPayDown, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_109_AndroidPayDown));
  FeedBack_descriptor_ = file->message_type(36);
  static const int FeedBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBack, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBack, picname_),
  };
  FeedBack_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FeedBack_descriptor_,
      FeedBack::default_instance_,
      FeedBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBack, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedBack));
  UserGameSetting_descriptor_ = file->message_type(37);
  static const int UserGameSetting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSetting, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSetting, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSetting, property_),
  };
  UserGameSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserGameSetting_descriptor_,
      UserGameSetting::default_instance_,
      UserGameSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGameSetting));
  UserGameSettings_descriptor_ = file->message_type(38);
  static const int UserGameSettings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSettings, gamesetting_),
  };
  UserGameSettings_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserGameSettings_descriptor_,
      UserGameSettings::default_instance_,
      UserGameSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGameSettings, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGameSettings));
  Processor_111_GetUserSetting_descriptor_ = file->message_type(39);
  static const int Processor_111_GetUserSetting_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, gamesettings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, hitpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, phonenumber_),
  };
  Processor_111_GetUserSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_111_GetUserSetting_descriptor_,
      Processor_111_GetUserSetting::default_instance_,
      Processor_111_GetUserSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_111_GetUserSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_111_GetUserSetting));
  Processor_112_ChangeUserSetting_descriptor_ = file->message_type(40);
  static const int Processor_112_ChangeUserSetting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_112_ChangeUserSetting, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_112_ChangeUserSetting, userlogininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_112_ChangeUserSetting, gamesettings_),
  };
  Processor_112_ChangeUserSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_112_ChangeUserSetting_descriptor_,
      Processor_112_ChangeUserSetting::default_instance_,
      Processor_112_ChangeUserSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_112_ChangeUserSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_112_ChangeUserSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_112_ChangeUserSetting));
  Processor_113_GetUserPermission_UP_descriptor_ = file->message_type(41);
  static const int Processor_113_GetUserPermission_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_UP, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_UP, userid_),
  };
  Processor_113_GetUserPermission_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_113_GetUserPermission_UP_descriptor_,
      Processor_113_GetUserPermission_UP::default_instance_,
      Processor_113_GetUserPermission_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_113_GetUserPermission_UP));
  Processor_113_GetUserPermission_DOWN_descriptor_ = file->message_type(42);
  static const int Processor_113_GetUserPermission_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_DOWN, permission_),
  };
  Processor_113_GetUserPermission_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_113_GetUserPermission_DOWN_descriptor_,
      Processor_113_GetUserPermission_DOWN::default_instance_,
      Processor_113_GetUserPermission_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_113_GetUserPermission_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_113_GetUserPermission_DOWN));
  Processor_114_ChangePermission_descriptor_ = file->message_type(43);
  static const int Processor_114_ChangePermission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_114_ChangePermission, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_114_ChangePermission, permission_),
  };
  Processor_114_ChangePermission_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_114_ChangePermission_descriptor_,
      Processor_114_ChangePermission::default_instance_,
      Processor_114_ChangePermission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_114_ChangePermission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_114_ChangePermission, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_114_ChangePermission));
  GroupPermission_descriptor_ = file->message_type(44);
  static const int GroupPermission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPermission, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPermission, credit_),
  };
  GroupPermission_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupPermission_descriptor_,
      GroupPermission::default_instance_,
      GroupPermission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPermission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPermission, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPermission));
  Processor_115_GetGroupSetting_UP_descriptor_ = file->message_type(45);
  static const int Processor_115_GetGroupSetting_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_UP, groupid_),
  };
  Processor_115_GetGroupSetting_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_115_GetGroupSetting_UP_descriptor_,
      Processor_115_GetGroupSetting_UP::default_instance_,
      Processor_115_GetGroupSetting_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_115_GetGroupSetting_UP));
  Processor_115_GetGroupSetting_DOWN_descriptor_ = file->message_type(46);
  static const int Processor_115_GetGroupSetting_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_DOWN, setting_),
  };
  Processor_115_GetGroupSetting_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_115_GetGroupSetting_DOWN_descriptor_,
      Processor_115_GetGroupSetting_DOWN::default_instance_,
      Processor_115_GetGroupSetting_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_115_GetGroupSetting_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_115_GetGroupSetting_DOWN));
  Processor_116_ChangeGroupSetting_descriptor_ = file->message_type(47);
  static const int Processor_116_ChangeGroupSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_116_ChangeGroupSetting, setting_),
  };
  Processor_116_ChangeGroupSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_116_ChangeGroupSetting_descriptor_,
      Processor_116_ChangeGroupSetting::default_instance_,
      Processor_116_ChangeGroupSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_116_ChangeGroupSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_116_ChangeGroupSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_116_ChangeGroupSetting));
  Processor_118_SendVerification_descriptor_ = file->message_type(48);
  static const int Processor_118_SendVerification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_118_SendVerification, phonenumber_),
  };
  Processor_118_SendVerification_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_118_SendVerification_descriptor_,
      Processor_118_SendVerification::default_instance_,
      Processor_118_SendVerification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_118_SendVerification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_118_SendVerification, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_118_SendVerification));
  Processor_119_BindPhone_descriptor_ = file->message_type(49);
  static const int Processor_119_BindPhone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_119_BindPhone, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_119_BindPhone, verification_),
  };
  Processor_119_BindPhone_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_119_BindPhone_descriptor_,
      Processor_119_BindPhone::default_instance_,
      Processor_119_BindPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_119_BindPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_119_BindPhone, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_119_BindPhone));
  GroupSetting_descriptor_ = file->message_type(50);
  static const int GroupSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSetting, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSetting, receivepush_),
  };
  GroupSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupSetting_descriptor_,
      GroupSetting::default_instance_,
      GroupSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupSetting));
  FriendInfo_descriptor_ = file->message_type(51);
  static const int FriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, isonline_),
  };
  FriendInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  Processor_120_GetFriendList_descriptor_ = file->message_type(52);
  static const int Processor_120_GetFriendList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_120_GetFriendList, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_120_GetFriendList, friendinfo_),
  };
  Processor_120_GetFriendList_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_120_GetFriendList_descriptor_,
      Processor_120_GetFriendList::default_instance_,
      Processor_120_GetFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_120_GetFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_120_GetFriendList, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_120_GetFriendList));
  Processor_121_SearchUser_UP_descriptor_ = file->message_type(53);
  static const int Processor_121_SearchUser_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_UP, searchname_),
  };
  Processor_121_SearchUser_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_121_SearchUser_UP_descriptor_,
      Processor_121_SearchUser_UP::default_instance_,
      Processor_121_SearchUser_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_121_SearchUser_UP));
  Processor_121_SearchUser_DOWN_descriptor_ = file->message_type(54);
  static const int Processor_121_SearchUser_DOWN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_DOWN, userdetailinfo_),
  };
  Processor_121_SearchUser_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_121_SearchUser_DOWN_descriptor_,
      Processor_121_SearchUser_DOWN::default_instance_,
      Processor_121_SearchUser_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_121_SearchUser_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_121_SearchUser_DOWN));
  Processor_122_SendRequest_descriptor_ = file->message_type(55);
  static const int Processor_122_SendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_122_SendRequest, request_),
  };
  Processor_122_SendRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_122_SendRequest_descriptor_,
      Processor_122_SendRequest::default_instance_,
      Processor_122_SendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_122_SendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_122_SendRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_122_SendRequest));
  Processor_123_ReceiveRequestList_descriptor_ = file->message_type(56);
  static const int Processor_123_ReceiveRequestList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_123_ReceiveRequestList, request_),
  };
  Processor_123_ReceiveRequestList_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_123_ReceiveRequestList_descriptor_,
      Processor_123_ReceiveRequestList::default_instance_,
      Processor_123_ReceiveRequestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_123_ReceiveRequestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_123_ReceiveRequestList, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_123_ReceiveRequestList));
  Invitation_descriptor_ = file->message_type(57);
  static const int Invitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, sendingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, status_),
  };
  Invitation_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Invitation_descriptor_,
      Invitation::default_instance_,
      Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Invitation));
  Request_descriptor_ = file->message_type(58);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, receiverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
  };
  Request_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Processor_124_DealRequest_descriptor_ = file->message_type(59);
  static const int Processor_124_DealRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest, requestid_),
  };
  Processor_124_DealRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_124_DealRequest_descriptor_,
      Processor_124_DealRequest::default_instance_,
      Processor_124_DealRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_124_DealRequest));
  Processor_124_DealRequest_DOWN_descriptor_ = file->message_type(60);
  static const int Processor_124_DealRequest_DOWN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest_DOWN, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest_DOWN, accepted_),
  };
  Processor_124_DealRequest_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_124_DealRequest_DOWN_descriptor_,
      Processor_124_DealRequest_DOWN::default_instance_,
      Processor_124_DealRequest_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_124_DealRequest_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_124_DealRequest_DOWN));
  Processor_125_DeleteFriend_descriptor_ = file->message_type(61);
  static const int Processor_125_DeleteFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_125_DeleteFriend, userid_),
  };
  Processor_125_DeleteFriend_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_125_DeleteFriend_descriptor_,
      Processor_125_DeleteFriend::default_instance_,
      Processor_125_DeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_125_DeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_125_DeleteFriend, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_125_DeleteFriend));
  Processor_126_Set_MomentBlock_descriptor_ = file->message_type(62);
  static const int Processor_126_Set_MomentBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_126_Set_MomentBlock, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_126_Set_MomentBlock, isblock_),
  };
  Processor_126_Set_MomentBlock_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_126_Set_MomentBlock_descriptor_,
      Processor_126_Set_MomentBlock::default_instance_,
      Processor_126_Set_MomentBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_126_Set_MomentBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_126_Set_MomentBlock, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_126_Set_MomentBlock));
  Processor_127_SearchFriendByPhoneNumber_UP_descriptor_ = file->message_type(63);
  static const int Processor_127_SearchFriendByPhoneNumber_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_UP, phonenumber_),
  };
  Processor_127_SearchFriendByPhoneNumber_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_127_SearchFriendByPhoneNumber_UP_descriptor_,
      Processor_127_SearchFriendByPhoneNumber_UP::default_instance_,
      Processor_127_SearchFriendByPhoneNumber_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_127_SearchFriendByPhoneNumber_UP));
  FriendByPhoneNumber_descriptor_ = file->message_type(64);
  static const int FriendByPhoneNumber_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendByPhoneNumber, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendByPhoneNumber, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendByPhoneNumber, isfriend_),
  };
  FriendByPhoneNumber_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FriendByPhoneNumber_descriptor_,
      FriendByPhoneNumber::default_instance_,
      FriendByPhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendByPhoneNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendByPhoneNumber, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendByPhoneNumber));
  Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_ = file->message_type(65);
  static const int Processor_127_SearchFriendByPhoneNumber_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_DOWN, friends_),
  };
  Processor_127_SearchFriendByPhoneNumber_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_,
      Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance_,
      Processor_127_SearchFriendByPhoneNumber_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_127_SearchFriendByPhoneNumber_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_127_SearchFriendByPhoneNumber_DOWN));
  Processor_128_GetMomentBlockUsers_DOWN_descriptor_ = file->message_type(66);
  static const int Processor_128_GetMomentBlockUsers_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_128_GetMomentBlockUsers_DOWN, users_),
  };
  Processor_128_GetMomentBlockUsers_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_128_GetMomentBlockUsers_DOWN_descriptor_,
      Processor_128_GetMomentBlockUsers_DOWN::default_instance_,
      Processor_128_GetMomentBlockUsers_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_128_GetMomentBlockUsers_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_128_GetMomentBlockUsers_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_128_GetMomentBlockUsers_DOWN));
  Processor_130_Send_Diamond_descriptor_ = file->message_type(67);
  static const int Processor_130_Send_Diamond_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_130_Send_Diamond, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_130_Send_Diamond, amount_),
  };
  Processor_130_Send_Diamond_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_130_Send_Diamond_descriptor_,
      Processor_130_Send_Diamond::default_instance_,
      Processor_130_Send_Diamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_130_Send_Diamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_130_Send_Diamond, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_130_Send_Diamond));
  ChatMessage_descriptor_ = file->message_type(68);
  static const int ChatMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, receiveuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, messageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, subtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, status_),
  };
  ChatMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  MessageInfo_descriptor_ = file->message_type(69);
  static const int MessageInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, textinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, picinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, voiceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, createroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, groupnoticeinfo_),
  };
  MessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MessageInfo_descriptor_,
      MessageInfo::default_instance_,
      MessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageInfo));
  TextMessageInfo_descriptor_ = file->message_type(70);
  static const int TextMessageInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessageInfo, text_),
  };
  TextMessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TextMessageInfo_descriptor_,
      TextMessageInfo::default_instance_,
      TextMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TextMessageInfo));
  PicMessageInfo_descriptor_ = file->message_type(71);
  static const int PicMessageInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicMessageInfo, picname_),
  };
  PicMessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PicMessageInfo_descriptor_,
      PicMessageInfo::default_instance_,
      PicMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicMessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PicMessageInfo));
  VoiceMessageInfo_descriptor_ = file->message_type(72);
  static const int VoiceMessageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessageInfo, voicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessageInfo, voicetime_),
  };
  VoiceMessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      VoiceMessageInfo_descriptor_,
      VoiceMessageInfo::default_instance_,
      VoiceMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceMessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(VoiceMessageInfo));
  CreateRoomMessageInfo_descriptor_ = file->message_type(73);
  static const int CreateRoomMessageInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, creater_),
  };
  CreateRoomMessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CreateRoomMessageInfo_descriptor_,
      CreateRoomMessageInfo::default_instance_,
      CreateRoomMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomMessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomMessageInfo));
  GroupNoticeMessageInfo_descriptor_ = file->message_type(74);
  static const int GroupNoticeMessageInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, inviteintogroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, intogroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, groupusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, outgroup_),
  };
  GroupNoticeMessageInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupNoticeMessageInfo_descriptor_,
      GroupNoticeMessageInfo::default_instance_,
      GroupNoticeMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupNoticeMessageInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupNoticeMessageInfo));
  InviteIntoGroup_descriptor_ = file->message_type(75);
  static const int InviteIntoGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteIntoGroup, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteIntoGroup, invitee_),
  };
  InviteIntoGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      InviteIntoGroup_descriptor_,
      InviteIntoGroup::default_instance_,
      InviteIntoGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteIntoGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteIntoGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteIntoGroup));
  OutGroup_descriptor_ = file->message_type(76);
  static const int OutGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutGroup, outer_),
  };
  OutGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OutGroup_descriptor_,
      OutGroup::default_instance_,
      OutGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OutGroup));
  IntoGroup_descriptor_ = file->message_type(77);
  static const int IntoGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntoGroup, intogroupuser_),
  };
  IntoGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      IntoGroup_descriptor_,
      IntoGroup::default_instance_,
      IntoGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntoGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntoGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(IntoGroup));
  GroupInfo_descriptor_ = file->message_type(78);
  static const int GroupInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupcomment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, grouppic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, rankvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, allowcreateroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, allowchat_),
  };
  GroupInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInfo));
  Processor_140_CreateGroup_descriptor_ = file->message_type(79);
  static const int Processor_140_CreateGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup, groupinfo_),
  };
  Processor_140_CreateGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_140_CreateGroup_descriptor_,
      Processor_140_CreateGroup::default_instance_,
      Processor_140_CreateGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_140_CreateGroup));
  Processor_140_CreateGroup_Down_descriptor_ = file->message_type(80);
  static const int Processor_140_CreateGroup_Down_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup_Down, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup_Down, groupinfo_),
  };
  Processor_140_CreateGroup_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_140_CreateGroup_Down_descriptor_,
      Processor_140_CreateGroup_Down::default_instance_,
      Processor_140_CreateGroup_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_140_CreateGroup_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_140_CreateGroup_Down));
  Processor_141_EditGroup_descriptor_ = file->message_type(81);
  static const int Processor_141_EditGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_141_EditGroup, groupinfo_),
  };
  Processor_141_EditGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_141_EditGroup_descriptor_,
      Processor_141_EditGroup::default_instance_,
      Processor_141_EditGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_141_EditGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_141_EditGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_141_EditGroup));
  Processor_142_SearchGroup_UP_descriptor_ = file->message_type(82);
  static const int Processor_142_SearchGroup_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_UP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_UP, searchname_),
  };
  Processor_142_SearchGroup_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_142_SearchGroup_UP_descriptor_,
      Processor_142_SearchGroup_UP::default_instance_,
      Processor_142_SearchGroup_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_142_SearchGroup_UP));
  Processor_142_SearchGroup_DOWN_descriptor_ = file->message_type(83);
  static const int Processor_142_SearchGroup_DOWN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_DOWN, groupinfo_),
  };
  Processor_142_SearchGroup_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_142_SearchGroup_DOWN_descriptor_,
      Processor_142_SearchGroup_DOWN::default_instance_,
      Processor_142_SearchGroup_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_142_SearchGroup_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_142_SearchGroup_DOWN));
  Processor_144_KickUserFromGroup_descriptor_ = file->message_type(84);
  static const int Processor_144_KickUserFromGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_144_KickUserFromGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_144_KickUserFromGroup, userid_),
  };
  Processor_144_KickUserFromGroup_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_144_KickUserFromGroup_descriptor_,
      Processor_144_KickUserFromGroup::default_instance_,
      Processor_144_KickUserFromGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_144_KickUserFromGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_144_KickUserFromGroup, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_144_KickUserFromGroup));
  Processor_145_GetGroupInfo_UP_descriptor_ = file->message_type(85);
  static const int Processor_145_GetGroupInfo_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_UP, groupid_),
  };
  Processor_145_GetGroupInfo_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_145_GetGroupInfo_UP_descriptor_,
      Processor_145_GetGroupInfo_UP::default_instance_,
      Processor_145_GetGroupInfo_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_145_GetGroupInfo_UP));
  Processor_145_GetGroupInfo_DOWN_descriptor_ = file->message_type(86);
  static const int Processor_145_GetGroupInfo_DOWN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_DOWN, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_DOWN, groupusernum_),
  };
  Processor_145_GetGroupInfo_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_145_GetGroupInfo_DOWN_descriptor_,
      Processor_145_GetGroupInfo_DOWN::default_instance_,
      Processor_145_GetGroupInfo_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_145_GetGroupInfo_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_145_GetGroupInfo_DOWN));
  Processor_146_GetGroupDetailInfo_UP_descriptor_ = file->message_type(87);
  static const int Processor_146_GetGroupDetailInfo_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_UP, groupid_),
  };
  Processor_146_GetGroupDetailInfo_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_146_GetGroupDetailInfo_UP_descriptor_,
      Processor_146_GetGroupDetailInfo_UP::default_instance_,
      Processor_146_GetGroupDetailInfo_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_146_GetGroupDetailInfo_UP));
  GroupUserInfo_descriptor_ = file->message_type(88);
  static const int GroupUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, userstatus_),
  };
  GroupUserInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupUserInfo_descriptor_,
      GroupUserInfo::default_instance_,
      GroupUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUserInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUserInfo));
  GroupManageSetting_descriptor_ = file->message_type(89);
  static const int GroupManageSetting_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, isclub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, creditrefillaftergame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, canchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, canseeothermember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, rakepercent_),
  };
  GroupManageSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GroupManageSetting_descriptor_,
      GroupManageSetting::default_instance_,
      GroupManageSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManageSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupManageSetting));
  Processor_146_GetGroupDetailInfo_DOWN_descriptor_ = file->message_type(90);
  static const int Processor_146_GetGroupDetailInfo_DOWN_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, groupuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, managesetting_),
  };
  Processor_146_GetGroupDetailInfo_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_146_GetGroupDetailInfo_DOWN_descriptor_,
      Processor_146_GetGroupDetailInfo_DOWN::default_instance_,
      Processor_146_GetGroupDetailInfo_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_146_GetGroupDetailInfo_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_146_GetGroupDetailInfo_DOWN));
  Processor_147_SetGroupManageSetting_descriptor_ = file->message_type(91);
  static const int Processor_147_SetGroupManageSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_147_SetGroupManageSetting, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_147_SetGroupManageSetting, setting_),
  };
  Processor_147_SetGroupManageSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_147_SetGroupManageSetting_descriptor_,
      Processor_147_SetGroupManageSetting::default_instance_,
      Processor_147_SetGroupManageSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_147_SetGroupManageSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_147_SetGroupManageSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_147_SetGroupManageSetting));
  Processor_148_SetGroupAdmin_descriptor_ = file->message_type(92);
  static const int Processor_148_SetGroupAdmin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_148_SetGroupAdmin, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_148_SetGroupAdmin, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_148_SetGroupAdmin, isadmin_),
  };
  Processor_148_SetGroupAdmin_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_148_SetGroupAdmin_descriptor_,
      Processor_148_SetGroupAdmin::default_instance_,
      Processor_148_SetGroupAdmin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_148_SetGroupAdmin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_148_SetGroupAdmin, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_148_SetGroupAdmin));
  RoomTypeInfo_descriptor_ = file->message_type(93);
  static const int RoomTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypeInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypeInfo, roomtypename_),
  };
  RoomTypeInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RoomTypeInfo_descriptor_,
      RoomTypeInfo::default_instance_,
      RoomTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomTypeInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomTypeInfo));
  RoomInfo_descriptor_ = file->message_type(94);
  static const int RoomInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, istournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, createrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomport_),
  };
  RoomInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  Processor_150_GetRoomInfo_UP_descriptor_ = file->message_type(95);
  static const int Processor_150_GetRoomInfo_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_UP, groupid_),
  };
  Processor_150_GetRoomInfo_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_150_GetRoomInfo_UP_descriptor_,
      Processor_150_GetRoomInfo_UP::default_instance_,
      Processor_150_GetRoomInfo_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_150_GetRoomInfo_UP));
  Processor_150_GetRoomInfo_DOWN_descriptor_ = file->message_type(96);
  static const int Processor_150_GetRoomInfo_DOWN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_DOWN, roomserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_DOWN, roominfo_),
  };
  Processor_150_GetRoomInfo_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_150_GetRoomInfo_DOWN_descriptor_,
      Processor_150_GetRoomInfo_DOWN::default_instance_,
      Processor_150_GetRoomInfo_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_150_GetRoomInfo_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_150_GetRoomInfo_DOWN));
  CreateRoomInfo_descriptor_ = file->message_type(97);
  static const int CreateRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfo, roomprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfo, supporttournament_),
  };
  CreateRoomInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CreateRoomInfo_descriptor_,
      CreateRoomInfo::default_instance_,
      CreateRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomInfo));
  BlindLevel_descriptor_ = file->message_type(98);
  static const int BlindLevel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, smallblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, bigblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, ante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, resttime_),
  };
  BlindLevel_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      BlindLevel_descriptor_,
      BlindLevel::default_instance_,
      BlindLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlindLevel, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(BlindLevel));
  TournamentLevel_descriptor_ = file->message_type(99);
  static const int TournamentLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentLevel, level_),
  };
  TournamentLevel_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TournamentLevel_descriptor_,
      TournamentLevel::default_instance_,
      TournamentLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentLevel, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentLevel));
  PrizeLevel_descriptor_ = file->message_type(100);
  static const int PrizeLevel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, prizepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, otherprize_),
  };
  PrizeLevel_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PrizeLevel_descriptor_,
      PrizeLevel::default_instance_,
      PrizeLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeLevel, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeLevel));
  TournamentPrize_descriptor_ = file->message_type(101);
  static const int TournamentPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPrize, level_),
  };
  TournamentPrize_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TournamentPrize_descriptor_,
      TournamentPrize::default_instance_,
      TournamentPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentPrize, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentPrize));
  TournamentInfo_descriptor_ = file->message_type(102);
  static const int TournamentInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, tournamentlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, tournamentprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, minplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, playerpertable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, buyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, startbb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, maxaddonlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, prizepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, actiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, templatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, issitandgo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, blindtime_),
  };
  TournamentInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TournamentInfo_descriptor_,
      TournamentInfo::default_instance_,
      TournamentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentInfo));
  RoomProp_descriptor_ = file->message_type(103);
  static const int RoomProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProp, property_),
  };
  RoomProp_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RoomProp_descriptor_,
      RoomProp::default_instance_,
      RoomProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProp, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomProp));
  Processor_151_GetRoomInfomation_descriptor_ = file->message_type(104);
  static const int Processor_151_GetRoomInfomation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_151_GetRoomInfomation, roominfomation_),
  };
  Processor_151_GetRoomInfomation_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_151_GetRoomInfomation_descriptor_,
      Processor_151_GetRoomInfomation::default_instance_,
      Processor_151_GetRoomInfomation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_151_GetRoomInfomation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_151_GetRoomInfomation, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_151_GetRoomInfomation));
  Processor_152_CreateRoom_descriptor_ = file->message_type(105);
  static const int Processor_152_CreateRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom, roominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom, roomprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom, tournamentinfo_),
  };
  Processor_152_CreateRoom_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_152_CreateRoom_descriptor_,
      Processor_152_CreateRoom::default_instance_,
      Processor_152_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_152_CreateRoom));
  Processor_152_CreateRoom_down_descriptor_ = file->message_type(106);
  static const int Processor_152_CreateRoom_down_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom_down, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom_down, response_),
  };
  Processor_152_CreateRoom_down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_152_CreateRoom_down_descriptor_,
      Processor_152_CreateRoom_down::default_instance_,
      Processor_152_CreateRoom_down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom_down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_152_CreateRoom_down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_152_CreateRoom_down));
  Processor_154_CancelTournament_descriptor_ = file->message_type(107);
  static const int Processor_154_CancelTournament_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_154_CancelTournament, roomid_),
  };
  Processor_154_CancelTournament_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_154_CancelTournament_descriptor_,
      Processor_154_CancelTournament::default_instance_,
      Processor_154_CancelTournament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_154_CancelTournament, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_154_CancelTournament, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_154_CancelTournament));
  Processor_160_SendChatMessage_descriptor_ = file->message_type(108);
  static const int Processor_160_SendChatMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage, chatmessage_),
  };
  Processor_160_SendChatMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_160_SendChatMessage_descriptor_,
      Processor_160_SendChatMessage::default_instance_,
      Processor_160_SendChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_160_SendChatMessage));
  Processor_160_SendChatMessage_Down_descriptor_ = file->message_type(109);
  static const int Processor_160_SendChatMessage_Down_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage_Down, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage_Down, submittime_),
  };
  Processor_160_SendChatMessage_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_160_SendChatMessage_Down_descriptor_,
      Processor_160_SendChatMessage_Down::default_instance_,
      Processor_160_SendChatMessage_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_160_SendChatMessage_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_160_SendChatMessage_Down));
  Processor_161_ReceiveChatMessage_descriptor_ = file->message_type(110);
  static const int Processor_161_ReceiveChatMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage, chatmessage_),
  };
  Processor_161_ReceiveChatMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_161_ReceiveChatMessage_descriptor_,
      Processor_161_ReceiveChatMessage::default_instance_,
      Processor_161_ReceiveChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_161_ReceiveChatMessage));
  Processor_161_ReceiveChatMessage_UP_descriptor_ = file->message_type(111);
  static const int Processor_161_ReceiveChatMessage_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage_UP, lastmsgid_),
  };
  Processor_161_ReceiveChatMessage_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_161_ReceiveChatMessage_UP_descriptor_,
      Processor_161_ReceiveChatMessage_UP::default_instance_,
      Processor_161_ReceiveChatMessage_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_161_ReceiveChatMessage_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_161_ReceiveChatMessage_UP));
  Processor_170_GetHistoryScore_Up_descriptor_ = file->message_type(112);
  static const int Processor_170_GetHistoryScore_Up_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, istournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, groupid_),
  };
  Processor_170_GetHistoryScore_Up_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_170_GetHistoryScore_Up_descriptor_,
      Processor_170_GetHistoryScore_Up::default_instance_,
      Processor_170_GetHistoryScore_Up_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Up, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_170_GetHistoryScore_Up));
  HistoryScore_descriptor_ = file->message_type(113);
  static const int HistoryScore_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, playhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, label_),
  };
  HistoryScore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      HistoryScore_descriptor_,
      HistoryScore::default_instance_,
      HistoryScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryScore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryScore));
  Processor_170_GetHistoryScore_Down_descriptor_ = file->message_type(114);
  static const int Processor_170_GetHistoryScore_Down_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Down, score_),
  };
  Processor_170_GetHistoryScore_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_170_GetHistoryScore_Down_descriptor_,
      Processor_170_GetHistoryScore_Down::default_instance_,
      Processor_170_GetHistoryScore_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_170_GetHistoryScore_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_170_GetHistoryScore_Down));
  Processor_171_GetGroupUserRank_UP_descriptor_ = file->message_type(115);
  static const int Processor_171_GetGroupUserRank_UP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_UP, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_UP, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_UP, istournament_),
  };
  Processor_171_GetGroupUserRank_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_171_GetGroupUserRank_UP_descriptor_,
      Processor_171_GetGroupUserRank_UP::default_instance_,
      Processor_171_GetGroupUserRank_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_171_GetGroupUserRank_UP));
  Processor_171_GetGroupUserRank_DOWN_descriptor_ = file->message_type(116);
  static const int Processor_171_GetGroupUserRank_DOWN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, istournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, playerscores_),
  };
  Processor_171_GetGroupUserRank_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_171_GetGroupUserRank_DOWN_descriptor_,
      Processor_171_GetGroupUserRank_DOWN::default_instance_,
      Processor_171_GetGroupUserRank_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_171_GetGroupUserRank_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_171_GetGroupUserRank_DOWN));
  Processor_181_JoinTournament_descriptor_ = file->message_type(117);
  static const int Processor_181_JoinTournament_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_181_JoinTournament, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_181_JoinTournament, isjoin_),
  };
  Processor_181_JoinTournament_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_181_JoinTournament_descriptor_,
      Processor_181_JoinTournament::default_instance_,
      Processor_181_JoinTournament_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_181_JoinTournament, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_181_JoinTournament, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_181_JoinTournament));
  Processor_182_TournamentStart_descriptor_ = file->message_type(118);
  static const int Processor_182_TournamentStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_182_TournamentStart, roomid_),
  };
  Processor_182_TournamentStart_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_182_TournamentStart_descriptor_,
      Processor_182_TournamentStart::default_instance_,
      Processor_182_TournamentStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_182_TournamentStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_182_TournamentStart, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_182_TournamentStart));
  Processor_190_ReceiveMessage_descriptor_ = file->message_type(119);
  static const int Processor_190_ReceiveMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage, id_),
  };
  Processor_190_ReceiveMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_190_ReceiveMessage_descriptor_,
      Processor_190_ReceiveMessage::default_instance_,
      Processor_190_ReceiveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_190_ReceiveMessage));
  Processor_190_ReceiveMessage_UP_descriptor_ = file->message_type(120);
  static const int Processor_190_ReceiveMessage_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage_UP, choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage_UP, id_),
  };
  Processor_190_ReceiveMessage_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_190_ReceiveMessage_UP_descriptor_,
      Processor_190_ReceiveMessage_UP::default_instance_,
      Processor_190_ReceiveMessage_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_190_ReceiveMessage_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_190_ReceiveMessage_UP));
  Processor_191_NotifyChange_descriptor_ = file->message_type(121);
  static const int Processor_191_NotifyChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_191_NotifyChange, roomchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_191_NotifyChange, friendchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_191_NotifyChange, groupchange_),
  };
  Processor_191_NotifyChange_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_191_NotifyChange_descriptor_,
      Processor_191_NotifyChange::default_instance_,
      Processor_191_NotifyChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_191_NotifyChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_191_NotifyChange, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_191_NotifyChange));
  Moment_descriptor_ = file->message_type(122);
  static const int Moment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, momentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, momentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, displaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, commentinfos_),
  };
  Moment_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Moment_descriptor_,
      Moment::default_instance_,
      Moment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moment, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Moment));
  CommentInfos_descriptor_ = file->message_type(123);
  static const int CommentInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfos, commentinfo_),
  };
  CommentInfos_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CommentInfos_descriptor_,
      CommentInfos::default_instance_,
      CommentInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfos, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentInfos));
  MomentInfo_descriptor_ = file->message_type(124);
  static const int MomentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentInfo, momenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentInfo, normalmomentinfo_),
  };
  MomentInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MomentInfo_descriptor_,
      MomentInfo::default_instance_,
      MomentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MomentInfo));
  NormalMomentInfo_descriptor_ = file->message_type(125);
  static const int NormalMomentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalMomentInfo, wordcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalMomentInfo, picname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalMomentInfo, handid_),
  };
  NormalMomentInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      NormalMomentInfo_descriptor_,
      NormalMomentInfo::default_instance_,
      NormalMomentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalMomentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalMomentInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalMomentInfo));
  Processor_200_PublishMoment_descriptor_ = file->message_type(126);
  static const int Processor_200_PublishMoment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_200_PublishMoment, moment_),
  };
  Processor_200_PublishMoment_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_200_PublishMoment_descriptor_,
      Processor_200_PublishMoment::default_instance_,
      Processor_200_PublishMoment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_200_PublishMoment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_200_PublishMoment, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_200_PublishMoment));
  Processor_201_GetMoment_UP_descriptor_ = file->message_type(127);
  static const int Processor_201_GetMoment_UP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_UP, momentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_UP, isdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_UP, type_),
  };
  Processor_201_GetMoment_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_201_GetMoment_UP_descriptor_,
      Processor_201_GetMoment_UP::default_instance_,
      Processor_201_GetMoment_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_201_GetMoment_UP));
  Processor_201_GetMoment_DOWN_descriptor_ = file->message_type(128);
  static const int Processor_201_GetMoment_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_DOWN, moment_),
  };
  Processor_201_GetMoment_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_201_GetMoment_DOWN_descriptor_,
      Processor_201_GetMoment_DOWN::default_instance_,
      Processor_201_GetMoment_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_201_GetMoment_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_201_GetMoment_DOWN));
  Processor_202_DeleteMoment_descriptor_ = file->message_type(129);
  static const int Processor_202_DeleteMoment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_202_DeleteMoment, momentid_),
  };
  Processor_202_DeleteMoment_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_202_DeleteMoment_descriptor_,
      Processor_202_DeleteMoment::default_instance_,
      Processor_202_DeleteMoment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_202_DeleteMoment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_202_DeleteMoment, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_202_DeleteMoment));
  CommentInfo_descriptor_ = file->message_type(130);
  static const int CommentInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, momentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, commentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, parentcomment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, isdelete_),
  };
  CommentInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CommentInfo_descriptor_,
      CommentInfo::default_instance_,
      CommentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentInfo));
  Processor_203_PublishComment_descriptor_ = file->message_type(131);
  static const int Processor_203_PublishComment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_203_PublishComment, commentinfo_),
  };
  Processor_203_PublishComment_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_203_PublishComment_descriptor_,
      Processor_203_PublishComment::default_instance_,
      Processor_203_PublishComment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_203_PublishComment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_203_PublishComment, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_203_PublishComment));
  Processor_204_GetComment_UP_descriptor_ = file->message_type(132);
  static const int Processor_204_GetComment_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_UP, momentid_),
  };
  Processor_204_GetComment_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_204_GetComment_UP_descriptor_,
      Processor_204_GetComment_UP::default_instance_,
      Processor_204_GetComment_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_204_GetComment_UP));
  Processor_204_GetComment_DOWN_descriptor_ = file->message_type(133);
  static const int Processor_204_GetComment_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_DOWN, commentinfo_),
  };
  Processor_204_GetComment_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_204_GetComment_DOWN_descriptor_,
      Processor_204_GetComment_DOWN::default_instance_,
      Processor_204_GetComment_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_204_GetComment_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_204_GetComment_DOWN));
  Processor_205_DeleteMoment_descriptor_ = file->message_type(134);
  static const int Processor_205_DeleteMoment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_205_DeleteMoment, momentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_205_DeleteMoment, commentid_),
  };
  Processor_205_DeleteMoment_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_205_DeleteMoment_descriptor_,
      Processor_205_DeleteMoment::default_instance_,
      Processor_205_DeleteMoment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_205_DeleteMoment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_205_DeleteMoment, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_205_DeleteMoment));
  Processor_400_LoginRoom_UP_descriptor_ = file->message_type(135);
  static const int Processor_400_LoginRoom_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_UP, key_),
  };
  Processor_400_LoginRoom_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_400_LoginRoom_UP_descriptor_,
      Processor_400_LoginRoom_UP::default_instance_,
      Processor_400_LoginRoom_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_400_LoginRoom_UP));
  Processor_400_LoginRoom_DOWN_descriptor_ = file->message_type(136);
  static const int Processor_400_LoginRoom_DOWN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_DOWN, roomid_),
  };
  Processor_400_LoginRoom_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_400_LoginRoom_DOWN_descriptor_,
      Processor_400_LoginRoom_DOWN::default_instance_,
      Processor_400_LoginRoom_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_400_LoginRoom_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_400_LoginRoom_DOWN));
  Processor_410_EnterRoom_descriptor_ = file->message_type(137);
  static const int Processor_410_EnterRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom, roomid_),
  };
  Processor_410_EnterRoom_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_410_EnterRoom_descriptor_,
      Processor_410_EnterRoom::default_instance_,
      Processor_410_EnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_410_EnterRoom));
  Processor_410_EnterRoom_DOWN_descriptor_ = file->message_type(138);
  static const int Processor_410_EnterRoom_DOWN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, tournamentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, roominfo_),
  };
  Processor_410_EnterRoom_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_410_EnterRoom_DOWN_descriptor_,
      Processor_410_EnterRoom_DOWN::default_instance_,
      Processor_410_EnterRoom_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_410_EnterRoom_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_410_EnterRoom_DOWN));
  Processor_411_SendSeatInfo_descriptor_ = file->message_type(139);
  static const int Processor_411_SendSeatInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo, sittingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo, sitnum_),
  };
  Processor_411_SendSeatInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_411_SendSeatInfo_descriptor_,
      Processor_411_SendSeatInfo::default_instance_,
      Processor_411_SendSeatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_411_SendSeatInfo));
  Processor_411_SendSeatInfo_Down_descriptor_ = file->message_type(140);
  static const int Processor_411_SendSeatInfo_Down_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo_Down, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo_Down, ishitnotenough_),
  };
  Processor_411_SendSeatInfo_Down_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_411_SendSeatInfo_Down_descriptor_,
      Processor_411_SendSeatInfo_Down::default_instance_,
      Processor_411_SendSeatInfo_Down_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo_Down, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_411_SendSeatInfo_Down, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_411_SendSeatInfo_Down));
  PlayerSitStatus_descriptor_ = file->message_type(141);
  static const int PlayerSitStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSitStatus, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSitStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSitStatus, sitnum_),
  };
  PlayerSitStatus_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PlayerSitStatus_descriptor_,
      PlayerSitStatus::default_instance_,
      PlayerSitStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSitStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSitStatus, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSitStatus));
  Processor_412_ReceiveSeatInfo_descriptor_ = file->message_type(142);
  static const int Processor_412_ReceiveSeatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_412_ReceiveSeatInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_412_ReceiveSeatInfo, playersitstatus_),
  };
  Processor_412_ReceiveSeatInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_412_ReceiveSeatInfo_descriptor_,
      Processor_412_ReceiveSeatInfo::default_instance_,
      Processor_412_ReceiveSeatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_412_ReceiveSeatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_412_ReceiveSeatInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_412_ReceiveSeatInfo));
  Processor_413_ReceiveGameStart_descriptor_ = file->message_type(143);
  static const int Processor_413_ReceiveGameStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, dealerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, handid_),
  };
  Processor_413_ReceiveGameStart_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_413_ReceiveGameStart_descriptor_,
      Processor_413_ReceiveGameStart::default_instance_,
      Processor_413_ReceiveGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_413_ReceiveGameStart, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_413_ReceiveGameStart));
  Processor_414_ReceiveGameEnd_descriptor_ = file->message_type(144);
  static const int Processor_414_ReceiveGameEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_414_ReceiveGameEnd, roomid_),
  };
  Processor_414_ReceiveGameEnd_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_414_ReceiveGameEnd_descriptor_,
      Processor_414_ReceiveGameEnd::default_instance_,
      Processor_414_ReceiveGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_414_ReceiveGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_414_ReceiveGameEnd, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_414_ReceiveGameEnd));
  Processor_415_DisableAutoAction_descriptor_ = file->message_type(145);
  static const int Processor_415_DisableAutoAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_415_DisableAutoAction, roomid_),
  };
  Processor_415_DisableAutoAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_415_DisableAutoAction_descriptor_,
      Processor_415_DisableAutoAction::default_instance_,
      Processor_415_DisableAutoAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_415_DisableAutoAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_415_DisableAutoAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_415_DisableAutoAction));
  ActionRequest_descriptor_ = file->message_type(146);
  static const int ActionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, actionplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, isusingtimebank_),
  };
  ActionRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ActionRequest_descriptor_,
      ActionRequest::default_instance_,
      ActionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRequest));
  Processor_417_ReceiveOtherPlayerAction_descriptor_ = file->message_type(147);
  static const int Processor_417_ReceiveOtherPlayerAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_417_ReceiveOtherPlayerAction, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_417_ReceiveOtherPlayerAction, actionrequest_),
  };
  Processor_417_ReceiveOtherPlayerAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_417_ReceiveOtherPlayerAction_descriptor_,
      Processor_417_ReceiveOtherPlayerAction::default_instance_,
      Processor_417_ReceiveOtherPlayerAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_417_ReceiveOtherPlayerAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_417_ReceiveOtherPlayerAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_417_ReceiveOtherPlayerAction));
  Processor_420_PokerGetScore_UP_descriptor_ = file->message_type(148);
  static const int Processor_420_PokerGetScore_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_UP, roomid_),
  };
  Processor_420_PokerGetScore_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_420_PokerGetScore_UP_descriptor_,
      Processor_420_PokerGetScore_UP::default_instance_,
      Processor_420_PokerGetScore_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_420_PokerGetScore_UP));
  PlayerScore_descriptor_ = file->message_type(149);
  static const int PlayerScore_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, totalbuyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, totalwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, otherprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, playhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, hplost_),
  };
  PlayerScore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PlayerScore_descriptor_,
      PlayerScore::default_instance_,
      PlayerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerScore));
  PlayerScores_descriptor_ = file->message_type(150);
  static const int PlayerScores_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScores, score_),
  };
  PlayerScores_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PlayerScores_descriptor_,
      PlayerScores::default_instance_,
      PlayerScores_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScores, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerScores, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerScores));
  Processor_420_PokerGetScore_DOWN_descriptor_ = file->message_type(151);
  static const int Processor_420_PokerGetScore_DOWN_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, roomnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, handcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, playerscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, istournament_),
  };
  Processor_420_PokerGetScore_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_420_PokerGetScore_DOWN_descriptor_,
      Processor_420_PokerGetScore_DOWN::default_instance_,
      Processor_420_PokerGetScore_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_420_PokerGetScore_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_420_PokerGetScore_DOWN));
  Processor_430_SendGameVoice_descriptor_ = file->message_type(152);
  static const int Processor_430_SendGameVoice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_430_SendGameVoice, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_430_SendGameVoice, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_430_SendGameVoice, time_),
  };
  Processor_430_SendGameVoice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_430_SendGameVoice_descriptor_,
      Processor_430_SendGameVoice::default_instance_,
      Processor_430_SendGameVoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_430_SendGameVoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_430_SendGameVoice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_430_SendGameVoice));
  Processor_431_ReceiveGameVoice_descriptor_ = file->message_type(153);
  static const int Processor_431_ReceiveGameVoice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, time_),
  };
  Processor_431_ReceiveGameVoice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_431_ReceiveGameVoice_descriptor_,
      Processor_431_ReceiveGameVoice::default_instance_,
      Processor_431_ReceiveGameVoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_431_ReceiveGameVoice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_431_ReceiveGameVoice));
  Processor_440_SetGameStatus_descriptor_ = file->message_type(154);
  static const int Processor_440_SetGameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_440_SetGameStatus, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_440_SetGameStatus, status_),
  };
  Processor_440_SetGameStatus_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_440_SetGameStatus_descriptor_,
      Processor_440_SetGameStatus::default_instance_,
      Processor_440_SetGameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_440_SetGameStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_440_SetGameStatus, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_440_SetGameStatus));
  Processor_441_KickPlayer_descriptor_ = file->message_type(155);
  static const int Processor_441_KickPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_441_KickPlayer, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_441_KickPlayer, kickuserid_),
  };
  Processor_441_KickPlayer_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_441_KickPlayer_descriptor_,
      Processor_441_KickPlayer::default_instance_,
      Processor_441_KickPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_441_KickPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_441_KickPlayer, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_441_KickPlayer));
  Processor_442_ReceiveGameStatus_descriptor_ = file->message_type(156);
  static const int Processor_442_ReceiveGameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_442_ReceiveGameStatus, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_442_ReceiveGameStatus, status_),
  };
  Processor_442_ReceiveGameStatus_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_442_ReceiveGameStatus_descriptor_,
      Processor_442_ReceiveGameStatus::default_instance_,
      Processor_442_ReceiveGameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_442_ReceiveGameStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_442_ReceiveGameStatus, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_442_ReceiveGameStatus));
  Processor_490_ReceiveRoomClose_descriptor_ = file->message_type(157);
  static const int Processor_490_ReceiveRoomClose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_490_ReceiveRoomClose, roomid_),
  };
  Processor_490_ReceiveRoomClose_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_490_ReceiveRoomClose_descriptor_,
      Processor_490_ReceiveRoomClose::default_instance_,
      Processor_490_ReceiveRoomClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_490_ReceiveRoomClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_490_ReceiveRoomClose, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_490_ReceiveRoomClose));
  Processor_491_ReceiveRoomMessage_descriptor_ = file->message_type(158);
  static const int Processor_491_ReceiveRoomMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_491_ReceiveRoomMessage, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_491_ReceiveRoomMessage, message_),
  };
  Processor_491_ReceiveRoomMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_491_ReceiveRoomMessage_descriptor_,
      Processor_491_ReceiveRoomMessage::default_instance_,
      Processor_491_ReceiveRoomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_491_ReceiveRoomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_491_ReceiveRoomMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_491_ReceiveRoomMessage));
  Processor_495_ReceiveRequest_descriptor_ = file->message_type(159);
  static const int Processor_495_ReceiveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_495_ReceiveRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_495_ReceiveRequest, id_),
  };
  Processor_495_ReceiveRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_495_ReceiveRequest_descriptor_,
      Processor_495_ReceiveRequest::default_instance_,
      Processor_495_ReceiveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_495_ReceiveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_495_ReceiveRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_495_ReceiveRequest));
  Processor_496_ReplyRequest_descriptor_ = file->message_type(160);
  static const int Processor_496_ReplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_496_ReplyRequest, choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_496_ReplyRequest, id_),
  };
  Processor_496_ReplyRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_496_ReplyRequest_descriptor_,
      Processor_496_ReplyRequest::default_instance_,
      Processor_496_ReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_496_ReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_496_ReplyRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_496_ReplyRequest));
  CommonRoomInfo_descriptor_ = file->message_type(161);
  static const int CommonRoomInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, maxseatnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, tablenote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, dealerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, ismanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, isplaying_),
  };
  CommonRoomInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CommonRoomInfo_descriptor_,
      CommonRoomInfo::default_instance_,
      CommonRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRoomInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRoomInfo));
  CommonPlayerInfo_descriptor_ = file->message_type(162);
  static const int CommonPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, sittingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, sitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, autoaction_),
  };
  CommonPlayerInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CommonPlayerInfo_descriptor_,
      CommonPlayerInfo::default_instance_,
      CommonPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonPlayerInfo));
  Processor_500_PokerRefreshAll_descriptor_ = file->message_type(163);
  static const int Processor_500_PokerRefreshAll_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, commonroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, minbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, maxbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, buyunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, propupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, actionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, istournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, showcard_),
  };
  Processor_500_PokerRefreshAll_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_500_PokerRefreshAll_descriptor_,
      Processor_500_PokerRefreshAll::default_instance_,
      Processor_500_PokerRefreshAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_500_PokerRefreshAll, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_500_PokerRefreshAll));
  PokerPlayerSetting_descriptor_ = file->message_type(164);
  static const int PokerPlayerSetting_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, autocall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, callorfold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, straddle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, sitoutnexthand_),
  };
  PokerPlayerSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerPlayerSetting_descriptor_,
      PokerPlayerSetting::default_instance_,
      PokerPlayerSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerPlayerSetting));
  PokerPlayerInfo_descriptor_ = file->message_type(165);
  static const int PokerPlayerInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, holecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, betchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, actionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, hihandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, lohandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, hicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, locards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, secondhihandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, secondlohandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, secondhicards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, secondlocards_),
  };
  PokerPlayerInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerPlayerInfo_descriptor_,
      PokerPlayerInfo::default_instance_,
      PokerPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerPlayerInfo));
  TableInfo_descriptor_ = file->message_type(166);
  static const int TableInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, holecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, secondholecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, bigblind_),
  };
  TableInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TableInfo_descriptor_,
      TableInfo::default_instance_,
      TableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfo));
  TableAndUserUpdate_descriptor_ = file->message_type(167);
  static const int TableAndUserUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAndUserUpdate, pokerplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAndUserUpdate, tableinfo_),
  };
  TableAndUserUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TableAndUserUpdate_descriptor_,
      TableAndUserUpdate::default_instance_,
      TableAndUserUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAndUserUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAndUserUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TableAndUserUpdate));
  PokerActionRequest_descriptor_ = file->message_type(168);
  static const int PokerActionRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, actionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, actionchoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, betmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, betmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, betpot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, needcallchips_),
  };
  PokerActionRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerActionRequest_descriptor_,
      PokerActionRequest::default_instance_,
      PokerActionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerActionRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerActionRequest));
  Processor_501_PokerRequestAction_descriptor_ = file->message_type(169);
  static const int Processor_501_PokerRequestAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_501_PokerRequestAction, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_501_PokerRequestAction, actionrequest_),
  };
  Processor_501_PokerRequestAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_501_PokerRequestAction_descriptor_,
      Processor_501_PokerRequestAction::default_instance_,
      Processor_501_PokerRequestAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_501_PokerRequestAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_501_PokerRequestAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_501_PokerRequestAction));
  Processor_502_PokerSendAction_descriptor_ = file->message_type(170);
  static const int Processor_502_PokerSendAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_502_PokerSendAction, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_502_PokerSendAction, actionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_502_PokerSendAction, amount_),
  };
  Processor_502_PokerSendAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_502_PokerSendAction_descriptor_,
      Processor_502_PokerSendAction::default_instance_,
      Processor_502_PokerSendAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_502_PokerSendAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_502_PokerSendAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_502_PokerSendAction));
  Processor_503_PokerReceivePropUpdate_descriptor_ = file->message_type(171);
  static const int Processor_503_PokerReceivePropUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_503_PokerReceivePropUpdate, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_503_PokerReceivePropUpdate, propupdate_),
  };
  Processor_503_PokerReceivePropUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_503_PokerReceivePropUpdate_descriptor_,
      Processor_503_PokerReceivePropUpdate::default_instance_,
      Processor_503_PokerReceivePropUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_503_PokerReceivePropUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_503_PokerReceivePropUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_503_PokerReceivePropUpdate));
  Processor_510_PokerAddChips_descriptor_ = file->message_type(172);
  static const int Processor_510_PokerAddChips_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_510_PokerAddChips, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_510_PokerAddChips, amount_),
  };
  Processor_510_PokerAddChips_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_510_PokerAddChips_descriptor_,
      Processor_510_PokerAddChips::default_instance_,
      Processor_510_PokerAddChips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_510_PokerAddChips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_510_PokerAddChips, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_510_PokerAddChips));
  Processor_511_PokerReceiveNeedChip_descriptor_ = file->message_type(173);
  static const int Processor_511_PokerReceiveNeedChip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_511_PokerReceiveNeedChip, roomid_),
  };
  Processor_511_PokerReceiveNeedChip_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_511_PokerReceiveNeedChip_descriptor_,
      Processor_511_PokerReceiveNeedChip::default_instance_,
      Processor_511_PokerReceiveNeedChip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_511_PokerReceiveNeedChip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_511_PokerReceiveNeedChip, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_511_PokerReceiveNeedChip));
  Processor_512_PokerRequestChoice_descriptor_ = file->message_type(174);
  static const int Processor_512_PokerRequestChoice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_512_PokerRequestChoice, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_512_PokerRequestChoice, choicetype_),
  };
  Processor_512_PokerRequestChoice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_512_PokerRequestChoice_descriptor_,
      Processor_512_PokerRequestChoice::default_instance_,
      Processor_512_PokerRequestChoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_512_PokerRequestChoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_512_PokerRequestChoice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_512_PokerRequestChoice));
  Processor_513_PokerReplyChoice_descriptor_ = file->message_type(175);
  static const int Processor_513_PokerReplyChoice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_513_PokerReplyChoice, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_513_PokerReplyChoice, choicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_513_PokerReplyChoice, result_),
  };
  Processor_513_PokerReplyChoice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_513_PokerReplyChoice_descriptor_,
      Processor_513_PokerReplyChoice::default_instance_,
      Processor_513_PokerReplyChoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_513_PokerReplyChoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_513_PokerReplyChoice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_513_PokerReplyChoice));
  Processor_514_PokerReceiveTableNote_descriptor_ = file->message_type(176);
  static const int Processor_514_PokerReceiveTableNote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_514_PokerReceiveTableNote, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_514_PokerReceiveTableNote, tablenote_),
  };
  Processor_514_PokerReceiveTableNote_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_514_PokerReceiveTableNote_descriptor_,
      Processor_514_PokerReceiveTableNote::default_instance_,
      Processor_514_PokerReceiveTableNote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_514_PokerReceiveTableNote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_514_PokerReceiveTableNote, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_514_PokerReceiveTableNote));
  Processor_515_PokerSendSetting_descriptor_ = file->message_type(177);
  static const int Processor_515_PokerSendSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_515_PokerSendSetting, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_515_PokerSendSetting, settings_),
  };
  Processor_515_PokerSendSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_515_PokerSendSetting_descriptor_,
      Processor_515_PokerSendSetting::default_instance_,
      Processor_515_PokerSendSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_515_PokerSendSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_515_PokerSendSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_515_PokerSendSetting));
  Processor_516_PokerReceiveSettingChange_descriptor_ = file->message_type(178);
  static const int Processor_516_PokerReceiveSettingChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_516_PokerReceiveSettingChange, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_516_PokerReceiveSettingChange, settings_),
  };
  Processor_516_PokerReceiveSettingChange_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_516_PokerReceiveSettingChange_descriptor_,
      Processor_516_PokerReceiveSettingChange::default_instance_,
      Processor_516_PokerReceiveSettingChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_516_PokerReceiveSettingChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_516_PokerReceiveSettingChange, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_516_PokerReceiveSettingChange));
  Processor_517_PokerSendShowCard_descriptor_ = file->message_type(179);
  static const int Processor_517_PokerSendShowCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_517_PokerSendShowCard, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_517_PokerSendShowCard, showcard_),
  };
  Processor_517_PokerSendShowCard_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_517_PokerSendShowCard_descriptor_,
      Processor_517_PokerSendShowCard::default_instance_,
      Processor_517_PokerSendShowCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_517_PokerSendShowCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_517_PokerSendShowCard, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_517_PokerSendShowCard));
  PlayerWin_descriptor_ = file->message_type(180);
  static const int PlayerWin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerWin, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerWin, playerwinchips_),
  };
  PlayerWin_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PlayerWin_descriptor_,
      PlayerWin::default_instance_,
      PlayerWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerWin, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerWin));
  PlayerHandResult_descriptor_ = file->message_type(181);
  static const int PlayerHandResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandResult, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandResult, playerwinchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandResult, playerbetchips_),
  };
  PlayerHandResult_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PlayerHandResult_descriptor_,
      PlayerHandResult::default_instance_,
      PlayerHandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHandResult, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHandResult));
  Pot_descriptor_ = file->message_type(182);
  static const int Pot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pot, potamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pot, playerwin_),
  };
  Pot_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Pot_descriptor_,
      Pot::default_instance_,
      Pot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pot, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Pot));
  HandResultInfo_descriptor_ = file->message_type(183);
  static const int HandResultInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, haslow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, pot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, playerresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, hassecondcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, secondhaslow_),
  };
  HandResultInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      HandResultInfo_descriptor_,
      HandResultInfo::default_instance_,
      HandResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandResultInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(HandResultInfo));
  Processor_520_PokerReceiveHandResult_descriptor_ = file->message_type(184);
  static const int Processor_520_PokerReceiveHandResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_520_PokerReceiveHandResult, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_520_PokerReceiveHandResult, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_520_PokerReceiveHandResult, handresultinfo_),
  };
  Processor_520_PokerReceiveHandResult_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_520_PokerReceiveHandResult_descriptor_,
      Processor_520_PokerReceiveHandResult::default_instance_,
      Processor_520_PokerReceiveHandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_520_PokerReceiveHandResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_520_PokerReceiveHandResult, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_520_PokerReceiveHandResult));
  Processor_530_PokerGetTourmentStatus_UP_descriptor_ = file->message_type(185);
  static const int Processor_530_PokerGetTourmentStatus_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_UP, roomid_),
  };
  Processor_530_PokerGetTourmentStatus_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_530_PokerGetTourmentStatus_UP_descriptor_,
      Processor_530_PokerGetTourmentStatus_UP::default_instance_,
      Processor_530_PokerGetTourmentStatus_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_530_PokerGetTourmentStatus_UP));
  Processor_530_PokerGetTourmentStatus_DOWN_descriptor_ = file->message_type(186);
  static const int Processor_530_PokerGetTourmentStatus_DOWN_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, tournamentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, currentlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, totalplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, totalchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, tableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, prizepool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, loseplayers_),
  };
  Processor_530_PokerGetTourmentStatus_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_530_PokerGetTourmentStatus_DOWN_descriptor_,
      Processor_530_PokerGetTourmentStatus_DOWN::default_instance_,
      Processor_530_PokerGetTourmentStatus_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_530_PokerGetTourmentStatus_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_530_PokerGetTourmentStatus_DOWN));
  TourmentTableInfo_descriptor_ = file->message_type(187);
  static const int TourmentTableInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TourmentTableInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TourmentTableInfo, player_),
  };
  TourmentTableInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TourmentTableInfo_descriptor_,
      TourmentTableInfo::default_instance_,
      TourmentTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TourmentTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TourmentTableInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TourmentTableInfo));
  Processor_531_PokerTourmentChangeTable_descriptor_ = file->message_type(188);
  static const int Processor_531_PokerTourmentChangeTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_531_PokerTourmentChangeTable, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_531_PokerTourmentChangeTable, roomid_),
  };
  Processor_531_PokerTourmentChangeTable_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_531_PokerTourmentChangeTable_descriptor_,
      Processor_531_PokerTourmentChangeTable::default_instance_,
      Processor_531_PokerTourmentChangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_531_PokerTourmentChangeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_531_PokerTourmentChangeTable, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_531_PokerTourmentChangeTable));
  Processor_532_PokerTournamentRequestAddon_descriptor_ = file->message_type(189);
  static const int Processor_532_PokerTournamentRequestAddon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_532_PokerTournamentRequestAddon, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_532_PokerTournamentRequestAddon, buyin_),
  };
  Processor_532_PokerTournamentRequestAddon_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_532_PokerTournamentRequestAddon_descriptor_,
      Processor_532_PokerTournamentRequestAddon::default_instance_,
      Processor_532_PokerTournamentRequestAddon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_532_PokerTournamentRequestAddon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_532_PokerTournamentRequestAddon, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_532_PokerTournamentRequestAddon));
  Processor_533_PokerTournamentAddon_descriptor_ = file->message_type(190);
  static const int Processor_533_PokerTournamentAddon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_533_PokerTournamentAddon, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_533_PokerTournamentAddon, addon_),
  };
  Processor_533_PokerTournamentAddon_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_533_PokerTournamentAddon_descriptor_,
      Processor_533_PokerTournamentAddon::default_instance_,
      Processor_533_PokerTournamentAddon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_533_PokerTournamentAddon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_533_PokerTournamentAddon, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_533_PokerTournamentAddon));
  OFCPlayerInfo_descriptor_ = file->message_type(191);
  static const int OFCPlayerInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, playerscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, holecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, firstrowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, middlerowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, lastrowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, firstrowscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, middlerowscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, lastrowscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, fantasycards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, actionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, actionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, firstcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, middlecardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, lastcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, refantasy_),
  };
  OFCPlayerInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPlayerInfo_descriptor_,
      OFCPlayerInfo::default_instance_,
      OFCPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPlayerInfo));
  OFCPlayerSetting_descriptor_ = file->message_type(192);
  static const int OFCPlayerSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerSetting, sitoutnexthand_),
  };
  OFCPlayerSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPlayerSetting_descriptor_,
      OFCPlayerSetting::default_instance_,
      OFCPlayerSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPlayerSetting));
  OFCPropUpdate_descriptor_ = file->message_type(193);
  static const int OFCPropUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPropUpdate, playerinfo_),
  };
  OFCPropUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPropUpdate_descriptor_,
      OFCPropUpdate::default_instance_,
      OFCPropUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPropUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPropUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPropUpdate));
  OFCResult_descriptor_ = file->message_type(194);
  static const int OFCResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCResult, ofcplayerhandresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCResult, usercompare_),
  };
  OFCResult_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCResult_descriptor_,
      OFCResult::default_instance_,
      OFCResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCResult, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCResult));
  Processor_600_OFCRefreshAll_descriptor_ = file->message_type(195);
  static const int Processor_600_OFCRefreshAll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_600_OFCRefreshAll, commonroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_600_OFCRefreshAll, propupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_600_OFCRefreshAll, settings_),
  };
  Processor_600_OFCRefreshAll_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_600_OFCRefreshAll_descriptor_,
      Processor_600_OFCRefreshAll::default_instance_,
      Processor_600_OFCRefreshAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_600_OFCRefreshAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_600_OFCRefreshAll, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_600_OFCRefreshAll));
  Processor_601_OFCReceivePropUpdate_descriptor_ = file->message_type(196);
  static const int Processor_601_OFCReceivePropUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_601_OFCReceivePropUpdate, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_601_OFCReceivePropUpdate, update_),
  };
  Processor_601_OFCReceivePropUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_601_OFCReceivePropUpdate_descriptor_,
      Processor_601_OFCReceivePropUpdate::default_instance_,
      Processor_601_OFCReceivePropUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_601_OFCReceivePropUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_601_OFCReceivePropUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_601_OFCReceivePropUpdate));
  OFCPlayerCard_descriptor_ = file->message_type(197);
  static const int OFCPlayerCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerCard, cardlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerCard, card_),
  };
  OFCPlayerCard_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPlayerCard_descriptor_,
      OFCPlayerCard::default_instance_,
      OFCPlayerCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerCard, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPlayerCard));
  Processor_602_OFCSendPlayerCard_descriptor_ = file->message_type(198);
  static const int Processor_602_OFCSendPlayerCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_602_OFCSendPlayerCard, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_602_OFCSendPlayerCard, cardlocation_),
  };
  Processor_602_OFCSendPlayerCard_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_602_OFCSendPlayerCard_descriptor_,
      Processor_602_OFCSendPlayerCard::default_instance_,
      Processor_602_OFCSendPlayerCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_602_OFCSendPlayerCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_602_OFCSendPlayerCard, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_602_OFCSendPlayerCard));
  UserCompare_descriptor_ = file->message_type(199);
  static const int UserCompare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, firstrowcomparscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, middlerowcomparescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, lastrowcomparescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, comparescore_),
  };
  UserCompare_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserCompare_descriptor_,
      UserCompare::default_instance_,
      UserCompare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCompare, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCompare));
  OFCPlayerHandResult_descriptor_ = file->message_type(200);
  static const int OFCPlayerHandResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerHandResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerHandResult, score_),
  };
  OFCPlayerHandResult_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPlayerHandResult_descriptor_,
      OFCPlayerHandResult::default_instance_,
      OFCPlayerHandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerHandResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerHandResult, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPlayerHandResult));
  Processor_610_OFCReceiveResult_descriptor_ = file->message_type(201);
  static const int Processor_610_OFCReceiveResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_610_OFCReceiveResult, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_610_OFCReceiveResult, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_610_OFCReceiveResult, result_),
  };
  Processor_610_OFCReceiveResult_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_610_OFCReceiveResult_descriptor_,
      Processor_610_OFCReceiveResult::default_instance_,
      Processor_610_OFCReceiveResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_610_OFCReceiveResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_610_OFCReceiveResult, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_610_OFCReceiveResult));
  Processor_615_OFCSendSetting_descriptor_ = file->message_type(202);
  static const int Processor_615_OFCSendSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_615_OFCSendSetting, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_615_OFCSendSetting, settings_),
  };
  Processor_615_OFCSendSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_615_OFCSendSetting_descriptor_,
      Processor_615_OFCSendSetting::default_instance_,
      Processor_615_OFCSendSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_615_OFCSendSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_615_OFCSendSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_615_OFCSendSetting));
  Processor_616_OFCReceiveSettingChange_descriptor_ = file->message_type(203);
  static const int Processor_616_OFCReceiveSettingChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_616_OFCReceiveSettingChange, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_616_OFCReceiveSettingChange, settings_),
  };
  Processor_616_OFCReceiveSettingChange_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_616_OFCReceiveSettingChange_descriptor_,
      Processor_616_OFCReceiveSettingChange::default_instance_,
      Processor_616_OFCReceiveSettingChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_616_OFCReceiveSettingChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_616_OFCReceiveSettingChange, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_616_OFCReceiveSettingChange));
  MahjongPlayerInfo_descriptor_ = file->message_type(204);
  static const int MahjongPlayerInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, playerscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, actionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, scorechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, drawcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, canwinbyother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, ting_),
  };
  MahjongPlayerInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongPlayerInfo_descriptor_,
      MahjongPlayerInfo::default_instance_,
      MahjongPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongPlayerInfo));
  MahjongFu_descriptor_ = file->message_type(205);
  static const int MahjongFu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, getcard_),
  };
  MahjongFu_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongFu_descriptor_,
      MahjongFu::default_instance_,
      MahjongFu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongFu, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongFu));
  MahjongScoreChange_descriptor_ = file->message_type(206);
  static const int MahjongScoreChange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, multiwin_),
  };
  MahjongScoreChange_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongScoreChange_descriptor_,
      MahjongScoreChange::default_instance_,
      MahjongScoreChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongScoreChange, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongScoreChange));
  MahjongPlayerSetting_descriptor_ = file->message_type(207);
  static const int MahjongPlayerSetting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerSetting, leavenexthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerSetting, autohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerSetting, discardall_),
  };
  MahjongPlayerSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongPlayerSetting_descriptor_,
      MahjongPlayerSetting::default_instance_,
      MahjongPlayerSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPlayerSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongPlayerSetting));
  MahjongPropUpdate_descriptor_ = file->message_type(208);
  static const int MahjongPropUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, lastcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, startposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, currentdiscard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, currentdiscarduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, currentdiscardzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, eastseatno_),
  };
  MahjongPropUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongPropUpdate_descriptor_,
      MahjongPropUpdate::default_instance_,
      MahjongPropUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPropUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongPropUpdate));
  MahjongTing_descriptor_ = file->message_type(209);
  static const int MahjongTing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTing, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTing, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTing, score_),
  };
  MahjongTing_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongTing_descriptor_,
      MahjongTing::default_instance_,
      MahjongTing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTing, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongTing));
  MahjongPossibleTing_descriptor_ = file->message_type(210);
  static const int MahjongPossibleTing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPossibleTing, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPossibleTing, ting_),
  };
  MahjongPossibleTing_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongPossibleTing_descriptor_,
      MahjongPossibleTing::default_instance_,
      MahjongPossibleTing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPossibleTing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongPossibleTing, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongPossibleTing));
  MahjongActionRequest_descriptor_ = file->message_type(211);
  static const int MahjongActionRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, actionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, canhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, cangang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, canpeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, canchi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, possibleting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, wintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, winscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, defaultswitchcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, defaultblanksuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, gangcard_),
  };
  MahjongActionRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongActionRequest_descriptor_,
      MahjongActionRequest::default_instance_,
      MahjongActionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongActionRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongActionRequest));
  Processor_700_MahjongRefreshAll_descriptor_ = file->message_type(212);
  static const int Processor_700_MahjongRefreshAll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_700_MahjongRefreshAll, commonroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_700_MahjongRefreshAll, propupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_700_MahjongRefreshAll, settings_),
  };
  Processor_700_MahjongRefreshAll_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_700_MahjongRefreshAll_descriptor_,
      Processor_700_MahjongRefreshAll::default_instance_,
      Processor_700_MahjongRefreshAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_700_MahjongRefreshAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_700_MahjongRefreshAll, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_700_MahjongRefreshAll));
  Processor_701_MahjongReceivePropUpdate_descriptor_ = file->message_type(213);
  static const int Processor_701_MahjongReceivePropUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_701_MahjongReceivePropUpdate, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_701_MahjongReceivePropUpdate, update_),
  };
  Processor_701_MahjongReceivePropUpdate_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_701_MahjongReceivePropUpdate_descriptor_,
      Processor_701_MahjongReceivePropUpdate::default_instance_,
      Processor_701_MahjongReceivePropUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_701_MahjongReceivePropUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_701_MahjongReceivePropUpdate, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_701_MahjongReceivePropUpdate));
  Processor_702_MahjongSendPlayerChoice_descriptor_ = file->message_type(214);
  static const int Processor_702_MahjongSendPlayerChoice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, switchcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, gangcard_),
  };
  Processor_702_MahjongSendPlayerChoice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_702_MahjongSendPlayerChoice_descriptor_,
      Processor_702_MahjongSendPlayerChoice::default_instance_,
      Processor_702_MahjongSendPlayerChoice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_702_MahjongSendPlayerChoice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_702_MahjongSendPlayerChoice));
  MahjongAction_descriptor_ = file->message_type(215);
  static const int MahjongAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongAction, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongAction, choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongAction, scorechange_),
  };
  MahjongAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongAction_descriptor_,
      MahjongAction::default_instance_,
      MahjongAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongAction));
  MahjongTestAllWinCardAndType_descriptor_ = file->message_type(216);
  static const int MahjongTestAllWinCardAndType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTestAllWinCardAndType, quemen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTestAllWinCardAndType, cardandtype_),
  };
  MahjongTestAllWinCardAndType_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongTestAllWinCardAndType_descriptor_,
      MahjongTestAllWinCardAndType::default_instance_,
      MahjongTestAllWinCardAndType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTestAllWinCardAndType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongTestAllWinCardAndType, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongTestAllWinCardAndType));
  MahjongWinCardAndType_descriptor_ = file->message_type(217);
  static const int MahjongWinCardAndType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, wintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, handcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, fupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, zimopai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, dianpaopai_),
  };
  MahjongWinCardAndType_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongWinCardAndType_descriptor_,
      MahjongWinCardAndType::default_instance_,
      MahjongWinCardAndType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongWinCardAndType, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongWinCardAndType));
  Processor_703_MahjongReceivePlayerAction_descriptor_ = file->message_type(218);
  static const int Processor_703_MahjongReceivePlayerAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_703_MahjongReceivePlayerAction, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_703_MahjongReceivePlayerAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_703_MahjongReceivePlayerAction, switchtype_),
  };
  Processor_703_MahjongReceivePlayerAction_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_703_MahjongReceivePlayerAction_descriptor_,
      Processor_703_MahjongReceivePlayerAction::default_instance_,
      Processor_703_MahjongReceivePlayerAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_703_MahjongReceivePlayerAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_703_MahjongReceivePlayerAction, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_703_MahjongReceivePlayerAction));
  Processor_715_MahjongSendSetting_descriptor_ = file->message_type(219);
  static const int Processor_715_MahjongSendSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_715_MahjongSendSetting, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_715_MahjongSendSetting, settings_),
  };
  Processor_715_MahjongSendSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_715_MahjongSendSetting_descriptor_,
      Processor_715_MahjongSendSetting::default_instance_,
      Processor_715_MahjongSendSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_715_MahjongSendSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_715_MahjongSendSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_715_MahjongSendSetting));
  Processor_716_MahjongReceiveSettingChange_descriptor_ = file->message_type(220);
  static const int Processor_716_MahjongReceiveSettingChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_716_MahjongReceiveSettingChange, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_716_MahjongReceiveSettingChange, settings_),
  };
  Processor_716_MahjongReceiveSettingChange_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_716_MahjongReceiveSettingChange_descriptor_,
      Processor_716_MahjongReceiveSettingChange::default_instance_,
      Processor_716_MahjongReceiveSettingChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_716_MahjongReceiveSettingChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_716_MahjongReceiveSettingChange, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_716_MahjongReceiveSettingChange));
  Processor_300_PokerGetHandHistory_UP_descriptor_ = file->message_type(221);
  static const int Processor_300_PokerGetHandHistory_UP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_UP, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_UP, ispoker_),
  };
  Processor_300_PokerGetHandHistory_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_300_PokerGetHandHistory_UP_descriptor_,
      Processor_300_PokerGetHandHistory_UP::default_instance_,
      Processor_300_PokerGetHandHistory_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_300_PokerGetHandHistory_UP));
  PokerStep_descriptor_ = file->message_type(222);
  static const int PokerStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, playeraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, communitychange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, blinds_),
  };
  PokerStep_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerStep_descriptor_,
      PokerStep::default_instance_,
      PokerStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerStep, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerStep));
  PokerBlinds_descriptor_ = file->message_type(223);
  static const int PokerBlinds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlinds, blind_),
  };
  PokerBlinds_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerBlinds_descriptor_,
      PokerBlinds::default_instance_,
      PokerBlinds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlinds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlinds, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerBlinds));
  PokerBlind_descriptor_ = file->message_type(224);
  static const int PokerBlind_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlind, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlind, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlind, amount_),
  };
  PokerBlind_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerBlind_descriptor_,
      PokerBlind::default_instance_,
      PokerBlind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerBlind, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerBlind));
  PokerPlayerActionInfo_descriptor_ = file->message_type(225);
  static const int PokerPlayerActionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerActionInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerActionInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerActionInfo, amount_),
  };
  PokerPlayerActionInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      PokerPlayerActionInfo_descriptor_,
      PokerPlayerActionInfo::default_instance_,
      PokerPlayerActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerPlayerActionInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerPlayerActionInfo));
  OFCStep_descriptor_ = file->message_type(226);
  static const int OFCStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCStep, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCStep, action_),
  };
  OFCStep_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCStep_descriptor_,
      OFCStep::default_instance_,
      OFCStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCStep, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCStep));
  OFCPlayerActionInfo_descriptor_ = file->message_type(227);
  static const int OFCPlayerActionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerActionInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerActionInfo, playercard_),
  };
  OFCPlayerActionInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OFCPlayerActionInfo_descriptor_,
      OFCPlayerActionInfo::default_instance_,
      OFCPlayerActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OFCPlayerActionInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OFCPlayerActionInfo));
  MahjongStep_descriptor_ = file->message_type(228);
  static const int MahjongStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, switchcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, suit_),
  };
  MahjongStep_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MahjongStep_descriptor_,
      MahjongStep::default_instance_,
      MahjongStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MahjongStep, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MahjongStep));
  ReplayStep_descriptor_ = file->message_type(229);
  static const int ReplayStep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, propupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, ofcpropupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, pokerstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, ofcstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, mahjongupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, mahjongstep_),
  };
  ReplayStep_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ReplayStep_descriptor_,
      ReplayStep::default_instance_,
      ReplayStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStep, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayStep));
  ReplaySteps_descriptor_ = file->message_type(230);
  static const int ReplaySteps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaySteps, replaystep_),
  };
  ReplaySteps_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ReplaySteps_descriptor_,
      ReplaySteps::default_instance_,
      ReplaySteps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaySteps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaySteps, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaySteps));
  ReplayPlayers_descriptor_ = file->message_type(231);
  static const int ReplayPlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayers, replayplayer_),
  };
  ReplayPlayers_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ReplayPlayers_descriptor_,
      ReplayPlayers::default_instance_,
      ReplayPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayers, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayPlayers));
  ReplayPlayer_descriptor_ = file->message_type(232);
  static const int ReplayPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayer, userdetailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayer, sitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayer, isvisible_),
  };
  ReplayPlayer_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ReplayPlayer_descriptor_,
      ReplayPlayer::default_instance_,
      ReplayPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayPlayer, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayPlayer));
  HandBaseInfo_descriptor_ = file->message_type(233);
  static const int HandBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, totalseatnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, tableremark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, handtxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, dealerpos_),
  };
  HandBaseInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      HandBaseInfo_descriptor_,
      HandBaseInfo::default_instance_,
      HandBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandBaseInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(HandBaseInfo));
  Processor_300_PokerGetHandHistory_DOWN_descriptor_ = file->message_type(234);
  static const int Processor_300_PokerGetHandHistory_DOWN_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, handtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, handresultinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, ofcresult_),
  };
  Processor_300_PokerGetHandHistory_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_300_PokerGetHandHistory_DOWN_descriptor_,
      Processor_300_PokerGetHandHistory_DOWN::default_instance_,
      Processor_300_PokerGetHandHistory_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_300_PokerGetHandHistory_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_300_PokerGetHandHistory_DOWN));
  Processor_1000_RegisterServer_OtherToCore_descriptor_ = file->message_type(235);
  static const int Processor_1000_RegisterServer_OtherToCore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, serverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, clientport_),
  };
  Processor_1000_RegisterServer_OtherToCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1000_RegisterServer_OtherToCore_descriptor_,
      Processor_1000_RegisterServer_OtherToCore::default_instance_,
      Processor_1000_RegisterServer_OtherToCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_OtherToCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1000_RegisterServer_OtherToCore));
  Processor_1000_RegisterServer_CoreToOther_descriptor_ = file->message_type(236);
  static const int Processor_1000_RegisterServer_CoreToOther_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_CoreToOther, newserverid_),
  };
  Processor_1000_RegisterServer_CoreToOther_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1000_RegisterServer_CoreToOther_descriptor_,
      Processor_1000_RegisterServer_CoreToOther::default_instance_,
      Processor_1000_RegisterServer_CoreToOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_CoreToOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1000_RegisterServer_CoreToOther, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1000_RegisterServer_CoreToOther));
  ServerInfo_descriptor_ = file->message_type(237);
  static const int ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, ipv6_),
  };
  ServerInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  ServerInfos_descriptor_ = file->message_type(238);
  static const int ServerInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfos, serverinfo_),
  };
  ServerInfos_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ServerInfos_descriptor_,
      ServerInfos::default_instance_,
      ServerInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfos, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfos));
  Processor_HTMLRegister_descriptor_ = file->message_type(239);
  static const int Processor_HTMLRegister_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, refereeuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, refereegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, refereeroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, verification_),
  };
  Processor_HTMLRegister_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_HTMLRegister_descriptor_,
      Processor_HTMLRegister::default_instance_,
      Processor_HTMLRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegister, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_HTMLRegister));
  Processor_HTMLRegisterEnterRoom_descriptor_ = file->message_type(240);
  static const int Processor_HTMLRegisterEnterRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegisterEnterRoom, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegisterEnterRoom, roomid_),
  };
  Processor_HTMLRegisterEnterRoom_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_HTMLRegisterEnterRoom_descriptor_,
      Processor_HTMLRegisterEnterRoom::default_instance_,
      Processor_HTMLRegisterEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegisterEnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_HTMLRegisterEnterRoom, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_HTMLRegisterEnterRoom));
  Processor_1003_ChangeUserInfo_ResToCore_descriptor_ = file->message_type(241);
  static const int Processor_1003_ChangeUserInfo_ResToCore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1003_ChangeUserInfo_ResToCore, userid_),
  };
  Processor_1003_ChangeUserInfo_ResToCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1003_ChangeUserInfo_ResToCore_descriptor_,
      Processor_1003_ChangeUserInfo_ResToCore::default_instance_,
      Processor_1003_ChangeUserInfo_ResToCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1003_ChangeUserInfo_ResToCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1003_ChangeUserInfo_ResToCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1003_ChangeUserInfo_ResToCore));
  Processor_1004_ChangeUserInfo_CoreToOther_descriptor_ = file->message_type(242);
  static const int Processor_1004_ChangeUserInfo_CoreToOther_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1004_ChangeUserInfo_CoreToOther, userid_),
  };
  Processor_1004_ChangeUserInfo_CoreToOther_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1004_ChangeUserInfo_CoreToOther_descriptor_,
      Processor_1004_ChangeUserInfo_CoreToOther::default_instance_,
      Processor_1004_ChangeUserInfo_CoreToOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1004_ChangeUserInfo_CoreToOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1004_ChangeUserInfo_CoreToOther, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1004_ChangeUserInfo_CoreToOther));
  Processor_1005_OnlineInfo_OtherToCore_descriptor_ = file->message_type(243);
  static const int Processor_1005_OnlineInfo_OtherToCore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1005_OnlineInfo_OtherToCore, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1005_OnlineInfo_OtherToCore, id_),
  };
  Processor_1005_OnlineInfo_OtherToCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1005_OnlineInfo_OtherToCore_descriptor_,
      Processor_1005_OnlineInfo_OtherToCore::default_instance_,
      Processor_1005_OnlineInfo_OtherToCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1005_OnlineInfo_OtherToCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1005_OnlineInfo_OtherToCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1005_OnlineInfo_OtherToCore));
  ServerRoomInfo_descriptor_ = file->message_type(244);
  static const int ServerRoomInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, note_),
  };
  ServerRoomInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ServerRoomInfo_descriptor_,
      ServerRoomInfo::default_instance_,
      ServerRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRoomInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerRoomInfo));
  Processor_1006_RoomInfo_descriptor_ = file->message_type(245);
  static const int Processor_1006_RoomInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1006_RoomInfo, roominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1006_RoomInfo, roomserverinfo_),
  };
  Processor_1006_RoomInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1006_RoomInfo_descriptor_,
      Processor_1006_RoomInfo::default_instance_,
      Processor_1006_RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1006_RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1006_RoomInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1006_RoomInfo));
  Processor_1009_CreateRoom_ResToCore_descriptor_ = file->message_type(246);
  static const int Processor_1009_CreateRoom_ResToCore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1009_CreateRoom_ResToCore, roomid_),
  };
  Processor_1009_CreateRoom_ResToCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1009_CreateRoom_ResToCore_descriptor_,
      Processor_1009_CreateRoom_ResToCore::default_instance_,
      Processor_1009_CreateRoom_ResToCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1009_CreateRoom_ResToCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1009_CreateRoom_ResToCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1009_CreateRoom_ResToCore));
  Processor_1010_CreateRoom_CoreToRoom_descriptor_ = file->message_type(247);
  static const int Processor_1010_CreateRoom_CoreToRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1010_CreateRoom_CoreToRoom, roomid_),
  };
  Processor_1010_CreateRoom_CoreToRoom_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1010_CreateRoom_CoreToRoom_descriptor_,
      Processor_1010_CreateRoom_CoreToRoom::default_instance_,
      Processor_1010_CreateRoom_CoreToRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1010_CreateRoom_CoreToRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1010_CreateRoom_CoreToRoom, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1010_CreateRoom_CoreToRoom));
  Processor_1011_ChangeServerProp_descriptor_ = file->message_type(248);
  static const int Processor_1011_ChangeServerProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1011_ChangeServerProp, prop_),
  };
  Processor_1011_ChangeServerProp_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1011_ChangeServerProp_descriptor_,
      Processor_1011_ChangeServerProp::default_instance_,
      Processor_1011_ChangeServerProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1011_ChangeServerProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1011_ChangeServerProp, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1011_ChangeServerProp));
  Parameter_descriptor_ = file->message_type(249);
  static const int Parameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, parametername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, parametervalue_),
  };
  Parameter_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  Processor_1012_WXPayMsg_descriptor_ = file->message_type(250);
  static const int Processor_1012_WXPayMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1012_WXPayMsg, parameter_),
  };
  Processor_1012_WXPayMsg_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1012_WXPayMsg_descriptor_,
      Processor_1012_WXPayMsg::default_instance_,
      Processor_1012_WXPayMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1012_WXPayMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1012_WXPayMsg, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1012_WXPayMsg));
  Processor_1100_ShutDown_ConsoleToCore_descriptor_ = file->message_type(251);
  static const int Processor_1100_ShutDown_ConsoleToCore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1100_ShutDown_ConsoleToCore, timebeforeclose_),
  };
  Processor_1100_ShutDown_ConsoleToCore_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1100_ShutDown_ConsoleToCore_descriptor_,
      Processor_1100_ShutDown_ConsoleToCore::default_instance_,
      Processor_1100_ShutDown_ConsoleToCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1100_ShutDown_ConsoleToCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1100_ShutDown_ConsoleToCore, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1100_ShutDown_ConsoleToCore));
  Processor_1101_ShutDown_CoreToOther_descriptor_ = file->message_type(252);
  static const int Processor_1101_ShutDown_CoreToOther_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1101_ShutDown_CoreToOther, timebeforeclose_),
  };
  Processor_1101_ShutDown_CoreToOther_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1101_ShutDown_CoreToOther_descriptor_,
      Processor_1101_ShutDown_CoreToOther::default_instance_,
      Processor_1101_ShutDown_CoreToOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1101_ShutDown_CoreToOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1101_ShutDown_CoreToOther, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1101_ShutDown_CoreToOther));
  Processor_1105_ServerInformation_CoreToConsole_descriptor_ = file->message_type(253);
  static const int Processor_1105_ServerInformation_CoreToConsole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1105_ServerInformation_CoreToConsole, onlinesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1105_ServerInformation_CoreToConsole, openroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1105_ServerInformation_CoreToConsole, closeroom_),
  };
  Processor_1105_ServerInformation_CoreToConsole_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1105_ServerInformation_CoreToConsole_descriptor_,
      Processor_1105_ServerInformation_CoreToConsole::default_instance_,
      Processor_1105_ServerInformation_CoreToConsole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1105_ServerInformation_CoreToConsole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1105_ServerInformation_CoreToConsole, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1105_ServerInformation_CoreToConsole));
  Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_ = file->message_type(254);
  static const int Processor_1107_SERVER_RESET_TOURMENT_CREDIT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1107_SERVER_RESET_TOURMENT_CREDIT, credit_),
  };
  Processor_1107_SERVER_RESET_TOURMENT_CREDIT_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_,
      Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance_,
      Processor_1107_SERVER_RESET_TOURMENT_CREDIT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1107_SERVER_RESET_TOURMENT_CREDIT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1107_SERVER_RESET_TOURMENT_CREDIT, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1107_SERVER_RESET_TOURMENT_CREDIT));
  Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_ = file->message_type(255);
  static const int Processor_1108_SEARCH_CREDIT_RANK_UP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_UP, ranknum_),
  };
  Processor_1108_SEARCH_CREDIT_RANK_UP_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_,
      Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance_,
      Processor_1108_SEARCH_CREDIT_RANK_UP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_UP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_UP, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1108_SEARCH_CREDIT_RANK_UP));
  Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_ = file->message_type(256);
  static const int Processor_1108_SEARCH_CREDIT_RANK_DOWN_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_DOWN, usertourcreditinfo_),
  };
  Processor_1108_SEARCH_CREDIT_RANK_DOWN_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_,
      Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance_,
      Processor_1108_SEARCH_CREDIT_RANK_DOWN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_DOWN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1108_SEARCH_CREDIT_RANK_DOWN, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1108_SEARCH_CREDIT_RANK_DOWN));
  Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_ = file->message_type(257);
  static const int Processor_1109_PUBLISH_SYS_MESSAGE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1109_PUBLISH_SYS_MESSAGE, sysmessage_),
  };
  Processor_1109_PUBLISH_SYS_MESSAGE_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_,
      Processor_1109_PUBLISH_SYS_MESSAGE::default_instance_,
      Processor_1109_PUBLISH_SYS_MESSAGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1109_PUBLISH_SYS_MESSAGE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1109_PUBLISH_SYS_MESSAGE, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1109_PUBLISH_SYS_MESSAGE));
  Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_ = file->message_type(258);
  static const int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, num_),
  };
  Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_,
      Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance_,
      Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE));
  UserTourCreditInfo_descriptor_ = file->message_type(259);
  static const int UserTourCreditInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTourCreditInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTourCreditInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTourCreditInfo, credit_),
  };
  UserTourCreditInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UserTourCreditInfo_descriptor_,
      UserTourCreditInfo::default_instance_,
      UserTourCreditInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTourCreditInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTourCreditInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTourCreditInfo));
  ChatMessages_descriptor_ = file->message_type(260);
  static const int ChatMessages_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, count_),
  };
  ChatMessages_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ChatMessages_descriptor_,
      ChatMessages::default_instance_,
      ChatMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessages, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessages));
  InvitationsForSave_descriptor_ = file->message_type(261);
  static const int InvitationsForSave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationsForSave, invitations_),
  };
  InvitationsForSave_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      InvitationsForSave_descriptor_,
      InvitationsForSave::default_instance_,
      InvitationsForSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationsForSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationsForSave, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationsForSave));
  ChatMessageForSave_descriptor_ = file->message_type(262);
  static const int ChatMessageForSave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageForSave, friendmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageForSave, groupmessage_),
  };
  ChatMessageForSave_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ChatMessageForSave_descriptor_,
      ChatMessageForSave::default_instance_,
      ChatMessageForSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageForSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessageForSave, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessageForSave));
  OldChatMessageForSave_descriptor_ = file->message_type(263);
  static const int OldChatMessageForSave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldChatMessageForSave, friendmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldChatMessageForSave, groupmessage_),
  };
  OldChatMessageForSave_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OldChatMessageForSave_descriptor_,
      OldChatMessageForSave::default_instance_,
      OldChatMessageForSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldChatMessageForSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldChatMessageForSave, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OldChatMessageForSave));
  GameRecord_descriptor_ = file->message_type(264);
  static const int GameRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, handid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, poolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, winnername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, holecard_),
  };
  GameRecord_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GameRecord_descriptor_,
      GameRecord::default_instance_,
      GameRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecord, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecord));
  GameRecordForSave_descriptor_ = file->message_type(265);
  static const int GameRecordForSave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordForSave, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordForSave, userid_),
  };
  GameRecordForSave_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GameRecordForSave_descriptor_,
      GameRecordForSave::default_instance_,
      GameRecordForSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordForSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordForSave, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecordForSave));
  CreateRoomInfoForSave_descriptor_ = file->message_type(266);
  static const int CreateRoomInfoForSave_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, istournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, roominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, roomprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, templatesizename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, templatespeedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, tournamentinfo_),
  };
  CreateRoomInfoForSave_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CreateRoomInfoForSave_descriptor_,
      CreateRoomInfoForSave::default_instance_,
      CreateRoomInfoForSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomInfoForSave, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomInfoForSave));
  ClientUserSetting_descriptor_ = file->message_type(267);
  static const int ClientUserSetting_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, lastgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, lastroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, lastistournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, lastroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, createroominfoforsave_),
  };
  ClientUserSetting_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ClientUserSetting_descriptor_,
      ClientUserSetting::default_instance_,
      ClientUserSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserSetting, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientUserSetting));
  Language_descriptor_ = file->enum_type(0);
  Platform_descriptor_ = file->enum_type(1);
  Game_Tool_Type_descriptor_ = file->enum_type(2);
  Status_descriptor_ = file->enum_type(3);
  Sex_descriptor_ = file->enum_type(4);
  VersionStatus_descriptor_ = file->enum_type(5);
  PropertyType_descriptor_ = file->enum_type(6);
  VerificationType_descriptor_ = file->enum_type(7);
  RequestType_descriptor_ = file->enum_type(8);
  MessageType_descriptor_ = file->enum_type(9);
  MessageStatus_descriptor_ = file->enum_type(10);
  InvitationStatus_descriptor_ = file->enum_type(11);
  GroupType_descriptor_ = file->enum_type(12);
  GroupUserStatus_descriptor_ = file->enum_type(13);
  GroupSearchType_descriptor_ = file->enum_type(14);
  RoomType_descriptor_ = file->enum_type(15);
  MomentDisplayType_descriptor_ = file->enum_type(16);
  CommentType_descriptor_ = file->enum_type(17);
  SittingStatus_descriptor_ = file->enum_type(18);
  GameStatus_descriptor_ = file->enum_type(19);
  ActionChoice_descriptor_ = file->enum_type(20);
  ActionStatus_descriptor_ = file->enum_type(21);
  ChoiceType_descriptor_ = file->enum_type(22);
  TournamentStatus_descriptor_ = file->enum_type(23);
  OFCRule_descriptor_ = file->enum_type(24);
  OFCCardType_descriptor_ = file->enum_type(25);
  OFCActionStatus_descriptor_ = file->enum_type(26);
  OFCCardLocation_descriptor_ = file->enum_type(27);
  MahjongFuType_descriptor_ = file->enum_type(28);
  MahjongPosition_descriptor_ = file->enum_type(29);
  MahjongCard_descriptor_ = file->enum_type(30);
  SiChuanMahjongRule_descriptor_ = file->enum_type(31);
  SiChuanMahjongWinType_descriptor_ = file->enum_type(32);
  MahjongCardSwitchType_descriptor_ = file->enum_type(33);
  MahjongCardZone_descriptor_ = file->enum_type(34);
  MahjongRequestType_descriptor_ = file->enum_type(35);
  MahjongActionChoice_descriptor_ = file->enum_type(36);
  MahjongSuit_descriptor_ = file->enum_type(37);
  PokerStepType_descriptor_ = file->enum_type(38);
  PokerRoundType_descriptor_ = file->enum_type(39);
  BlindType_descriptor_ = file->enum_type(40);
  OFCStepType_descriptor_ = file->enum_type(41);
  HandType_descriptor_ = file->enum_type(42);
  ServerType_descriptor_ = file->enum_type(43);
  RoomStatus_descriptor_ = file->enum_type(44);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequestHead_descriptor_, &ClientRequestHead::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientResponseHead_descriptor_, &ClientResponseHead::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessageHead_descriptor_, &ServerMessageHead::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomResponse_descriptor_, &RoomResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInfo_descriptor_, &ClientInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginInfo_descriptor_, &UserLoginInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDetailInfo_descriptor_, &UserDetailInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1_VersionCheck_descriptor_, &Processor_1_VersionCheck::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_10_LoginCoreServer_descriptor_, &Processor_10_LoginCoreServer::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_10_LoginCore_descriptor_, &Processor_10_LoginCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_11_CONSOLEHEARTJUMP_descriptor_, &Processor_11_CONSOLEHEARTJUMP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_30_UploadFile_descriptor_, &Processor_30_UploadFile::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_31_DownloadFile_UP_descriptor_, &Processor_31_DownloadFile_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_31_DownloadFile_DOWN_descriptor_, &Processor_31_DownloadFile_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_97_SendVerificationByUserID_descriptor_, &Processor_97_SendVerificationByUserID::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_98_ResetPassword_descriptor_, &Processor_98_ResetPassword::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_99_Login_UP_descriptor_, &Processor_99_Login_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_99_Login_DOWN_descriptor_, &Processor_99_Login_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_100_LoginResource_descriptor_, &Processor_100_LoginResource::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_100_LoginResource_Down_descriptor_, &Processor_100_LoginResource_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfomation_descriptor_, &RoomInfomation::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntValue_descriptor_, &IntValue::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumValue_descriptor_, &EnumValue::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnumItem_descriptor_, &EnumItem::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_103_FeedBack_descriptor_, &Processor_103_FeedBack::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_104_Register_descriptor_, &Processor_104_Register::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_105_Device_descriptor_, &Processor_105_Device::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_106_ReceiveIOSPayReceipt_descriptor_, &Processor_106_ReceiveIOSPayReceipt::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_106_ReceiveIOSPayReceipt_Down_descriptor_, &Processor_106_ReceiveIOSPayReceipt_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodInfo_descriptor_, &GoodInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_107_GetGoodsInfo_descriptor_, &Processor_107_GetGoodsInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_108_BuyGood_descriptor_, &Processor_108_BuyGood::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_109_AndroidPay_descriptor_, &Processor_109_AndroidPay::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_109_AndroidPayDown_descriptor_, &Processor_109_AndroidPayDown::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedBack_descriptor_, &FeedBack::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGameSetting_descriptor_, &UserGameSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGameSettings_descriptor_, &UserGameSettings::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_111_GetUserSetting_descriptor_, &Processor_111_GetUserSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_112_ChangeUserSetting_descriptor_, &Processor_112_ChangeUserSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_113_GetUserPermission_UP_descriptor_, &Processor_113_GetUserPermission_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_113_GetUserPermission_DOWN_descriptor_, &Processor_113_GetUserPermission_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_114_ChangePermission_descriptor_, &Processor_114_ChangePermission::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPermission_descriptor_, &GroupPermission::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_115_GetGroupSetting_UP_descriptor_, &Processor_115_GetGroupSetting_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_115_GetGroupSetting_DOWN_descriptor_, &Processor_115_GetGroupSetting_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_116_ChangeGroupSetting_descriptor_, &Processor_116_ChangeGroupSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_118_SendVerification_descriptor_, &Processor_118_SendVerification::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_119_BindPhone_descriptor_, &Processor_119_BindPhone::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupSetting_descriptor_, &GroupSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_120_GetFriendList_descriptor_, &Processor_120_GetFriendList::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_121_SearchUser_UP_descriptor_, &Processor_121_SearchUser_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_121_SearchUser_DOWN_descriptor_, &Processor_121_SearchUser_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_122_SendRequest_descriptor_, &Processor_122_SendRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_123_ReceiveRequestList_descriptor_, &Processor_123_ReceiveRequestList::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invitation_descriptor_, &Invitation::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_124_DealRequest_descriptor_, &Processor_124_DealRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_124_DealRequest_DOWN_descriptor_, &Processor_124_DealRequest_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_125_DeleteFriend_descriptor_, &Processor_125_DeleteFriend::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_126_Set_MomentBlock_descriptor_, &Processor_126_Set_MomentBlock::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_127_SearchFriendByPhoneNumber_UP_descriptor_, &Processor_127_SearchFriendByPhoneNumber_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendByPhoneNumber_descriptor_, &FriendByPhoneNumber::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_, &Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_128_GetMomentBlockUsers_DOWN_descriptor_, &Processor_128_GetMomentBlockUsers_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_130_Send_Diamond_descriptor_, &Processor_130_Send_Diamond::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageInfo_descriptor_, &MessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextMessageInfo_descriptor_, &TextMessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicMessageInfo_descriptor_, &PicMessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoiceMessageInfo_descriptor_, &VoiceMessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomMessageInfo_descriptor_, &CreateRoomMessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupNoticeMessageInfo_descriptor_, &GroupNoticeMessageInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteIntoGroup_descriptor_, &InviteIntoGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutGroup_descriptor_, &OutGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntoGroup_descriptor_, &IntoGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_140_CreateGroup_descriptor_, &Processor_140_CreateGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_140_CreateGroup_Down_descriptor_, &Processor_140_CreateGroup_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_141_EditGroup_descriptor_, &Processor_141_EditGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_142_SearchGroup_UP_descriptor_, &Processor_142_SearchGroup_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_142_SearchGroup_DOWN_descriptor_, &Processor_142_SearchGroup_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_144_KickUserFromGroup_descriptor_, &Processor_144_KickUserFromGroup::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_145_GetGroupInfo_UP_descriptor_, &Processor_145_GetGroupInfo_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_145_GetGroupInfo_DOWN_descriptor_, &Processor_145_GetGroupInfo_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_146_GetGroupDetailInfo_UP_descriptor_, &Processor_146_GetGroupDetailInfo_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUserInfo_descriptor_, &GroupUserInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupManageSetting_descriptor_, &GroupManageSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_146_GetGroupDetailInfo_DOWN_descriptor_, &Processor_146_GetGroupDetailInfo_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_147_SetGroupManageSetting_descriptor_, &Processor_147_SetGroupManageSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_148_SetGroupAdmin_descriptor_, &Processor_148_SetGroupAdmin::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomTypeInfo_descriptor_, &RoomTypeInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_150_GetRoomInfo_UP_descriptor_, &Processor_150_GetRoomInfo_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_150_GetRoomInfo_DOWN_descriptor_, &Processor_150_GetRoomInfo_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomInfo_descriptor_, &CreateRoomInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlindLevel_descriptor_, &BlindLevel::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentLevel_descriptor_, &TournamentLevel::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeLevel_descriptor_, &PrizeLevel::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentPrize_descriptor_, &TournamentPrize::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentInfo_descriptor_, &TournamentInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomProp_descriptor_, &RoomProp::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_151_GetRoomInfomation_descriptor_, &Processor_151_GetRoomInfomation::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_152_CreateRoom_descriptor_, &Processor_152_CreateRoom::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_152_CreateRoom_down_descriptor_, &Processor_152_CreateRoom_down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_154_CancelTournament_descriptor_, &Processor_154_CancelTournament::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_160_SendChatMessage_descriptor_, &Processor_160_SendChatMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_160_SendChatMessage_Down_descriptor_, &Processor_160_SendChatMessage_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_161_ReceiveChatMessage_descriptor_, &Processor_161_ReceiveChatMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_161_ReceiveChatMessage_UP_descriptor_, &Processor_161_ReceiveChatMessage_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_170_GetHistoryScore_Up_descriptor_, &Processor_170_GetHistoryScore_Up::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryScore_descriptor_, &HistoryScore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_170_GetHistoryScore_Down_descriptor_, &Processor_170_GetHistoryScore_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_171_GetGroupUserRank_UP_descriptor_, &Processor_171_GetGroupUserRank_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_171_GetGroupUserRank_DOWN_descriptor_, &Processor_171_GetGroupUserRank_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_181_JoinTournament_descriptor_, &Processor_181_JoinTournament::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_182_TournamentStart_descriptor_, &Processor_182_TournamentStart::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_190_ReceiveMessage_descriptor_, &Processor_190_ReceiveMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_190_ReceiveMessage_UP_descriptor_, &Processor_190_ReceiveMessage_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_191_NotifyChange_descriptor_, &Processor_191_NotifyChange::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Moment_descriptor_, &Moment::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentInfos_descriptor_, &CommentInfos::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MomentInfo_descriptor_, &MomentInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalMomentInfo_descriptor_, &NormalMomentInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_200_PublishMoment_descriptor_, &Processor_200_PublishMoment::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_201_GetMoment_UP_descriptor_, &Processor_201_GetMoment_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_201_GetMoment_DOWN_descriptor_, &Processor_201_GetMoment_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_202_DeleteMoment_descriptor_, &Processor_202_DeleteMoment::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentInfo_descriptor_, &CommentInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_203_PublishComment_descriptor_, &Processor_203_PublishComment::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_204_GetComment_UP_descriptor_, &Processor_204_GetComment_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_204_GetComment_DOWN_descriptor_, &Processor_204_GetComment_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_205_DeleteMoment_descriptor_, &Processor_205_DeleteMoment::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_400_LoginRoom_UP_descriptor_, &Processor_400_LoginRoom_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_400_LoginRoom_DOWN_descriptor_, &Processor_400_LoginRoom_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_410_EnterRoom_descriptor_, &Processor_410_EnterRoom::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_410_EnterRoom_DOWN_descriptor_, &Processor_410_EnterRoom_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_411_SendSeatInfo_descriptor_, &Processor_411_SendSeatInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_411_SendSeatInfo_Down_descriptor_, &Processor_411_SendSeatInfo_Down::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSitStatus_descriptor_, &PlayerSitStatus::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_412_ReceiveSeatInfo_descriptor_, &Processor_412_ReceiveSeatInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_413_ReceiveGameStart_descriptor_, &Processor_413_ReceiveGameStart::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_414_ReceiveGameEnd_descriptor_, &Processor_414_ReceiveGameEnd::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_415_DisableAutoAction_descriptor_, &Processor_415_DisableAutoAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRequest_descriptor_, &ActionRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_417_ReceiveOtherPlayerAction_descriptor_, &Processor_417_ReceiveOtherPlayerAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_420_PokerGetScore_UP_descriptor_, &Processor_420_PokerGetScore_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerScore_descriptor_, &PlayerScore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerScores_descriptor_, &PlayerScores::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_420_PokerGetScore_DOWN_descriptor_, &Processor_420_PokerGetScore_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_430_SendGameVoice_descriptor_, &Processor_430_SendGameVoice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_431_ReceiveGameVoice_descriptor_, &Processor_431_ReceiveGameVoice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_440_SetGameStatus_descriptor_, &Processor_440_SetGameStatus::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_441_KickPlayer_descriptor_, &Processor_441_KickPlayer::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_442_ReceiveGameStatus_descriptor_, &Processor_442_ReceiveGameStatus::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_490_ReceiveRoomClose_descriptor_, &Processor_490_ReceiveRoomClose::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_491_ReceiveRoomMessage_descriptor_, &Processor_491_ReceiveRoomMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_495_ReceiveRequest_descriptor_, &Processor_495_ReceiveRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_496_ReplyRequest_descriptor_, &Processor_496_ReplyRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRoomInfo_descriptor_, &CommonRoomInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonPlayerInfo_descriptor_, &CommonPlayerInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_500_PokerRefreshAll_descriptor_, &Processor_500_PokerRefreshAll::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerPlayerSetting_descriptor_, &PokerPlayerSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerPlayerInfo_descriptor_, &PokerPlayerInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfo_descriptor_, &TableInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableAndUserUpdate_descriptor_, &TableAndUserUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerActionRequest_descriptor_, &PokerActionRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_501_PokerRequestAction_descriptor_, &Processor_501_PokerRequestAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_502_PokerSendAction_descriptor_, &Processor_502_PokerSendAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_503_PokerReceivePropUpdate_descriptor_, &Processor_503_PokerReceivePropUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_510_PokerAddChips_descriptor_, &Processor_510_PokerAddChips::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_511_PokerReceiveNeedChip_descriptor_, &Processor_511_PokerReceiveNeedChip::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_512_PokerRequestChoice_descriptor_, &Processor_512_PokerRequestChoice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_513_PokerReplyChoice_descriptor_, &Processor_513_PokerReplyChoice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_514_PokerReceiveTableNote_descriptor_, &Processor_514_PokerReceiveTableNote::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_515_PokerSendSetting_descriptor_, &Processor_515_PokerSendSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_516_PokerReceiveSettingChange_descriptor_, &Processor_516_PokerReceiveSettingChange::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_517_PokerSendShowCard_descriptor_, &Processor_517_PokerSendShowCard::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerWin_descriptor_, &PlayerWin::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHandResult_descriptor_, &PlayerHandResult::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pot_descriptor_, &Pot::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandResultInfo_descriptor_, &HandResultInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_520_PokerReceiveHandResult_descriptor_, &Processor_520_PokerReceiveHandResult::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_530_PokerGetTourmentStatus_UP_descriptor_, &Processor_530_PokerGetTourmentStatus_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_530_PokerGetTourmentStatus_DOWN_descriptor_, &Processor_530_PokerGetTourmentStatus_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TourmentTableInfo_descriptor_, &TourmentTableInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_531_PokerTourmentChangeTable_descriptor_, &Processor_531_PokerTourmentChangeTable::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_532_PokerTournamentRequestAddon_descriptor_, &Processor_532_PokerTournamentRequestAddon::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_533_PokerTournamentAddon_descriptor_, &Processor_533_PokerTournamentAddon::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPlayerInfo_descriptor_, &OFCPlayerInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPlayerSetting_descriptor_, &OFCPlayerSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPropUpdate_descriptor_, &OFCPropUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCResult_descriptor_, &OFCResult::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_600_OFCRefreshAll_descriptor_, &Processor_600_OFCRefreshAll::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_601_OFCReceivePropUpdate_descriptor_, &Processor_601_OFCReceivePropUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPlayerCard_descriptor_, &OFCPlayerCard::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_602_OFCSendPlayerCard_descriptor_, &Processor_602_OFCSendPlayerCard::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCompare_descriptor_, &UserCompare::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPlayerHandResult_descriptor_, &OFCPlayerHandResult::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_610_OFCReceiveResult_descriptor_, &Processor_610_OFCReceiveResult::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_615_OFCSendSetting_descriptor_, &Processor_615_OFCSendSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_616_OFCReceiveSettingChange_descriptor_, &Processor_616_OFCReceiveSettingChange::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongPlayerInfo_descriptor_, &MahjongPlayerInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongFu_descriptor_, &MahjongFu::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongScoreChange_descriptor_, &MahjongScoreChange::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongPlayerSetting_descriptor_, &MahjongPlayerSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongPropUpdate_descriptor_, &MahjongPropUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongTing_descriptor_, &MahjongTing::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongPossibleTing_descriptor_, &MahjongPossibleTing::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongActionRequest_descriptor_, &MahjongActionRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_700_MahjongRefreshAll_descriptor_, &Processor_700_MahjongRefreshAll::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_701_MahjongReceivePropUpdate_descriptor_, &Processor_701_MahjongReceivePropUpdate::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_702_MahjongSendPlayerChoice_descriptor_, &Processor_702_MahjongSendPlayerChoice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongAction_descriptor_, &MahjongAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongTestAllWinCardAndType_descriptor_, &MahjongTestAllWinCardAndType::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongWinCardAndType_descriptor_, &MahjongWinCardAndType::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_703_MahjongReceivePlayerAction_descriptor_, &Processor_703_MahjongReceivePlayerAction::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_715_MahjongSendSetting_descriptor_, &Processor_715_MahjongSendSetting::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_716_MahjongReceiveSettingChange_descriptor_, &Processor_716_MahjongReceiveSettingChange::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_300_PokerGetHandHistory_UP_descriptor_, &Processor_300_PokerGetHandHistory_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerStep_descriptor_, &PokerStep::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerBlinds_descriptor_, &PokerBlinds::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerBlind_descriptor_, &PokerBlind::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerPlayerActionInfo_descriptor_, &PokerPlayerActionInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCStep_descriptor_, &OFCStep::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OFCPlayerActionInfo_descriptor_, &OFCPlayerActionInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MahjongStep_descriptor_, &MahjongStep::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayStep_descriptor_, &ReplayStep::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaySteps_descriptor_, &ReplaySteps::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayPlayers_descriptor_, &ReplayPlayers::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayPlayer_descriptor_, &ReplayPlayer::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandBaseInfo_descriptor_, &HandBaseInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_300_PokerGetHandHistory_DOWN_descriptor_, &Processor_300_PokerGetHandHistory_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1000_RegisterServer_OtherToCore_descriptor_, &Processor_1000_RegisterServer_OtherToCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1000_RegisterServer_CoreToOther_descriptor_, &Processor_1000_RegisterServer_CoreToOther::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfos_descriptor_, &ServerInfos::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_HTMLRegister_descriptor_, &Processor_HTMLRegister::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_HTMLRegisterEnterRoom_descriptor_, &Processor_HTMLRegisterEnterRoom::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1003_ChangeUserInfo_ResToCore_descriptor_, &Processor_1003_ChangeUserInfo_ResToCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1004_ChangeUserInfo_CoreToOther_descriptor_, &Processor_1004_ChangeUserInfo_CoreToOther::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1005_OnlineInfo_OtherToCore_descriptor_, &Processor_1005_OnlineInfo_OtherToCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerRoomInfo_descriptor_, &ServerRoomInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1006_RoomInfo_descriptor_, &Processor_1006_RoomInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1009_CreateRoom_ResToCore_descriptor_, &Processor_1009_CreateRoom_ResToCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1010_CreateRoom_CoreToRoom_descriptor_, &Processor_1010_CreateRoom_CoreToRoom::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1011_ChangeServerProp_descriptor_, &Processor_1011_ChangeServerProp::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1012_WXPayMsg_descriptor_, &Processor_1012_WXPayMsg::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1100_ShutDown_ConsoleToCore_descriptor_, &Processor_1100_ShutDown_ConsoleToCore::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1101_ShutDown_CoreToOther_descriptor_, &Processor_1101_ShutDown_CoreToOther::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1105_ServerInformation_CoreToConsole_descriptor_, &Processor_1105_ServerInformation_CoreToConsole::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_, &Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_, &Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_, &Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_, &Processor_1109_PUBLISH_SYS_MESSAGE::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_, &Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTourCreditInfo_descriptor_, &UserTourCreditInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessages_descriptor_, &ChatMessages::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationsForSave_descriptor_, &InvitationsForSave::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessageForSave_descriptor_, &ChatMessageForSave::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldChatMessageForSave_descriptor_, &OldChatMessageForSave::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecord_descriptor_, &GameRecord::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecordForSave_descriptor_, &GameRecordForSave::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomInfoForSave_descriptor_, &CreateRoomInfoForSave::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientUserSetting_descriptor_, &ClientUserSetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete ClientRequestHead::default_instance_;
  delete ClientRequestHead_reflection_;
  delete ClientResponseHead::default_instance_;
  delete ClientResponseHead_reflection_;
  delete ServerMessageHead::default_instance_;
  delete ServerMessageHead_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete RoomResponse::default_instance_;
  delete RoomResponse_reflection_;
  delete ClientInfo::default_instance_;
  delete ClientInfo_reflection_;
  delete UserLoginInfo::default_instance_;
  delete UserLoginInfo_reflection_;
  delete UserDetailInfo::default_instance_;
  delete UserDetailInfo_reflection_;
  delete Processor_1_VersionCheck::default_instance_;
  delete Processor_1_VersionCheck_reflection_;
  delete Processor_10_LoginCoreServer::default_instance_;
  delete Processor_10_LoginCoreServer_reflection_;
  delete Processor_10_LoginCore::default_instance_;
  delete Processor_10_LoginCore_reflection_;
  delete Processor_11_CONSOLEHEARTJUMP::default_instance_;
  delete Processor_11_CONSOLEHEARTJUMP_reflection_;
  delete Processor_30_UploadFile::default_instance_;
  delete Processor_30_UploadFile_reflection_;
  delete Processor_31_DownloadFile_UP::default_instance_;
  delete Processor_31_DownloadFile_UP_reflection_;
  delete Processor_31_DownloadFile_DOWN::default_instance_;
  delete Processor_31_DownloadFile_DOWN_reflection_;
  delete Processor_97_SendVerificationByUserID::default_instance_;
  delete Processor_97_SendVerificationByUserID_reflection_;
  delete Processor_98_ResetPassword::default_instance_;
  delete Processor_98_ResetPassword_reflection_;
  delete Processor_99_Login_UP::default_instance_;
  delete Processor_99_Login_UP_reflection_;
  delete Processor_99_Login_DOWN::default_instance_;
  delete Processor_99_Login_DOWN_reflection_;
  delete Processor_100_LoginResource::default_instance_;
  delete Processor_100_LoginResource_reflection_;
  delete Processor_100_LoginResource_Down::default_instance_;
  delete Processor_100_LoginResource_Down_reflection_;
  delete RoomInfomation::default_instance_;
  delete RoomInfomation_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete IntValue::default_instance_;
  delete IntValue_reflection_;
  delete EnumValue::default_instance_;
  delete EnumValue_reflection_;
  delete EnumItem::default_instance_;
  delete EnumItem_reflection_;
  delete Processor_103_FeedBack::default_instance_;
  delete Processor_103_FeedBack_reflection_;
  delete Processor_104_Register::default_instance_;
  delete Processor_104_Register_reflection_;
  delete Processor_105_Device::default_instance_;
  delete Processor_105_Device_reflection_;
  delete Processor_106_ReceiveIOSPayReceipt::default_instance_;
  delete Processor_106_ReceiveIOSPayReceipt_reflection_;
  delete Processor_106_ReceiveIOSPayReceipt_Down::default_instance_;
  delete Processor_106_ReceiveIOSPayReceipt_Down_reflection_;
  delete GoodInfo::default_instance_;
  delete GoodInfo_reflection_;
  delete Processor_107_GetGoodsInfo::default_instance_;
  delete Processor_107_GetGoodsInfo_reflection_;
  delete Processor_108_BuyGood::default_instance_;
  delete Processor_108_BuyGood_reflection_;
  delete Processor_109_AndroidPay::default_instance_;
  delete Processor_109_AndroidPay_reflection_;
  delete Processor_109_AndroidPayDown::default_instance_;
  delete Processor_109_AndroidPayDown_reflection_;
  delete FeedBack::default_instance_;
  delete FeedBack_reflection_;
  delete UserGameSetting::default_instance_;
  delete UserGameSetting_reflection_;
  delete UserGameSettings::default_instance_;
  delete UserGameSettings_reflection_;
  delete Processor_111_GetUserSetting::default_instance_;
  delete Processor_111_GetUserSetting_reflection_;
  delete Processor_112_ChangeUserSetting::default_instance_;
  delete Processor_112_ChangeUserSetting_reflection_;
  delete Processor_113_GetUserPermission_UP::default_instance_;
  delete Processor_113_GetUserPermission_UP_reflection_;
  delete Processor_113_GetUserPermission_DOWN::default_instance_;
  delete Processor_113_GetUserPermission_DOWN_reflection_;
  delete Processor_114_ChangePermission::default_instance_;
  delete Processor_114_ChangePermission_reflection_;
  delete GroupPermission::default_instance_;
  delete GroupPermission_reflection_;
  delete Processor_115_GetGroupSetting_UP::default_instance_;
  delete Processor_115_GetGroupSetting_UP_reflection_;
  delete Processor_115_GetGroupSetting_DOWN::default_instance_;
  delete Processor_115_GetGroupSetting_DOWN_reflection_;
  delete Processor_116_ChangeGroupSetting::default_instance_;
  delete Processor_116_ChangeGroupSetting_reflection_;
  delete Processor_118_SendVerification::default_instance_;
  delete Processor_118_SendVerification_reflection_;
  delete Processor_119_BindPhone::default_instance_;
  delete Processor_119_BindPhone_reflection_;
  delete GroupSetting::default_instance_;
  delete GroupSetting_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete Processor_120_GetFriendList::default_instance_;
  delete Processor_120_GetFriendList_reflection_;
  delete Processor_121_SearchUser_UP::default_instance_;
  delete Processor_121_SearchUser_UP_reflection_;
  delete Processor_121_SearchUser_DOWN::default_instance_;
  delete Processor_121_SearchUser_DOWN_reflection_;
  delete Processor_122_SendRequest::default_instance_;
  delete Processor_122_SendRequest_reflection_;
  delete Processor_123_ReceiveRequestList::default_instance_;
  delete Processor_123_ReceiveRequestList_reflection_;
  delete Invitation::default_instance_;
  delete Invitation_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Processor_124_DealRequest::default_instance_;
  delete Processor_124_DealRequest_reflection_;
  delete Processor_124_DealRequest_DOWN::default_instance_;
  delete Processor_124_DealRequest_DOWN_reflection_;
  delete Processor_125_DeleteFriend::default_instance_;
  delete Processor_125_DeleteFriend_reflection_;
  delete Processor_126_Set_MomentBlock::default_instance_;
  delete Processor_126_Set_MomentBlock_reflection_;
  delete Processor_127_SearchFriendByPhoneNumber_UP::default_instance_;
  delete Processor_127_SearchFriendByPhoneNumber_UP_reflection_;
  delete FriendByPhoneNumber::default_instance_;
  delete FriendByPhoneNumber_reflection_;
  delete Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance_;
  delete Processor_127_SearchFriendByPhoneNumber_DOWN_reflection_;
  delete Processor_128_GetMomentBlockUsers_DOWN::default_instance_;
  delete Processor_128_GetMomentBlockUsers_DOWN_reflection_;
  delete Processor_130_Send_Diamond::default_instance_;
  delete Processor_130_Send_Diamond_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete MessageInfo::default_instance_;
  delete MessageInfo_reflection_;
  delete TextMessageInfo::default_instance_;
  delete TextMessageInfo_reflection_;
  delete PicMessageInfo::default_instance_;
  delete PicMessageInfo_reflection_;
  delete VoiceMessageInfo::default_instance_;
  delete VoiceMessageInfo_reflection_;
  delete CreateRoomMessageInfo::default_instance_;
  delete CreateRoomMessageInfo_reflection_;
  delete GroupNoticeMessageInfo::default_instance_;
  delete GroupNoticeMessageInfo_reflection_;
  delete InviteIntoGroup::default_instance_;
  delete InviteIntoGroup_reflection_;
  delete OutGroup::default_instance_;
  delete OutGroup_reflection_;
  delete IntoGroup::default_instance_;
  delete IntoGroup_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete Processor_140_CreateGroup::default_instance_;
  delete Processor_140_CreateGroup_reflection_;
  delete Processor_140_CreateGroup_Down::default_instance_;
  delete Processor_140_CreateGroup_Down_reflection_;
  delete Processor_141_EditGroup::default_instance_;
  delete Processor_141_EditGroup_reflection_;
  delete Processor_142_SearchGroup_UP::default_instance_;
  delete Processor_142_SearchGroup_UP_reflection_;
  delete Processor_142_SearchGroup_DOWN::default_instance_;
  delete Processor_142_SearchGroup_DOWN_reflection_;
  delete Processor_144_KickUserFromGroup::default_instance_;
  delete Processor_144_KickUserFromGroup_reflection_;
  delete Processor_145_GetGroupInfo_UP::default_instance_;
  delete Processor_145_GetGroupInfo_UP_reflection_;
  delete Processor_145_GetGroupInfo_DOWN::default_instance_;
  delete Processor_145_GetGroupInfo_DOWN_reflection_;
  delete Processor_146_GetGroupDetailInfo_UP::default_instance_;
  delete Processor_146_GetGroupDetailInfo_UP_reflection_;
  delete GroupUserInfo::default_instance_;
  delete GroupUserInfo_reflection_;
  delete GroupManageSetting::default_instance_;
  delete GroupManageSetting_reflection_;
  delete Processor_146_GetGroupDetailInfo_DOWN::default_instance_;
  delete Processor_146_GetGroupDetailInfo_DOWN_reflection_;
  delete Processor_147_SetGroupManageSetting::default_instance_;
  delete Processor_147_SetGroupManageSetting_reflection_;
  delete Processor_148_SetGroupAdmin::default_instance_;
  delete Processor_148_SetGroupAdmin_reflection_;
  delete RoomTypeInfo::default_instance_;
  delete RoomTypeInfo_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete Processor_150_GetRoomInfo_UP::default_instance_;
  delete Processor_150_GetRoomInfo_UP_reflection_;
  delete Processor_150_GetRoomInfo_DOWN::default_instance_;
  delete Processor_150_GetRoomInfo_DOWN_reflection_;
  delete CreateRoomInfo::default_instance_;
  delete CreateRoomInfo_reflection_;
  delete BlindLevel::default_instance_;
  delete BlindLevel_reflection_;
  delete TournamentLevel::default_instance_;
  delete TournamentLevel_reflection_;
  delete PrizeLevel::default_instance_;
  delete PrizeLevel_reflection_;
  delete TournamentPrize::default_instance_;
  delete TournamentPrize_reflection_;
  delete TournamentInfo::default_instance_;
  delete TournamentInfo_reflection_;
  delete RoomProp::default_instance_;
  delete RoomProp_reflection_;
  delete Processor_151_GetRoomInfomation::default_instance_;
  delete Processor_151_GetRoomInfomation_reflection_;
  delete Processor_152_CreateRoom::default_instance_;
  delete Processor_152_CreateRoom_reflection_;
  delete Processor_152_CreateRoom_down::default_instance_;
  delete Processor_152_CreateRoom_down_reflection_;
  delete Processor_154_CancelTournament::default_instance_;
  delete Processor_154_CancelTournament_reflection_;
  delete Processor_160_SendChatMessage::default_instance_;
  delete Processor_160_SendChatMessage_reflection_;
  delete Processor_160_SendChatMessage_Down::default_instance_;
  delete Processor_160_SendChatMessage_Down_reflection_;
  delete Processor_161_ReceiveChatMessage::default_instance_;
  delete Processor_161_ReceiveChatMessage_reflection_;
  delete Processor_161_ReceiveChatMessage_UP::default_instance_;
  delete Processor_161_ReceiveChatMessage_UP_reflection_;
  delete Processor_170_GetHistoryScore_Up::default_instance_;
  delete Processor_170_GetHistoryScore_Up_reflection_;
  delete HistoryScore::default_instance_;
  delete HistoryScore_reflection_;
  delete Processor_170_GetHistoryScore_Down::default_instance_;
  delete Processor_170_GetHistoryScore_Down_reflection_;
  delete Processor_171_GetGroupUserRank_UP::default_instance_;
  delete Processor_171_GetGroupUserRank_UP_reflection_;
  delete Processor_171_GetGroupUserRank_DOWN::default_instance_;
  delete Processor_171_GetGroupUserRank_DOWN_reflection_;
  delete Processor_181_JoinTournament::default_instance_;
  delete Processor_181_JoinTournament_reflection_;
  delete Processor_182_TournamentStart::default_instance_;
  delete Processor_182_TournamentStart_reflection_;
  delete Processor_190_ReceiveMessage::default_instance_;
  delete Processor_190_ReceiveMessage_reflection_;
  delete Processor_190_ReceiveMessage_UP::default_instance_;
  delete Processor_190_ReceiveMessage_UP_reflection_;
  delete Processor_191_NotifyChange::default_instance_;
  delete Processor_191_NotifyChange_reflection_;
  delete Moment::default_instance_;
  delete Moment_reflection_;
  delete CommentInfos::default_instance_;
  delete CommentInfos_reflection_;
  delete MomentInfo::default_instance_;
  delete MomentInfo_reflection_;
  delete NormalMomentInfo::default_instance_;
  delete NormalMomentInfo_reflection_;
  delete Processor_200_PublishMoment::default_instance_;
  delete Processor_200_PublishMoment_reflection_;
  delete Processor_201_GetMoment_UP::default_instance_;
  delete Processor_201_GetMoment_UP_reflection_;
  delete Processor_201_GetMoment_DOWN::default_instance_;
  delete Processor_201_GetMoment_DOWN_reflection_;
  delete Processor_202_DeleteMoment::default_instance_;
  delete Processor_202_DeleteMoment_reflection_;
  delete CommentInfo::default_instance_;
  delete CommentInfo_reflection_;
  delete Processor_203_PublishComment::default_instance_;
  delete Processor_203_PublishComment_reflection_;
  delete Processor_204_GetComment_UP::default_instance_;
  delete Processor_204_GetComment_UP_reflection_;
  delete Processor_204_GetComment_DOWN::default_instance_;
  delete Processor_204_GetComment_DOWN_reflection_;
  delete Processor_205_DeleteMoment::default_instance_;
  delete Processor_205_DeleteMoment_reflection_;
  delete Processor_400_LoginRoom_UP::default_instance_;
  delete Processor_400_LoginRoom_UP_reflection_;
  delete Processor_400_LoginRoom_DOWN::default_instance_;
  delete Processor_400_LoginRoom_DOWN_reflection_;
  delete Processor_410_EnterRoom::default_instance_;
  delete Processor_410_EnterRoom_reflection_;
  delete Processor_410_EnterRoom_DOWN::default_instance_;
  delete Processor_410_EnterRoom_DOWN_reflection_;
  delete Processor_411_SendSeatInfo::default_instance_;
  delete Processor_411_SendSeatInfo_reflection_;
  delete Processor_411_SendSeatInfo_Down::default_instance_;
  delete Processor_411_SendSeatInfo_Down_reflection_;
  delete PlayerSitStatus::default_instance_;
  delete PlayerSitStatus_reflection_;
  delete Processor_412_ReceiveSeatInfo::default_instance_;
  delete Processor_412_ReceiveSeatInfo_reflection_;
  delete Processor_413_ReceiveGameStart::default_instance_;
  delete Processor_413_ReceiveGameStart_reflection_;
  delete Processor_414_ReceiveGameEnd::default_instance_;
  delete Processor_414_ReceiveGameEnd_reflection_;
  delete Processor_415_DisableAutoAction::default_instance_;
  delete Processor_415_DisableAutoAction_reflection_;
  delete ActionRequest::default_instance_;
  delete ActionRequest_reflection_;
  delete Processor_417_ReceiveOtherPlayerAction::default_instance_;
  delete Processor_417_ReceiveOtherPlayerAction_reflection_;
  delete Processor_420_PokerGetScore_UP::default_instance_;
  delete Processor_420_PokerGetScore_UP_reflection_;
  delete PlayerScore::default_instance_;
  delete PlayerScore_reflection_;
  delete PlayerScores::default_instance_;
  delete PlayerScores_reflection_;
  delete Processor_420_PokerGetScore_DOWN::default_instance_;
  delete Processor_420_PokerGetScore_DOWN_reflection_;
  delete Processor_430_SendGameVoice::default_instance_;
  delete Processor_430_SendGameVoice_reflection_;
  delete Processor_431_ReceiveGameVoice::default_instance_;
  delete Processor_431_ReceiveGameVoice_reflection_;
  delete Processor_440_SetGameStatus::default_instance_;
  delete Processor_440_SetGameStatus_reflection_;
  delete Processor_441_KickPlayer::default_instance_;
  delete Processor_441_KickPlayer_reflection_;
  delete Processor_442_ReceiveGameStatus::default_instance_;
  delete Processor_442_ReceiveGameStatus_reflection_;
  delete Processor_490_ReceiveRoomClose::default_instance_;
  delete Processor_490_ReceiveRoomClose_reflection_;
  delete Processor_491_ReceiveRoomMessage::default_instance_;
  delete Processor_491_ReceiveRoomMessage_reflection_;
  delete Processor_495_ReceiveRequest::default_instance_;
  delete Processor_495_ReceiveRequest_reflection_;
  delete Processor_496_ReplyRequest::default_instance_;
  delete Processor_496_ReplyRequest_reflection_;
  delete CommonRoomInfo::default_instance_;
  delete CommonRoomInfo_reflection_;
  delete CommonPlayerInfo::default_instance_;
  delete CommonPlayerInfo_reflection_;
  delete Processor_500_PokerRefreshAll::default_instance_;
  delete Processor_500_PokerRefreshAll_reflection_;
  delete PokerPlayerSetting::default_instance_;
  delete PokerPlayerSetting_reflection_;
  delete PokerPlayerInfo::default_instance_;
  delete PokerPlayerInfo_reflection_;
  delete TableInfo::default_instance_;
  delete TableInfo_reflection_;
  delete TableAndUserUpdate::default_instance_;
  delete TableAndUserUpdate_reflection_;
  delete PokerActionRequest::default_instance_;
  delete PokerActionRequest_reflection_;
  delete Processor_501_PokerRequestAction::default_instance_;
  delete Processor_501_PokerRequestAction_reflection_;
  delete Processor_502_PokerSendAction::default_instance_;
  delete Processor_502_PokerSendAction_reflection_;
  delete Processor_503_PokerReceivePropUpdate::default_instance_;
  delete Processor_503_PokerReceivePropUpdate_reflection_;
  delete Processor_510_PokerAddChips::default_instance_;
  delete Processor_510_PokerAddChips_reflection_;
  delete Processor_511_PokerReceiveNeedChip::default_instance_;
  delete Processor_511_PokerReceiveNeedChip_reflection_;
  delete Processor_512_PokerRequestChoice::default_instance_;
  delete Processor_512_PokerRequestChoice_reflection_;
  delete Processor_513_PokerReplyChoice::default_instance_;
  delete Processor_513_PokerReplyChoice_reflection_;
  delete Processor_514_PokerReceiveTableNote::default_instance_;
  delete Processor_514_PokerReceiveTableNote_reflection_;
  delete Processor_515_PokerSendSetting::default_instance_;
  delete Processor_515_PokerSendSetting_reflection_;
  delete Processor_516_PokerReceiveSettingChange::default_instance_;
  delete Processor_516_PokerReceiveSettingChange_reflection_;
  delete Processor_517_PokerSendShowCard::default_instance_;
  delete Processor_517_PokerSendShowCard_reflection_;
  delete PlayerWin::default_instance_;
  delete PlayerWin_reflection_;
  delete PlayerHandResult::default_instance_;
  delete PlayerHandResult_reflection_;
  delete Pot::default_instance_;
  delete Pot_reflection_;
  delete HandResultInfo::default_instance_;
  delete HandResultInfo_reflection_;
  delete Processor_520_PokerReceiveHandResult::default_instance_;
  delete Processor_520_PokerReceiveHandResult_reflection_;
  delete Processor_530_PokerGetTourmentStatus_UP::default_instance_;
  delete Processor_530_PokerGetTourmentStatus_UP_reflection_;
  delete Processor_530_PokerGetTourmentStatus_DOWN::default_instance_;
  delete Processor_530_PokerGetTourmentStatus_DOWN_reflection_;
  delete TourmentTableInfo::default_instance_;
  delete TourmentTableInfo_reflection_;
  delete Processor_531_PokerTourmentChangeTable::default_instance_;
  delete Processor_531_PokerTourmentChangeTable_reflection_;
  delete Processor_532_PokerTournamentRequestAddon::default_instance_;
  delete Processor_532_PokerTournamentRequestAddon_reflection_;
  delete Processor_533_PokerTournamentAddon::default_instance_;
  delete Processor_533_PokerTournamentAddon_reflection_;
  delete OFCPlayerInfo::default_instance_;
  delete OFCPlayerInfo_reflection_;
  delete OFCPlayerSetting::default_instance_;
  delete OFCPlayerSetting_reflection_;
  delete OFCPropUpdate::default_instance_;
  delete OFCPropUpdate_reflection_;
  delete OFCResult::default_instance_;
  delete OFCResult_reflection_;
  delete Processor_600_OFCRefreshAll::default_instance_;
  delete Processor_600_OFCRefreshAll_reflection_;
  delete Processor_601_OFCReceivePropUpdate::default_instance_;
  delete Processor_601_OFCReceivePropUpdate_reflection_;
  delete OFCPlayerCard::default_instance_;
  delete OFCPlayerCard_reflection_;
  delete Processor_602_OFCSendPlayerCard::default_instance_;
  delete Processor_602_OFCSendPlayerCard_reflection_;
  delete UserCompare::default_instance_;
  delete UserCompare_reflection_;
  delete OFCPlayerHandResult::default_instance_;
  delete OFCPlayerHandResult_reflection_;
  delete Processor_610_OFCReceiveResult::default_instance_;
  delete Processor_610_OFCReceiveResult_reflection_;
  delete Processor_615_OFCSendSetting::default_instance_;
  delete Processor_615_OFCSendSetting_reflection_;
  delete Processor_616_OFCReceiveSettingChange::default_instance_;
  delete Processor_616_OFCReceiveSettingChange_reflection_;
  delete MahjongPlayerInfo::default_instance_;
  delete MahjongPlayerInfo_reflection_;
  delete MahjongFu::default_instance_;
  delete MahjongFu_reflection_;
  delete MahjongScoreChange::default_instance_;
  delete MahjongScoreChange_reflection_;
  delete MahjongPlayerSetting::default_instance_;
  delete MahjongPlayerSetting_reflection_;
  delete MahjongPropUpdate::default_instance_;
  delete MahjongPropUpdate_reflection_;
  delete MahjongTing::default_instance_;
  delete MahjongTing_reflection_;
  delete MahjongPossibleTing::default_instance_;
  delete MahjongPossibleTing_reflection_;
  delete MahjongActionRequest::default_instance_;
  delete MahjongActionRequest_reflection_;
  delete Processor_700_MahjongRefreshAll::default_instance_;
  delete Processor_700_MahjongRefreshAll_reflection_;
  delete Processor_701_MahjongReceivePropUpdate::default_instance_;
  delete Processor_701_MahjongReceivePropUpdate_reflection_;
  delete Processor_702_MahjongSendPlayerChoice::default_instance_;
  delete Processor_702_MahjongSendPlayerChoice_reflection_;
  delete MahjongAction::default_instance_;
  delete MahjongAction_reflection_;
  delete MahjongTestAllWinCardAndType::default_instance_;
  delete MahjongTestAllWinCardAndType_reflection_;
  delete MahjongWinCardAndType::default_instance_;
  delete MahjongWinCardAndType_reflection_;
  delete Processor_703_MahjongReceivePlayerAction::default_instance_;
  delete Processor_703_MahjongReceivePlayerAction_reflection_;
  delete Processor_715_MahjongSendSetting::default_instance_;
  delete Processor_715_MahjongSendSetting_reflection_;
  delete Processor_716_MahjongReceiveSettingChange::default_instance_;
  delete Processor_716_MahjongReceiveSettingChange_reflection_;
  delete Processor_300_PokerGetHandHistory_UP::default_instance_;
  delete Processor_300_PokerGetHandHistory_UP_reflection_;
  delete PokerStep::default_instance_;
  delete PokerStep_reflection_;
  delete PokerBlinds::default_instance_;
  delete PokerBlinds_reflection_;
  delete PokerBlind::default_instance_;
  delete PokerBlind_reflection_;
  delete PokerPlayerActionInfo::default_instance_;
  delete PokerPlayerActionInfo_reflection_;
  delete OFCStep::default_instance_;
  delete OFCStep_reflection_;
  delete OFCPlayerActionInfo::default_instance_;
  delete OFCPlayerActionInfo_reflection_;
  delete MahjongStep::default_instance_;
  delete MahjongStep_reflection_;
  delete ReplayStep::default_instance_;
  delete ReplayStep_reflection_;
  delete ReplaySteps::default_instance_;
  delete ReplaySteps_reflection_;
  delete ReplayPlayers::default_instance_;
  delete ReplayPlayers_reflection_;
  delete ReplayPlayer::default_instance_;
  delete ReplayPlayer_reflection_;
  delete HandBaseInfo::default_instance_;
  delete HandBaseInfo_reflection_;
  delete Processor_300_PokerGetHandHistory_DOWN::default_instance_;
  delete Processor_300_PokerGetHandHistory_DOWN_reflection_;
  delete Processor_1000_RegisterServer_OtherToCore::default_instance_;
  delete Processor_1000_RegisterServer_OtherToCore_reflection_;
  delete Processor_1000_RegisterServer_CoreToOther::default_instance_;
  delete Processor_1000_RegisterServer_CoreToOther_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete ServerInfos::default_instance_;
  delete ServerInfos_reflection_;
  delete Processor_HTMLRegister::default_instance_;
  delete Processor_HTMLRegister_reflection_;
  delete Processor_HTMLRegisterEnterRoom::default_instance_;
  delete Processor_HTMLRegisterEnterRoom_reflection_;
  delete Processor_1003_ChangeUserInfo_ResToCore::default_instance_;
  delete Processor_1003_ChangeUserInfo_ResToCore_reflection_;
  delete Processor_1004_ChangeUserInfo_CoreToOther::default_instance_;
  delete Processor_1004_ChangeUserInfo_CoreToOther_reflection_;
  delete Processor_1005_OnlineInfo_OtherToCore::default_instance_;
  delete Processor_1005_OnlineInfo_OtherToCore_reflection_;
  delete ServerRoomInfo::default_instance_;
  delete ServerRoomInfo_reflection_;
  delete Processor_1006_RoomInfo::default_instance_;
  delete Processor_1006_RoomInfo_reflection_;
  delete Processor_1009_CreateRoom_ResToCore::default_instance_;
  delete Processor_1009_CreateRoom_ResToCore_reflection_;
  delete Processor_1010_CreateRoom_CoreToRoom::default_instance_;
  delete Processor_1010_CreateRoom_CoreToRoom_reflection_;
  delete Processor_1011_ChangeServerProp::default_instance_;
  delete Processor_1011_ChangeServerProp_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Processor_1012_WXPayMsg::default_instance_;
  delete Processor_1012_WXPayMsg_reflection_;
  delete Processor_1100_ShutDown_ConsoleToCore::default_instance_;
  delete Processor_1100_ShutDown_ConsoleToCore_reflection_;
  delete Processor_1101_ShutDown_CoreToOther::default_instance_;
  delete Processor_1101_ShutDown_CoreToOther_reflection_;
  delete Processor_1105_ServerInformation_CoreToConsole::default_instance_;
  delete Processor_1105_ServerInformation_CoreToConsole_reflection_;
  delete Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance_;
  delete Processor_1107_SERVER_RESET_TOURMENT_CREDIT_reflection_;
  delete Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance_;
  delete Processor_1108_SEARCH_CREDIT_RANK_UP_reflection_;
  delete Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance_;
  delete Processor_1108_SEARCH_CREDIT_RANK_DOWN_reflection_;
  delete Processor_1109_PUBLISH_SYS_MESSAGE::default_instance_;
  delete Processor_1109_PUBLISH_SYS_MESSAGE_reflection_;
  delete Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance_;
  delete Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_reflection_;
  delete UserTourCreditInfo::default_instance_;
  delete UserTourCreditInfo_reflection_;
  delete ChatMessages::default_instance_;
  delete ChatMessages_reflection_;
  delete InvitationsForSave::default_instance_;
  delete InvitationsForSave_reflection_;
  delete ChatMessageForSave::default_instance_;
  delete ChatMessageForSave_reflection_;
  delete OldChatMessageForSave::default_instance_;
  delete OldChatMessageForSave_reflection_;
  delete GameRecord::default_instance_;
  delete GameRecord_reflection_;
  delete GameRecordForSave::default_instance_;
  delete GameRecordForSave_reflection_;
  delete CreateRoomInfoForSave::default_instance_;
  delete CreateRoomInfoForSave_reflection_;
  delete ClientUserSetting::default_instance_;
  delete ClientUserSetting_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\003msg\"\232\001\n\021ClientRequestHead\022\016"
    "\n\006UserID\030\001 \001(\005\022\017\n\007Version\030\002 \001(\005\022\037\n\010Langu"
    "age\030\003 \001(\0162\r.msg.Language\022\037\n\010Platform\030\004 \001"
    "(\0162\r.msg.Platform\022\020\n\010TestCode\030\005 \001(\005\022\020\n\010T"
    "imeMark\030\006 \001(\003\"8\n\022ClientResponseHead\022\020\n\010T"
    "estCode\030\001 \001(\005\022\020\n\010TimeMark\030\002 \001(\003\"7\n\021Serve"
    "rMessageHead\022\020\n\010ServerID\030\001 \001(\005\022\020\n\010TimeMa"
    "rk\030\002 \001(\003\"8\n\010Response\022\033\n\006Status\030\001 \001(\0162\013.m"
    "sg.Status\022\017\n\007Message\030\002 \001(\t\"\?\n\014RoomRespon"
    "se\022\016\n\006RoomID\030\001 \001(\005\022\037\n\010Response\030\002 \001(\0132\r.m"
    "sg.Response\"\275\001\n\nClientInfo\022\013\n\003Mac\030\001 \001(\t\022"
    "\014\n\004Imsi\030\002 \001(\t\022\033\n\023screen_height_width\030\003 \001"
    "(\t\022\r\n\005Model\030\004 \001(\t\022\025\n\rSystemVersion\030\005 \001(\t"
    "\022\017\n\007Version\030\006 \001(\005\022\037\n\010Language\030\007 \001(\0162\r.ms"
    "g.Language\022\037\n\010Platform\030\010 \001(\0162\r.msg.Platf"
    "orm\"E\n\rUserLoginInfo\022\020\n\010UserName\030\001 \001(\t\022\020"
    "\n\010PassWord\030\002 \001(\t\022\020\n\010phoneNum\030\003 \001(\t\"Z\n\016Us"
    "erDetailInfo\022\020\n\010NickName\030\001 \001(\t\022\017\n\007PicNam"
    "e\030\002 \001(\t\022\025\n\003Sex\030\003 \001(\0162\010.msg.Sex\022\016\n\006UserId"
    "\030\004 \001(\005\"\310\001\n\030Processor_1_VersionCheck\022\037\n\010R"
    "esponse\030\001 \001(\0132\r.msg.Response\022&\n\rResServe"
    "rInfo\030\002 \001(\0132\017.msg.ServerInfo\022)\n\rVersionS"
    "tatus\030\003 \001(\0162\022.msg.VersionStatus\022\023\n\013Versi"
    "onCode\030\004 \001(\t\022\013\n\003Url\030\005 \001(\t\022\026\n\016IsCheckVers"
    "ion\030\006 \001(\010\"B\n\034Processor_10_LoginCoreServe"
    "r\022\020\n\010UserName\030\001 \001(\t\022\020\n\010Password\030\002 \001(\t\"I\n"
    "\026Processor_10_LoginCore\022\016\n\006UserID\030\001 \001(\005\022"
    "\037\n\010Response\030\002 \001(\0132\r.msg.Response\"\037\n\035Proc"
    "essor_11_CONSOLEHEARTJUMP\"M\n\027Processor_3"
    "0_UploadFile\022\020\n\010FileName\030\001 \001(\t\022\014\n\004File\030\002"
    " \001(\014\022\022\n\nIsCompress\030\003 \001(\010\"D\n\034Processor_31"
    "_DownloadFile_UP\022\020\n\010FileName\030\001 \001(\t\022\022\n\nIs"
    "Compress\030\002 \001(\010\"a\n\036Processor_31_DownloadF"
    "ile_DOWN\022\037\n\010response\030\001 \001(\0132\r.msg.Respons"
    "e\022\014\n\004File\030\002 \001(\014\022\020\n\010FileName\030\003 \001(\t\"9\n%Pro"
    "cessor_97_SendVerificationByUserID\022\020\n\010Us"
    "erName\030\001 \001(\t\"Y\n\032Processor_98_ResetPasswo"
    "rd\022%\n\tLoginInfo\030\001 \001(\0132\022.msg.UserLoginInf"
    "o\022\024\n\014Verification\030\002 \001(\t\"c\n\025Processor_99_"
    "Login_UP\022%\n\tLoginInfo\030\001 \001(\0132\022.msg.UserLo"
    "ginInfo\022#\n\nClientInfo\030\002 \001(\0132\017.msg.Client"
    "Info\"\223\001\n\027Processor_99_Login_DOWN\022\037\n\010Resp"
    "onse\030\001 \001(\0132\r.msg.Response\022\'\n\016FileServerI"
    "nfo\030\002 \001(\0132\017.msg.ServerInfo\022\013\n\003Key\030\003 \001(\t\022"
    "!\n\004User\030\004 \001(\0132\023.msg.UserDetailInfo\"*\n\033Pr"
    "ocessor_100_LoginResource\022\013\n\003Key\030\001 \001(\t\"\230"
    "\002\n Processor_100_LoginResource_Down\022\037\n\010R"
    "esponse\030\001 \001(\0132\r.msg.Response\022=\n\016OfflineM"
    "essage\030\002 \001(\0132%.msg.Processor_161_Receive"
    "ChatMessage\022=\n\016OfflineRequest\030\003 \001(\0132%.ms"
    "g.Processor_123_ReceiveRequestList\022(\n\016Ro"
    "omServerInfo\030\004 \001(\0132\020.msg.ServerInfos\022+\n\016"
    "RoomInfomation\030\005 \001(\0132\023.msg.RoomInfomatio"
    "n\"\312\001\n\016RoomInfomation\022+\n\016CreateRoomInfo\030\001"
    " \003(\0132\023.msg.CreateRoomInfo\0223\n\026TournamentS"
    "izeTemplate\030\002 \003(\0132\023.msg.TournamentInfo\0224"
    "\n\027TournamentSpeedTemplate\030\003 \003(\0132\023.msg.To"
    "urnamentInfo\022 \n\tBlindtime\030\004 \001(\0132\r.msg.Pr"
    "operty\"\313\001\n\010Property\022\014\n\004Name\030\001 \001(\t\022\037\n\010Int"
    "Value\030\002 \001(\0132\r.msg.IntValue\022\021\n\tBoolValue\030"
    "\003 \001(\010\022\023\n\013StringValue\030\004 \001(\t\022\023\n\013DisplayNam"
    "e\030\005 \001(\t\022\037\n\004Type\030\006 \001(\0162\021.msg.PropertyType"
    "\022!\n\tEnumValue\030\007 \001(\0132\016.msg.EnumValue\022\017\n\007P"
    "rimary\030\010 \001(\010\"I\n\010IntValue\022\r\n\005Value\030\001 \001(\005\022"
    "\013\n\003Max\030\002 \001(\t\022\013\n\003Min\030\003 \001(\t\022\024\n\014DefaultValu"
    "e\030\004 \003(\005\"8\n\tEnumValue\022\r\n\005Value\030\001 \001(\005\022\034\n\005I"
    "tems\030\002 \003(\0132\r.msg.EnumItem\"\'\n\010EnumItem\022\r\n"
    "\005Value\030\001 \001(\005\022\014\n\004Text\030\002 \001(\t\"9\n\026Processor_"
    "103_FeedBack\022\037\n\010FeedBack\030\001 \001(\0132\r.msg.Fee"
    "dBack\"{\n\026Processor_104_Register\022%\n\tLogin"
    "Info\030\001 \001(\0132\022.msg.UserLoginInfo\022\017\n\007Refere"
    "e\030\002 \001(\t\022\023\n\013PhoneNumber\030\003 \001(\t\022\024\n\014Verifica"
    "tion\030\004 \001(\t\"+\n\024Processor_105_Device\022\023\n\013de"
    "vicetoken\030\001 \001(\t\"E\n\"Processor_106_Receive"
    "IOSPayReceipt\022\017\n\007Receipt\030\001 \001(\t\022\016\n\006UserID"
    "\030\002 \001(\005\"\203\001\n\'Processor_106_ReceiveIOSPayRe"
    "ceipt_Down\022\037\n\010Response\030\001 \001(\0132\r.msg.Respo"
    "nse\022\022\n\nReceiptMd5\030\002 \001(\t\022#\n\004type\030\003 \001(\0162\025."
    "msg.VerificationType\"Y\n\010GoodInfo\022\n\n\002ID\030\001"
    " \001(\t\022\014\n\004Name\030\002 \001(\t\022\023\n\013Description\030\003 \001(\t\022"
    "\r\n\005Price\030\004 \001(\005\022\017\n\007PicName\030\005 \001(\t\">\n\032Proce"
    "ssor_107_GetGoodsInfo\022 \n\tGoodsInfo\030\001 \003(\013"
    "2\r.msg.GoodInfo\"7\n\025Processor_108_BuyGood"
    "\022\016\n\006GoodID\030\001 \001(\005\022\016\n\006UserID\030\002 \001(\005\"=\n\030Proc"
    "essor_109_AndroidPay\022\016\n\006UserID\030\001 \001(\005\022\021\n\t"
    "ProductID\030\002 \001(\t\"\205\001\n\034Processor_109_Androi"
    "dPayDown\022\r\n\005appID\030\001 \001(\t\022\021\n\tpartnerID\030\002 \001"
    "(\t\022\020\n\010prepayId\030\003 \001(\t\022\020\n\010nonceStr\030\004 \001(\t\022\021"
    "\n\ttimeStamp\030\005 \001(\t\022\014\n\004sign\030\006 \001(\t\";\n\010FeedB"
    "ack\022\020\n\010Describe\030\001 \001(\t\022\014\n\004Type\030\002 \001(\t\022\017\n\007P"
    "icName\030\003 \003(\t\"c\n\017UserGameSetting\022\020\n\010GameN"
    "ame\030\001 \001(\t\022\035\n\006GameId\030\002 \001(\0162\r.msg.RoomType"
    "\022\037\n\010Property\030\003 \003(\0132\r.msg.Property\"=\n\020Use"
    "rGameSettings\022)\n\013GameSetting\030\001 \003(\0132\024.msg"
    ".UserGameSetting\"\244\001\n\034Processor_111_GetUs"
    "erSetting\022\037\n\010Response\030\001 \001(\0132\r.msg.Respon"
    "se\022+\n\014GameSettings\030\003 \001(\0132\025.msg.UserGameS"
    "ettings\022\017\n\007Diamond\030\004 \001(\005\022\020\n\010HitPoint\030\005 \001"
    "(\005\022\023\n\013PhoneNumber\030\006 \001(\t\"\246\001\n\037Processor_11"
    "2_ChangeUserSetting\022+\n\016UserDetailInfo\030\001 "
    "\001(\0132\023.msg.UserDetailInfo\022)\n\rUserLoginInf"
    "o\030\002 \001(\0132\022.msg.UserLoginInfo\022+\n\014GameSetti"
    "ngs\030\003 \001(\0132\025.msg.UserGameSettings\"E\n\"Proc"
    "essor_113_GetUserPermission_UP\022\017\n\007GroupI"
    "D\030\001 \001(\005\022\016\n\006UserID\030\002 \001(\005\"P\n$Processor_113"
    "_GetUserPermission_DOWN\022(\n\nPermission\030\001 "
    "\001(\0132\024.msg.GroupPermission\"Z\n\036Processor_1"
    "14_ChangePermission\022\016\n\006UserID\030\001 \001(\005\022(\n\nP"
    "ermission\030\002 \001(\0132\024.msg.GroupPermission\"2\n"
    "\017GroupPermission\022\017\n\007GroupID\030\001 \001(\005\022\016\n\006Cre"
    "dit\030\002 \001(\005\"3\n Processor_115_GetGroupSetti"
    "ng_UP\022\017\n\007GroupID\030\001 \001(\005\"H\n\"Processor_115_"
    "GetGroupSetting_DOWN\022\"\n\007Setting\030\001 \001(\0132\021."
    "msg.GroupSetting\"F\n Processor_116_Change"
    "GroupSetting\022\"\n\007Setting\030\001 \001(\0132\021.msg.Grou"
    "pSetting\"5\n\036Processor_118_SendVerificati"
    "on\022\023\n\013PhoneNumber\030\001 \001(\t\"D\n\027Processor_119"
    "_BindPhone\022\023\n\013PhoneNumber\030\001 \001(\t\022\024\n\014Verif"
    "ication\030\002 \001(\t\"4\n\014GroupSetting\022\017\n\007GroupID"
    "\030\001 \001(\005\022\023\n\013ReceivePush\030\002 \001(\010\"K\n\nFriendInf"
    "o\022+\n\016UserDetailInfo\030\001 \001(\0132\023.msg.UserDeta"
    "ilInfo\022\020\n\010IsOnline\030\002 \001(\010\"c\n\033Processor_12"
    "0_GetFriendList\022\037\n\010Response\030\001 \001(\0132\r.msg."
    "Response\022#\n\nFriendInfo\030\002 \003(\0132\017.msg.Frien"
    "dInfo\"1\n\033Processor_121_SearchUser_UP\022\022\n\n"
    "SearchName\030\001 \001(\t\"m\n\035Processor_121_Search"
    "User_DOWN\022\037\n\010Response\030\001 \001(\0132\r.msg.Respon"
    "se\022+\n\016UserDetailInfo\030\002 \003(\0132\023.msg.UserDet"
    "ailInfo\":\n\031Processor_122_SendRequest\022\035\n\007"
    "Request\030\001 \003(\0132\014.msg.Request\"A\n Processor"
    "_123_ReceiveRequestList\022\035\n\007Request\030\001 \003(\013"
    "2\014.msg.Request\"}\n\nInvitation\022\035\n\007Request\030"
    "\001 \001(\0132\014.msg.Request\022)\n\rSendingStatus\030\002 \001"
    "(\0162\022.msg.MessageStatus\022%\n\006Status\030\003 \001(\0162\025"
    ".msg.InvitationStatus\"\231\001\n\007Request\022\n\n\002ID\030"
    "\001 \001(\005\022+\n\016UserDetailInfo\030\002 \001(\0132\023.msg.User"
    "DetailInfo\022\022\n\nReceiverID\030\003 \001(\005\022!\n\tGroupI"
    "nfo\030\004 \001(\0132\016.msg.GroupInfo\022\036\n\004Type\030\005 \001(\0162"
    "\020.msg.RequestType\"@\n\031Processor_124_DealR"
    "equest\022\020\n\010Accepted\030\001 \001(\010\022\021\n\tRequestID\030\002 "
    "\001(\005\"f\n\036Processor_124_DealRequest_DOWN\022\037\n"
    "\010Response\030\001 \001(\0132\r.msg.Response\022\021\n\tReques"
    "tID\030\002 \001(\005\022\020\n\010Accepted\030\003 \001(\010\",\n\032Processor"
    "_125_DeleteFriend\022\016\n\006UserId\030\001 \001(\005\"@\n\035Pro"
    "cessor_126_Set_MomentBlock\022\016\n\006UserId\030\001 \001"
    "(\005\022\017\n\007IsBlock\030\002 \001(\010\"A\n*Processor_127_Sea"
    "rchFriendByPhoneNumber_UP\022\023\n\013PhoneNumber"
    "\030\001 \003(\t\"`\n\023FriendByPhoneNumber\022\023\n\013PhoneNu"
    "mber\030\001 \001(\t\022\"\n\005Users\030\002 \001(\0132\023.msg.UserDeta"
    "ilInfo\022\020\n\010IsFriend\030\003 \001(\010\"Y\n,Processor_12"
    "7_SearchFriendByPhoneNumber_DOWN\022)\n\007Frie"
    "nds\030\001 \003(\0132\030.msg.FriendByPhoneNumber\"L\n&P"
    "rocessor_128_GetMomentBlockUsers_DOWN\022\"\n"
    "\005Users\030\001 \003(\0132\023.msg.UserDetailInfo\"<\n\032Pro"
    "cessor_130_Send_Diamond\022\016\n\006UserID\030\001 \001(\005\022"
    "\016\n\006Amount\030\002 \001(\005\"\312\001\n\013ChatMessage\022+\n\016UserD"
    "etailInfo\030\001 \001(\0132\023.msg.UserDetailInfo\022\017\n\007"
    "GroupID\030\002 \001(\005\022\025\n\rReceiveUserID\030\003 \001(\005\022%\n\013"
    "MessageInfo\030\004 \001(\0132\020.msg.MessageInfo\022\017\n\007S"
    "ubTime\030\005 \001(\t\022\n\n\002ID\030\006 \001(\005\022\"\n\006Status\030\007 \001(\016"
    "2\022.msg.MessageStatus\"\217\002\n\013MessageInfo\022\036\n\004"
    "Type\030\001 \001(\0162\020.msg.MessageType\022&\n\010TextInfo"
    "\030\002 \001(\0132\024.msg.TextMessageInfo\022$\n\007PicInfo\030"
    "\003 \001(\0132\023.msg.PicMessageInfo\022(\n\tVoiceInfo\030"
    "\004 \001(\0132\025.msg.VoiceMessageInfo\0222\n\016CreateRo"
    "omInfo\030\005 \001(\0132\032.msg.CreateRoomMessageInfo"
    "\0224\n\017GroupNoticeInfo\030\006 \001(\0132\033.msg.GroupNot"
    "iceMessageInfo\"\037\n\017TextMessageInfo\022\014\n\004Tex"
    "t\030\001 \001(\t\"!\n\016PicMessageInfo\022\017\n\007PicName\030\001 \001"
    "(\t\"8\n\020VoiceMessageInfo\022\021\n\tVoiceName\030\001 \001("
    "\t\022\021\n\tVoiceTime\030\002 \001(\005\"\212\001\n\025CreateRoomMessa"
    "geInfo\022\014\n\004Text\030\001 \001(\t\022\016\n\006RoomID\030\002 \001(\005\022\033\n\004"
    "Type\030\004 \001(\0162\r.msg.RoomType\022\020\n\010RoomName\030\005 "
    "\001(\t\022$\n\007Creater\030\006 \001(\0132\023.msg.UserDetailInf"
    "o\"\257\001\n\026GroupNoticeMessageInfo\022-\n\017InviteIn"
    "toGroup\030\001 \001(\0132\024.msg.InviteIntoGroup\022!\n\tI"
    "ntoGroup\030\002 \001(\0132\016.msg.IntoGroup\022\024\n\014GroupU"
    "serNum\030\003 \001(\005\022\014\n\004Text\030\004 \001(\t\022\037\n\010OutGroup\030\005"
    " \001(\0132\r.msg.OutGroup\"]\n\017InviteIntoGroup\022$"
    "\n\007Inviter\030\001 \001(\0132\023.msg.UserDetailInfo\022$\n\007"
    "Invitee\030\002 \001(\0132\023.msg.UserDetailInfo\".\n\010Ou"
    "tGroup\022\"\n\005outer\030\001 \001(\0132\023.msg.UserDetailIn"
    "fo\"7\n\tIntoGroup\022*\n\rIntoGroupUser\030\001 \001(\0132\023"
    ".msg.UserDetailInfo\"\206\002\n\tGroupInfo\022\017\n\007Gro"
    "upId\030\001 \001(\005\022\021\n\tGroupName\030\002 \001(\t\022\024\n\014GroupCo"
    "mment\030\003 \001(\t\022\016\n\006Hidden\030\004 \001(\005\022\020\n\010GroupPic\030"
    "\005 \001(\t\022(\n\nUserStatus\030\006 \001(\0162\024.msg.GroupUse"
    "rStatus\022\034\n\004Type\030\007 \001(\0162\016.msg.GroupType\022\024\n"
    "\014GroupOwnerID\030\010 \001(\005\022\023\n\013RankVisible\030\t \001(\010"
    "\022\027\n\017AllowCreateRoom\030\n \001(\010\022\021\n\tAllowChat\030\013"
    " \001(\010\">\n\031Processor_140_CreateGroup\022!\n\tGro"
    "upInfo\030\001 \001(\0132\016.msg.GroupInfo\"d\n\036Processo"
    "r_140_CreateGroup_Down\022\037\n\010Response\030\001 \001(\013"
    "2\r.msg.Response\022!\n\tGroupInfo\030\002 \001(\0132\016.msg"
    ".GroupInfo\"<\n\027Processor_141_EditGroup\022!\n"
    "\tGroupInfo\030\001 \001(\0132\016.msg.GroupInfo\"V\n\034Proc"
    "essor_142_SearchGroup_UP\022\"\n\004Type\030\001 \001(\0162\024"
    ".msg.GroupSearchType\022\022\n\nSearchName\030\002 \001(\t"
    "\"d\n\036Processor_142_SearchGroup_DOWN\022\037\n\010Re"
    "sponse\030\001 \001(\0132\r.msg.Response\022!\n\tGroupInfo"
    "\030\002 \003(\0132\016.msg.GroupInfo\"B\n\037Processor_144_"
    "KickUserFromGroup\022\017\n\007GroupId\030\001 \001(\005\022\016\n\006Us"
    "erID\030\002 \001(\005\"0\n\035Processor_145_GetGroupInfo"
    "_UP\022\017\n\007GroupId\030\001 \001(\005\"{\n\037Processor_145_Ge"
    "tGroupInfo_DOWN\022\037\n\010Response\030\001 \001(\0132\r.msg."
    "Response\022!\n\tGroupInfo\030\002 \001(\0132\016.msg.GroupI"
    "nfo\022\024\n\014GroupUserNum\030\003 \001(\005\"6\n#Processor_1"
    "46_GetGroupDetailInfo_UP\022\017\n\007GroupID\030\001 \001("
    "\005\"f\n\rGroupUserInfo\022+\n\016UserDetailInfo\030\001 \001"
    "(\0132\023.msg.UserDetailInfo\022(\n\nUserStatus\030\002 "
    "\001(\0162\024.msg.GroupUserStatus\"\204\001\n\022GroupManag"
    "eSetting\022\016\n\006IsClub\030\001 \001(\010\022\035\n\025CreditRefill"
    "AfterGame\030\002 \001(\010\022\017\n\007CanChat\030\003 \001(\010\022\031\n\021CanS"
    "eeOtherMember\030\004 \001(\010\022\023\n\013RakePercent\030\005 \001(\005"
    "\"\224\002\n%Processor_146_GetGroupDetailInfo_DO"
    "WN\022\037\n\010Response\030\001 \001(\0132\r.msg.Response\022!\n\tG"
    "roupInfo\030\002 \001(\0132\016.msg.GroupInfo\022)\n\rGroupU"
    "serInfo\030\003 \003(\0132\022.msg.GroupUserInfo\022\"\n\007Set"
    "ting\030\004 \001(\0132\021.msg.GroupSetting\022(\n\nPermiss"
    "ion\030\005 \001(\0132\024.msg.GroupPermission\022.\n\rManag"
    "eSetting\030\006 \001(\0132\027.msg.GroupManageSetting\""
    "`\n#Processor_147_SetGroupManageSetting\022\017"
    "\n\007GroupID\030\001 \001(\005\022(\n\007Setting\030\002 \001(\0132\027.msg.G"
    "roupManageSetting\"O\n\033Processor_148_SetGr"
    "oupAdmin\022\017\n\007GroupId\030\001 \001(\005\022\016\n\006UserID\030\002 \001("
    "\005\022\017\n\007IsAdmin\030\003 \001(\010\"E\n\014RoomTypeInfo\022\037\n\010Ro"
    "omType\030\001 \001(\0162\r.msg.RoomType\022\024\n\014RoomTypeN"
    "ame\030\002 \001(\t\"\332\002\n\010RoomInfo\022\016\n\006RoomId\030\001 \001(\005\022#"
    "\n\nRoomStatus\030\002 \001(\0162\017.msg.RoomStatus\022\020\n\010R"
    "oomName\030\003 \001(\t\022#\n\010RoomType\030\004 \001(\0132\021.msg.Ro"
    "omTypeInfo\022\020\n\010RoomNote\030\005 \001(\t\022\021\n\tPlayerNu"
    "m\030\006 \001(\005\022\024\n\014MaxPlayerNum\030\007 \001(\005\022!\n\tGroupIn"
    "fo\030\010 \001(\0132\016.msg.GroupInfo\022\024\n\014IsTournament"
    "\030\t \001(\010\022\021\n\tStartTime\030\n \001(\003\022(\n\013CreaterInfo"
    "\030\013 \001(\0132\023.msg.UserDetailInfo\022\017\n\007EndTime\030\014"
    " \001(\003\022\016\n\006RoomIp\030\r \001(\t\022\020\n\010RoomPort\030\016 \001(\005\"/"
    "\n\034Processor_150_GetRoomInfo_UP\022\017\n\007GroupI"
    "d\030\001 \001(\005\"\207\001\n\036Processor_150_GetRoomInfo_DO"
    "WN\022\037\n\010Response\030\001 \001(\0132\r.msg.Response\022#\n\nR"
    "oomServer\030\002 \001(\0132\017.msg.ServerInfo\022\037\n\010Room"
    "Info\030\003 \003(\0132\r.msg.RoomInfo\"q\n\016CreateRoomI"
    "nfo\022#\n\010RoomType\030\001 \001(\0132\021.msg.RoomTypeInfo"
    "\022\037\n\010RoomProp\030\002 \001(\0132\r.msg.RoomProp\022\031\n\021Sup"
    "portTournament\030\003 \001(\010\"d\n\nBlindLevel\022\022\n\nSm"
    "allBlind\030\001 \001(\005\022\020\n\010BigBlind\030\002 \001(\005\022\014\n\004Ante"
    "\030\003 \001(\005\022\020\n\010LastTime\030\004 \001(\005\022\020\n\010RestTime\030\005 \001"
    "(\005\"1\n\017TournamentLevel\022\036\n\005Level\030\001 \003(\0132\017.m"
    "sg.BlindLevel\"X\n\nPrizeLevel\022\024\n\014PrizePerc"
    "ent\030\001 \001(\005\022\017\n\007MinRank\030\002 \001(\005\022\017\n\007MaxRank\030\003 "
    "\001(\005\022\022\n\nOtherPrize\030\004 \001(\t\"1\n\017TournamentPri"
    "ze\022\036\n\005Level\030\001 \003(\0132\017.msg.PrizeLevel\"\365\002\n\016T"
    "ournamentInfo\022\021\n\tStartTime\030\001 \001(\t\022-\n\017Tour"
    "namentLevel\030\002 \001(\0132\024.msg.TournamentLevel\022"
    "-\n\017TournamentPrize\030\003 \001(\0132\024.msg.Tournamen"
    "tPrize\022\024\n\014MinPlayerNum\030\004 \001(\005\022\024\n\014MaxPlaye"
    "rNum\030\005 \001(\005\022\026\n\016PlayerPerTable\030\006 \001(\005\022\r\n\005Bu"
    "yin\030\007 \001(\005\022\017\n\007StartBB\030\010 \001(\005\022\025\n\rMaxAddonLe"
    "vel\030\t \001(\005\022\024\n\014PrizePercent\030\n \001(\005\022\022\n\nActio"
    "nTime\030\013 \001(\005\022\020\n\010RoomName\030\014 \001(\t\022\024\n\014Templat"
    "eName\030\r \001(\t\022\022\n\nIsSitAndGo\030\016 \001(\010\022\021\n\tBlind"
    "Time\030\017 \001(\005\"+\n\010RoomProp\022\037\n\010Property\030\001 \003(\013"
    "2\r.msg.Property\"N\n\037Processor_151_GetRoom"
    "Infomation\022+\n\016RoomInfomation\030\001 \001(\0132\023.msg"
    ".RoomInfomation\"\211\001\n\030Processor_152_Create"
    "Room\022\037\n\010RoomInfo\030\001 \001(\0132\r.msg.RoomInfo\022\037\n"
    "\010RoomProp\030\002 \001(\0132\r.msg.RoomProp\022+\n\016Tourna"
    "mentInfo\030\003 \001(\0132\023.msg.TournamentInfo\"P\n\035P"
    "rocessor_152_CreateRoom_down\022\016\n\006RoomID\030\001"
    " \001(\005\022\037\n\010response\030\002 \001(\0132\r.msg.Response\"0\n"
    "\036Processor_154_CancelTournament\022\016\n\006RoomI"
    "D\030\001 \001(\005\"F\n\035Processor_160_SendChatMessage"
    "\022%\n\013ChatMessage\030\001 \001(\0132\020.msg.ChatMessage\""
    "Y\n\"Processor_160_SendChatMessage_Down\022\037\n"
    "\010Response\030\001 \001(\0132\r.msg.Response\022\022\n\nSubmit"
    "Time\030\002 \001(\t\"I\n Processor_161_ReceiveChatM"
    "essage\022%\n\013ChatMessage\030\001 \003(\0132\020.msg.ChatMe"
    "ssage\"8\n#Processor_161_ReceiveChatMessag"
    "e_UP\022\021\n\tLastMsgID\030\001 \001(\005\"\216\001\n Processor_17"
    "0_GetHistoryScore_Up\022\037\n\010RoomType\030\001 \001(\0162\r"
    ".msg.RoomType\022\024\n\014IsTournament\030\002 \001(\010\022\021\n\tS"
    "tartTime\030\003 \001(\t\022\017\n\007EndTime\030\004 \001(\t\022\017\n\007group"
    "id\030\005 \001(\005\"\227\001\n\014HistoryScore\022\016\n\006RoomID\030\001 \001("
    "\005\022\017\n\007EndTime\030\002 \001(\t\022\020\n\010RoomName\030\003 \001(\t\022\r\n\005"
    "Score\030\004 \001(\005\022\020\n\010PlayTime\030\005 \001(\003\022\021\n\tPlayHan"
    "ds\030\006 \001(\005\022\021\n\tGroupName\030\007 \001(\t\022\r\n\005Label\030\010 \003"
    "(\t\"F\n\"Processor_170_GetHistoryScore_Down"
    "\022 \n\005Score\030\001 \003(\0132\021.msg.HistoryScore\"k\n!Pr"
    "ocessor_171_GetGroupUserRank_UP\022\017\n\007Group"
    "Id\030\001 \001(\005\022\037\n\010RoomType\030\002 \001(\0162\r.msg.RoomTyp"
    "e\022\024\n\014IsTournament\030\003 \001(\010\"\250\001\n#Processor_17"
    "1_GetGroupUserRank_DOWN\022!\n\tGroupInfo\030\001 \001"
    "(\0132\016.msg.GroupInfo\022\037\n\010RoomType\030\002 \001(\0162\r.m"
    "sg.RoomType\022\024\n\014IsTournament\030\003 \001(\010\022\'\n\014Pla"
    "yerScores\030\004 \001(\0132\021.msg.PlayerScores\">\n\034Pr"
    "ocessor_181_JoinTournament\022\016\n\006RoomID\030\001 \001"
    "(\005\022\016\n\006IsJoin\030\002 \001(\010\"/\n\035Processor_182_Tour"
    "namentStart\022\016\n\006RoomID\030\001 \001(\005\";\n\034Processor"
    "_190_ReceiveMessage\022\017\n\007Message\030\001 \001(\t\022\n\n\002"
    "id\030\002 \001(\005\"=\n\037Processor_190_ReceiveMessage"
    "_UP\022\016\n\006choice\030\001 \001(\010\022\n\n\002id\030\002 \001(\005\"[\n\032Proce"
    "ssor_191_NotifyChange\022\022\n\nRoomChange\030\001 \001("
    "\010\022\024\n\014FriendChange\030\002 \001(\010\022\023\n\013GroupChange\030\003"
    " \001(\010\"\312\001\n\006Moment\022%\n\010UserInfo\030\001 \001(\0132\023.msg."
    "UserDetailInfo\022\020\n\010MomentId\030\002 \001(\005\022#\n\nMome"
    "ntInfo\030\003 \001(\0132\017.msg.MomentInfo\022+\n\013Display"
    "Type\030\004 \001(\0162\026.msg.MomentDisplayType\022\014\n\004Ti"
    "me\030\005 \001(\003\022\'\n\014CommentInfos\030\006 \001(\0132\021.msg.Com"
    "mentInfos\"5\n\014CommentInfos\022%\n\013CommentInfo"
    "\030\001 \003(\0132\020.msg.CommentInfo\"Q\n\nMomentInfo\022\022"
    "\n\nMomentType\030\001 \001(\005\022/\n\020NormalMomentInfo\030\002"
    " \001(\0132\025.msg.NormalMomentInfo\"H\n\020NormalMom"
    "entInfo\022\023\n\013WordContent\030\001 \001(\t\022\017\n\007PicName\030"
    "\002 \003(\t\022\016\n\006HandId\030\003 \001(\005\":\n\033Processor_200_P"
    "ublishMoment\022\033\n\006Moment\030\001 \001(\0132\013.msg.Momen"
    "t\"d\n\032Processor_201_GetMoment_UP\022\020\n\010Momen"
    "tId\030\001 \001(\005\022\016\n\006IsDown\030\002 \001(\010\022$\n\004Type\030\003 \001(\0162"
    "\026.msg.MomentDisplayType\";\n\034Processor_201"
    "_GetMoment_DOWN\022\033\n\006Moment\030\001 \003(\0132\013.msg.Mo"
    "ment\".\n\032Processor_202_DeleteMoment\022\020\n\010Mo"
    "mentId\030\001 \001(\005\"\301\001\n\013CommentInfo\022\020\n\010MomentId"
    "\030\001 \001(\005\022\021\n\tCommentId\030\002 \001(\005\022\036\n\004Type\030\003 \001(\0162"
    "\020.msg.CommentType\022%\n\010UserInfo\030\004 \001(\0132\023.ms"
    "g.UserDetailInfo\022\017\n\007Content\030\005 \001(\t\022\014\n\004Tim"
    "e\030\006 \001(\003\022\025\n\rparentComment\030\007 \001(\005\022\020\n\010isDele"
    "te\030\010 \001(\010\"E\n\034Processor_203_PublishComment"
    "\022%\n\013CommentInfo\030\001 \001(\0132\020.msg.CommentInfo\""
    "/\n\033Processor_204_GetComment_UP\022\020\n\010Moment"
    "Id\030\001 \001(\005\"F\n\035Processor_204_GetComment_DOW"
    "N\022%\n\013CommentInfo\030\001 \003(\0132\020.msg.CommentInfo"
    "\"A\n\032Processor_205_DeleteMoment\022\020\n\010Moment"
    "Id\030\001 \001(\005\022\021\n\tCommentId\030\002 \001(\005\")\n\032Processor"
    "_400_LoginRoom_UP\022\013\n\003Key\030\001 \001(\t\"O\n\034Proces"
    "sor_400_LoginRoom_DOWN\022\037\n\010Response\030\001 \001(\013"
    "2\r.msg.Response\022\016\n\006RoomID\030\002 \003(\005\")\n\027Proce"
    "ssor_410_EnterRoom\022\016\n\006RoomId\030\001 \001(\005\"\264\001\n\034P"
    "rocessor_410_EnterRoom_DOWN\022\037\n\010Response\030"
    "\001 \001(\0132\r.msg.Response\022+\n\016TournamentInfo\030\002"
    " \001(\0132\023.msg.TournamentInfo\022%\n\010UserInfo\030\003 "
    "\003(\0132\023.msg.UserDetailInfo\022\037\n\010RoomInfo\030\004 \001"
    "(\0132\r.msg.RoomInfo\"g\n\032Processor_411_SendS"
    "eatInfo\022\016\n\006RoomId\030\001 \001(\005\022)\n\rSittingStatus"
    "\030\002 \001(\0162\022.msg.SittingStatus\022\016\n\006SitNum\030\003 \001"
    "(\005\"Z\n\037Processor_411_SendSeatInfo_Down\022\037\n"
    "\010Response\030\001 \001(\0132\r.msg.Response\022\026\n\016IsHitN"
    "otEnough\030\002 \001(\010\"h\n\017PlayerSitStatus\022!\n\004Inf"
    "o\030\001 \001(\0132\023.msg.UserDetailInfo\022\"\n\006Status\030\002"
    " \001(\0162\022.msg.SittingStatus\022\016\n\006SitNum\030\003 \001(\005"
    "\"^\n\035Processor_412_ReceiveSeatInfo\022\016\n\006Roo"
    "mId\030\001 \001(\005\022-\n\017PlayerSitStatus\030\002 \003(\0132\024.msg"
    ".PlayerSitStatus\"d\n\036Processor_413_Receiv"
    "eGameStart\022\016\n\006RoomId\030\001 \001(\005\022\017\n\007Message\030\002 "
    "\001(\t\022\021\n\tDealerPos\030\003 \001(\005\022\016\n\006HandID\030\004 \001(\005\"."
    "\n\034Processor_414_ReceiveGameEnd\022\016\n\006RoomId"
    "\030\001 \001(\005\"1\n\037Processor_415_DisableAutoActio"
    "n\022\016\n\006RoomId\030\001 \001(\005\"S\n\rActionRequest\022\026\n\016Ac"
    "tionPlayerId\030\001 \001(\005\022\021\n\tCountDown\030\002 \001(\005\022\027\n"
    "\017IsUsingTimeBank\030\003 \001(\010\"c\n&Processor_417_"
    "ReceiveOtherPlayerAction\022\016\n\006RoomId\030\001 \001(\005"
    "\022)\n\rActionRequest\030\002 \001(\0132\022.msg.ActionRequ"
    "est\"0\n\036Processor_420_PokerGetScore_UP\022\016\n"
    "\006RoomId\030\001 \001(\005\"\267\001\n\013PlayerScore\022+\n\016UserDet"
    "ailInfo\030\001 \001(\0132\023.msg.UserDetailInfo\022\022\n\nTo"
    "talBuyin\030\002 \001(\005\022\020\n\010TotalWin\030\003 \001(\005\022\014\n\004Rank"
    "\030\004 \001(\005\022\022\n\nOtherPrize\030\005 \001(\t\022\020\n\010PlayTime\030\006"
    " \001(\003\022\021\n\tPlayHands\030\007 \001(\005\022\016\n\006HPLost\030\010 \001(\005\""
    "/\n\014PlayerScores\022\037\n\005Score\030\001 \003(\0132\020.msg.Pla"
    "yerScore\"\327\001\n Processor_420_PokerGetScore"
    "_DOWN\022\016\n\006RoomID\030\001 \001(\005\022\020\n\010RoomName\030\002 \001(\t\022"
    "\020\n\010RoomNote\030\003 \001(\t\022\014\n\004Time\030\004 \001(\t\022\021\n\tHandC"
    "ount\030\005 \001(\005\022\'\n\014PlayerScores\030\006 \001(\0132\021.msg.P"
    "layerScores\022\037\n\010RoomType\030\007 \001(\0162\r.msg.Room"
    "Type\022\024\n\014IsTournament\030\010 \001(\010\"J\n\033Processor_"
    "430_SendGameVoice\022\016\n\006RoomId\030\001 \001(\005\022\r\n\005Voi"
    "ce\030\002 \001(\t\022\014\n\004Time\030\003 \001(\t\"]\n\036Processor_431_"
    "ReceiveGameVoice\022\016\n\006RoomId\030\001 \001(\005\022\016\n\006User"
    "ID\030\002 \001(\005\022\r\n\005Voice\030\003 \001(\t\022\014\n\004Time\030\004 \001(\t\"N\n"
    "\033Processor_440_SetGameStatus\022\016\n\006RoomId\030\001"
    " \001(\005\022\037\n\006status\030\002 \001(\0162\017.msg.GameStatus\">\n"
    "\030Processor_441_KickPlayer\022\016\n\006RoomId\030\001 \001("
    "\005\022\022\n\nKickUserID\030\002 \001(\005\"R\n\037Processor_442_R"
    "eceiveGameStatus\022\016\n\006RoomId\030\001 \001(\005\022\037\n\006stat"
    "us\030\002 \001(\0162\017.msg.GameStatus\"0\n\036Processor_4"
    "90_ReceiveRoomClose\022\016\n\006RoomId\030\001 \001(\005\"C\n P"
    "rocessor_491_ReceiveRoomMessage\022\016\n\006RoomI"
    "d\030\001 \001(\005\022\017\n\007Message\030\002 \001(\t\";\n\034Processor_49"
    "5_ReceiveRequest\022\017\n\007message\030\001 \001(\t\022\n\n\002id\030"
    "\002 \001(\005\"8\n\032Processor_496_ReplyRequest\022\016\n\006c"
    "hoice\030\001 \001(\010\022\n\n\002id\030\002 \001(\005\"\364\001\n\016CommonRoomIn"
    "fo\022\017\n\007OwnerID\030\001 \001(\005\022\037\n\006Status\030\002 \001(\0162\017.ms"
    "g.GameStatus\022\022\n\nMaxSeatNum\030\003 \001(\005\022\016\n\006Hand"
    "ID\030\004 \001(\005\022\021\n\tTableNote\030\005 \001(\t\022\037\n\010RoomType\030"
    "\006 \001(\0162\r.msg.RoomType\022\016\n\006RoomId\030\007 \001(\005\022\017\n\007"
    "GroupId\030\010 \001(\005\022\021\n\tDealerPos\030\t \001(\005\022\021\n\tIsMa"
    "nager\030\n \001(\010\022\021\n\tIsPlaying\030\013 \001(\010\"\210\001\n\020Commo"
    "nPlayerInfo\022%\n\010UserInfo\030\001 \001(\0132\023.msg.User"
    "DetailInfo\022)\n\rSittingStatus\030\002 \001(\0162\022.msg."
    "SittingStatus\022\016\n\006SitNum\030\003 \001(\005\022\022\n\nAutoAct"
    "ion\030\004 \001(\010\"\255\002\n\035Processor_500_PokerRefresh"
    "All\022+\n\016CommonRoomInfo\030\001 \001(\0132\023.msg.Common"
    "RoomInfo\022\016\n\006MinBuy\030\002 \001(\005\022\016\n\006MaxBuy\030\003 \001(\005"
    "\022\017\n\007BuyUnit\030\004 \001(\005\022+\n\nPropUpdate\030\005 \001(\0132\027."
    "msg.TableAndUserUpdate\022)\n\010Settings\030\006 \001(\013"
    "2\027.msg.PokerPlayerSetting\022.\n\rActionReque"
    "st\030\007 \001(\0132\027.msg.PokerActionRequest\022\024\n\014IsT"
    "ournament\030\010 \001(\010\022\020\n\010ShowCard\030\t \003(\010\"d\n\022Pok"
    "erPlayerSetting\022\020\n\010AutoCall\030\001 \001(\010\022\022\n\nCal"
    "lOrFold\030\002 \001(\010\022\020\n\010Straddle\030\003 \001(\010\022\026\n\016Sitou"
    "tNextHand\030\004 \001(\010\"\305\002\n\017PokerPlayerInfo\022)\n\nP"
    "layerInfo\030\020 \001(\0132\025.msg.CommonPlayerInfo\022\021"
    "\n\tHoleCards\030\004 \003(\005\022\020\n\010BetChips\030\005 \001(\005\022\r\n\005C"
    "hips\030\006 \001(\005\022\'\n\014ActionStatus\030\007 \001(\0162\021.msg.A"
    "ctionStatus\022\022\n\nHiHandType\030\010 \001(\t\022\022\n\nLoHan"
    "dType\030\t \001(\t\022\017\n\007HiCards\030\n \003(\005\022\017\n\007LoCards\030"
    "\013 \003(\005\022\030\n\020SecondHiHandType\030\014 \001(\t\022\030\n\020Secon"
    "dLoHandType\030\r \001(\t\022\025\n\rSecondHiCards\030\016 \003(\005"
    "\022\025\n\rSecondLoCards\030\017 \003(\005\"X\n\tTableInfo\022\021\n\t"
    "HoleCards\030\001 \003(\005\022\027\n\017SecondHoleCards\030\002 \003(\005"
    "\022\r\n\005Chips\030\003 \001(\005\022\020\n\010BigBlind\030\004 \001(\005\"f\n\022Tab"
    "leAndUserUpdate\022-\n\017PokerPlayerInfo\030\001 \003(\013"
    "2\024.msg.PokerPlayerInfo\022!\n\tTableInfo\030\002 \001("
    "\0132\016.msg.TableInfo\"\275\001\n\022PokerActionRequest"
    "\022)\n\rActionRequest\030\001 \001(\0132\022.msg.ActionRequ"
    "est\022\'\n\014ActionChoice\030\002 \001(\0162\021.msg.ActionCh"
    "oice\022\016\n\006BetMax\030\003 \001(\005\022\016\n\006BetMin\030\004 \001(\005\022\014\n\004"
    "Unit\030\005 \001(\005\022\016\n\006BetPot\030\006 \001(\005\022\025\n\rNeedCallCh"
    "ips\030\007 \001(\005\"b\n Processor_501_PokerRequestA"
    "ction\022\016\n\006RoomId\030\001 \001(\005\022.\n\rActionRequest\030\002"
    " \001(\0132\027.msg.PokerActionRequest\"h\n\035Process"
    "or_502_PokerSendAction\022\016\n\006RoomId\030\001 \001(\005\022\'"
    "\n\014ActionStatus\030\002 \001(\0162\021.msg.ActionStatus\022"
    "\016\n\006Amount\030\003 \001(\005\"c\n$Processor_503_PokerRe"
    "ceivePropUpdate\022\016\n\006RoomId\030\001 \001(\005\022+\n\nPropU"
    "pdate\030\002 \001(\0132\027.msg.TableAndUserUpdate\"=\n\033"
    "Processor_510_PokerAddChips\022\016\n\006RoomId\030\001 "
    "\001(\005\022\016\n\006Amount\030\002 \001(\005\"4\n\"Processor_511_Pok"
    "erReceiveNeedChip\022\016\n\006RoomId\030\001 \001(\005\"W\n Pro"
    "cessor_512_PokerRequestChoice\022\016\n\006RoomId\030"
    "\001 \001(\005\022#\n\nChoiceType\030\002 \001(\0162\017.msg.ChoiceTy"
    "pe\"e\n\036Processor_513_PokerReplyChoice\022\016\n\006"
    "RoomId\030\001 \001(\005\022#\n\nChoiceType\030\002 \001(\0162\017.msg.C"
    "hoiceType\022\016\n\006result\030\003 \001(\010\"H\n#Processor_5"
    "14_PokerReceiveTableNote\022\016\n\006RoomId\030\001 \001(\005"
    "\022\021\n\tTableNote\030\002 \001(\t\"[\n\036Processor_515_Pok"
    "erSendSetting\022\016\n\006RoomId\030\001 \001(\005\022)\n\010Setting"
    "s\030\002 \001(\0132\027.msg.PokerPlayerSetting\"d\n\'Proc"
    "essor_516_PokerReceiveSettingChange\022\016\n\006R"
    "oomId\030\001 \001(\005\022)\n\010Settings\030\002 \001(\0132\027.msg.Poke"
    "rPlayerSetting\"C\n\037Processor_517_PokerSen"
    "dShowCard\022\016\n\006RoomId\030\001 \001(\005\022\020\n\010ShowCard\030\002 "
    "\003(\010\"3\n\tPlayerWin\022\016\n\006UserID\030\001 \001(\005\022\026\n\016Play"
    "erWinChips\030\002 \001(\005\"o\n\020PlayerHandResult\022+\n\016"
    "UserDetailInfo\030\001 \001(\0132\023.msg.UserDetailInf"
    "o\022\026\n\016PlayerWinChips\030\002 \001(\005\022\026\n\016PlayerBetCh"
    "ips\030\003 \001(\005\";\n\003Pot\022\021\n\tPotAmount\030\001 \001(\005\022!\n\tP"
    "layerWin\030\002 \003(\0132\016.msg.PlayerWin\"\222\001\n\016HandR"
    "esultInfo\022\016\n\006HasLow\030\001 \001(\010\022\025\n\003Pot\030\002 \003(\0132\010"
    ".msg.Pot\022+\n\014PlayerResult\030\003 \003(\0132\025.msg.Pla"
    "yerHandResult\022\026\n\016HasSecondCards\030\004 \001(\010\022\024\n"
    "\014SecondHasLow\030\005 \001(\010\"s\n$Processor_520_Pok"
    "erReceiveHandResult\022\016\n\006RoomID\030\001 \001(\005\022\016\n\006H"
    "andId\030\002 \001(\005\022+\n\016HandResultInfo\030\003 \001(\0132\023.ms"
    "g.HandResultInfo\"9\n\'Processor_530_PokerG"
    "etTourmentStatus_UP\022\016\n\006RoomID\030\001 \001(\005\"\310\002\n)"
    "Processor_530_PokerGetTourmentStatus_DOW"
    "N\022\016\n\006RoomID\030\001 \001(\005\022+\n\016TournamentInfo\030\002 \001("
    "\0132\023.msg.TournamentInfo\022\024\n\014CurrentLevel\030\003"
    " \001(\005\022\020\n\010LastTime\030\004 \001(\005\022\026\n\016TotalPlayerNum"
    "\030\005 \001(\005\022\022\n\nTotalChips\030\006 \001(\005\022)\n\tTableInfo\030"
    "\007 \003(\0132\026.msg.TourmentTableInfo\022%\n\006Status\030"
    "\010 \001(\0162\025.msg.TournamentStatus\022\021\n\tPrizePoo"
    "l\030\t \001(\005\022%\n\013LosePlayers\030\n \003(\0132\020.msg.Playe"
    "rScore\"J\n\021TourmentTableInfo\022\017\n\007TableID\030\001"
    " \001(\005\022$\n\006Player\030\002 \003(\0132\024.msg.PokerPlayerIn"
    "fo\"I\n&Processor_531_PokerTourmentChangeT"
    "able\022\017\n\007TableID\030\001 \001(\005\022\016\n\006RoomID\030\002 \001(\005\"J\n"
    ")Processor_532_PokerTournamentRequestAdd"
    "on\022\016\n\006RoomId\030\001 \001(\005\022\r\n\005Buyin\030\002 \001(\005\"C\n\"Pro"
    "cessor_533_PokerTournamentAddon\022\016\n\006RoomI"
    "d\030\001 \001(\005\022\r\n\005Addon\030\002 \001(\010\"\205\004\n\rOFCPlayerInfo"
    "\022)\n\nPlayerInfo\030\001 \001(\0132\025.msg.CommonPlayerI"
    "nfo\022\023\n\013PlayerScore\030\002 \001(\005\022 \n\004Card\030\003 \003(\0132\022"
    ".msg.OFCPlayerCard\022\020\n\010HoleCard\030\004 \003(\005\022\024\n\014"
    "FirstRowType\030\005 \001(\t\022\025\n\rMiddleRowType\030\006 \001("
    "\t\022\023\n\013LastRowType\030\007 \001(\t\022\025\n\rFirstRowScore\030"
    "\010 \001(\005\022\026\n\016MiddleRowScore\030\t \001(\005\022\024\n\014LastRow"
    "Score\030\n \001(\005\022\024\n\014FantasyCards\030\013 \001(\005\022*\n\014Act"
    "ionStatus\030\014 \001(\0162\024.msg.OFCActionStatus\022)\n"
    "\rActionRequest\030\r \001(\0132\022.msg.ActionRequest"
    "\022\'\n\rFirstCardType\030\016 \001(\0162\020.msg.OFCCardTyp"
    "e\022(\n\016MiddleCardType\030\017 \001(\0162\020.msg.OFCCardT"
    "ype\022&\n\014LastCardType\030\020 \001(\0162\020.msg.OFCCardT"
    "ype\022\021\n\tRefantasy\030\021 \001(\010\"*\n\020OFCPlayerSetti"
    "ng\022\026\n\016SitoutNextHand\030\001 \001(\010\"7\n\rOFCPropUpd"
    "ate\022&\n\nPlayerInfo\030\001 \003(\0132\022.msg.OFCPlayerI"
    "nfo\"i\n\tOFCResult\0225\n\023OFCPlayerHandResult\030"
    "\001 \003(\0132\030.msg.OFCPlayerHandResult\022%\n\013UserC"
    "ompare\030\002 \003(\0132\020.msg.UserCompare\"\233\001\n\033Proce"
    "ssor_600_OFCRefreshAll\022+\n\016CommonRoomInfo"
    "\030\001 \001(\0132\023.msg.CommonRoomInfo\022&\n\nPropUpdat"
    "e\030\002 \001(\0132\022.msg.OFCPropUpdate\022\'\n\010Settings\030"
    "\003 \001(\0132\025.msg.OFCPlayerSetting\"X\n\"Processo"
    "r_601_OFCReceivePropUpdate\022\016\n\006RoomId\030\001 \001"
    "(\005\022\"\n\006Update\030\002 \001(\0132\022.msg.OFCPropUpdate\"I"
    "\n\rOFCPlayerCard\022*\n\014CardLocation\030\001 \001(\0162\024."
    "msg.OFCCardLocation\022\014\n\004Card\030\002 \001(\005\"]\n\037Pro"
    "cessor_602_OFCSendPlayerCard\022\016\n\006RoomId\030\001"
    " \001(\005\022*\n\014CardLocation\030\002 \003(\0162\024.msg.OFCCard"
    "Location\"\214\001\n\013UserCompare\022\016\n\006UserID\030\001 \003(\005"
    "\022\033\n\023FirstRowComparScore\030\002 \001(\005\022\035\n\025MiddleR"
    "owCompareScore\030\003 \001(\005\022\033\n\023LastRowCompareSc"
    "ore\030\004 \001(\005\022\024\n\014CompareScore\030\005 \001(\005\"6\n\023OFCPl"
    "ayerHandResult\022\020\n\010PlayerId\030\001 \001(\005\022\r\n\005Scor"
    "e\030\002 \001(\005\"`\n\036Processor_610_OFCReceiveResul"
    "t\022\016\n\006RoomId\030\001 \001(\005\022\016\n\006HandId\030\002 \001(\005\022\036\n\006Res"
    "ult\030\003 \001(\0132\016.msg.OFCResult\"W\n\034Processor_6"
    "15_OFCSendSetting\022\016\n\006RoomId\030\001 \001(\005\022\'\n\010Set"
    "tings\030\002 \001(\0132\025.msg.OFCPlayerSetting\"`\n%Pr"
    "ocessor_616_OFCReceiveSettingChange\022\016\n\006R"
    "oomId\030\001 \001(\005\022\'\n\010Settings\030\002 \001(\0132\025.msg.OFCP"
    "layerSetting\"\215\003\n\021MahjongPlayerInfo\022)\n\nPl"
    "ayerInfo\030\001 \001(\0132\025.msg.CommonPlayerInfo\022\023\n"
    "\013PlayerScore\030\002 \001(\005\022\036\n\004Card\030\003 \003(\0162\020.msg.M"
    "ahjongCard\022!\n\007Discard\030\004 \003(\0162\020.msg.Mahjon"
    "gCard\022\032\n\002Fu\030\005 \003(\0132\016.msg.MahjongFu\0220\n\rAct"
    "ionRequest\030\006 \001(\0132\031.msg.MahjongActionRequ"
    "est\022,\n\013ScoreChange\030\007 \003(\0132\027.msg.MahjongSc"
    "oreChange\022\"\n\010DrawCard\030\010 \001(\0162\020.msg.Mahjon"
    "gCard\022\025\n\rCanWinByOther\030\t \001(\010\022\036\n\004Suit\030\n \001"
    "(\0162\020.msg.MahjongSuit\022\036\n\004Ting\030\013 \003(\0132\020.msg"
    ".MahjongTing\"\226\001\n\tMahjongFu\022\036\n\004Card\030\001 \003(\016"
    "2\020.msg.MahjongCard\022$\n\006Source\030\002 \001(\0162\024.msg"
    ".MahjongPosition\022 \n\004Type\030\003 \001(\0162\022.msg.Mah"
    "jongFuType\022!\n\007GetCard\030\004 \001(\0162\020.msg.Mahjon"
    "gCard\"\343\001\n\022MahjongScoreChange\022\036\n\004Card\030\001 \003"
    "(\0162\020.msg.MahjongCard\022\032\n\002Fu\030\002 \003(\0132\016.msg.M"
    "ahjongFu\022$\n\006Source\030\003 \001(\0162\024.msg.MahjongPo"
    "sition\022 \n\006HuCard\030\004 \001(\0162\020.msg.MahjongCard"
    "\022(\n\004Type\030\005 \003(\0162\032.msg.SiChuanMahjongWinTy"
    "pe\022\r\n\005Score\030\006 \001(\005\022\020\n\010MultiWin\030\007 \001(\010\"Q\n\024M"
    "ahjongPlayerSetting\022\025\n\rLeaveNextHand\030\001 \001"
    "(\010\022\016\n\006AutoHu\030\002 \001(\010\022\022\n\nDiscardAll\030\003 \001(\010\"\367"
    "\001\n\021MahjongPropUpdate\022*\n\nPlayerInfo\030\001 \003(\013"
    "2\026.msg.MahjongPlayerInfo\022\021\n\tLastCards\030\002 "
    "\001(\005\022\025\n\rStartPosition\030\003 \001(\005\022(\n\016CurrentDis"
    "card\030\004 \001(\0162\020.msg.MahjongCard\022\034\n\024CurrentD"
    "iscardUserID\030\005 \001(\005\0220\n\022CurrentDiscardZone"
    "\030\006 \001(\0162\024.msg.MahjongCardZone\022\022\n\nEastSeat"
    "No\030\007 \001(\005\"L\n\013MahjongTing\022\036\n\004Card\030\001 \001(\0162\020."
    "msg.MahjongCard\022\016\n\006Number\030\002 \001(\005\022\r\n\005Score"
    "\030\003 \001(\005\"U\n\023MahjongPossibleTing\022\036\n\004Card\030\001 "
    "\001(\0162\020.msg.MahjongCard\022\036\n\004Ting\030\002 \003(\0132\020.ms"
    "g.MahjongTing\"\225\003\n\024MahjongActionRequest\022)"
    "\n\rActionRequest\030\001 \001(\0132\022.msg.ActionReques"
    "t\022%\n\004Type\030\002 \001(\0162\027.msg.MahjongRequestType"
    "\022\r\n\005CanHu\030\003 \001(\010\022\017\n\007CanGang\030\004 \001(\010\022\017\n\007CanP"
    "eng\030\005 \001(\010\022\016\n\006CanChi\030\006 \001(\010\022.\n\014PossibleTin"
    "g\030\007 \003(\0132\030.msg.MahjongPossibleTing\022+\n\007Win"
    "Type\030\010 \001(\0162\032.msg.SiChuanMahjongWinType\022\020"
    "\n\010WinScore\030\t \001(\005\022+\n\021DefaultSwitchCard\030\n "
    "\003(\0162\020.msg.MahjongCard\022*\n\020DefaultBlankSui"
    "t\030\013 \001(\0162\020.msg.MahjongSuit\022\"\n\010GangCard\030\014 "
    "\003(\0162\020.msg.MahjongCard\"\247\001\n\037Processor_700_"
    "MahjongRefreshAll\022+\n\016CommonRoomInfo\030\001 \001("
    "\0132\023.msg.CommonRoomInfo\022*\n\nPropUpdate\030\002 \001"
    "(\0132\026.msg.MahjongPropUpdate\022+\n\010Settings\030\003"
    " \001(\0132\031.msg.MahjongPlayerSetting\"`\n&Proce"
    "ssor_701_MahjongReceivePropUpdate\022\016\n\006Roo"
    "mId\030\001 \001(\005\022&\n\006Update\030\002 \001(\0132\026.msg.MahjongP"
    "ropUpdate\"\353\001\n%Processor_702_MahjongSendP"
    "layerChoice\022\016\n\006RoomId\030\001 \001(\005\022\036\n\004Card\030\002 \001("
    "\0162\020.msg.MahjongCard\022(\n\006Choice\030\003 \001(\0162\030.ms"
    "g.MahjongActionChoice\022$\n\nSwitchCard\030\004 \003("
    "\0162\020.msg.MahjongCard\022\036\n\004Suit\030\005 \001(\0162\020.msg."
    "MahjongSuit\022\"\n\010GangCard\030\006 \001(\0162\020.msg.Mahj"
    "ongCard\"^\n\rMahjongAction\022\016\n\006UserId\030\001 \001(\005"
    "\022(\n\006Choice\030\002 \001(\0162\030.msg.MahjongActionChoi"
    "ce\022\023\n\013ScoreChange\030\003 \001(\005\"q\n\034MahjongTestAl"
    "lWinCardAndType\022 \n\006quemen\030\001 \001(\0162\020.msg.Ma"
    "hjongSuit\022/\n\013CardAndType\030\002 \003(\0132\032.msg.Mah"
    "jongWinCardAndType\"\320\001\n\025MahjongWinCardAnd"
    "Type\022+\n\007wintype\030\001 \003(\0162\032.msg.SiChuanMahjo"
    "ngWinType\022\"\n\010handCard\030\002 \003(\0162\020.msg.Mahjon"
    "gCard\022\035\n\005fuPai\030\003 \003(\0132\016.msg.MahjongFu\022!\n\007"
    "ziMoPai\030\004 \001(\0162\020.msg.MahjongCard\022$\n\ndianP"
    "aoPai\030\005 \001(\0162\020.msg.MahjongCard\"\216\001\n(Proces"
    "sor_703_MahjongReceivePlayerAction\022\016\n\006Ro"
    "omId\030\001 \001(\005\022\"\n\006Action\030\002 \003(\0132\022.msg.Mahjong"
    "Action\022.\n\nSwitchType\030\003 \001(\0162\032.msg.Mahjong"
    "CardSwitchType\"_\n Processor_715_MahjongS"
    "endSetting\022\016\n\006RoomId\030\001 \001(\005\022+\n\010Settings\030\002"
    " \001(\0132\031.msg.MahjongPlayerSetting\"h\n)Proce"
    "ssor_716_MahjongReceiveSettingChange\022\016\n\006"
    "RoomId\030\001 \001(\005\022+\n\010Settings\030\002 \001(\0132\031.msg.Mah"
    "jongPlayerSetting\"G\n$Processor_300_Poker"
    "GetHandHistory_UP\022\016\n\006HandId\030\001 \001(\005\022\017\n\007isP"
    "oker\030\002 \001(\010\"\334\001\n\tPokerStep\022 \n\004Type\030\001 \001(\0162\022"
    ".msg.PokerStepType\022\014\n\004Text\030\002 \001(\t\022\"\n\005Roun"
    "d\030\003 \001(\0162\023.msg.PokerRoundType\0220\n\014PlayerAc"
    "tion\030\004 \001(\0132\032.msg.PokerPlayerActionInfo\022\'"
    "\n\017CommunityChange\030\005 \001(\0132\016.msg.TableInfo\022"
    " \n\006Blinds\030\006 \001(\0132\020.msg.PokerBlinds\"-\n\013Pok"
    "erBlinds\022\036\n\005Blind\030\001 \003(\0132\017.msg.PokerBlind"
    "\"J\n\nPokerBlind\022\016\n\006UserID\030\001 \001(\005\022\034\n\004Type\030\002"
    " \001(\0162\016.msg.BlindType\022\016\n\006Amount\030\003 \001(\005\"Z\n\025"
    "PokerPlayerActionInfo\022\016\n\006UserID\030\001 \001(\005\022!\n"
    "\006Action\030\002 \001(\0162\021.msg.ActionStatus\022\016\n\006Amou"
    "nt\030\003 \001(\005\"S\n\007OFCStep\022\036\n\004Type\030\001 \001(\0162\020.msg."
    "OFCStepType\022(\n\006Action\030\002 \001(\0132\030.msg.OFCPla"
    "yerActionInfo\"M\n\023OFCPlayerActionInfo\022\016\n\006"
    "UserID\030\001 \001(\005\022&\n\nPlayerCard\030\002 \003(\0132\022.msg.O"
    "FCPlayerCard\"\330\001\n\013MahjongStep\022%\n\004Type\030\001 \001"
    "(\0162\027.msg.MahjongRequestType\022,\n\nActionTyp"
    "e\030\002 \001(\0162\030.msg.MahjongActionChoice\022\036\n\004Car"
    "d\030\003 \001(\0162\020.msg.MahjongCard\022\016\n\006UserID\030\004 \001("
    "\005\022$\n\nSwitchCard\030\005 \003(\0162\020.msg.MahjongCard\022"
    "\036\n\004Suit\030\006 \001(\0162\020.msg.MahjongSuit\"\214\002\n\nRepl"
    "ayStep\022\016\n\006StepId\030\001 \001(\005\022+\n\nPropUpdate\030\002 \001"
    "(\0132\027.msg.TableAndUserUpdate\022)\n\rOFCPropUp"
    "date\030\003 \001(\0132\022.msg.OFCPropUpdate\022!\n\tPokerS"
    "tep\030\004 \001(\0132\016.msg.PokerStep\022\035\n\007OFCStep\030\005 \001"
    "(\0132\014.msg.OFCStep\022-\n\rMahjongUpdate\030\006 \001(\0132"
    "\026.msg.MahjongPropUpdate\022%\n\013MahjongStep\030\007"
    " \001(\0132\020.msg.MahjongStep\"2\n\013ReplaySteps\022#\n"
    "\nReplayStep\030\001 \003(\0132\017.msg.ReplayStep\"8\n\rRe"
    "playPlayers\022\'\n\014ReplayPlayer\030\001 \003(\0132\021.msg."
    "ReplayPlayer\"^\n\014ReplayPlayer\022+\n\016UserDeta"
    "ilInfo\030\001 \001(\0132\023.msg.UserDetailInfo\022\016\n\006Sit"
    "Num\030\002 \001(\005\022\021\n\tIsVisible\030\003 \003(\010\"o\n\014HandBase"
    "Info\022\020\n\010RoomName\030\001 \001(\t\022\024\n\014TotalSeatNum\030\002"
    " \001(\005\022\023\n\013TableRemark\030\003 \001(\t\022\017\n\007HandTxt\030\004 \001"
    "(\t\022\021\n\tDealerPos\030\005 \001(\005\"\265\002\n&Processor_300_"
    "PokerGetHandHistory_DOWN\022\037\n\010Response\030\001 \001"
    "(\0132\r.msg.Response\022\016\n\006HandId\030\002 \001(\005\022\037\n\010Han"
    "dType\030\003 \001(\0162\r.msg.HandType\022#\n\010BaseInfo\030\004"
    " \001(\0132\021.msg.HandBaseInfo\022#\n\007Players\030\005 \001(\013"
    "2\022.msg.ReplayPlayers\022\037\n\005Steps\030\006 \001(\0132\020.ms"
    "g.ReplaySteps\022+\n\016HandResultInfo\030\007 \001(\0132\023."
    "msg.HandResultInfo\022!\n\tOFCResult\030\010 \001(\0132\016."
    "msg.OFCResult\"~\n)Processor_1000_Register"
    "Server_OtherToCore\022\035\n\004Type\030\001 \001(\0162\017.msg.S"
    "erverType\022\n\n\002IP\030\002 \001(\t\022\022\n\nServerPort\030\003 \001("
    "\005\022\022\n\nClientPort\030\004 \001(\005\"@\n)Processor_1000_"
    "RegisterServer_CoreToOther\022\023\n\013NewServerI"
    "D\030\001 \001(\005\"4\n\nServerInfo\022\n\n\002IP\030\001 \001(\t\022\014\n\004Por"
    "t\030\002 \001(\005\022\014\n\004IPv6\030\003 \001(\t\"2\n\013ServerInfos\022#\n\n"
    "ServerInfo\030\001 \003(\0132\017.msg.ServerInfo\"\260\001\n\026Pr"
    "ocessor_HTMLRegister\022%\n\tLoginInfo\030\001 \001(\0132"
    "\022.msg.UserLoginInfo\022\025\n\rRefereeUserID\030\002 \001"
    "(\005\022\026\n\016RefereeGroupID\030\003 \001(\005\022\025\n\rRefereeRoo"
    "mID\030\004 \001(\005\022\023\n\013PhoneNumber\030\005 \001(\t\022\024\n\014Verifi"
    "cation\030\006 \001(\t\"A\n\037Processor_HTMLRegisterEn"
    "terRoom\022\016\n\006UserID\030\001 \001(\005\022\016\n\006RoomID\030\002 \001(\005\""
    "9\n\'Processor_1003_ChangeUserInfo_ResToCo"
    "re\022\016\n\006UserID\030\001 \001(\005\";\n)Processor_1004_Cha"
    "ngeUserInfo_CoreToOther\022\016\n\006UserID\030\001 \001(\005\""
    "H\n%Processor_1005_OnlineInfo_OtherToCore"
    "\022\023\n\013OnlineCount\030\001 \001(\005\022\n\n\002ID\030\002 \003(\005\"d\n\016Ser"
    "verRoomInfo\022\016\n\006RoomID\030\001 \001(\005\022\023\n\013PlayerCou"
    "nt\030\002 \001(\005\022\037\n\006Status\030\003 \001(\0162\017.msg.RoomStatu"
    "s\022\014\n\004note\030\004 \001(\t\"i\n\027Processor_1006_RoomIn"
    "fo\022%\n\010RoomInfo\030\001 \003(\0132\023.msg.ServerRoomInf"
    "o\022\'\n\016RoomServerInfo\030\002 \001(\0132\017.msg.ServerIn"
    "fo\"5\n#Processor_1009_CreateRoom_ResToCor"
    "e\022\016\n\006RoomID\030\001 \001(\005\"6\n$Processor_1010_Crea"
    "teRoom_CoreToRoom\022\016\n\006RoomID\030\001 \001(\005\">\n\037Pro"
    "cessor_1011_ChangeServerProp\022\033\n\004prop\030\001 \001"
    "(\0132\r.msg.Property\":\n\tParameter\022\025\n\rParame"
    "terName\030\001 \001(\t\022\026\n\016ParameterValue\030\002 \001(\t\"<\n"
    "\027Processor_1012_WXPayMsg\022!\n\tparameter\030\001 "
    "\003(\0132\016.msg.Parameter\"@\n%Processor_1100_Sh"
    "utDown_ConsoleToCore\022\027\n\017TimeBeforeClose\030"
    "\001 \001(\005\">\n#Processor_1101_ShutDown_CoreToO"
    "ther\022\027\n\017TimeBeforeClose\030\001 \001(\005\"i\n.Process"
    "or_1105_ServerInformation_CoreToConsole\022"
    "\022\n\nOnlineSize\030\001 \001(\005\022\020\n\010OpenRoom\030\002 \001(\005\022\021\n"
    "\tCloseRoom\030\003 \001(\005\"=\n+Processor_1107_SERVE"
    "R_RESET_TOURMENT_CREDIT\022\016\n\006Credit\030\001 \001(\005\""
    "7\n$Processor_1108_SEARCH_CREDIT_RANK_UP\022"
    "\017\n\007ranknum\030\001 \001(\005\"]\n&Processor_1108_SEARC"
    "H_CREDIT_RANK_DOWN\0223\n\022UserTourCreditInfo"
    "\030\001 \003(\0132\027.msg.UserTourCreditInfo\"8\n\"Proce"
    "ssor_1109_PUBLISH_SYS_MESSAGE\022\022\n\nSYSMess"
    "age\030\001 \001(\t\"k\n*Processor_1110_PUBLISH_CONS"
    "OLE_SYS_MESSAGE\022\017\n\007groupid\030\001 \003(\005\022\016\n\006user"
    "id\030\002 \003(\005\022\017\n\007msginfo\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\"Y"
    "\n\022UserTourCreditInfo\022%\n\010userinfo\030\001 \001(\0132\023"
    ".msg.UserDetailInfo\022\014\n\004rank\030\002 \001(\005\022\016\n\006Cre"
    "dit\030\003 \001(\005\"L\n\014ChatMessages\022!\n\007Message\030\001 \003"
    "(\0132\020.msg.ChatMessage\022\n\n\002ID\030\002 \001(\005\022\r\n\005Coun"
    "t\030\003 \001(\005\":\n\022InvitationsForSave\022$\n\013Invitat"
    "ions\030\001 \003(\0132\017.msg.Invitation\"g\n\022ChatMessa"
    "geForSave\022(\n\rFriendMessage\030\001 \003(\0132\021.msg.C"
    "hatMessages\022\'\n\014GroupMessage\030\002 \003(\0132\021.msg."
    "ChatMessages\"j\n\025OldChatMessageForSave\022(\n"
    "\rFriendMessage\030\001 \001(\0132\021.msg.ChatMessages\022"
    "\'\n\014GroupMessage\030\002 \001(\0132\021.msg.ChatMessages"
    "\"d\n\nGameRecord\022\016\n\006HandID\030\001 \001(\005\022\016\n\006RoomID"
    "\030\002 \001(\005\022\020\n\010PoolSize\030\003 \001(\005\022\022\n\nWinnerName\030\004"
    " \003(\t\022\020\n\010HoleCard\030\005 \003(\005\"D\n\021GameRecordForS"
    "ave\022\037\n\006Record\030\001 \003(\0132\017.msg.GameRecord\022\016\n\006"
    "UserID\030\002 \001(\005\"\362\001\n\025CreateRoomInfoForSave\022\037"
    "\n\010RoomType\030\001 \001(\0162\r.msg.RoomType\022\024\n\014IsTou"
    "rnament\030\002 \001(\010\022\037\n\010RoomInfo\030\003 \001(\0132\r.msg.Ro"
    "omInfo\022\037\n\010RoomProp\030\004 \001(\0132\r.msg.RoomProp\022"
    "\030\n\020TemplateSizeName\030\005 \001(\t\022\031\n\021TemplateSpe"
    "edName\030\006 \001(\t\022+\n\016TournamentInfo\030\007 \001(\0132\023.m"
    "sg.TournamentInfo\"\266\001\n\021ClientUserSetting\022"
    "\023\n\013LastGroupID\030\001 \001(\005\022#\n\014LastRoomType\030\002 \001"
    "(\0162\r.msg.RoomType\022\030\n\020LastIsTournament\030\003 "
    "\001(\010\022\022\n\nLastRoomID\030\004 \001(\005\0229\n\025CreateRoomInf"
    "oForSave\030\005 \003(\0132\032.msg.CreateRoomInfoForSa"
    "ve*(\n\010Language\022\010\n\004ZHCN\020\001\022\010\n\004ENUS\020\002\022\010\n\004ZH"
    "TW\020\003* \n\010Platform\022\007\n\003IOS\020\001\022\013\n\007ANDORID\020\002*t"
    "\n\016Game_Tool_Type\022\r\n\tTHROW_EGG\020\001\022\n\n\006FLOWE"
    "R\020\002\022\010\n\004GIFT\020\003\022\010\n\004KISS\020\004\022\n\n\006PRAISE\020\005\022\025\n\021C"
    "ATCH_THE_CHICKEN\020\006\022\020\n\014DIAMOND_RING\020\007*!\n\006"
    "Status\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020\001*\033\n\003Sex\022\010"
    "\n\004MALE\020\000\022\n\n\006FEMALE\020\001*D\n\rVersionStatus\022\020\n"
    "\014NoNewVersion\020\000\022\021\n\rHasNewVersion\020\001\022\016\n\nNe"
    "edUpdate\020\002*7\n\014PropertyType\022\007\n\003INT\020\000\022\010\n\004B"
    "OOL\020\001\022\n\n\006STRING\020\002\022\010\n\004ENUM\020\003*@\n\020Verificat"
    "ionType\022\024\n\020VERIFICATIONfAIL\020\000\022\026\n\022VERIFIC"
    "ATIONREPEAT\020\001*\?\n\013RequestType\022\r\n\tADDFRIEN"
    "D\020\001\022\016\n\nENTERGROUP\020\002\022\021\n\rINVITETOGROUP\020\003*P"
    "\n\013MessageType\022\010\n\004Text\020\001\022\t\n\005Voice\020\002\022\013\n\007Pi"
    "cture\020\003\022\016\n\nCreateRoom\020\004\022\017\n\013GroupNotice\020\005"
    "*5\n\rMessageStatus\022\013\n\007Success\020\001\022\013\n\007Sendin"
    "g\020\002\022\n\n\006Failed\020\003*:\n\020InvitationStatus\022\014\n\010A"
    "ccepted\020\001\022\013\n\007Refused\020\002\022\013\n\007Waiting\020\003*X\n\tG"
    "roupType\022\017\n\013NORMALGROUP\020\000\022\020\n\014OFFICALGROU"
    "P\020\002\022\022\n\016RECOMMANDGROUP\020\003\022\024\n\020OFFLINETOURGR"
    "OUP\020\004*[\n\017GroupUserStatus\022\017\n\013GROUP_OWNER\020"
    "\001\022\017\n\013GROUP_ADMIN\020\002\022\020\n\014GROUP_MEMBER\020\003\022\024\n\020"
    "NOT_GROUP_MEMBER\020\004*W\n\017GroupSearchType\022\016\n"
    "\nSEARCHMINE\020\000\022\r\n\tSEARCHALL\020\001\022\020\n\014SEARCHBY"
    "NAME\020\002\022\023\n\017SEARCHRECOMMAND\020\003*_\n\010RoomType\022"
    "\007\n\003ALL\020\000\022\014\n\010NLHOLDEM\020\001\022\010\n\004OFC3\020\002\022\007\n\003PLO\020"
    "\003\022\013\n\007PLOHILO\020\004\022\010\n\004OFC4\020\005\022\022\n\016SIChUANMahjo"
    "ng\020\006*D\n\021MomentDisplayType\022\n\n\006SQUARE\020\001\022\r\n"
    "\tRECOMMEND\020\002\022\n\n\006FRIEND\020\003\022\010\n\004MINE\020\004*1\n\013Co"
    "mmentType\022\013\n\007COMMENT\020\001\022\010\n\004LIKE\020\002\022\013\n\007RESP"
    "OND\020\003*_\n\rSittingStatus\022\013\n\007PLAYING\020\000\022\n\n\006S"
    "ITOUT\020\001\022\014\n\010OBSERVER\020\002\022\t\n\005LEAVE\020\003\022\013\n\007SITD"
    "OWN\020\004\022\017\n\013WANTTOLEAVE\020\005*%\n\nGameStatus\022\n\n\006"
    "PAUSED\020\001\022\013\n\007RUNNING\020\002*\227\001\n\014ActionChoice\022\022"
    "\n\016FOLD_CHECK_BET\020\001\022\024\n\020FOLD_CHECK_ALLIN\020\002"
    "\022\023\n\017FOLD_CALL_RAISE\020\003\022\023\n\017FOLD_CALL_ALLIN"
    "\020\004\022\016\n\nFOLD_ALLIN\020\005\022\r\n\tFOLD_CALL\020\006\022\024\n\020FOL"
    "D_CHECK_RAISE\020\007*X\n\014ActionStatus\022\n\n\006NORMA"
    "L\020\000\022\010\n\004FOLD\020\001\022\t\n\005CHECK\020\002\022\007\n\003BET\020\003\022\010\n\004CAL"
    "L\020\004\022\t\n\005RAISE\020\005\022\t\n\005ALLIN\020\006*O\n\nChoiceType\022"
    "\017\n\013CloseChoice\020\000\022\014\n\010MuckCard\020\001\022\017\n\013AskRun"
    "Twice\020\002\022\021\n\rReplyRunTwice\020\003*`\n\020Tournament"
    "Status\022\025\n\021TOURNAMENT_NORMAL\020\001\022\026\n\022TOURNAM"
    "ENT_RESTING\020\002\022\035\n\031TOURNAMENT_WAITINGTOSTA"
    "RT\020\003*I\n\007OFCRule\022\017\n\013OFCRuleNone\020\001\022\021\n\rOFCR"
    "uleBloody\020\002\022\032\n\026OFCRuleBloodyRefantasy\020\003*"
    "\371\001\n\013OFCCardType\022\016\n\nHIGH_CARDS\020\000\022\014\n\010ONE_P"
    "AIR\020\001\022\r\n\tTWO_PAIRS\020\002\022\023\n\017THREE_OF_A_KIND\020"
    "\003\022\014\n\010STRAIGHT\020\004\022\t\n\005FLUSH\020\005\022\016\n\nFULL_HOUSE"
    "\020\006\022\022\n\016FOUR_OF_A_KIND\020\007\022\022\n\016STRAIGHT_FLUSH"
    "\020\010\022\030\n\024ROYAL_STRAIGHT_FLUSH\020\t\022\017\n\013TYPE_NOR"
    "MAL\020\n\022\020\n\014TYPE_INVALID\020\013\022\r\n\tTYPE_FOLD\020\014\022\013"
    "\n\007NO_TYPE\020\r*9\n\017OFCActionStatus\022\013\n\007WAITIN"
    "G\020\000\022\014\n\010CHOOSING\020\001\022\013\n\007FANTASY\020\002*\?\n\017OFCCar"
    "dLocation\022\013\n\007DISCARD\020\000\022\t\n\005FIRST\020\001\022\n\n\006MID"
    "DLE\020\002\022\010\n\004LAST\020\003*\\\n\rMahjongFuType\022\010\n\004NONE"
    "\020\000\022\010\n\004SHUN\020\001\022\006\n\002KE\020\002\022\014\n\010MINGGANG\020\003\022\n\n\006AN"
    "GANG\020\004\022\n\n\006BUGANG\020\005\022\t\n\005JIANG\020\006*>\n\017Mahjong"
    "Position\022\010\n\004LEFT\020\001\022\014\n\010OPPOSITE\020\002\022\t\n\005RIGH"
    "T\020\003\022\010\n\004SELF\020\004*\202\003\n\013MahjongCard\022\r\n\tINVISIB"
    "LE\020\000\022\t\n\005TIAO1\020\001\022\t\n\005TIAO2\020\002\022\t\n\005TIAO3\020\003\022\t\n"
    "\005TIAO4\020\004\022\t\n\005TIAO5\020\005\022\t\n\005TIAO6\020\006\022\t\n\005TIAO7\020"
    "\007\022\t\n\005TIAO8\020\010\022\t\n\005TIAO9\020\t\022\t\n\005BING1\020\013\022\t\n\005BI"
    "NG2\020\014\022\t\n\005BING3\020\r\022\t\n\005BING4\020\016\022\t\n\005BING5\020\017\022\t"
    "\n\005BING6\020\020\022\t\n\005BING7\020\021\022\t\n\005BING8\020\022\022\t\n\005BING9"
    "\020\023\022\010\n\004WAN1\020\025\022\010\n\004WAN2\020\026\022\010\n\004WAN3\020\027\022\010\n\004WAN4"
    "\020\030\022\010\n\004WAN5\020\031\022\010\n\004WAN6\020\032\022\010\n\004WAN7\020\033\022\010\n\004WAN8"
    "\020\034\022\010\n\004WAN9\020\035\022\010\n\004EAST\020\037\022\t\n\005SOUTH\020 \022\010\n\004WES"
    "T\020!\022\t\n\005NORTH\020\"\022\t\n\005ZHONG\020#\022\006\n\002FA\020$\022\007\n\003BAI"
    "\020%*|\n\022SiChuanMahjongRule\022\030\n\024SiChuanMahjo"
    "ngBloody\020\001\022\036\n\032SiChuanMahjongRepeatBloody"
    "\020\002\022,\n(SiChuanMahjongRepeatBloodyWithSwit"
    "chCard\020\003*\333\004\n\025SiChuanMahjongWinType\022\r\n\tNo"
    "WinType\020\000\022\n\n\006PingHu\020\001\022\014\n\010DuiDuiHu\020\002\022\014\n\010Q"
    "ingYiSe\020\003\022\r\n\tDaiYaoJiu\020\004\022\t\n\005QiDui\020\005\022\017\n\013J"
    "inDiaoDiao\020\006\022\013\n\007QingDui\020\007\022\014\n\010JiangDui\020\010\022"
    "\r\n\tLongQiDui\020\t\022\r\n\tQingQiDui\020\n\022\016\n\nQingYao"
    "Jiu\020\013\022\023\n\017QingJinDiaoDiao\020\014\022\024\n\020JiangJinDi"
    "aoDiao\020\r\022\n\n\006TianHu\020\016\022\010\n\004DiHu\020\017\022\021\n\rQingLo"
    "ngQiDui\020\020\022\017\n\013ShiBaLuoHan\020\021\022\013\n\007GangKai\020\022\022"
    "\020\n\014GangShangPao\020\023\022\007\n\003Gen\020\024\022\r\n\tQiangGang\020"
    "\025\022\010\n\004ZiMo\020\026\022\023\n\017GuaFengMingGang\020\027\022\021\n\rGuaF"
    "engBuGang\020\030\022\t\n\005XiaYu\020\031\022\021\n\rHuJiaoZhuanYi\020"
    "\032\022\013\n\007TuiShui\020\033\022\r\n\tChaDaJiao\020\034\022\r\n\tChaHuaZ"
    "hu\020\035\022\013\n\007BeiZiMo\020\036\022\013\n\007DianPao\020\037\022\016\n\nBeiGua"
    "Feng\020 \022\014\n\010BeiXiaYu\020!\022\024\n\020BeiHuJiaoZhuanYi"
    "\020\"\022\020\n\014BeiChaHuaZhu\020#\022\020\n\014BeiChaDaJiao\020$\022\016"
    "\n\nBeiTuiShui\020%*`\n\025MahjongCardSwitchType\022"
    "\032\n\026SwitchCounterClockwise\020\001\022\026\n\022SwitchWit"
    "hOpposite\020\002\022\023\n\017SwitchClockwise\020\003*:\n\017Mahj"
    "ongCardZone\022\017\n\013DiscardZone\020\001\022\n\n\006FuZone\020\002"
    "\022\n\n\006HuZone\020\003*\203\001\n\022MahjongRequestType\022\030\n\024M"
    "ahjongChooseDiscard\020\001\022\032\n\026MahjongChooseOt"
    "herCard\020\002\022\033\n\027MahjongChooseSwitchCard\020\003\022\032"
    "\n\026MahjongChooseBlankSuit\020\004*W\n\023MahjongAct"
    "ionChoice\022\006\n\002HU\020\001\022\007\n\003CHI\020\002\022\010\n\004PENG\020\003\022\010\n\004"
    "GANG\020\004\022\010\n\004PASS\020\005\022\021\n\rHUJIAOZHUANYI\020\006*M\n\013M"
    "ahjongSuit\022\014\n\010SUITNONE\020\000\022\010\n\004TIAO\020\001\022\010\n\004BI"
    "NG\020\002\022\007\n\003WAN\020\003\022\010\n\004FENG\020\004\022\t\n\005OTHER\020\005*[\n\rPo"
    "kerStepType\022\026\n\022GameStartAndBlinds\020\001\022\020\n\014P"
    "layerAction\020\002\022\023\n\017CommunityChange\020\003\022\013\n\007En"
    "dGame\020\004*E\n\016PokerRoundType\022\013\n\007Preflop\020\000\022\010"
    "\n\004Flop\020\001\022\010\n\004Turn\020\002\022\t\n\005River\020\003\022\007\n\003End\020\004*A"
    "\n\tBlindType\022\016\n\nSmallblind\020\001\022\014\n\010Bigblind\020"
    "\002\022\010\n\004Ante\020\003\022\014\n\010Straddle\020\004*2\n\013OFCStepType"
    "\022\023\n\017OFCPlayerAction\020\001\022\016\n\nOFCEndGame\020\002*+\n"
    "\010HandType\022\t\n\005Poker\020\001\022\007\n\003OFC\020\002\022\013\n\007Mahjong"
    "\020\003*L\n\nServerType\022\010\n\004CORE\020\000\022\t\n\005LOGIN\020\001\022\014\n"
    "\010RESOURCE\020\002\022\010\n\004ROOM\020\003\022\010\n\004FILE\020\004\022\007\n\003PAY\020\005"
    "*D\n\nRoomStatus\022\010\n\004OPEN\020\000\022\n\n\006CLOSED\020\001\022\022\n\016"
    "WAITINGTOSTART\020\002\022\014\n\010CANCELED\020\003B\020\n\tprotob"
    "uffB\003msg", 32888);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  ClientRequestHead::default_instance_ = new ClientRequestHead();
  ClientResponseHead::default_instance_ = new ClientResponseHead();
  ServerMessageHead::default_instance_ = new ServerMessageHead();
  Response::default_instance_ = new Response();
  RoomResponse::default_instance_ = new RoomResponse();
  ClientInfo::default_instance_ = new ClientInfo();
  UserLoginInfo::default_instance_ = new UserLoginInfo();
  UserDetailInfo::default_instance_ = new UserDetailInfo();
  Processor_1_VersionCheck::default_instance_ = new Processor_1_VersionCheck();
  Processor_10_LoginCoreServer::default_instance_ = new Processor_10_LoginCoreServer();
  Processor_10_LoginCore::default_instance_ = new Processor_10_LoginCore();
  Processor_11_CONSOLEHEARTJUMP::default_instance_ = new Processor_11_CONSOLEHEARTJUMP();
  Processor_30_UploadFile::default_instance_ = new Processor_30_UploadFile();
  Processor_31_DownloadFile_UP::default_instance_ = new Processor_31_DownloadFile_UP();
  Processor_31_DownloadFile_DOWN::default_instance_ = new Processor_31_DownloadFile_DOWN();
  Processor_97_SendVerificationByUserID::default_instance_ = new Processor_97_SendVerificationByUserID();
  Processor_98_ResetPassword::default_instance_ = new Processor_98_ResetPassword();
  Processor_99_Login_UP::default_instance_ = new Processor_99_Login_UP();
  Processor_99_Login_DOWN::default_instance_ = new Processor_99_Login_DOWN();
  Processor_100_LoginResource::default_instance_ = new Processor_100_LoginResource();
  Processor_100_LoginResource_Down::default_instance_ = new Processor_100_LoginResource_Down();
  RoomInfomation::default_instance_ = new RoomInfomation();
  Property::default_instance_ = new Property();
  IntValue::default_instance_ = new IntValue();
  EnumValue::default_instance_ = new EnumValue();
  EnumItem::default_instance_ = new EnumItem();
  Processor_103_FeedBack::default_instance_ = new Processor_103_FeedBack();
  Processor_104_Register::default_instance_ = new Processor_104_Register();
  Processor_105_Device::default_instance_ = new Processor_105_Device();
  Processor_106_ReceiveIOSPayReceipt::default_instance_ = new Processor_106_ReceiveIOSPayReceipt();
  Processor_106_ReceiveIOSPayReceipt_Down::default_instance_ = new Processor_106_ReceiveIOSPayReceipt_Down();
  GoodInfo::default_instance_ = new GoodInfo();
  Processor_107_GetGoodsInfo::default_instance_ = new Processor_107_GetGoodsInfo();
  Processor_108_BuyGood::default_instance_ = new Processor_108_BuyGood();
  Processor_109_AndroidPay::default_instance_ = new Processor_109_AndroidPay();
  Processor_109_AndroidPayDown::default_instance_ = new Processor_109_AndroidPayDown();
  FeedBack::default_instance_ = new FeedBack();
  UserGameSetting::default_instance_ = new UserGameSetting();
  UserGameSettings::default_instance_ = new UserGameSettings();
  Processor_111_GetUserSetting::default_instance_ = new Processor_111_GetUserSetting();
  Processor_112_ChangeUserSetting::default_instance_ = new Processor_112_ChangeUserSetting();
  Processor_113_GetUserPermission_UP::default_instance_ = new Processor_113_GetUserPermission_UP();
  Processor_113_GetUserPermission_DOWN::default_instance_ = new Processor_113_GetUserPermission_DOWN();
  Processor_114_ChangePermission::default_instance_ = new Processor_114_ChangePermission();
  GroupPermission::default_instance_ = new GroupPermission();
  Processor_115_GetGroupSetting_UP::default_instance_ = new Processor_115_GetGroupSetting_UP();
  Processor_115_GetGroupSetting_DOWN::default_instance_ = new Processor_115_GetGroupSetting_DOWN();
  Processor_116_ChangeGroupSetting::default_instance_ = new Processor_116_ChangeGroupSetting();
  Processor_118_SendVerification::default_instance_ = new Processor_118_SendVerification();
  Processor_119_BindPhone::default_instance_ = new Processor_119_BindPhone();
  GroupSetting::default_instance_ = new GroupSetting();
  FriendInfo::default_instance_ = new FriendInfo();
  Processor_120_GetFriendList::default_instance_ = new Processor_120_GetFriendList();
  Processor_121_SearchUser_UP::default_instance_ = new Processor_121_SearchUser_UP();
  Processor_121_SearchUser_DOWN::default_instance_ = new Processor_121_SearchUser_DOWN();
  Processor_122_SendRequest::default_instance_ = new Processor_122_SendRequest();
  Processor_123_ReceiveRequestList::default_instance_ = new Processor_123_ReceiveRequestList();
  Invitation::default_instance_ = new Invitation();
  Request::default_instance_ = new Request();
  Processor_124_DealRequest::default_instance_ = new Processor_124_DealRequest();
  Processor_124_DealRequest_DOWN::default_instance_ = new Processor_124_DealRequest_DOWN();
  Processor_125_DeleteFriend::default_instance_ = new Processor_125_DeleteFriend();
  Processor_126_Set_MomentBlock::default_instance_ = new Processor_126_Set_MomentBlock();
  Processor_127_SearchFriendByPhoneNumber_UP::default_instance_ = new Processor_127_SearchFriendByPhoneNumber_UP();
  FriendByPhoneNumber::default_instance_ = new FriendByPhoneNumber();
  Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance_ = new Processor_127_SearchFriendByPhoneNumber_DOWN();
  Processor_128_GetMomentBlockUsers_DOWN::default_instance_ = new Processor_128_GetMomentBlockUsers_DOWN();
  Processor_130_Send_Diamond::default_instance_ = new Processor_130_Send_Diamond();
  ChatMessage::default_instance_ = new ChatMessage();
  MessageInfo::default_instance_ = new MessageInfo();
  TextMessageInfo::default_instance_ = new TextMessageInfo();
  PicMessageInfo::default_instance_ = new PicMessageInfo();
  VoiceMessageInfo::default_instance_ = new VoiceMessageInfo();
  CreateRoomMessageInfo::default_instance_ = new CreateRoomMessageInfo();
  GroupNoticeMessageInfo::default_instance_ = new GroupNoticeMessageInfo();
  InviteIntoGroup::default_instance_ = new InviteIntoGroup();
  OutGroup::default_instance_ = new OutGroup();
  IntoGroup::default_instance_ = new IntoGroup();
  GroupInfo::default_instance_ = new GroupInfo();
  Processor_140_CreateGroup::default_instance_ = new Processor_140_CreateGroup();
  Processor_140_CreateGroup_Down::default_instance_ = new Processor_140_CreateGroup_Down();
  Processor_141_EditGroup::default_instance_ = new Processor_141_EditGroup();
  Processor_142_SearchGroup_UP::default_instance_ = new Processor_142_SearchGroup_UP();
  Processor_142_SearchGroup_DOWN::default_instance_ = new Processor_142_SearchGroup_DOWN();
  Processor_144_KickUserFromGroup::default_instance_ = new Processor_144_KickUserFromGroup();
  Processor_145_GetGroupInfo_UP::default_instance_ = new Processor_145_GetGroupInfo_UP();
  Processor_145_GetGroupInfo_DOWN::default_instance_ = new Processor_145_GetGroupInfo_DOWN();
  Processor_146_GetGroupDetailInfo_UP::default_instance_ = new Processor_146_GetGroupDetailInfo_UP();
  GroupUserInfo::default_instance_ = new GroupUserInfo();
  GroupManageSetting::default_instance_ = new GroupManageSetting();
  Processor_146_GetGroupDetailInfo_DOWN::default_instance_ = new Processor_146_GetGroupDetailInfo_DOWN();
  Processor_147_SetGroupManageSetting::default_instance_ = new Processor_147_SetGroupManageSetting();
  Processor_148_SetGroupAdmin::default_instance_ = new Processor_148_SetGroupAdmin();
  RoomTypeInfo::default_instance_ = new RoomTypeInfo();
  RoomInfo::default_instance_ = new RoomInfo();
  Processor_150_GetRoomInfo_UP::default_instance_ = new Processor_150_GetRoomInfo_UP();
  Processor_150_GetRoomInfo_DOWN::default_instance_ = new Processor_150_GetRoomInfo_DOWN();
  CreateRoomInfo::default_instance_ = new CreateRoomInfo();
  BlindLevel::default_instance_ = new BlindLevel();
  TournamentLevel::default_instance_ = new TournamentLevel();
  PrizeLevel::default_instance_ = new PrizeLevel();
  TournamentPrize::default_instance_ = new TournamentPrize();
  TournamentInfo::default_instance_ = new TournamentInfo();
  RoomProp::default_instance_ = new RoomProp();
  Processor_151_GetRoomInfomation::default_instance_ = new Processor_151_GetRoomInfomation();
  Processor_152_CreateRoom::default_instance_ = new Processor_152_CreateRoom();
  Processor_152_CreateRoom_down::default_instance_ = new Processor_152_CreateRoom_down();
  Processor_154_CancelTournament::default_instance_ = new Processor_154_CancelTournament();
  Processor_160_SendChatMessage::default_instance_ = new Processor_160_SendChatMessage();
  Processor_160_SendChatMessage_Down::default_instance_ = new Processor_160_SendChatMessage_Down();
  Processor_161_ReceiveChatMessage::default_instance_ = new Processor_161_ReceiveChatMessage();
  Processor_161_ReceiveChatMessage_UP::default_instance_ = new Processor_161_ReceiveChatMessage_UP();
  Processor_170_GetHistoryScore_Up::default_instance_ = new Processor_170_GetHistoryScore_Up();
  HistoryScore::default_instance_ = new HistoryScore();
  Processor_170_GetHistoryScore_Down::default_instance_ = new Processor_170_GetHistoryScore_Down();
  Processor_171_GetGroupUserRank_UP::default_instance_ = new Processor_171_GetGroupUserRank_UP();
  Processor_171_GetGroupUserRank_DOWN::default_instance_ = new Processor_171_GetGroupUserRank_DOWN();
  Processor_181_JoinTournament::default_instance_ = new Processor_181_JoinTournament();
  Processor_182_TournamentStart::default_instance_ = new Processor_182_TournamentStart();
  Processor_190_ReceiveMessage::default_instance_ = new Processor_190_ReceiveMessage();
  Processor_190_ReceiveMessage_UP::default_instance_ = new Processor_190_ReceiveMessage_UP();
  Processor_191_NotifyChange::default_instance_ = new Processor_191_NotifyChange();
  Moment::default_instance_ = new Moment();
  CommentInfos::default_instance_ = new CommentInfos();
  MomentInfo::default_instance_ = new MomentInfo();
  NormalMomentInfo::default_instance_ = new NormalMomentInfo();
  Processor_200_PublishMoment::default_instance_ = new Processor_200_PublishMoment();
  Processor_201_GetMoment_UP::default_instance_ = new Processor_201_GetMoment_UP();
  Processor_201_GetMoment_DOWN::default_instance_ = new Processor_201_GetMoment_DOWN();
  Processor_202_DeleteMoment::default_instance_ = new Processor_202_DeleteMoment();
  CommentInfo::default_instance_ = new CommentInfo();
  Processor_203_PublishComment::default_instance_ = new Processor_203_PublishComment();
  Processor_204_GetComment_UP::default_instance_ = new Processor_204_GetComment_UP();
  Processor_204_GetComment_DOWN::default_instance_ = new Processor_204_GetComment_DOWN();
  Processor_205_DeleteMoment::default_instance_ = new Processor_205_DeleteMoment();
  Processor_400_LoginRoom_UP::default_instance_ = new Processor_400_LoginRoom_UP();
  Processor_400_LoginRoom_DOWN::default_instance_ = new Processor_400_LoginRoom_DOWN();
  Processor_410_EnterRoom::default_instance_ = new Processor_410_EnterRoom();
  Processor_410_EnterRoom_DOWN::default_instance_ = new Processor_410_EnterRoom_DOWN();
  Processor_411_SendSeatInfo::default_instance_ = new Processor_411_SendSeatInfo();
  Processor_411_SendSeatInfo_Down::default_instance_ = new Processor_411_SendSeatInfo_Down();
  PlayerSitStatus::default_instance_ = new PlayerSitStatus();
  Processor_412_ReceiveSeatInfo::default_instance_ = new Processor_412_ReceiveSeatInfo();
  Processor_413_ReceiveGameStart::default_instance_ = new Processor_413_ReceiveGameStart();
  Processor_414_ReceiveGameEnd::default_instance_ = new Processor_414_ReceiveGameEnd();
  Processor_415_DisableAutoAction::default_instance_ = new Processor_415_DisableAutoAction();
  ActionRequest::default_instance_ = new ActionRequest();
  Processor_417_ReceiveOtherPlayerAction::default_instance_ = new Processor_417_ReceiveOtherPlayerAction();
  Processor_420_PokerGetScore_UP::default_instance_ = new Processor_420_PokerGetScore_UP();
  PlayerScore::default_instance_ = new PlayerScore();
  PlayerScores::default_instance_ = new PlayerScores();
  Processor_420_PokerGetScore_DOWN::default_instance_ = new Processor_420_PokerGetScore_DOWN();
  Processor_430_SendGameVoice::default_instance_ = new Processor_430_SendGameVoice();
  Processor_431_ReceiveGameVoice::default_instance_ = new Processor_431_ReceiveGameVoice();
  Processor_440_SetGameStatus::default_instance_ = new Processor_440_SetGameStatus();
  Processor_441_KickPlayer::default_instance_ = new Processor_441_KickPlayer();
  Processor_442_ReceiveGameStatus::default_instance_ = new Processor_442_ReceiveGameStatus();
  Processor_490_ReceiveRoomClose::default_instance_ = new Processor_490_ReceiveRoomClose();
  Processor_491_ReceiveRoomMessage::default_instance_ = new Processor_491_ReceiveRoomMessage();
  Processor_495_ReceiveRequest::default_instance_ = new Processor_495_ReceiveRequest();
  Processor_496_ReplyRequest::default_instance_ = new Processor_496_ReplyRequest();
  CommonRoomInfo::default_instance_ = new CommonRoomInfo();
  CommonPlayerInfo::default_instance_ = new CommonPlayerInfo();
  Processor_500_PokerRefreshAll::default_instance_ = new Processor_500_PokerRefreshAll();
  PokerPlayerSetting::default_instance_ = new PokerPlayerSetting();
  PokerPlayerInfo::default_instance_ = new PokerPlayerInfo();
  TableInfo::default_instance_ = new TableInfo();
  TableAndUserUpdate::default_instance_ = new TableAndUserUpdate();
  PokerActionRequest::default_instance_ = new PokerActionRequest();
  Processor_501_PokerRequestAction::default_instance_ = new Processor_501_PokerRequestAction();
  Processor_502_PokerSendAction::default_instance_ = new Processor_502_PokerSendAction();
  Processor_503_PokerReceivePropUpdate::default_instance_ = new Processor_503_PokerReceivePropUpdate();
  Processor_510_PokerAddChips::default_instance_ = new Processor_510_PokerAddChips();
  Processor_511_PokerReceiveNeedChip::default_instance_ = new Processor_511_PokerReceiveNeedChip();
  Processor_512_PokerRequestChoice::default_instance_ = new Processor_512_PokerRequestChoice();
  Processor_513_PokerReplyChoice::default_instance_ = new Processor_513_PokerReplyChoice();
  Processor_514_PokerReceiveTableNote::default_instance_ = new Processor_514_PokerReceiveTableNote();
  Processor_515_PokerSendSetting::default_instance_ = new Processor_515_PokerSendSetting();
  Processor_516_PokerReceiveSettingChange::default_instance_ = new Processor_516_PokerReceiveSettingChange();
  Processor_517_PokerSendShowCard::default_instance_ = new Processor_517_PokerSendShowCard();
  PlayerWin::default_instance_ = new PlayerWin();
  PlayerHandResult::default_instance_ = new PlayerHandResult();
  Pot::default_instance_ = new Pot();
  HandResultInfo::default_instance_ = new HandResultInfo();
  Processor_520_PokerReceiveHandResult::default_instance_ = new Processor_520_PokerReceiveHandResult();
  Processor_530_PokerGetTourmentStatus_UP::default_instance_ = new Processor_530_PokerGetTourmentStatus_UP();
  Processor_530_PokerGetTourmentStatus_DOWN::default_instance_ = new Processor_530_PokerGetTourmentStatus_DOWN();
  TourmentTableInfo::default_instance_ = new TourmentTableInfo();
  Processor_531_PokerTourmentChangeTable::default_instance_ = new Processor_531_PokerTourmentChangeTable();
  Processor_532_PokerTournamentRequestAddon::default_instance_ = new Processor_532_PokerTournamentRequestAddon();
  Processor_533_PokerTournamentAddon::default_instance_ = new Processor_533_PokerTournamentAddon();
  OFCPlayerInfo::default_instance_ = new OFCPlayerInfo();
  OFCPlayerSetting::default_instance_ = new OFCPlayerSetting();
  OFCPropUpdate::default_instance_ = new OFCPropUpdate();
  OFCResult::default_instance_ = new OFCResult();
  Processor_600_OFCRefreshAll::default_instance_ = new Processor_600_OFCRefreshAll();
  Processor_601_OFCReceivePropUpdate::default_instance_ = new Processor_601_OFCReceivePropUpdate();
  OFCPlayerCard::default_instance_ = new OFCPlayerCard();
  Processor_602_OFCSendPlayerCard::default_instance_ = new Processor_602_OFCSendPlayerCard();
  UserCompare::default_instance_ = new UserCompare();
  OFCPlayerHandResult::default_instance_ = new OFCPlayerHandResult();
  Processor_610_OFCReceiveResult::default_instance_ = new Processor_610_OFCReceiveResult();
  Processor_615_OFCSendSetting::default_instance_ = new Processor_615_OFCSendSetting();
  Processor_616_OFCReceiveSettingChange::default_instance_ = new Processor_616_OFCReceiveSettingChange();
  MahjongPlayerInfo::default_instance_ = new MahjongPlayerInfo();
  MahjongFu::default_instance_ = new MahjongFu();
  MahjongScoreChange::default_instance_ = new MahjongScoreChange();
  MahjongPlayerSetting::default_instance_ = new MahjongPlayerSetting();
  MahjongPropUpdate::default_instance_ = new MahjongPropUpdate();
  MahjongTing::default_instance_ = new MahjongTing();
  MahjongPossibleTing::default_instance_ = new MahjongPossibleTing();
  MahjongActionRequest::default_instance_ = new MahjongActionRequest();
  Processor_700_MahjongRefreshAll::default_instance_ = new Processor_700_MahjongRefreshAll();
  Processor_701_MahjongReceivePropUpdate::default_instance_ = new Processor_701_MahjongReceivePropUpdate();
  Processor_702_MahjongSendPlayerChoice::default_instance_ = new Processor_702_MahjongSendPlayerChoice();
  MahjongAction::default_instance_ = new MahjongAction();
  MahjongTestAllWinCardAndType::default_instance_ = new MahjongTestAllWinCardAndType();
  MahjongWinCardAndType::default_instance_ = new MahjongWinCardAndType();
  Processor_703_MahjongReceivePlayerAction::default_instance_ = new Processor_703_MahjongReceivePlayerAction();
  Processor_715_MahjongSendSetting::default_instance_ = new Processor_715_MahjongSendSetting();
  Processor_716_MahjongReceiveSettingChange::default_instance_ = new Processor_716_MahjongReceiveSettingChange();
  Processor_300_PokerGetHandHistory_UP::default_instance_ = new Processor_300_PokerGetHandHistory_UP();
  PokerStep::default_instance_ = new PokerStep();
  PokerBlinds::default_instance_ = new PokerBlinds();
  PokerBlind::default_instance_ = new PokerBlind();
  PokerPlayerActionInfo::default_instance_ = new PokerPlayerActionInfo();
  OFCStep::default_instance_ = new OFCStep();
  OFCPlayerActionInfo::default_instance_ = new OFCPlayerActionInfo();
  MahjongStep::default_instance_ = new MahjongStep();
  ReplayStep::default_instance_ = new ReplayStep();
  ReplaySteps::default_instance_ = new ReplaySteps();
  ReplayPlayers::default_instance_ = new ReplayPlayers();
  ReplayPlayer::default_instance_ = new ReplayPlayer();
  HandBaseInfo::default_instance_ = new HandBaseInfo();
  Processor_300_PokerGetHandHistory_DOWN::default_instance_ = new Processor_300_PokerGetHandHistory_DOWN();
  Processor_1000_RegisterServer_OtherToCore::default_instance_ = new Processor_1000_RegisterServer_OtherToCore();
  Processor_1000_RegisterServer_CoreToOther::default_instance_ = new Processor_1000_RegisterServer_CoreToOther();
  ServerInfo::default_instance_ = new ServerInfo();
  ServerInfos::default_instance_ = new ServerInfos();
  Processor_HTMLRegister::default_instance_ = new Processor_HTMLRegister();
  Processor_HTMLRegisterEnterRoom::default_instance_ = new Processor_HTMLRegisterEnterRoom();
  Processor_1003_ChangeUserInfo_ResToCore::default_instance_ = new Processor_1003_ChangeUserInfo_ResToCore();
  Processor_1004_ChangeUserInfo_CoreToOther::default_instance_ = new Processor_1004_ChangeUserInfo_CoreToOther();
  Processor_1005_OnlineInfo_OtherToCore::default_instance_ = new Processor_1005_OnlineInfo_OtherToCore();
  ServerRoomInfo::default_instance_ = new ServerRoomInfo();
  Processor_1006_RoomInfo::default_instance_ = new Processor_1006_RoomInfo();
  Processor_1009_CreateRoom_ResToCore::default_instance_ = new Processor_1009_CreateRoom_ResToCore();
  Processor_1010_CreateRoom_CoreToRoom::default_instance_ = new Processor_1010_CreateRoom_CoreToRoom();
  Processor_1011_ChangeServerProp::default_instance_ = new Processor_1011_ChangeServerProp();
  Parameter::default_instance_ = new Parameter();
  Processor_1012_WXPayMsg::default_instance_ = new Processor_1012_WXPayMsg();
  Processor_1100_ShutDown_ConsoleToCore::default_instance_ = new Processor_1100_ShutDown_ConsoleToCore();
  Processor_1101_ShutDown_CoreToOther::default_instance_ = new Processor_1101_ShutDown_CoreToOther();
  Processor_1105_ServerInformation_CoreToConsole::default_instance_ = new Processor_1105_ServerInformation_CoreToConsole();
  Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance_ = new Processor_1107_SERVER_RESET_TOURMENT_CREDIT();
  Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance_ = new Processor_1108_SEARCH_CREDIT_RANK_UP();
  Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance_ = new Processor_1108_SEARCH_CREDIT_RANK_DOWN();
  Processor_1109_PUBLISH_SYS_MESSAGE::default_instance_ = new Processor_1109_PUBLISH_SYS_MESSAGE();
  Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance_ = new Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE();
  UserTourCreditInfo::default_instance_ = new UserTourCreditInfo();
  ChatMessages::default_instance_ = new ChatMessages();
  InvitationsForSave::default_instance_ = new InvitationsForSave();
  ChatMessageForSave::default_instance_ = new ChatMessageForSave();
  OldChatMessageForSave::default_instance_ = new OldChatMessageForSave();
  GameRecord::default_instance_ = new GameRecord();
  GameRecordForSave::default_instance_ = new GameRecordForSave();
  CreateRoomInfoForSave::default_instance_ = new CreateRoomInfoForSave();
  ClientUserSetting::default_instance_ = new ClientUserSetting();
  ClientRequestHead::default_instance_->InitAsDefaultInstance();
  ClientResponseHead::default_instance_->InitAsDefaultInstance();
  ServerMessageHead::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  RoomResponse::default_instance_->InitAsDefaultInstance();
  ClientInfo::default_instance_->InitAsDefaultInstance();
  UserLoginInfo::default_instance_->InitAsDefaultInstance();
  UserDetailInfo::default_instance_->InitAsDefaultInstance();
  Processor_1_VersionCheck::default_instance_->InitAsDefaultInstance();
  Processor_10_LoginCoreServer::default_instance_->InitAsDefaultInstance();
  Processor_10_LoginCore::default_instance_->InitAsDefaultInstance();
  Processor_11_CONSOLEHEARTJUMP::default_instance_->InitAsDefaultInstance();
  Processor_30_UploadFile::default_instance_->InitAsDefaultInstance();
  Processor_31_DownloadFile_UP::default_instance_->InitAsDefaultInstance();
  Processor_31_DownloadFile_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_97_SendVerificationByUserID::default_instance_->InitAsDefaultInstance();
  Processor_98_ResetPassword::default_instance_->InitAsDefaultInstance();
  Processor_99_Login_UP::default_instance_->InitAsDefaultInstance();
  Processor_99_Login_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_100_LoginResource::default_instance_->InitAsDefaultInstance();
  Processor_100_LoginResource_Down::default_instance_->InitAsDefaultInstance();
  RoomInfomation::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  IntValue::default_instance_->InitAsDefaultInstance();
  EnumValue::default_instance_->InitAsDefaultInstance();
  EnumItem::default_instance_->InitAsDefaultInstance();
  Processor_103_FeedBack::default_instance_->InitAsDefaultInstance();
  Processor_104_Register::default_instance_->InitAsDefaultInstance();
  Processor_105_Device::default_instance_->InitAsDefaultInstance();
  Processor_106_ReceiveIOSPayReceipt::default_instance_->InitAsDefaultInstance();
  Processor_106_ReceiveIOSPayReceipt_Down::default_instance_->InitAsDefaultInstance();
  GoodInfo::default_instance_->InitAsDefaultInstance();
  Processor_107_GetGoodsInfo::default_instance_->InitAsDefaultInstance();
  Processor_108_BuyGood::default_instance_->InitAsDefaultInstance();
  Processor_109_AndroidPay::default_instance_->InitAsDefaultInstance();
  Processor_109_AndroidPayDown::default_instance_->InitAsDefaultInstance();
  FeedBack::default_instance_->InitAsDefaultInstance();
  UserGameSetting::default_instance_->InitAsDefaultInstance();
  UserGameSettings::default_instance_->InitAsDefaultInstance();
  Processor_111_GetUserSetting::default_instance_->InitAsDefaultInstance();
  Processor_112_ChangeUserSetting::default_instance_->InitAsDefaultInstance();
  Processor_113_GetUserPermission_UP::default_instance_->InitAsDefaultInstance();
  Processor_113_GetUserPermission_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_114_ChangePermission::default_instance_->InitAsDefaultInstance();
  GroupPermission::default_instance_->InitAsDefaultInstance();
  Processor_115_GetGroupSetting_UP::default_instance_->InitAsDefaultInstance();
  Processor_115_GetGroupSetting_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_116_ChangeGroupSetting::default_instance_->InitAsDefaultInstance();
  Processor_118_SendVerification::default_instance_->InitAsDefaultInstance();
  Processor_119_BindPhone::default_instance_->InitAsDefaultInstance();
  GroupSetting::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  Processor_120_GetFriendList::default_instance_->InitAsDefaultInstance();
  Processor_121_SearchUser_UP::default_instance_->InitAsDefaultInstance();
  Processor_121_SearchUser_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_122_SendRequest::default_instance_->InitAsDefaultInstance();
  Processor_123_ReceiveRequestList::default_instance_->InitAsDefaultInstance();
  Invitation::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Processor_124_DealRequest::default_instance_->InitAsDefaultInstance();
  Processor_124_DealRequest_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_125_DeleteFriend::default_instance_->InitAsDefaultInstance();
  Processor_126_Set_MomentBlock::default_instance_->InitAsDefaultInstance();
  Processor_127_SearchFriendByPhoneNumber_UP::default_instance_->InitAsDefaultInstance();
  FriendByPhoneNumber::default_instance_->InitAsDefaultInstance();
  Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_128_GetMomentBlockUsers_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_130_Send_Diamond::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  MessageInfo::default_instance_->InitAsDefaultInstance();
  TextMessageInfo::default_instance_->InitAsDefaultInstance();
  PicMessageInfo::default_instance_->InitAsDefaultInstance();
  VoiceMessageInfo::default_instance_->InitAsDefaultInstance();
  CreateRoomMessageInfo::default_instance_->InitAsDefaultInstance();
  GroupNoticeMessageInfo::default_instance_->InitAsDefaultInstance();
  InviteIntoGroup::default_instance_->InitAsDefaultInstance();
  OutGroup::default_instance_->InitAsDefaultInstance();
  IntoGroup::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  Processor_140_CreateGroup::default_instance_->InitAsDefaultInstance();
  Processor_140_CreateGroup_Down::default_instance_->InitAsDefaultInstance();
  Processor_141_EditGroup::default_instance_->InitAsDefaultInstance();
  Processor_142_SearchGroup_UP::default_instance_->InitAsDefaultInstance();
  Processor_142_SearchGroup_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_144_KickUserFromGroup::default_instance_->InitAsDefaultInstance();
  Processor_145_GetGroupInfo_UP::default_instance_->InitAsDefaultInstance();
  Processor_145_GetGroupInfo_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_146_GetGroupDetailInfo_UP::default_instance_->InitAsDefaultInstance();
  GroupUserInfo::default_instance_->InitAsDefaultInstance();
  GroupManageSetting::default_instance_->InitAsDefaultInstance();
  Processor_146_GetGroupDetailInfo_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_147_SetGroupManageSetting::default_instance_->InitAsDefaultInstance();
  Processor_148_SetGroupAdmin::default_instance_->InitAsDefaultInstance();
  RoomTypeInfo::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  Processor_150_GetRoomInfo_UP::default_instance_->InitAsDefaultInstance();
  Processor_150_GetRoomInfo_DOWN::default_instance_->InitAsDefaultInstance();
  CreateRoomInfo::default_instance_->InitAsDefaultInstance();
  BlindLevel::default_instance_->InitAsDefaultInstance();
  TournamentLevel::default_instance_->InitAsDefaultInstance();
  PrizeLevel::default_instance_->InitAsDefaultInstance();
  TournamentPrize::default_instance_->InitAsDefaultInstance();
  TournamentInfo::default_instance_->InitAsDefaultInstance();
  RoomProp::default_instance_->InitAsDefaultInstance();
  Processor_151_GetRoomInfomation::default_instance_->InitAsDefaultInstance();
  Processor_152_CreateRoom::default_instance_->InitAsDefaultInstance();
  Processor_152_CreateRoom_down::default_instance_->InitAsDefaultInstance();
  Processor_154_CancelTournament::default_instance_->InitAsDefaultInstance();
  Processor_160_SendChatMessage::default_instance_->InitAsDefaultInstance();
  Processor_160_SendChatMessage_Down::default_instance_->InitAsDefaultInstance();
  Processor_161_ReceiveChatMessage::default_instance_->InitAsDefaultInstance();
  Processor_161_ReceiveChatMessage_UP::default_instance_->InitAsDefaultInstance();
  Processor_170_GetHistoryScore_Up::default_instance_->InitAsDefaultInstance();
  HistoryScore::default_instance_->InitAsDefaultInstance();
  Processor_170_GetHistoryScore_Down::default_instance_->InitAsDefaultInstance();
  Processor_171_GetGroupUserRank_UP::default_instance_->InitAsDefaultInstance();
  Processor_171_GetGroupUserRank_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_181_JoinTournament::default_instance_->InitAsDefaultInstance();
  Processor_182_TournamentStart::default_instance_->InitAsDefaultInstance();
  Processor_190_ReceiveMessage::default_instance_->InitAsDefaultInstance();
  Processor_190_ReceiveMessage_UP::default_instance_->InitAsDefaultInstance();
  Processor_191_NotifyChange::default_instance_->InitAsDefaultInstance();
  Moment::default_instance_->InitAsDefaultInstance();
  CommentInfos::default_instance_->InitAsDefaultInstance();
  MomentInfo::default_instance_->InitAsDefaultInstance();
  NormalMomentInfo::default_instance_->InitAsDefaultInstance();
  Processor_200_PublishMoment::default_instance_->InitAsDefaultInstance();
  Processor_201_GetMoment_UP::default_instance_->InitAsDefaultInstance();
  Processor_201_GetMoment_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_202_DeleteMoment::default_instance_->InitAsDefaultInstance();
  CommentInfo::default_instance_->InitAsDefaultInstance();
  Processor_203_PublishComment::default_instance_->InitAsDefaultInstance();
  Processor_204_GetComment_UP::default_instance_->InitAsDefaultInstance();
  Processor_204_GetComment_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_205_DeleteMoment::default_instance_->InitAsDefaultInstance();
  Processor_400_LoginRoom_UP::default_instance_->InitAsDefaultInstance();
  Processor_400_LoginRoom_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_410_EnterRoom::default_instance_->InitAsDefaultInstance();
  Processor_410_EnterRoom_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_411_SendSeatInfo::default_instance_->InitAsDefaultInstance();
  Processor_411_SendSeatInfo_Down::default_instance_->InitAsDefaultInstance();
  PlayerSitStatus::default_instance_->InitAsDefaultInstance();
  Processor_412_ReceiveSeatInfo::default_instance_->InitAsDefaultInstance();
  Processor_413_ReceiveGameStart::default_instance_->InitAsDefaultInstance();
  Processor_414_ReceiveGameEnd::default_instance_->InitAsDefaultInstance();
  Processor_415_DisableAutoAction::default_instance_->InitAsDefaultInstance();
  ActionRequest::default_instance_->InitAsDefaultInstance();
  Processor_417_ReceiveOtherPlayerAction::default_instance_->InitAsDefaultInstance();
  Processor_420_PokerGetScore_UP::default_instance_->InitAsDefaultInstance();
  PlayerScore::default_instance_->InitAsDefaultInstance();
  PlayerScores::default_instance_->InitAsDefaultInstance();
  Processor_420_PokerGetScore_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_430_SendGameVoice::default_instance_->InitAsDefaultInstance();
  Processor_431_ReceiveGameVoice::default_instance_->InitAsDefaultInstance();
  Processor_440_SetGameStatus::default_instance_->InitAsDefaultInstance();
  Processor_441_KickPlayer::default_instance_->InitAsDefaultInstance();
  Processor_442_ReceiveGameStatus::default_instance_->InitAsDefaultInstance();
  Processor_490_ReceiveRoomClose::default_instance_->InitAsDefaultInstance();
  Processor_491_ReceiveRoomMessage::default_instance_->InitAsDefaultInstance();
  Processor_495_ReceiveRequest::default_instance_->InitAsDefaultInstance();
  Processor_496_ReplyRequest::default_instance_->InitAsDefaultInstance();
  CommonRoomInfo::default_instance_->InitAsDefaultInstance();
  CommonPlayerInfo::default_instance_->InitAsDefaultInstance();
  Processor_500_PokerRefreshAll::default_instance_->InitAsDefaultInstance();
  PokerPlayerSetting::default_instance_->InitAsDefaultInstance();
  PokerPlayerInfo::default_instance_->InitAsDefaultInstance();
  TableInfo::default_instance_->InitAsDefaultInstance();
  TableAndUserUpdate::default_instance_->InitAsDefaultInstance();
  PokerActionRequest::default_instance_->InitAsDefaultInstance();
  Processor_501_PokerRequestAction::default_instance_->InitAsDefaultInstance();
  Processor_502_PokerSendAction::default_instance_->InitAsDefaultInstance();
  Processor_503_PokerReceivePropUpdate::default_instance_->InitAsDefaultInstance();
  Processor_510_PokerAddChips::default_instance_->InitAsDefaultInstance();
  Processor_511_PokerReceiveNeedChip::default_instance_->InitAsDefaultInstance();
  Processor_512_PokerRequestChoice::default_instance_->InitAsDefaultInstance();
  Processor_513_PokerReplyChoice::default_instance_->InitAsDefaultInstance();
  Processor_514_PokerReceiveTableNote::default_instance_->InitAsDefaultInstance();
  Processor_515_PokerSendSetting::default_instance_->InitAsDefaultInstance();
  Processor_516_PokerReceiveSettingChange::default_instance_->InitAsDefaultInstance();
  Processor_517_PokerSendShowCard::default_instance_->InitAsDefaultInstance();
  PlayerWin::default_instance_->InitAsDefaultInstance();
  PlayerHandResult::default_instance_->InitAsDefaultInstance();
  Pot::default_instance_->InitAsDefaultInstance();
  HandResultInfo::default_instance_->InitAsDefaultInstance();
  Processor_520_PokerReceiveHandResult::default_instance_->InitAsDefaultInstance();
  Processor_530_PokerGetTourmentStatus_UP::default_instance_->InitAsDefaultInstance();
  Processor_530_PokerGetTourmentStatus_DOWN::default_instance_->InitAsDefaultInstance();
  TourmentTableInfo::default_instance_->InitAsDefaultInstance();
  Processor_531_PokerTourmentChangeTable::default_instance_->InitAsDefaultInstance();
  Processor_532_PokerTournamentRequestAddon::default_instance_->InitAsDefaultInstance();
  Processor_533_PokerTournamentAddon::default_instance_->InitAsDefaultInstance();
  OFCPlayerInfo::default_instance_->InitAsDefaultInstance();
  OFCPlayerSetting::default_instance_->InitAsDefaultInstance();
  OFCPropUpdate::default_instance_->InitAsDefaultInstance();
  OFCResult::default_instance_->InitAsDefaultInstance();
  Processor_600_OFCRefreshAll::default_instance_->InitAsDefaultInstance();
  Processor_601_OFCReceivePropUpdate::default_instance_->InitAsDefaultInstance();
  OFCPlayerCard::default_instance_->InitAsDefaultInstance();
  Processor_602_OFCSendPlayerCard::default_instance_->InitAsDefaultInstance();
  UserCompare::default_instance_->InitAsDefaultInstance();
  OFCPlayerHandResult::default_instance_->InitAsDefaultInstance();
  Processor_610_OFCReceiveResult::default_instance_->InitAsDefaultInstance();
  Processor_615_OFCSendSetting::default_instance_->InitAsDefaultInstance();
  Processor_616_OFCReceiveSettingChange::default_instance_->InitAsDefaultInstance();
  MahjongPlayerInfo::default_instance_->InitAsDefaultInstance();
  MahjongFu::default_instance_->InitAsDefaultInstance();
  MahjongScoreChange::default_instance_->InitAsDefaultInstance();
  MahjongPlayerSetting::default_instance_->InitAsDefaultInstance();
  MahjongPropUpdate::default_instance_->InitAsDefaultInstance();
  MahjongTing::default_instance_->InitAsDefaultInstance();
  MahjongPossibleTing::default_instance_->InitAsDefaultInstance();
  MahjongActionRequest::default_instance_->InitAsDefaultInstance();
  Processor_700_MahjongRefreshAll::default_instance_->InitAsDefaultInstance();
  Processor_701_MahjongReceivePropUpdate::default_instance_->InitAsDefaultInstance();
  Processor_702_MahjongSendPlayerChoice::default_instance_->InitAsDefaultInstance();
  MahjongAction::default_instance_->InitAsDefaultInstance();
  MahjongTestAllWinCardAndType::default_instance_->InitAsDefaultInstance();
  MahjongWinCardAndType::default_instance_->InitAsDefaultInstance();
  Processor_703_MahjongReceivePlayerAction::default_instance_->InitAsDefaultInstance();
  Processor_715_MahjongSendSetting::default_instance_->InitAsDefaultInstance();
  Processor_716_MahjongReceiveSettingChange::default_instance_->InitAsDefaultInstance();
  Processor_300_PokerGetHandHistory_UP::default_instance_->InitAsDefaultInstance();
  PokerStep::default_instance_->InitAsDefaultInstance();
  PokerBlinds::default_instance_->InitAsDefaultInstance();
  PokerBlind::default_instance_->InitAsDefaultInstance();
  PokerPlayerActionInfo::default_instance_->InitAsDefaultInstance();
  OFCStep::default_instance_->InitAsDefaultInstance();
  OFCPlayerActionInfo::default_instance_->InitAsDefaultInstance();
  MahjongStep::default_instance_->InitAsDefaultInstance();
  ReplayStep::default_instance_->InitAsDefaultInstance();
  ReplaySteps::default_instance_->InitAsDefaultInstance();
  ReplayPlayers::default_instance_->InitAsDefaultInstance();
  ReplayPlayer::default_instance_->InitAsDefaultInstance();
  HandBaseInfo::default_instance_->InitAsDefaultInstance();
  Processor_300_PokerGetHandHistory_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_1000_RegisterServer_OtherToCore::default_instance_->InitAsDefaultInstance();
  Processor_1000_RegisterServer_CoreToOther::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ServerInfos::default_instance_->InitAsDefaultInstance();
  Processor_HTMLRegister::default_instance_->InitAsDefaultInstance();
  Processor_HTMLRegisterEnterRoom::default_instance_->InitAsDefaultInstance();
  Processor_1003_ChangeUserInfo_ResToCore::default_instance_->InitAsDefaultInstance();
  Processor_1004_ChangeUserInfo_CoreToOther::default_instance_->InitAsDefaultInstance();
  Processor_1005_OnlineInfo_OtherToCore::default_instance_->InitAsDefaultInstance();
  ServerRoomInfo::default_instance_->InitAsDefaultInstance();
  Processor_1006_RoomInfo::default_instance_->InitAsDefaultInstance();
  Processor_1009_CreateRoom_ResToCore::default_instance_->InitAsDefaultInstance();
  Processor_1010_CreateRoom_CoreToRoom::default_instance_->InitAsDefaultInstance();
  Processor_1011_ChangeServerProp::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  Processor_1012_WXPayMsg::default_instance_->InitAsDefaultInstance();
  Processor_1100_ShutDown_ConsoleToCore::default_instance_->InitAsDefaultInstance();
  Processor_1101_ShutDown_CoreToOther::default_instance_->InitAsDefaultInstance();
  Processor_1105_ServerInformation_CoreToConsole::default_instance_->InitAsDefaultInstance();
  Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance_->InitAsDefaultInstance();
  Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance_->InitAsDefaultInstance();
  Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance_->InitAsDefaultInstance();
  Processor_1109_PUBLISH_SYS_MESSAGE::default_instance_->InitAsDefaultInstance();
  Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance_->InitAsDefaultInstance();
  UserTourCreditInfo::default_instance_->InitAsDefaultInstance();
  ChatMessages::default_instance_->InitAsDefaultInstance();
  InvitationsForSave::default_instance_->InitAsDefaultInstance();
  ChatMessageForSave::default_instance_->InitAsDefaultInstance();
  OldChatMessageForSave::default_instance_->InitAsDefaultInstance();
  GameRecord::default_instance_->InitAsDefaultInstance();
  GameRecordForSave::default_instance_->InitAsDefaultInstance();
  CreateRoomInfoForSave::default_instance_->InitAsDefaultInstance();
  ClientUserSetting::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;
const ::google_public::protobuf::EnumDescriptor* Language_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Language_descriptor_;
}
bool Language_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* Platform_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Platform_descriptor_;
}
bool Platform_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* Game_Tool_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_Tool_Type_descriptor_;
}
bool Game_Tool_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* Sex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sex_descriptor_;
}
bool Sex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* VersionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionStatus_descriptor_;
}
bool VersionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* PropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyType_descriptor_;
}
bool PropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* VerificationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationType_descriptor_;
}
bool VerificationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MessageStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageStatus_descriptor_;
}
bool MessageStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* InvitationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationStatus_descriptor_;
}
bool InvitationStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* GroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupType_descriptor_;
}
bool GroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* GroupUserStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUserStatus_descriptor_;
}
bool GroupUserStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* GroupSearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSearchType_descriptor_;
}
bool GroupSearchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* RoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomType_descriptor_;
}
bool RoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MomentDisplayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MomentDisplayType_descriptor_;
}
bool MomentDisplayType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* CommentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentType_descriptor_;
}
bool CommentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* SittingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SittingStatus_descriptor_;
}
bool SittingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* GameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}
bool GameStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* ActionChoice_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionChoice_descriptor_;
}
bool ActionChoice_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* ActionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionStatus_descriptor_;
}
bool ActionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* ChoiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChoiceType_descriptor_;
}
bool ChoiceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* TournamentStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentStatus_descriptor_;
}
bool TournamentStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* OFCRule_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCRule_descriptor_;
}
bool OFCRule_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* OFCCardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCCardType_descriptor_;
}
bool OFCCardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* OFCActionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCActionStatus_descriptor_;
}
bool OFCActionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* OFCCardLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCCardLocation_descriptor_;
}
bool OFCCardLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongFuType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongFuType_descriptor_;
}
bool MahjongFuType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongPosition_descriptor_;
}
bool MahjongPosition_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongCard_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongCard_descriptor_;
}
bool MahjongCard_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* SiChuanMahjongRule_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiChuanMahjongRule_descriptor_;
}
bool SiChuanMahjongRule_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* SiChuanMahjongWinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiChuanMahjongWinType_descriptor_;
}
bool SiChuanMahjongWinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongCardSwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongCardSwitchType_descriptor_;
}
bool MahjongCardSwitchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongCardZone_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongCardZone_descriptor_;
}
bool MahjongCardZone_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongRequestType_descriptor_;
}
bool MahjongRequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongActionChoice_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongActionChoice_descriptor_;
}
bool MahjongActionChoice_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* MahjongSuit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongSuit_descriptor_;
}
bool MahjongSuit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* PokerStepType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerStepType_descriptor_;
}
bool PokerStepType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* PokerRoundType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerRoundType_descriptor_;
}
bool PokerRoundType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* BlindType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlindType_descriptor_;
}
bool BlindType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* OFCStepType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCStepType_descriptor_;
}
bool OFCStepType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* HandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandType_descriptor_;
}
bool HandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* RoomStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatus_descriptor_;
}
bool RoomStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequestHead::kUserIDFieldNumber;
const int ClientRequestHead::kVersionFieldNumber;
const int ClientRequestHead::kLanguageFieldNumber;
const int ClientRequestHead::kPlatformFieldNumber;
const int ClientRequestHead::kTestCodeFieldNumber;
const int ClientRequestHead::kTimeMarkFieldNumber;
#endif  // !_MSC_VER

ClientRequestHead::ClientRequestHead()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ClientRequestHead)
}

void ClientRequestHead::InitAsDefaultInstance() {
}

ClientRequestHead::ClientRequestHead(const ClientRequestHead& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ClientRequestHead)
}

void ClientRequestHead::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  version_ = 0;
  language_ = 1;
  platform_ = 1;
  testcode_ = 0;
  timemark_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequestHead::~ClientRequestHead() {
  // @@protoc_insertion_point(destructor:msg.ClientRequestHead)
  SharedDtor();
}

void ClientRequestHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRequestHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ClientRequestHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequestHead_descriptor_;
}

const ClientRequestHead& ClientRequestHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ClientRequestHead* ClientRequestHead::default_instance_ = NULL;

ClientRequestHead* ClientRequestHead::New() const {
  return new ClientRequestHead;
}

void ClientRequestHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientRequestHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(userid_, version_);
    ZR_(timemark_, testcode_);
    language_ = 1;
    platform_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequestHead::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ClientRequestHead)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional int32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Language;
        break;
      }

      // optional .msg.Language Language = 3;
      case 3: {
        if (tag == 24) {
         parse_Language:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Language_IsValid(value)) {
            set_language(static_cast< ::msg::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Platform;
        break;
      }

      // optional .msg.Platform Platform = 4;
      case 4: {
        if (tag == 32) {
         parse_Platform:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Platform_IsValid(value)) {
            set_platform(static_cast< ::msg::Platform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TestCode;
        break;
      }

      // optional int32 TestCode = 5;
      case 5: {
        if (tag == 40) {
         parse_TestCode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testcode_)));
          set_has_testcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TimeMark;
        break;
      }

      // optional int64 TimeMark = 6;
      case 6: {
        if (tag == 48) {
         parse_TimeMark:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ClientRequestHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ClientRequestHead)
  return false;
#undef DO_
}

void ClientRequestHead::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ClientRequestHead)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 Version = 2;
  if (has_version()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional .msg.Language Language = 3;
  if (has_language()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->language(), output);
  }

  // optional .msg.Platform Platform = 4;
  if (has_platform()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->platform(), output);
  }

  // optional int32 TestCode = 5;
  if (has_testcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->testcode(), output);
  }

  // optional int64 TimeMark = 6;
  if (has_timemark()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(6, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ClientRequestHead)
}

::google_public::protobuf::uint8* ClientRequestHead::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ClientRequestHead)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 Version = 2;
  if (has_version()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional .msg.Language Language = 3;
  if (has_language()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->language(), target);
  }

  // optional .msg.Platform Platform = 4;
  if (has_platform()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->platform(), target);
  }

  // optional int32 TestCode = 5;
  if (has_testcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->testcode(), target);
  }

  // optional int64 TimeMark = 6;
  if (has_timemark()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ClientRequestHead)
  return target;
}

int ClientRequestHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .msg.Language Language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .msg.Platform Platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional int32 TestCode = 5;
    if (has_testcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->testcode());
    }

    // optional int64 TimeMark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->timemark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequestHead::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequestHead* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ClientRequestHead*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequestHead::MergeFrom(const ClientRequestHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_testcode()) {
      set_testcode(from.testcode());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequestHead::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequestHead::CopyFrom(const ClientRequestHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequestHead::IsInitialized() const {

  return true;
}

void ClientRequestHead::Swap(ClientRequestHead* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(version_, other->version_);
    std::swap(language_, other->language_);
    std::swap(platform_, other->platform_);
    std::swap(testcode_, other->testcode_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ClientRequestHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequestHead_descriptor_;
  metadata.reflection = ClientRequestHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientResponseHead::kTestCodeFieldNumber;
const int ClientResponseHead::kTimeMarkFieldNumber;
#endif  // !_MSC_VER

ClientResponseHead::ClientResponseHead()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ClientResponseHead)
}

void ClientResponseHead::InitAsDefaultInstance() {
}

ClientResponseHead::ClientResponseHead(const ClientResponseHead& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ClientResponseHead)
}

void ClientResponseHead::SharedCtor() {
  _cached_size_ = 0;
  testcode_ = 0;
  timemark_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResponseHead::~ClientResponseHead() {
  // @@protoc_insertion_point(destructor:msg.ClientResponseHead)
  SharedDtor();
}

void ClientResponseHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientResponseHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ClientResponseHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResponseHead_descriptor_;
}

const ClientResponseHead& ClientResponseHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ClientResponseHead* ClientResponseHead::default_instance_ = NULL;

ClientResponseHead* ClientResponseHead::New() const {
  return new ClientResponseHead;
}

void ClientResponseHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientResponseHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timemark_, testcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientResponseHead::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ClientResponseHead)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TestCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testcode_)));
          set_has_testcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TimeMark;
        break;
      }

      // optional int64 TimeMark = 2;
      case 2: {
        if (tag == 16) {
         parse_TimeMark:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ClientResponseHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ClientResponseHead)
  return false;
#undef DO_
}

void ClientResponseHead::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ClientResponseHead)
  // optional int32 TestCode = 1;
  if (has_testcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->testcode(), output);
  }

  // optional int64 TimeMark = 2;
  if (has_timemark()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ClientResponseHead)
}

::google_public::protobuf::uint8* ClientResponseHead::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ClientResponseHead)
  // optional int32 TestCode = 1;
  if (has_testcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->testcode(), target);
  }

  // optional int64 TimeMark = 2;
  if (has_timemark()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ClientResponseHead)
  return target;
}

int ClientResponseHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TestCode = 1;
    if (has_testcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->testcode());
    }

    // optional int64 TimeMark = 2;
    if (has_timemark()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->timemark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponseHead::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientResponseHead* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ClientResponseHead*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientResponseHead::MergeFrom(const ClientResponseHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_testcode()) {
      set_testcode(from.testcode());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientResponseHead::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponseHead::CopyFrom(const ClientResponseHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponseHead::IsInitialized() const {

  return true;
}

void ClientResponseHead::Swap(ClientResponseHead* other) {
  if (other != this) {
    std::swap(testcode_, other->testcode_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ClientResponseHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ClientResponseHead_descriptor_;
  metadata.reflection = ClientResponseHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMessageHead::kServerIDFieldNumber;
const int ServerMessageHead::kTimeMarkFieldNumber;
#endif  // !_MSC_VER

ServerMessageHead::ServerMessageHead()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ServerMessageHead)
}

void ServerMessageHead::InitAsDefaultInstance() {
}

ServerMessageHead::ServerMessageHead(const ServerMessageHead& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ServerMessageHead)
}

void ServerMessageHead::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  timemark_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessageHead::~ServerMessageHead() {
  // @@protoc_insertion_point(destructor:msg.ServerMessageHead)
  SharedDtor();
}

void ServerMessageHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerMessageHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ServerMessageHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessageHead_descriptor_;
}

const ServerMessageHead& ServerMessageHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ServerMessageHead* ServerMessageHead::default_instance_ = NULL;

ServerMessageHead* ServerMessageHead::New() const {
  return new ServerMessageHead;
}

void ServerMessageHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerMessageHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timemark_, serverid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessageHead::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ServerMessageHead)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ServerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TimeMark;
        break;
      }

      // optional int64 TimeMark = 2;
      case 2: {
        if (tag == 16) {
         parse_TimeMark:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ServerMessageHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ServerMessageHead)
  return false;
#undef DO_
}

void ServerMessageHead::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ServerMessageHead)
  // optional int32 ServerID = 1;
  if (has_serverid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // optional int64 TimeMark = 2;
  if (has_timemark()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ServerMessageHead)
}

::google_public::protobuf::uint8* ServerMessageHead::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServerMessageHead)
  // optional int32 ServerID = 1;
  if (has_serverid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // optional int64 TimeMark = 2;
  if (has_timemark()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServerMessageHead)
  return target;
}

int ServerMessageHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int64 TimeMark = 2;
    if (has_timemark()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->timemark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessageHead::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessageHead* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ServerMessageHead*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessageHead::MergeFrom(const ServerMessageHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessageHead::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessageHead::CopyFrom(const ServerMessageHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessageHead::IsInitialized() const {

  return true;
}

void ServerMessageHead::Swap(ServerMessageHead* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ServerMessageHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessageHead_descriptor_;
  metadata.reflection = ServerMessageHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kStatusFieldNumber;
const int Response::kMessageFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Response)
}

void Response::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  message_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:msg.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_message()) {
      if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Response)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Status Status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Status_IsValid(value)) {
            set_status(static_cast< ::msg::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Response)
  // optional .msg.Status Status = 1;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Response)
}

::google_public::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Response)
  // optional .msg.Status Status = 1;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Status Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomResponse::kRoomIDFieldNumber;
const int RoomResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

RoomResponse::RoomResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoomResponse)
}

void RoomResponse::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

RoomResponse::RoomResponse(const RoomResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.RoomResponse)
}

void RoomResponse::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomResponse::~RoomResponse() {
  // @@protoc_insertion_point(destructor:msg.RoomResponse)
  SharedDtor();
}

void RoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void RoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomResponse_descriptor_;
}

const RoomResponse& RoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RoomResponse* RoomResponse::default_instance_ = NULL;

RoomResponse* RoomResponse::New() const {
  return new RoomResponse;
}

void RoomResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.RoomResponse)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Response;
        break;
      }

      // optional .msg.Response Response = 2;
      case 2: {
        if (tag == 18) {
         parse_Response:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.RoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.RoomResponse)
  return false;
#undef DO_
}

void RoomResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.RoomResponse)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.Response Response = 2;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.RoomResponse)
}

::google_public::protobuf::uint8* RoomResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoomResponse)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.Response Response = 2;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoomResponse)
  return target;
}

int RoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.Response Response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RoomResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomResponse::MergeFrom(const RoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomResponse::CopyFrom(const RoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomResponse::IsInitialized() const {

  return true;
}

void RoomResponse::Swap(RoomResponse* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RoomResponse_descriptor_;
  metadata.reflection = RoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientInfo::kMacFieldNumber;
const int ClientInfo::kImsiFieldNumber;
const int ClientInfo::kScreenHeightWidthFieldNumber;
const int ClientInfo::kModelFieldNumber;
const int ClientInfo::kSystemVersionFieldNumber;
const int ClientInfo::kVersionFieldNumber;
const int ClientInfo::kLanguageFieldNumber;
const int ClientInfo::kPlatformFieldNumber;
#endif  // !_MSC_VER

ClientInfo::ClientInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ClientInfo)
}

void ClientInfo::InitAsDefaultInstance() {
}

ClientInfo::ClientInfo(const ClientInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mac_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  imsi_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_height_width_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  systemversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  language_ = 1;
  platform_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:msg.ClientInfo)
  SharedDtor();
}

void ClientInfo::SharedDtor() {
  if (mac_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (imsi_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (screen_height_width_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete screen_height_width_;
  }
  if (model_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (systemversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete systemversion_;
  }
  if (this != default_instance_) {
  }
}

void ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInfo_descriptor_;
}

const ClientInfo& ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ClientInfo* ClientInfo::default_instance_ = NULL;

ClientInfo* ClientInfo::New() const {
  return new ClientInfo;
}

void ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_mac()) {
      if (mac_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_imsi()) {
      if (imsi_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imsi_->clear();
      }
    }
    if (has_screen_height_width()) {
      if (screen_height_width_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        screen_height_width_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_systemversion()) {
      if (systemversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        systemversion_->clear();
      }
    }
    version_ = 0;
    language_ = 1;
    platform_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ClientInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Mac = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Imsi;
        break;
      }

      // optional string Imsi = 2;
      case 2: {
        if (tag == 18) {
         parse_Imsi:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imsi().data(), this->imsi().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "imsi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_screen_height_width;
        break;
      }

      // optional string screen_height_width = 3;
      case 3: {
        if (tag == 26) {
         parse_screen_height_width:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screen_height_width()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->screen_height_width().data(), this->screen_height_width().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "screen_height_width");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Model;
        break;
      }

      // optional string Model = 4;
      case 4: {
        if (tag == 34) {
         parse_Model:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SystemVersion;
        break;
      }

      // optional string SystemVersion = 5;
      case 5: {
        if (tag == 42) {
         parse_SystemVersion:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemversion()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->systemversion().data(), this->systemversion().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "systemversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Version;
        break;
      }

      // optional int32 Version = 6;
      case 6: {
        if (tag == 48) {
         parse_Version:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Language;
        break;
      }

      // optional .msg.Language Language = 7;
      case 7: {
        if (tag == 56) {
         parse_Language:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Language_IsValid(value)) {
            set_language(static_cast< ::msg::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Platform;
        break;
      }

      // optional .msg.Platform Platform = 8;
      case 8: {
        if (tag == 64) {
         parse_Platform:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Platform_IsValid(value)) {
            set_platform(static_cast< ::msg::Platform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ClientInfo)
  return false;
#undef DO_
}

void ClientInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ClientInfo)
  // optional string Mac = 1;
  if (has_mac()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mac(), output);
  }

  // optional string Imsi = 2;
  if (has_imsi()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imsi(), output);
  }

  // optional string screen_height_width = 3;
  if (has_screen_height_width()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen_height_width().data(), this->screen_height_width().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "screen_height_width");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->screen_height_width(), output);
  }

  // optional string Model = 4;
  if (has_model()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string SystemVersion = 5;
  if (has_systemversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemversion().data(), this->systemversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "systemversion");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->systemversion(), output);
  }

  // optional int32 Version = 6;
  if (has_version()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->version(), output);
  }

  // optional .msg.Language Language = 7;
  if (has_language()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->language(), output);
  }

  // optional .msg.Platform Platform = 8;
  if (has_platform()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ClientInfo)
}

::google_public::protobuf::uint8* ClientInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ClientInfo)
  // optional string Mac = 1;
  if (has_mac()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac(), target);
  }

  // optional string Imsi = 2;
  if (has_imsi()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imsi(), target);
  }

  // optional string screen_height_width = 3;
  if (has_screen_height_width()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen_height_width().data(), this->screen_height_width().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "screen_height_width");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->screen_height_width(), target);
  }

  // optional string Model = 4;
  if (has_model()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string SystemVersion = 5;
  if (has_systemversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemversion().data(), this->systemversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "systemversion");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->systemversion(), target);
  }

  // optional int32 Version = 6;
  if (has_version()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->version(), target);
  }

  // optional .msg.Language Language = 7;
  if (has_language()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->language(), target);
  }

  // optional .msg.Platform Platform = 8;
  if (has_platform()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ClientInfo)
  return target;
}

int ClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Mac = 1;
    if (has_mac()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string Imsi = 2;
    if (has_imsi()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->imsi());
    }

    // optional string screen_height_width = 3;
    if (has_screen_height_width()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->screen_height_width());
    }

    // optional string Model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string SystemVersion = 5;
    if (has_systemversion()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->systemversion());
    }

    // optional int32 Version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .msg.Language Language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .msg.Platform Platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_screen_height_width()) {
      set_screen_height_width(from.screen_height_width());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_systemversion()) {
      set_systemversion(from.systemversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {

  return true;
}

void ClientInfo::Swap(ClientInfo* other) {
  if (other != this) {
    std::swap(mac_, other->mac_);
    std::swap(imsi_, other->imsi_);
    std::swap(screen_height_width_, other->screen_height_width_);
    std::swap(model_, other->model_);
    std::swap(systemversion_, other->systemversion_);
    std::swap(version_, other->version_);
    std::swap(language_, other->language_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ClientInfo_descriptor_;
  metadata.reflection = ClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginInfo::kUserNameFieldNumber;
const int UserLoginInfo::kPassWordFieldNumber;
const int UserLoginInfo::kPhoneNumFieldNumber;
#endif  // !_MSC_VER

UserLoginInfo::UserLoginInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserLoginInfo)
}

void UserLoginInfo::InitAsDefaultInstance() {
}

UserLoginInfo::UserLoginInfo(const UserLoginInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserLoginInfo)
}

void UserLoginInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenum_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginInfo::~UserLoginInfo() {
  // @@protoc_insertion_point(destructor:msg.UserLoginInfo)
  SharedDtor();
}

void UserLoginInfo::SharedDtor() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (phonenum_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenum_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginInfo_descriptor_;
}

const UserLoginInfo& UserLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserLoginInfo* UserLoginInfo::default_instance_ = NULL;

UserLoginInfo* UserLoginInfo::New() const {
  return new UserLoginInfo;
}

void UserLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_username()) {
      if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserLoginInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PassWord;
        break;
      }

      // optional string PassWord = 2;
      case 2: {
        if (tag == 18) {
         parse_PassWord:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phoneNum;
        break;
      }

      // optional string phoneNum = 3;
      case 3: {
        if (tag == 26) {
         parse_phoneNum:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenum().data(), this->phonenum().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserLoginInfo)
  return false;
#undef DO_
}

void UserLoginInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserLoginInfo)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string PassWord = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string phoneNum = 3;
  if (has_phonenum()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenum().data(), this->phonenum().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenum");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserLoginInfo)
}

::google_public::protobuf::uint8* UserLoginInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserLoginInfo)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string PassWord = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string phoneNum = 3;
  if (has_phonenum()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenum().data(), this->phonenum().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenum");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserLoginInfo)
  return target;
}

int UserLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string PassWord = 2;
    if (has_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string phoneNum = 3;
    if (has_phonenum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginInfo::MergeFrom(const UserLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginInfo::CopyFrom(const UserLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginInfo::IsInitialized() const {

  return true;
}

void UserLoginInfo::Swap(UserLoginInfo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginInfo_descriptor_;
  metadata.reflection = UserLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDetailInfo::kNickNameFieldNumber;
const int UserDetailInfo::kPicNameFieldNumber;
const int UserDetailInfo::kSexFieldNumber;
const int UserDetailInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserDetailInfo::UserDetailInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserDetailInfo)
}

void UserDetailInfo::InitAsDefaultInstance() {
}

UserDetailInfo::UserDetailInfo(const UserDetailInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserDetailInfo)
}

void UserDetailInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  picname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDetailInfo::~UserDetailInfo() {
  // @@protoc_insertion_point(destructor:msg.UserDetailInfo)
  SharedDtor();
}

void UserDetailInfo::SharedDtor() {
  if (nickname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picname_;
  }
  if (this != default_instance_) {
  }
}

void UserDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDetailInfo_descriptor_;
}

const UserDetailInfo& UserDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserDetailInfo* UserDetailInfo::default_instance_ = NULL;

UserDetailInfo* UserDetailInfo::New() const {
  return new UserDetailInfo;
}

void UserDetailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserDetailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sex_, userid_);
    if (has_nickname()) {
      if (nickname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_picname()) {
      if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDetailInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserDetailInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string NickName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PicName;
        break;
      }

      // optional string PicName = 2;
      case 2: {
        if (tag == 18) {
         parse_PicName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picname().data(), this->picname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "picname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Sex;
        break;
      }

      // optional .msg.Sex Sex = 3;
      case 3: {
        if (tag == 24) {
         parse_Sex:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::Sex_IsValid(value)) {
            set_sex(static_cast< ::msg::Sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_UserId;
        break;
      }

      // optional int32 UserId = 4;
      case 4: {
        if (tag == 32) {
         parse_UserId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserDetailInfo)
  return false;
#undef DO_
}

void UserDetailInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserDetailInfo)
  // optional string NickName = 1;
  if (has_nickname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional string PicName = 2;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->picname(), output);
  }

  // optional .msg.Sex Sex = 3;
  if (has_sex()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // optional int32 UserId = 4;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserDetailInfo)
}

::google_public::protobuf::uint8* UserDetailInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserDetailInfo)
  // optional string NickName = 1;
  if (has_nickname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional string PicName = 2;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->picname(), target);
  }

  // optional .msg.Sex Sex = 3;
  if (has_sex()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // optional int32 UserId = 4;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserDetailInfo)
  return target;
}

int UserDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string NickName = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string PicName = 2;
    if (has_picname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->picname());
    }

    // optional .msg.Sex Sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 UserId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDetailInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDetailInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDetailInfo::MergeFrom(const UserDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_picname()) {
      set_picname(from.picname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDetailInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDetailInfo::CopyFrom(const UserDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetailInfo::IsInitialized() const {

  return true;
}

void UserDetailInfo::Swap(UserDetailInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(picname_, other->picname_);
    std::swap(sex_, other->sex_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserDetailInfo_descriptor_;
  metadata.reflection = UserDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1_VersionCheck::kResponseFieldNumber;
const int Processor_1_VersionCheck::kResServerInfoFieldNumber;
const int Processor_1_VersionCheck::kVersionStatusFieldNumber;
const int Processor_1_VersionCheck::kVersionCodeFieldNumber;
const int Processor_1_VersionCheck::kUrlFieldNumber;
const int Processor_1_VersionCheck::kIsCheckVersionFieldNumber;
#endif  // !_MSC_VER

Processor_1_VersionCheck::Processor_1_VersionCheck()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1_VersionCheck)
}

void Processor_1_VersionCheck::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  resserverinfo_ = const_cast< ::msg::ServerInfo*>(&::msg::ServerInfo::default_instance());
}

Processor_1_VersionCheck::Processor_1_VersionCheck(const Processor_1_VersionCheck& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1_VersionCheck)
}

void Processor_1_VersionCheck::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  resserverinfo_ = NULL;
  versionstatus_ = 0;
  versioncode_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ischeckversion_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1_VersionCheck::~Processor_1_VersionCheck() {
  // @@protoc_insertion_point(destructor:msg.Processor_1_VersionCheck)
  SharedDtor();
}

void Processor_1_VersionCheck::SharedDtor() {
  if (versioncode_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete versioncode_;
  }
  if (url_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
    delete response_;
    delete resserverinfo_;
  }
}

void Processor_1_VersionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1_VersionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1_VersionCheck_descriptor_;
}

const Processor_1_VersionCheck& Processor_1_VersionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1_VersionCheck* Processor_1_VersionCheck::default_instance_ = NULL;

Processor_1_VersionCheck* Processor_1_VersionCheck::New() const {
  return new Processor_1_VersionCheck;
}

void Processor_1_VersionCheck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_1_VersionCheck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(versionstatus_, ischeckversion_);
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_resserverinfo()) {
      if (resserverinfo_ != NULL) resserverinfo_->::msg::ServerInfo::Clear();
    }
    if (has_versioncode()) {
      if (versioncode_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        versioncode_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1_VersionCheck::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1_VersionCheck)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ResServerInfo;
        break;
      }

      // optional .msg.ServerInfo ResServerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ResServerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resserverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_VersionStatus;
        break;
      }

      // optional .msg.VersionStatus VersionStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_VersionStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::VersionStatus_IsValid(value)) {
            set_versionstatus(static_cast< ::msg::VersionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VersionCode;
        break;
      }

      // optional string VersionCode = 4;
      case 4: {
        if (tag == 34) {
         parse_VersionCode:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versioncode()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->versioncode().data(), this->versioncode().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "versioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Url;
        break;
      }

      // optional string Url = 5;
      case 5: {
        if (tag == 42) {
         parse_Url:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsCheckVersion;
        break;
      }

      // optional bool IsCheckVersion = 6;
      case 6: {
        if (tag == 48) {
         parse_IsCheckVersion:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischeckversion_)));
          set_has_ischeckversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1_VersionCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1_VersionCheck)
  return false;
#undef DO_
}

void Processor_1_VersionCheck::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1_VersionCheck)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.ServerInfo ResServerInfo = 2;
  if (has_resserverinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resserverinfo(), output);
  }

  // optional .msg.VersionStatus VersionStatus = 3;
  if (has_versionstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->versionstatus(), output);
  }

  // optional string VersionCode = 4;
  if (has_versioncode()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->versioncode().data(), this->versioncode().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "versioncode");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->versioncode(), output);
  }

  // optional string Url = 5;
  if (has_url()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional bool IsCheckVersion = 6;
  if (has_ischeckversion()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(6, this->ischeckversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1_VersionCheck)
}

::google_public::protobuf::uint8* Processor_1_VersionCheck::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1_VersionCheck)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.ServerInfo ResServerInfo = 2;
  if (has_resserverinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resserverinfo(), target);
  }

  // optional .msg.VersionStatus VersionStatus = 3;
  if (has_versionstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->versionstatus(), target);
  }

  // optional string VersionCode = 4;
  if (has_versioncode()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->versioncode().data(), this->versioncode().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "versioncode");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->versioncode(), target);
  }

  // optional string Url = 5;
  if (has_url()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional bool IsCheckVersion = 6;
  if (has_ischeckversion()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ischeckversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1_VersionCheck)
  return target;
}

int Processor_1_VersionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.ServerInfo ResServerInfo = 2;
    if (has_resserverinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resserverinfo());
    }

    // optional .msg.VersionStatus VersionStatus = 3;
    if (has_versionstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->versionstatus());
    }

    // optional string VersionCode = 4;
    if (has_versioncode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->versioncode());
    }

    // optional string Url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool IsCheckVersion = 6;
    if (has_ischeckversion()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1_VersionCheck::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1_VersionCheck* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1_VersionCheck*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1_VersionCheck::MergeFrom(const Processor_1_VersionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_resserverinfo()) {
      mutable_resserverinfo()->::msg::ServerInfo::MergeFrom(from.resserverinfo());
    }
    if (from.has_versionstatus()) {
      set_versionstatus(from.versionstatus());
    }
    if (from.has_versioncode()) {
      set_versioncode(from.versioncode());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_ischeckversion()) {
      set_ischeckversion(from.ischeckversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1_VersionCheck::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1_VersionCheck::CopyFrom(const Processor_1_VersionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1_VersionCheck::IsInitialized() const {

  return true;
}

void Processor_1_VersionCheck::Swap(Processor_1_VersionCheck* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(resserverinfo_, other->resserverinfo_);
    std::swap(versionstatus_, other->versionstatus_);
    std::swap(versioncode_, other->versioncode_);
    std::swap(url_, other->url_);
    std::swap(ischeckversion_, other->ischeckversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1_VersionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1_VersionCheck_descriptor_;
  metadata.reflection = Processor_1_VersionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_10_LoginCoreServer::kUserNameFieldNumber;
const int Processor_10_LoginCoreServer::kPasswordFieldNumber;
#endif  // !_MSC_VER

Processor_10_LoginCoreServer::Processor_10_LoginCoreServer()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_10_LoginCoreServer)
}

void Processor_10_LoginCoreServer::InitAsDefaultInstance() {
}

Processor_10_LoginCoreServer::Processor_10_LoginCoreServer(const Processor_10_LoginCoreServer& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_10_LoginCoreServer)
}

void Processor_10_LoginCoreServer::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_10_LoginCoreServer::~Processor_10_LoginCoreServer() {
  // @@protoc_insertion_point(destructor:msg.Processor_10_LoginCoreServer)
  SharedDtor();
}

void Processor_10_LoginCoreServer::SharedDtor() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Processor_10_LoginCoreServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_10_LoginCoreServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_10_LoginCoreServer_descriptor_;
}

const Processor_10_LoginCoreServer& Processor_10_LoginCoreServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_10_LoginCoreServer* Processor_10_LoginCoreServer::default_instance_ = NULL;

Processor_10_LoginCoreServer* Processor_10_LoginCoreServer::New() const {
  return new Processor_10_LoginCoreServer;
}

void Processor_10_LoginCoreServer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_username()) {
      if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_10_LoginCoreServer::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_10_LoginCoreServer)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // optional string Password = 2;
      case 2: {
        if (tag == 18) {
         parse_Password:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_10_LoginCoreServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_10_LoginCoreServer)
  return false;
#undef DO_
}

void Processor_10_LoginCoreServer::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_10_LoginCoreServer)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string Password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_10_LoginCoreServer)
}

::google_public::protobuf::uint8* Processor_10_LoginCoreServer::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_10_LoginCoreServer)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string Password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_10_LoginCoreServer)
  return target;
}

int Processor_10_LoginCoreServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_10_LoginCoreServer::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_10_LoginCoreServer* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_10_LoginCoreServer*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_10_LoginCoreServer::MergeFrom(const Processor_10_LoginCoreServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_10_LoginCoreServer::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_10_LoginCoreServer::CopyFrom(const Processor_10_LoginCoreServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_10_LoginCoreServer::IsInitialized() const {

  return true;
}

void Processor_10_LoginCoreServer::Swap(Processor_10_LoginCoreServer* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_10_LoginCoreServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_10_LoginCoreServer_descriptor_;
  metadata.reflection = Processor_10_LoginCoreServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_10_LoginCore::kUserIDFieldNumber;
const int Processor_10_LoginCore::kResponseFieldNumber;
#endif  // !_MSC_VER

Processor_10_LoginCore::Processor_10_LoginCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_10_LoginCore)
}

void Processor_10_LoginCore::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_10_LoginCore::Processor_10_LoginCore(const Processor_10_LoginCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_10_LoginCore)
}

void Processor_10_LoginCore::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_10_LoginCore::~Processor_10_LoginCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_10_LoginCore)
  SharedDtor();
}

void Processor_10_LoginCore::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_10_LoginCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_10_LoginCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_10_LoginCore_descriptor_;
}

const Processor_10_LoginCore& Processor_10_LoginCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_10_LoginCore* Processor_10_LoginCore::default_instance_ = NULL;

Processor_10_LoginCore* Processor_10_LoginCore::New() const {
  return new Processor_10_LoginCore;
}

void Processor_10_LoginCore::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    userid_ = 0;
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_10_LoginCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_10_LoginCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Response;
        break;
      }

      // optional .msg.Response Response = 2;
      case 2: {
        if (tag == 18) {
         parse_Response:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_10_LoginCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_10_LoginCore)
  return false;
#undef DO_
}

void Processor_10_LoginCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_10_LoginCore)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .msg.Response Response = 2;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_10_LoginCore)
}

::google_public::protobuf::uint8* Processor_10_LoginCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_10_LoginCore)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .msg.Response Response = 2;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_10_LoginCore)
  return target;
}

int Processor_10_LoginCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.Response Response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_10_LoginCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_10_LoginCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_10_LoginCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_10_LoginCore::MergeFrom(const Processor_10_LoginCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_10_LoginCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_10_LoginCore::CopyFrom(const Processor_10_LoginCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_10_LoginCore::IsInitialized() const {

  return true;
}

void Processor_10_LoginCore::Swap(Processor_10_LoginCore* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_10_LoginCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_10_LoginCore_descriptor_;
  metadata.reflection = Processor_10_LoginCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Processor_11_CONSOLEHEARTJUMP::Processor_11_CONSOLEHEARTJUMP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_11_CONSOLEHEARTJUMP)
}

void Processor_11_CONSOLEHEARTJUMP::InitAsDefaultInstance() {
}

Processor_11_CONSOLEHEARTJUMP::Processor_11_CONSOLEHEARTJUMP(const Processor_11_CONSOLEHEARTJUMP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_11_CONSOLEHEARTJUMP)
}

void Processor_11_CONSOLEHEARTJUMP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_11_CONSOLEHEARTJUMP::~Processor_11_CONSOLEHEARTJUMP() {
  // @@protoc_insertion_point(destructor:msg.Processor_11_CONSOLEHEARTJUMP)
  SharedDtor();
}

void Processor_11_CONSOLEHEARTJUMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_11_CONSOLEHEARTJUMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_11_CONSOLEHEARTJUMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_11_CONSOLEHEARTJUMP_descriptor_;
}

const Processor_11_CONSOLEHEARTJUMP& Processor_11_CONSOLEHEARTJUMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_11_CONSOLEHEARTJUMP* Processor_11_CONSOLEHEARTJUMP::default_instance_ = NULL;

Processor_11_CONSOLEHEARTJUMP* Processor_11_CONSOLEHEARTJUMP::New() const {
  return new Processor_11_CONSOLEHEARTJUMP;
}

void Processor_11_CONSOLEHEARTJUMP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_11_CONSOLEHEARTJUMP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_11_CONSOLEHEARTJUMP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google_public::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_11_CONSOLEHEARTJUMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_11_CONSOLEHEARTJUMP)
  return false;
#undef DO_
}

void Processor_11_CONSOLEHEARTJUMP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_11_CONSOLEHEARTJUMP)
  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_11_CONSOLEHEARTJUMP)
}

::google_public::protobuf::uint8* Processor_11_CONSOLEHEARTJUMP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_11_CONSOLEHEARTJUMP)
  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_11_CONSOLEHEARTJUMP)
  return target;
}

int Processor_11_CONSOLEHEARTJUMP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_11_CONSOLEHEARTJUMP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_11_CONSOLEHEARTJUMP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_11_CONSOLEHEARTJUMP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_11_CONSOLEHEARTJUMP::MergeFrom(const Processor_11_CONSOLEHEARTJUMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_11_CONSOLEHEARTJUMP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_11_CONSOLEHEARTJUMP::CopyFrom(const Processor_11_CONSOLEHEARTJUMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_11_CONSOLEHEARTJUMP::IsInitialized() const {

  return true;
}

void Processor_11_CONSOLEHEARTJUMP::Swap(Processor_11_CONSOLEHEARTJUMP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_11_CONSOLEHEARTJUMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_11_CONSOLEHEARTJUMP_descriptor_;
  metadata.reflection = Processor_11_CONSOLEHEARTJUMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_30_UploadFile::kFileNameFieldNumber;
const int Processor_30_UploadFile::kFileFieldNumber;
const int Processor_30_UploadFile::kIsCompressFieldNumber;
#endif  // !_MSC_VER

Processor_30_UploadFile::Processor_30_UploadFile()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_30_UploadFile)
}

void Processor_30_UploadFile::InitAsDefaultInstance() {
}

Processor_30_UploadFile::Processor_30_UploadFile(const Processor_30_UploadFile& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_30_UploadFile)
}

void Processor_30_UploadFile::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  file_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  iscompress_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_30_UploadFile::~Processor_30_UploadFile() {
  // @@protoc_insertion_point(destructor:msg.Processor_30_UploadFile)
  SharedDtor();
}

void Processor_30_UploadFile::SharedDtor() {
  if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (file_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void Processor_30_UploadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_30_UploadFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_30_UploadFile_descriptor_;
}

const Processor_30_UploadFile& Processor_30_UploadFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_30_UploadFile* Processor_30_UploadFile::default_instance_ = NULL;

Processor_30_UploadFile* Processor_30_UploadFile::New() const {
  return new Processor_30_UploadFile;
}

void Processor_30_UploadFile::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_filename()) {
      if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    iscompress_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_30_UploadFile::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_30_UploadFile)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_File;
        break;
      }

      // optional bytes File = 2;
      case 2: {
        if (tag == 18) {
         parse_File:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsCompress;
        break;
      }

      // optional bool IsCompress = 3;
      case 3: {
        if (tag == 24) {
         parse_IsCompress:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompress_)));
          set_has_iscompress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_30_UploadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_30_UploadFile)
  return false;
#undef DO_
}

void Processor_30_UploadFile::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_30_UploadFile)
  // optional string FileName = 1;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional bytes File = 2;
  if (has_file()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file(), output);
  }

  // optional bool IsCompress = 3;
  if (has_iscompress()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->iscompress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_30_UploadFile)
}

::google_public::protobuf::uint8* Processor_30_UploadFile::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_30_UploadFile)
  // optional string FileName = 1;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional bytes File = 2;
  if (has_file()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file(), target);
  }

  // optional bool IsCompress = 3;
  if (has_iscompress()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscompress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_30_UploadFile)
  return target;
}

int Processor_30_UploadFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes File = 2;
    if (has_file()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->file());
    }

    // optional bool IsCompress = 3;
    if (has_iscompress()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_30_UploadFile::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_30_UploadFile* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_30_UploadFile*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_30_UploadFile::MergeFrom(const Processor_30_UploadFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_iscompress()) {
      set_iscompress(from.iscompress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_30_UploadFile::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_30_UploadFile::CopyFrom(const Processor_30_UploadFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_30_UploadFile::IsInitialized() const {

  return true;
}

void Processor_30_UploadFile::Swap(Processor_30_UploadFile* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(file_, other->file_);
    std::swap(iscompress_, other->iscompress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_30_UploadFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_30_UploadFile_descriptor_;
  metadata.reflection = Processor_30_UploadFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_31_DownloadFile_UP::kFileNameFieldNumber;
const int Processor_31_DownloadFile_UP::kIsCompressFieldNumber;
#endif  // !_MSC_VER

Processor_31_DownloadFile_UP::Processor_31_DownloadFile_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_31_DownloadFile_UP)
}

void Processor_31_DownloadFile_UP::InitAsDefaultInstance() {
}

Processor_31_DownloadFile_UP::Processor_31_DownloadFile_UP(const Processor_31_DownloadFile_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_31_DownloadFile_UP)
}

void Processor_31_DownloadFile_UP::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  iscompress_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_31_DownloadFile_UP::~Processor_31_DownloadFile_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_31_DownloadFile_UP)
  SharedDtor();
}

void Processor_31_DownloadFile_UP::SharedDtor() {
  if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void Processor_31_DownloadFile_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_31_DownloadFile_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_31_DownloadFile_UP_descriptor_;
}

const Processor_31_DownloadFile_UP& Processor_31_DownloadFile_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_31_DownloadFile_UP* Processor_31_DownloadFile_UP::default_instance_ = NULL;

Processor_31_DownloadFile_UP* Processor_31_DownloadFile_UP::New() const {
  return new Processor_31_DownloadFile_UP;
}

void Processor_31_DownloadFile_UP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    iscompress_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_31_DownloadFile_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_31_DownloadFile_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsCompress;
        break;
      }

      // optional bool IsCompress = 2;
      case 2: {
        if (tag == 16) {
         parse_IsCompress:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompress_)));
          set_has_iscompress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_31_DownloadFile_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_31_DownloadFile_UP)
  return false;
#undef DO_
}

void Processor_31_DownloadFile_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_31_DownloadFile_UP)
  // optional string FileName = 1;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional bool IsCompress = 2;
  if (has_iscompress()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->iscompress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_31_DownloadFile_UP)
}

::google_public::protobuf::uint8* Processor_31_DownloadFile_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_31_DownloadFile_UP)
  // optional string FileName = 1;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional bool IsCompress = 2;
  if (has_iscompress()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iscompress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_31_DownloadFile_UP)
  return target;
}

int Processor_31_DownloadFile_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool IsCompress = 2;
    if (has_iscompress()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_31_DownloadFile_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_31_DownloadFile_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_31_DownloadFile_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_31_DownloadFile_UP::MergeFrom(const Processor_31_DownloadFile_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_iscompress()) {
      set_iscompress(from.iscompress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_31_DownloadFile_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_31_DownloadFile_UP::CopyFrom(const Processor_31_DownloadFile_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_31_DownloadFile_UP::IsInitialized() const {

  return true;
}

void Processor_31_DownloadFile_UP::Swap(Processor_31_DownloadFile_UP* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(iscompress_, other->iscompress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_31_DownloadFile_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_31_DownloadFile_UP_descriptor_;
  metadata.reflection = Processor_31_DownloadFile_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_31_DownloadFile_DOWN::kResponseFieldNumber;
const int Processor_31_DownloadFile_DOWN::kFileFieldNumber;
const int Processor_31_DownloadFile_DOWN::kFileNameFieldNumber;
#endif  // !_MSC_VER

Processor_31_DownloadFile_DOWN::Processor_31_DownloadFile_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_31_DownloadFile_DOWN)
}

void Processor_31_DownloadFile_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_31_DownloadFile_DOWN::Processor_31_DownloadFile_DOWN(const Processor_31_DownloadFile_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_31_DownloadFile_DOWN)
}

void Processor_31_DownloadFile_DOWN::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  file_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_31_DownloadFile_DOWN::~Processor_31_DownloadFile_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_31_DownloadFile_DOWN)
  SharedDtor();
}

void Processor_31_DownloadFile_DOWN::SharedDtor() {
  if (file_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_31_DownloadFile_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_31_DownloadFile_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_31_DownloadFile_DOWN_descriptor_;
}

const Processor_31_DownloadFile_DOWN& Processor_31_DownloadFile_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_31_DownloadFile_DOWN* Processor_31_DownloadFile_DOWN::default_instance_ = NULL;

Processor_31_DownloadFile_DOWN* Processor_31_DownloadFile_DOWN::New() const {
  return new Processor_31_DownloadFile_DOWN;
}

void Processor_31_DownloadFile_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_file()) {
      if (file_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_31_DownloadFile_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_31_DownloadFile_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_File;
        break;
      }

      // optional bytes File = 2;
      case 2: {
        if (tag == 18) {
         parse_File:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FileName;
        break;
      }

      // optional string FileName = 3;
      case 3: {
        if (tag == 26) {
         parse_FileName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_31_DownloadFile_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_31_DownloadFile_DOWN)
  return false;
#undef DO_
}

void Processor_31_DownloadFile_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_31_DownloadFile_DOWN)
  // optional .msg.Response response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional bytes File = 2;
  if (has_file()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->file(), output);
  }

  // optional string FileName = 3;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_31_DownloadFile_DOWN)
}

::google_public::protobuf::uint8* Processor_31_DownloadFile_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_31_DownloadFile_DOWN)
  // optional .msg.Response response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional bytes File = 2;
  if (has_file()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file(), target);
  }

  // optional string FileName = 3;
  if (has_filename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_31_DownloadFile_DOWN)
  return target;
}

int Processor_31_DownloadFile_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional bytes File = 2;
    if (has_file()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->file());
    }

    // optional string FileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_31_DownloadFile_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_31_DownloadFile_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_31_DownloadFile_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_31_DownloadFile_DOWN::MergeFrom(const Processor_31_DownloadFile_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_31_DownloadFile_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_31_DownloadFile_DOWN::CopyFrom(const Processor_31_DownloadFile_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_31_DownloadFile_DOWN::IsInitialized() const {

  return true;
}

void Processor_31_DownloadFile_DOWN::Swap(Processor_31_DownloadFile_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(file_, other->file_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_31_DownloadFile_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_31_DownloadFile_DOWN_descriptor_;
  metadata.reflection = Processor_31_DownloadFile_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_97_SendVerificationByUserID::kUserNameFieldNumber;
#endif  // !_MSC_VER

Processor_97_SendVerificationByUserID::Processor_97_SendVerificationByUserID()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_97_SendVerificationByUserID)
}

void Processor_97_SendVerificationByUserID::InitAsDefaultInstance() {
}

Processor_97_SendVerificationByUserID::Processor_97_SendVerificationByUserID(const Processor_97_SendVerificationByUserID& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_97_SendVerificationByUserID)
}

void Processor_97_SendVerificationByUserID::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_97_SendVerificationByUserID::~Processor_97_SendVerificationByUserID() {
  // @@protoc_insertion_point(destructor:msg.Processor_97_SendVerificationByUserID)
  SharedDtor();
}

void Processor_97_SendVerificationByUserID::SharedDtor() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Processor_97_SendVerificationByUserID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_97_SendVerificationByUserID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_97_SendVerificationByUserID_descriptor_;
}

const Processor_97_SendVerificationByUserID& Processor_97_SendVerificationByUserID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_97_SendVerificationByUserID* Processor_97_SendVerificationByUserID::default_instance_ = NULL;

Processor_97_SendVerificationByUserID* Processor_97_SendVerificationByUserID::New() const {
  return new Processor_97_SendVerificationByUserID;
}

void Processor_97_SendVerificationByUserID::Clear() {
  if (has_username()) {
    if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      username_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_97_SendVerificationByUserID::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_97_SendVerificationByUserID)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_97_SendVerificationByUserID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_97_SendVerificationByUserID)
  return false;
#undef DO_
}

void Processor_97_SendVerificationByUserID::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_97_SendVerificationByUserID)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_97_SendVerificationByUserID)
}

::google_public::protobuf::uint8* Processor_97_SendVerificationByUserID::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_97_SendVerificationByUserID)
  // optional string UserName = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_97_SendVerificationByUserID)
  return target;
}

int Processor_97_SendVerificationByUserID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_97_SendVerificationByUserID::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_97_SendVerificationByUserID* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_97_SendVerificationByUserID*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_97_SendVerificationByUserID::MergeFrom(const Processor_97_SendVerificationByUserID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_97_SendVerificationByUserID::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_97_SendVerificationByUserID::CopyFrom(const Processor_97_SendVerificationByUserID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_97_SendVerificationByUserID::IsInitialized() const {

  return true;
}

void Processor_97_SendVerificationByUserID::Swap(Processor_97_SendVerificationByUserID* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_97_SendVerificationByUserID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_97_SendVerificationByUserID_descriptor_;
  metadata.reflection = Processor_97_SendVerificationByUserID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_98_ResetPassword::kLoginInfoFieldNumber;
const int Processor_98_ResetPassword::kVerificationFieldNumber;
#endif  // !_MSC_VER

Processor_98_ResetPassword::Processor_98_ResetPassword()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_98_ResetPassword)
}

void Processor_98_ResetPassword::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::msg::UserLoginInfo*>(&::msg::UserLoginInfo::default_instance());
}

Processor_98_ResetPassword::Processor_98_ResetPassword(const Processor_98_ResetPassword& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_98_ResetPassword)
}

void Processor_98_ResetPassword::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logininfo_ = NULL;
  verification_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_98_ResetPassword::~Processor_98_ResetPassword() {
  // @@protoc_insertion_point(destructor:msg.Processor_98_ResetPassword)
  SharedDtor();
}

void Processor_98_ResetPassword::SharedDtor() {
  if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verification_;
  }
  if (this != default_instance_) {
    delete logininfo_;
  }
}

void Processor_98_ResetPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_98_ResetPassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_98_ResetPassword_descriptor_;
}

const Processor_98_ResetPassword& Processor_98_ResetPassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_98_ResetPassword* Processor_98_ResetPassword::default_instance_ = NULL;

Processor_98_ResetPassword* Processor_98_ResetPassword::New() const {
  return new Processor_98_ResetPassword;
}

void Processor_98_ResetPassword::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::msg::UserLoginInfo::Clear();
    }
    if (has_verification()) {
      if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_98_ResetPassword::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_98_ResetPassword)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserLoginInfo LoginInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Verification;
        break;
      }

      // optional string Verification = 2;
      case 2: {
        if (tag == 18) {
         parse_Verification:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verification().data(), this->verification().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "verification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_98_ResetPassword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_98_ResetPassword)
  return false;
#undef DO_
}

void Processor_98_ResetPassword::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_98_ResetPassword)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logininfo(), output);
  }

  // optional string Verification = 2;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->verification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_98_ResetPassword)
}

::google_public::protobuf::uint8* Processor_98_ResetPassword::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_98_ResetPassword)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logininfo(), target);
  }

  // optional string Verification = 2;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->verification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_98_ResetPassword)
  return target;
}

int Processor_98_ResetPassword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserLoginInfo LoginInfo = 1;
    if (has_logininfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }

    // optional string Verification = 2;
    if (has_verification()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->verification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_98_ResetPassword::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_98_ResetPassword* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_98_ResetPassword*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_98_ResetPassword::MergeFrom(const Processor_98_ResetPassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logininfo()) {
      mutable_logininfo()->::msg::UserLoginInfo::MergeFrom(from.logininfo());
    }
    if (from.has_verification()) {
      set_verification(from.verification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_98_ResetPassword::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_98_ResetPassword::CopyFrom(const Processor_98_ResetPassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_98_ResetPassword::IsInitialized() const {

  return true;
}

void Processor_98_ResetPassword::Swap(Processor_98_ResetPassword* other) {
  if (other != this) {
    std::swap(logininfo_, other->logininfo_);
    std::swap(verification_, other->verification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_98_ResetPassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_98_ResetPassword_descriptor_;
  metadata.reflection = Processor_98_ResetPassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_99_Login_UP::kLoginInfoFieldNumber;
const int Processor_99_Login_UP::kClientInfoFieldNumber;
#endif  // !_MSC_VER

Processor_99_Login_UP::Processor_99_Login_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_99_Login_UP)
}

void Processor_99_Login_UP::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::msg::UserLoginInfo*>(&::msg::UserLoginInfo::default_instance());
  clientinfo_ = const_cast< ::msg::ClientInfo*>(&::msg::ClientInfo::default_instance());
}

Processor_99_Login_UP::Processor_99_Login_UP(const Processor_99_Login_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_99_Login_UP)
}

void Processor_99_Login_UP::SharedCtor() {
  _cached_size_ = 0;
  logininfo_ = NULL;
  clientinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_99_Login_UP::~Processor_99_Login_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_99_Login_UP)
  SharedDtor();
}

void Processor_99_Login_UP::SharedDtor() {
  if (this != default_instance_) {
    delete logininfo_;
    delete clientinfo_;
  }
}

void Processor_99_Login_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_99_Login_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_99_Login_UP_descriptor_;
}

const Processor_99_Login_UP& Processor_99_Login_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_99_Login_UP* Processor_99_Login_UP::default_instance_ = NULL;

Processor_99_Login_UP* Processor_99_Login_UP::New() const {
  return new Processor_99_Login_UP;
}

void Processor_99_Login_UP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::msg::UserLoginInfo::Clear();
    }
    if (has_clientinfo()) {
      if (clientinfo_ != NULL) clientinfo_->::msg::ClientInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_99_Login_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_99_Login_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserLoginInfo LoginInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ClientInfo;
        break;
      }

      // optional .msg.ClientInfo ClientInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ClientInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_99_Login_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_99_Login_UP)
  return false;
#undef DO_
}

void Processor_99_Login_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_99_Login_UP)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logininfo(), output);
  }

  // optional .msg.ClientInfo ClientInfo = 2;
  if (has_clientinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_99_Login_UP)
}

::google_public::protobuf::uint8* Processor_99_Login_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_99_Login_UP)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logininfo(), target);
  }

  // optional .msg.ClientInfo ClientInfo = 2;
  if (has_clientinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_99_Login_UP)
  return target;
}

int Processor_99_Login_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserLoginInfo LoginInfo = 1;
    if (has_logininfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }

    // optional .msg.ClientInfo ClientInfo = 2;
    if (has_clientinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_99_Login_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_99_Login_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_99_Login_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_99_Login_UP::MergeFrom(const Processor_99_Login_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logininfo()) {
      mutable_logininfo()->::msg::UserLoginInfo::MergeFrom(from.logininfo());
    }
    if (from.has_clientinfo()) {
      mutable_clientinfo()->::msg::ClientInfo::MergeFrom(from.clientinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_99_Login_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_99_Login_UP::CopyFrom(const Processor_99_Login_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_99_Login_UP::IsInitialized() const {

  return true;
}

void Processor_99_Login_UP::Swap(Processor_99_Login_UP* other) {
  if (other != this) {
    std::swap(logininfo_, other->logininfo_);
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_99_Login_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_99_Login_UP_descriptor_;
  metadata.reflection = Processor_99_Login_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_99_Login_DOWN::kResponseFieldNumber;
const int Processor_99_Login_DOWN::kFileServerInfoFieldNumber;
const int Processor_99_Login_DOWN::kKeyFieldNumber;
const int Processor_99_Login_DOWN::kUserFieldNumber;
#endif  // !_MSC_VER

Processor_99_Login_DOWN::Processor_99_Login_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_99_Login_DOWN)
}

void Processor_99_Login_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  fileserverinfo_ = const_cast< ::msg::ServerInfo*>(&::msg::ServerInfo::default_instance());
  user_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

Processor_99_Login_DOWN::Processor_99_Login_DOWN(const Processor_99_Login_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_99_Login_DOWN)
}

void Processor_99_Login_DOWN::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  fileserverinfo_ = NULL;
  key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_99_Login_DOWN::~Processor_99_Login_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_99_Login_DOWN)
  SharedDtor();
}

void Processor_99_Login_DOWN::SharedDtor() {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete response_;
    delete fileserverinfo_;
    delete user_;
  }
}

void Processor_99_Login_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_99_Login_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_99_Login_DOWN_descriptor_;
}

const Processor_99_Login_DOWN& Processor_99_Login_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_99_Login_DOWN* Processor_99_Login_DOWN::default_instance_ = NULL;

Processor_99_Login_DOWN* Processor_99_Login_DOWN::New() const {
  return new Processor_99_Login_DOWN;
}

void Processor_99_Login_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_fileserverinfo()) {
      if (fileserverinfo_ != NULL) fileserverinfo_->::msg::ServerInfo::Clear();
    }
    if (has_key()) {
      if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_user()) {
      if (user_ != NULL) user_->::msg::UserDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_99_Login_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_99_Login_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileServerInfo;
        break;
      }

      // optional .msg.ServerInfo FileServerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_FileServerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileserverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Key;
        break;
      }

      // optional string Key = 3;
      case 3: {
        if (tag == 26) {
         parse_Key:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_User;
        break;
      }

      // optional .msg.UserDetailInfo User = 4;
      case 4: {
        if (tag == 34) {
         parse_User:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_99_Login_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_99_Login_DOWN)
  return false;
#undef DO_
}

void Processor_99_Login_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_99_Login_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.ServerInfo FileServerInfo = 2;
  if (has_fileserverinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fileserverinfo(), output);
  }

  // optional string Key = 3;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional .msg.UserDetailInfo User = 4;
  if (has_user()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_99_Login_DOWN)
}

::google_public::protobuf::uint8* Processor_99_Login_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_99_Login_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.ServerInfo FileServerInfo = 2;
  if (has_fileserverinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fileserverinfo(), target);
  }

  // optional string Key = 3;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional .msg.UserDetailInfo User = 4;
  if (has_user()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_99_Login_DOWN)
  return target;
}

int Processor_99_Login_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.ServerInfo FileServerInfo = 2;
    if (has_fileserverinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileserverinfo());
    }

    // optional string Key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .msg.UserDetailInfo User = 4;
    if (has_user()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_99_Login_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_99_Login_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_99_Login_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_99_Login_DOWN::MergeFrom(const Processor_99_Login_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_fileserverinfo()) {
      mutable_fileserverinfo()->::msg::ServerInfo::MergeFrom(from.fileserverinfo());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_user()) {
      mutable_user()->::msg::UserDetailInfo::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_99_Login_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_99_Login_DOWN::CopyFrom(const Processor_99_Login_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_99_Login_DOWN::IsInitialized() const {

  return true;
}

void Processor_99_Login_DOWN::Swap(Processor_99_Login_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(fileserverinfo_, other->fileserverinfo_);
    std::swap(key_, other->key_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_99_Login_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_99_Login_DOWN_descriptor_;
  metadata.reflection = Processor_99_Login_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_100_LoginResource::kKeyFieldNumber;
#endif  // !_MSC_VER

Processor_100_LoginResource::Processor_100_LoginResource()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_100_LoginResource)
}

void Processor_100_LoginResource::InitAsDefaultInstance() {
}

Processor_100_LoginResource::Processor_100_LoginResource(const Processor_100_LoginResource& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_100_LoginResource)
}

void Processor_100_LoginResource::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_100_LoginResource::~Processor_100_LoginResource() {
  // @@protoc_insertion_point(destructor:msg.Processor_100_LoginResource)
  SharedDtor();
}

void Processor_100_LoginResource::SharedDtor() {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Processor_100_LoginResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_100_LoginResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_100_LoginResource_descriptor_;
}

const Processor_100_LoginResource& Processor_100_LoginResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_100_LoginResource* Processor_100_LoginResource::default_instance_ = NULL;

Processor_100_LoginResource* Processor_100_LoginResource::New() const {
  return new Processor_100_LoginResource;
}

void Processor_100_LoginResource::Clear() {
  if (has_key()) {
    if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_100_LoginResource::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_100_LoginResource)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_100_LoginResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_100_LoginResource)
  return false;
#undef DO_
}

void Processor_100_LoginResource::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_100_LoginResource)
  // optional string Key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_100_LoginResource)
}

::google_public::protobuf::uint8* Processor_100_LoginResource::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_100_LoginResource)
  // optional string Key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_100_LoginResource)
  return target;
}

int Processor_100_LoginResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_100_LoginResource::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_100_LoginResource* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_100_LoginResource*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_100_LoginResource::MergeFrom(const Processor_100_LoginResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_100_LoginResource::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_100_LoginResource::CopyFrom(const Processor_100_LoginResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_100_LoginResource::IsInitialized() const {

  return true;
}

void Processor_100_LoginResource::Swap(Processor_100_LoginResource* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_100_LoginResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_100_LoginResource_descriptor_;
  metadata.reflection = Processor_100_LoginResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_100_LoginResource_Down::kResponseFieldNumber;
const int Processor_100_LoginResource_Down::kOfflineMessageFieldNumber;
const int Processor_100_LoginResource_Down::kOfflineRequestFieldNumber;
const int Processor_100_LoginResource_Down::kRoomServerInfoFieldNumber;
const int Processor_100_LoginResource_Down::kRoomInfomationFieldNumber;
#endif  // !_MSC_VER

Processor_100_LoginResource_Down::Processor_100_LoginResource_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_100_LoginResource_Down)
}

void Processor_100_LoginResource_Down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  offlinemessage_ = const_cast< ::msg::Processor_161_ReceiveChatMessage*>(&::msg::Processor_161_ReceiveChatMessage::default_instance());
  offlinerequest_ = const_cast< ::msg::Processor_123_ReceiveRequestList*>(&::msg::Processor_123_ReceiveRequestList::default_instance());
  roomserverinfo_ = const_cast< ::msg::ServerInfos*>(&::msg::ServerInfos::default_instance());
  roominfomation_ = const_cast< ::msg::RoomInfomation*>(&::msg::RoomInfomation::default_instance());
}

Processor_100_LoginResource_Down::Processor_100_LoginResource_Down(const Processor_100_LoginResource_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_100_LoginResource_Down)
}

void Processor_100_LoginResource_Down::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  offlinemessage_ = NULL;
  offlinerequest_ = NULL;
  roomserverinfo_ = NULL;
  roominfomation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_100_LoginResource_Down::~Processor_100_LoginResource_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_100_LoginResource_Down)
  SharedDtor();
}

void Processor_100_LoginResource_Down::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete offlinemessage_;
    delete offlinerequest_;
    delete roomserverinfo_;
    delete roominfomation_;
  }
}

void Processor_100_LoginResource_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_100_LoginResource_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_100_LoginResource_Down_descriptor_;
}

const Processor_100_LoginResource_Down& Processor_100_LoginResource_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_100_LoginResource_Down* Processor_100_LoginResource_Down::default_instance_ = NULL;

Processor_100_LoginResource_Down* Processor_100_LoginResource_Down::New() const {
  return new Processor_100_LoginResource_Down;
}

void Processor_100_LoginResource_Down::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_offlinemessage()) {
      if (offlinemessage_ != NULL) offlinemessage_->::msg::Processor_161_ReceiveChatMessage::Clear();
    }
    if (has_offlinerequest()) {
      if (offlinerequest_ != NULL) offlinerequest_->::msg::Processor_123_ReceiveRequestList::Clear();
    }
    if (has_roomserverinfo()) {
      if (roomserverinfo_ != NULL) roomserverinfo_->::msg::ServerInfos::Clear();
    }
    if (has_roominfomation()) {
      if (roominfomation_ != NULL) roominfomation_->::msg::RoomInfomation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_100_LoginResource_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_100_LoginResource_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OfflineMessage;
        break;
      }

      // optional .msg.Processor_161_ReceiveChatMessage OfflineMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_OfflineMessage:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offlinemessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OfflineRequest;
        break;
      }

      // optional .msg.Processor_123_ReceiveRequestList OfflineRequest = 3;
      case 3: {
        if (tag == 26) {
         parse_OfflineRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offlinerequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoomServerInfo;
        break;
      }

      // optional .msg.ServerInfos RoomServerInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_RoomServerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RoomInfomation;
        break;
      }

      // optional .msg.RoomInfomation RoomInfomation = 5;
      case 5: {
        if (tag == 42) {
         parse_RoomInfomation:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfomation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_100_LoginResource_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_100_LoginResource_Down)
  return false;
#undef DO_
}

void Processor_100_LoginResource_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_100_LoginResource_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.Processor_161_ReceiveChatMessage OfflineMessage = 2;
  if (has_offlinemessage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offlinemessage(), output);
  }

  // optional .msg.Processor_123_ReceiveRequestList OfflineRequest = 3;
  if (has_offlinerequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offlinerequest(), output);
  }

  // optional .msg.ServerInfos RoomServerInfo = 4;
  if (has_roomserverinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomserverinfo(), output);
  }

  // optional .msg.RoomInfomation RoomInfomation = 5;
  if (has_roominfomation()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roominfomation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_100_LoginResource_Down)
}

::google_public::protobuf::uint8* Processor_100_LoginResource_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_100_LoginResource_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.Processor_161_ReceiveChatMessage OfflineMessage = 2;
  if (has_offlinemessage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offlinemessage(), target);
  }

  // optional .msg.Processor_123_ReceiveRequestList OfflineRequest = 3;
  if (has_offlinerequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offlinerequest(), target);
  }

  // optional .msg.ServerInfos RoomServerInfo = 4;
  if (has_roomserverinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomserverinfo(), target);
  }

  // optional .msg.RoomInfomation RoomInfomation = 5;
  if (has_roominfomation()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roominfomation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_100_LoginResource_Down)
  return target;
}

int Processor_100_LoginResource_Down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.Processor_161_ReceiveChatMessage OfflineMessage = 2;
    if (has_offlinemessage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offlinemessage());
    }

    // optional .msg.Processor_123_ReceiveRequestList OfflineRequest = 3;
    if (has_offlinerequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offlinerequest());
    }

    // optional .msg.ServerInfos RoomServerInfo = 4;
    if (has_roomserverinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserverinfo());
    }

    // optional .msg.RoomInfomation RoomInfomation = 5;
    if (has_roominfomation()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfomation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_100_LoginResource_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_100_LoginResource_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_100_LoginResource_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_100_LoginResource_Down::MergeFrom(const Processor_100_LoginResource_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_offlinemessage()) {
      mutable_offlinemessage()->::msg::Processor_161_ReceiveChatMessage::MergeFrom(from.offlinemessage());
    }
    if (from.has_offlinerequest()) {
      mutable_offlinerequest()->::msg::Processor_123_ReceiveRequestList::MergeFrom(from.offlinerequest());
    }
    if (from.has_roomserverinfo()) {
      mutable_roomserverinfo()->::msg::ServerInfos::MergeFrom(from.roomserverinfo());
    }
    if (from.has_roominfomation()) {
      mutable_roominfomation()->::msg::RoomInfomation::MergeFrom(from.roominfomation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_100_LoginResource_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_100_LoginResource_Down::CopyFrom(const Processor_100_LoginResource_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_100_LoginResource_Down::IsInitialized() const {

  return true;
}

void Processor_100_LoginResource_Down::Swap(Processor_100_LoginResource_Down* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(offlinemessage_, other->offlinemessage_);
    std::swap(offlinerequest_, other->offlinerequest_);
    std::swap(roomserverinfo_, other->roomserverinfo_);
    std::swap(roominfomation_, other->roominfomation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_100_LoginResource_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_100_LoginResource_Down_descriptor_;
  metadata.reflection = Processor_100_LoginResource_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfomation::kCreateRoomInfoFieldNumber;
const int RoomInfomation::kTournamentSizeTemplateFieldNumber;
const int RoomInfomation::kTournamentSpeedTemplateFieldNumber;
const int RoomInfomation::kBlindtimeFieldNumber;
#endif  // !_MSC_VER

RoomInfomation::RoomInfomation()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoomInfomation)
}

void RoomInfomation::InitAsDefaultInstance() {
  blindtime_ = const_cast< ::msg::Property*>(&::msg::Property::default_instance());
}

RoomInfomation::RoomInfomation(const RoomInfomation& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.RoomInfomation)
}

void RoomInfomation::SharedCtor() {
  _cached_size_ = 0;
  blindtime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfomation::~RoomInfomation() {
  // @@protoc_insertion_point(destructor:msg.RoomInfomation)
  SharedDtor();
}

void RoomInfomation::SharedDtor() {
  if (this != default_instance_) {
    delete blindtime_;
  }
}

void RoomInfomation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RoomInfomation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfomation_descriptor_;
}

const RoomInfomation& RoomInfomation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RoomInfomation* RoomInfomation::default_instance_ = NULL;

RoomInfomation* RoomInfomation::New() const {
  return new RoomInfomation;
}

void RoomInfomation::Clear() {
  if (has_blindtime()) {
    if (blindtime_ != NULL) blindtime_->::msg::Property::Clear();
  }
  createroominfo_.Clear();
  tournamentsizetemplate_.Clear();
  tournamentspeedtemplate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfomation::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.RoomInfomation)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.CreateRoomInfo CreateRoomInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_CreateRoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CreateRoomInfo;
        if (input->ExpectTag(18)) goto parse_TournamentSizeTemplate;
        break;
      }

      // repeated .msg.TournamentInfo TournamentSizeTemplate = 2;
      case 2: {
        if (tag == 18) {
         parse_TournamentSizeTemplate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournamentsizetemplate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TournamentSizeTemplate;
        if (input->ExpectTag(26)) goto parse_TournamentSpeedTemplate;
        break;
      }

      // repeated .msg.TournamentInfo TournamentSpeedTemplate = 3;
      case 3: {
        if (tag == 26) {
         parse_TournamentSpeedTemplate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournamentspeedtemplate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TournamentSpeedTemplate;
        if (input->ExpectTag(34)) goto parse_Blindtime;
        break;
      }

      // optional .msg.Property Blindtime = 4;
      case 4: {
        if (tag == 34) {
         parse_Blindtime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blindtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.RoomInfomation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.RoomInfomation)
  return false;
#undef DO_
}

void RoomInfomation::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.RoomInfomation)
  // repeated .msg.CreateRoomInfo CreateRoomInfo = 1;
  for (int i = 0; i < this->createroominfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->createroominfo(i), output);
  }

  // repeated .msg.TournamentInfo TournamentSizeTemplate = 2;
  for (int i = 0; i < this->tournamentsizetemplate_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournamentsizetemplate(i), output);
  }

  // repeated .msg.TournamentInfo TournamentSpeedTemplate = 3;
  for (int i = 0; i < this->tournamentspeedtemplate_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournamentspeedtemplate(i), output);
  }

  // optional .msg.Property Blindtime = 4;
  if (has_blindtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->blindtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.RoomInfomation)
}

::google_public::protobuf::uint8* RoomInfomation::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoomInfomation)
  // repeated .msg.CreateRoomInfo CreateRoomInfo = 1;
  for (int i = 0; i < this->createroominfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->createroominfo(i), target);
  }

  // repeated .msg.TournamentInfo TournamentSizeTemplate = 2;
  for (int i = 0; i < this->tournamentsizetemplate_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournamentsizetemplate(i), target);
  }

  // repeated .msg.TournamentInfo TournamentSpeedTemplate = 3;
  for (int i = 0; i < this->tournamentspeedtemplate_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tournamentspeedtemplate(i), target);
  }

  // optional .msg.Property Blindtime = 4;
  if (has_blindtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->blindtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoomInfomation)
  return target;
}

int RoomInfomation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .msg.Property Blindtime = 4;
    if (has_blindtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blindtime());
    }

  }
  // repeated .msg.CreateRoomInfo CreateRoomInfo = 1;
  total_size += 1 * this->createroominfo_size();
  for (int i = 0; i < this->createroominfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createroominfo(i));
  }

  // repeated .msg.TournamentInfo TournamentSizeTemplate = 2;
  total_size += 1 * this->tournamentsizetemplate_size();
  for (int i = 0; i < this->tournamentsizetemplate_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournamentsizetemplate(i));
  }

  // repeated .msg.TournamentInfo TournamentSpeedTemplate = 3;
  total_size += 1 * this->tournamentspeedtemplate_size();
  for (int i = 0; i < this->tournamentspeedtemplate_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournamentspeedtemplate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfomation::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfomation* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RoomInfomation*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfomation::MergeFrom(const RoomInfomation& from) {
  GOOGLE_CHECK_NE(&from, this);
  createroominfo_.MergeFrom(from.createroominfo_);
  tournamentsizetemplate_.MergeFrom(from.tournamentsizetemplate_);
  tournamentspeedtemplate_.MergeFrom(from.tournamentspeedtemplate_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_blindtime()) {
      mutable_blindtime()->::msg::Property::MergeFrom(from.blindtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfomation::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfomation::CopyFrom(const RoomInfomation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfomation::IsInitialized() const {

  return true;
}

void RoomInfomation::Swap(RoomInfomation* other) {
  if (other != this) {
    createroominfo_.Swap(&other->createroominfo_);
    tournamentsizetemplate_.Swap(&other->tournamentsizetemplate_);
    tournamentspeedtemplate_.Swap(&other->tournamentspeedtemplate_);
    std::swap(blindtime_, other->blindtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RoomInfomation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfomation_descriptor_;
  metadata.reflection = RoomInfomation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kNameFieldNumber;
const int Property::kIntValueFieldNumber;
const int Property::kBoolValueFieldNumber;
const int Property::kStringValueFieldNumber;
const int Property::kDisplayNameFieldNumber;
const int Property::kTypeFieldNumber;
const int Property::kEnumValueFieldNumber;
const int Property::kPrimaryFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Property)
}

void Property::InitAsDefaultInstance() {
  intvalue_ = const_cast< ::msg::IntValue*>(&::msg::IntValue::default_instance());
  enumvalue_ = const_cast< ::msg::EnumValue*>(&::msg::EnumValue::default_instance());
}

Property::Property(const Property& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Property)
}

void Property::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  intvalue_ = NULL;
  boolvalue_ = false;
  stringvalue_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  displayname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  enumvalue_ = NULL;
  primary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:msg.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (stringvalue_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringvalue_;
  }
  if (displayname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displayname_;
  }
  if (this != default_instance_) {
    delete intvalue_;
    delete enumvalue_;
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Property*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(boolvalue_, type_);
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_intvalue()) {
      if (intvalue_ != NULL) intvalue_->::msg::IntValue::Clear();
    }
    if (has_stringvalue()) {
      if (stringvalue_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringvalue_->clear();
      }
    }
    if (has_displayname()) {
      if (displayname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displayname_->clear();
      }
    }
    if (has_enumvalue()) {
      if (enumvalue_ != NULL) enumvalue_->::msg::EnumValue::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Property)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IntValue;
        break;
      }

      // optional .msg.IntValue IntValue = 2;
      case 2: {
        if (tag == 18) {
         parse_IntValue:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BoolValue;
        break;
      }

      // optional bool BoolValue = 3;
      case 3: {
        if (tag == 24) {
         parse_BoolValue:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StringValue;
        break;
      }

      // optional string StringValue = 4;
      case 4: {
        if (tag == 34) {
         parse_StringValue:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringvalue().data(), this->stringvalue().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "stringvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DisplayName;
        break;
      }

      // optional string DisplayName = 5;
      case 5: {
        if (tag == 42) {
         parse_DisplayName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayname().data(), this->displayname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "displayname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }

      // optional .msg.PropertyType Type = 6;
      case 6: {
        if (tag == 48) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::PropertyType_IsValid(value)) {
            set_type(static_cast< ::msg::PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnumValue;
        break;
      }

      // optional .msg.EnumValue EnumValue = 7;
      case 7: {
        if (tag == 58) {
         parse_EnumValue:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enumvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Primary;
        break;
      }

      // optional bool Primary = 8;
      case 8: {
        if (tag == 64) {
         parse_Primary:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_)));
          set_has_primary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Property)
  // optional string Name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .msg.IntValue IntValue = 2;
  if (has_intvalue()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intvalue(), output);
  }

  // optional bool BoolValue = 3;
  if (has_boolvalue()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->boolvalue(), output);
  }

  // optional string StringValue = 4;
  if (has_stringvalue()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "stringvalue");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stringvalue(), output);
  }

  // optional string DisplayName = 5;
  if (has_displayname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "displayname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->displayname(), output);
  }

  // optional .msg.PropertyType Type = 6;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional .msg.EnumValue EnumValue = 7;
  if (has_enumvalue()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enumvalue(), output);
  }

  // optional bool Primary = 8;
  if (has_primary()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(8, this->primary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Property)
}

::google_public::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Property)
  // optional string Name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .msg.IntValue IntValue = 2;
  if (has_intvalue()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intvalue(), target);
  }

  // optional bool BoolValue = 3;
  if (has_boolvalue()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->boolvalue(), target);
  }

  // optional string StringValue = 4;
  if (has_stringvalue()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "stringvalue");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stringvalue(), target);
  }

  // optional string DisplayName = 5;
  if (has_displayname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "displayname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->displayname(), target);
  }

  // optional .msg.PropertyType Type = 6;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional .msg.EnumValue EnumValue = 7;
  if (has_enumvalue()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enumvalue(), target);
  }

  // optional bool Primary = 8;
  if (has_primary()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->primary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Property)
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .msg.IntValue IntValue = 2;
    if (has_intvalue()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intvalue());
    }

    // optional bool BoolValue = 3;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

    // optional string StringValue = 4;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
    }

    // optional string DisplayName = 5;
    if (has_displayname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

    // optional .msg.PropertyType Type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.EnumValue EnumValue = 7;
    if (has_enumvalue()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enumvalue());
    }

    // optional bool Primary = 8;
    if (has_primary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_intvalue()) {
      mutable_intvalue()->::msg::IntValue::MergeFrom(from.intvalue());
    }
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_stringvalue()) {
      set_stringvalue(from.stringvalue());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enumvalue()) {
      mutable_enumvalue()->::msg::EnumValue::MergeFrom(from.enumvalue());
    }
    if (from.has_primary()) {
      set_primary(from.primary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(displayname_, other->displayname_);
    std::swap(type_, other->type_);
    std::swap(enumvalue_, other->enumvalue_);
    std::swap(primary_, other->primary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntValue::kValueFieldNumber;
const int IntValue::kMaxFieldNumber;
const int IntValue::kMinFieldNumber;
const int IntValue::kDefaultValueFieldNumber;
#endif  // !_MSC_VER

IntValue::IntValue()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.IntValue)
}

void IntValue::InitAsDefaultInstance() {
}

IntValue::IntValue(const IntValue& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.IntValue)
}

void IntValue::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  max_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  min_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntValue::~IntValue() {
  // @@protoc_insertion_point(destructor:msg.IntValue)
  SharedDtor();
}

void IntValue::SharedDtor() {
  if (max_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_;
  }
  if (min_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete min_;
  }
  if (this != default_instance_) {
  }
}

void IntValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* IntValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntValue_descriptor_;
}

const IntValue& IntValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

IntValue* IntValue::default_instance_ = NULL;

IntValue* IntValue::New() const {
  return new IntValue;
}

void IntValue::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    value_ = 0;
    if (has_max()) {
      if (max_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_->clear();
      }
    }
    if (has_min()) {
      if (min_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        min_->clear();
      }
    }
  }
  defaultvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntValue::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.IntValue)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Max;
        break;
      }

      // optional string Max = 2;
      case 2: {
        if (tag == 18) {
         parse_Max:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max().data(), this->max().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "max");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Min;
        break;
      }

      // optional string Min = 3;
      case 3: {
        if (tag == 26) {
         parse_Min:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_min()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->min().data(), this->min().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "min");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DefaultValue;
        break;
      }

      // repeated int32 DefaultValue = 4;
      case 4: {
        if (tag == 32) {
         parse_DefaultValue:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_defaultvalue())));
        } else if (tag == 34) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defaultvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DefaultValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.IntValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.IntValue)
  return false;
#undef DO_
}

void IntValue::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.IntValue)
  // optional int32 Value = 1;
  if (has_value()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // optional string Max = 2;
  if (has_max()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max().data(), this->max().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "max");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->max(), output);
  }

  // optional string Min = 3;
  if (has_min()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->min().data(), this->min().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "min");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->min(), output);
  }

  // repeated int32 DefaultValue = 4;
  for (int i = 0; i < this->defaultvalue_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->defaultvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.IntValue)
}

::google_public::protobuf::uint8* IntValue::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.IntValue)
  // optional int32 Value = 1;
  if (has_value()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // optional string Max = 2;
  if (has_max()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max().data(), this->max().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "max");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->max(), target);
  }

  // optional string Min = 3;
  if (has_min()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->min().data(), this->min().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "min");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->min(), target);
  }

  // repeated int32 DefaultValue = 4;
  for (int i = 0; i < this->defaultvalue_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->defaultvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.IntValue)
  return target;
}

int IntValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional string Max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->max());
    }

    // optional string Min = 3;
    if (has_min()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->min());
    }

  }
  // repeated int32 DefaultValue = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->defaultvalue_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->defaultvalue(i));
    }
    total_size += 1 * this->defaultvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntValue::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntValue* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const IntValue*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntValue::MergeFrom(const IntValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  defaultvalue_.MergeFrom(from.defaultvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntValue::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntValue::CopyFrom(const IntValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntValue::IsInitialized() const {

  return true;
}

void IntValue::Swap(IntValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(max_, other->max_);
    std::swap(min_, other->min_);
    defaultvalue_.Swap(&other->defaultvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata IntValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = IntValue_descriptor_;
  metadata.reflection = IntValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnumValue::kValueFieldNumber;
const int EnumValue::kItemsFieldNumber;
#endif  // !_MSC_VER

EnumValue::EnumValue()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.EnumValue)
}

void EnumValue::InitAsDefaultInstance() {
}

EnumValue::EnumValue(const EnumValue& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.EnumValue)
}

void EnumValue::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnumValue::~EnumValue() {
  // @@protoc_insertion_point(destructor:msg.EnumValue)
  SharedDtor();
}

void EnumValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnumValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* EnumValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumValue_descriptor_;
}

const EnumValue& EnumValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EnumValue* EnumValue::default_instance_ = NULL;

EnumValue* EnumValue::New() const {
  return new EnumValue;
}

void EnumValue::Clear() {
  value_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumValue::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.EnumValue)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Items;
        break;
      }

      // repeated .msg.EnumItem Items = 2;
      case 2: {
        if (tag == 18) {
         parse_Items:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.EnumValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.EnumValue)
  return false;
#undef DO_
}

void EnumValue::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.EnumValue)
  // optional int32 Value = 1;
  if (has_value()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // repeated .msg.EnumItem Items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.EnumValue)
}

::google_public::protobuf::uint8* EnumValue::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.EnumValue)
  // optional int32 Value = 1;
  if (has_value()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // repeated .msg.EnumItem Items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.EnumValue)
  return target;
}

int EnumValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  // repeated .msg.EnumItem Items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumValue::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnumValue* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const EnumValue*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnumValue::MergeFrom(const EnumValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumValue::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumValue::CopyFrom(const EnumValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumValue::IsInitialized() const {

  return true;
}

void EnumValue::Swap(EnumValue* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata EnumValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = EnumValue_descriptor_;
  metadata.reflection = EnumValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnumItem::kValueFieldNumber;
const int EnumItem::kTextFieldNumber;
#endif  // !_MSC_VER

EnumItem::EnumItem()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.EnumItem)
}

void EnumItem::InitAsDefaultInstance() {
}

EnumItem::EnumItem(const EnumItem& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.EnumItem)
}

void EnumItem::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  text_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnumItem::~EnumItem() {
  // @@protoc_insertion_point(destructor:msg.EnumItem)
  SharedDtor();
}

void EnumItem::SharedDtor() {
  if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void EnumItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* EnumItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumItem_descriptor_;
}

const EnumItem& EnumItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EnumItem* EnumItem::default_instance_ = NULL;

EnumItem* EnumItem::New() const {
  return new EnumItem;
}

void EnumItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    value_ = 0;
    if (has_text()) {
      if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnumItem::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.EnumItem)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Text;
        break;
      }

      // optional string Text = 2;
      case 2: {
        if (tag == 18) {
         parse_Text:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.EnumItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.EnumItem)
  return false;
#undef DO_
}

void EnumItem::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.EnumItem)
  // optional int32 Value = 1;
  if (has_value()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // optional string Text = 2;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.EnumItem)
}

::google_public::protobuf::uint8* EnumItem::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.EnumItem)
  // optional int32 Value = 1;
  if (has_value()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // optional string Text = 2;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.EnumItem)
  return target;
}

int EnumItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional string Text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumItem::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnumItem* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const EnumItem*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnumItem::MergeFrom(const EnumItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnumItem::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumItem::CopyFrom(const EnumItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumItem::IsInitialized() const {

  return true;
}

void EnumItem::Swap(EnumItem* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata EnumItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = EnumItem_descriptor_;
  metadata.reflection = EnumItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_103_FeedBack::kFeedBackFieldNumber;
#endif  // !_MSC_VER

Processor_103_FeedBack::Processor_103_FeedBack()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_103_FeedBack)
}

void Processor_103_FeedBack::InitAsDefaultInstance() {
  feedback_ = const_cast< ::msg::FeedBack*>(&::msg::FeedBack::default_instance());
}

Processor_103_FeedBack::Processor_103_FeedBack(const Processor_103_FeedBack& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_103_FeedBack)
}

void Processor_103_FeedBack::SharedCtor() {
  _cached_size_ = 0;
  feedback_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_103_FeedBack::~Processor_103_FeedBack() {
  // @@protoc_insertion_point(destructor:msg.Processor_103_FeedBack)
  SharedDtor();
}

void Processor_103_FeedBack::SharedDtor() {
  if (this != default_instance_) {
    delete feedback_;
  }
}

void Processor_103_FeedBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_103_FeedBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_103_FeedBack_descriptor_;
}

const Processor_103_FeedBack& Processor_103_FeedBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_103_FeedBack* Processor_103_FeedBack::default_instance_ = NULL;

Processor_103_FeedBack* Processor_103_FeedBack::New() const {
  return new Processor_103_FeedBack;
}

void Processor_103_FeedBack::Clear() {
  if (has_feedback()) {
    if (feedback_ != NULL) feedback_->::msg::FeedBack::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_103_FeedBack::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_103_FeedBack)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.FeedBack FeedBack = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_103_FeedBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_103_FeedBack)
  return false;
#undef DO_
}

void Processor_103_FeedBack::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_103_FeedBack)
  // optional .msg.FeedBack FeedBack = 1;
  if (has_feedback()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_103_FeedBack)
}

::google_public::protobuf::uint8* Processor_103_FeedBack::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_103_FeedBack)
  // optional .msg.FeedBack FeedBack = 1;
  if (has_feedback()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_103_FeedBack)
  return target;
}

int Processor_103_FeedBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.FeedBack FeedBack = 1;
    if (has_feedback()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feedback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_103_FeedBack::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_103_FeedBack* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_103_FeedBack*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_103_FeedBack::MergeFrom(const Processor_103_FeedBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feedback()) {
      mutable_feedback()->::msg::FeedBack::MergeFrom(from.feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_103_FeedBack::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_103_FeedBack::CopyFrom(const Processor_103_FeedBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_103_FeedBack::IsInitialized() const {

  return true;
}

void Processor_103_FeedBack::Swap(Processor_103_FeedBack* other) {
  if (other != this) {
    std::swap(feedback_, other->feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_103_FeedBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_103_FeedBack_descriptor_;
  metadata.reflection = Processor_103_FeedBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_104_Register::kLoginInfoFieldNumber;
const int Processor_104_Register::kRefereeFieldNumber;
const int Processor_104_Register::kPhoneNumberFieldNumber;
const int Processor_104_Register::kVerificationFieldNumber;
#endif  // !_MSC_VER

Processor_104_Register::Processor_104_Register()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_104_Register)
}

void Processor_104_Register::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::msg::UserLoginInfo*>(&::msg::UserLoginInfo::default_instance());
}

Processor_104_Register::Processor_104_Register(const Processor_104_Register& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_104_Register)
}

void Processor_104_Register::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logininfo_ = NULL;
  referee_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_104_Register::~Processor_104_Register() {
  // @@protoc_insertion_point(destructor:msg.Processor_104_Register)
  SharedDtor();
}

void Processor_104_Register::SharedDtor() {
  if (referee_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete referee_;
  }
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verification_;
  }
  if (this != default_instance_) {
    delete logininfo_;
  }
}

void Processor_104_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_104_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_104_Register_descriptor_;
}

const Processor_104_Register& Processor_104_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_104_Register* Processor_104_Register::default_instance_ = NULL;

Processor_104_Register* Processor_104_Register::New() const {
  return new Processor_104_Register;
}

void Processor_104_Register::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::msg::UserLoginInfo::Clear();
    }
    if (has_referee()) {
      if (referee_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        referee_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_verification()) {
      if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_104_Register::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_104_Register)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserLoginInfo LoginInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Referee;
        break;
      }

      // optional string Referee = 2;
      case 2: {
        if (tag == 18) {
         parse_Referee:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referee()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referee().data(), this->referee().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "referee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PhoneNumber;
        break;
      }

      // optional string PhoneNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_PhoneNumber:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Verification;
        break;
      }

      // optional string Verification = 4;
      case 4: {
        if (tag == 34) {
         parse_Verification:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verification().data(), this->verification().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "verification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_104_Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_104_Register)
  return false;
#undef DO_
}

void Processor_104_Register::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_104_Register)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logininfo(), output);
  }

  // optional string Referee = 2;
  if (has_referee()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referee().data(), this->referee().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "referee");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->referee(), output);
  }

  // optional string PhoneNumber = 3;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phonenumber(), output);
  }

  // optional string Verification = 4;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->verification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_104_Register)
}

::google_public::protobuf::uint8* Processor_104_Register::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_104_Register)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logininfo(), target);
  }

  // optional string Referee = 2;
  if (has_referee()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referee().data(), this->referee().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "referee");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referee(), target);
  }

  // optional string PhoneNumber = 3;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phonenumber(), target);
  }

  // optional string Verification = 4;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_104_Register)
  return target;
}

int Processor_104_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserLoginInfo LoginInfo = 1;
    if (has_logininfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }

    // optional string Referee = 2;
    if (has_referee()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->referee());
    }

    // optional string PhoneNumber = 3;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string Verification = 4;
    if (has_verification()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->verification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_104_Register::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_104_Register* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_104_Register*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_104_Register::MergeFrom(const Processor_104_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logininfo()) {
      mutable_logininfo()->::msg::UserLoginInfo::MergeFrom(from.logininfo());
    }
    if (from.has_referee()) {
      set_referee(from.referee());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_verification()) {
      set_verification(from.verification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_104_Register::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_104_Register::CopyFrom(const Processor_104_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_104_Register::IsInitialized() const {

  return true;
}

void Processor_104_Register::Swap(Processor_104_Register* other) {
  if (other != this) {
    std::swap(logininfo_, other->logininfo_);
    std::swap(referee_, other->referee_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(verification_, other->verification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_104_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_104_Register_descriptor_;
  metadata.reflection = Processor_104_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_105_Device::kDevicetokenFieldNumber;
#endif  // !_MSC_VER

Processor_105_Device::Processor_105_Device()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_105_Device)
}

void Processor_105_Device::InitAsDefaultInstance() {
}

Processor_105_Device::Processor_105_Device(const Processor_105_Device& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_105_Device)
}

void Processor_105_Device::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicetoken_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_105_Device::~Processor_105_Device() {
  // @@protoc_insertion_point(destructor:msg.Processor_105_Device)
  SharedDtor();
}

void Processor_105_Device::SharedDtor() {
  if (devicetoken_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicetoken_;
  }
  if (this != default_instance_) {
  }
}

void Processor_105_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_105_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_105_Device_descriptor_;
}

const Processor_105_Device& Processor_105_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_105_Device* Processor_105_Device::default_instance_ = NULL;

Processor_105_Device* Processor_105_Device::New() const {
  return new Processor_105_Device;
}

void Processor_105_Device::Clear() {
  if (has_devicetoken()) {
    if (devicetoken_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      devicetoken_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_105_Device::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_105_Device)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicetoken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetoken()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetoken().data(), this->devicetoken().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "devicetoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_105_Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_105_Device)
  return false;
#undef DO_
}

void Processor_105_Device::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_105_Device)
  // optional string devicetoken = 1;
  if (has_devicetoken()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetoken().data(), this->devicetoken().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "devicetoken");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicetoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_105_Device)
}

::google_public::protobuf::uint8* Processor_105_Device::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_105_Device)
  // optional string devicetoken = 1;
  if (has_devicetoken()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetoken().data(), this->devicetoken().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "devicetoken");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicetoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_105_Device)
  return target;
}

int Processor_105_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string devicetoken = 1;
    if (has_devicetoken()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->devicetoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_105_Device::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_105_Device* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_105_Device*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_105_Device::MergeFrom(const Processor_105_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicetoken()) {
      set_devicetoken(from.devicetoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_105_Device::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_105_Device::CopyFrom(const Processor_105_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_105_Device::IsInitialized() const {

  return true;
}

void Processor_105_Device::Swap(Processor_105_Device* other) {
  if (other != this) {
    std::swap(devicetoken_, other->devicetoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_105_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_105_Device_descriptor_;
  metadata.reflection = Processor_105_Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_106_ReceiveIOSPayReceipt::kReceiptFieldNumber;
const int Processor_106_ReceiveIOSPayReceipt::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_106_ReceiveIOSPayReceipt::Processor_106_ReceiveIOSPayReceipt()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_106_ReceiveIOSPayReceipt)
}

void Processor_106_ReceiveIOSPayReceipt::InitAsDefaultInstance() {
}

Processor_106_ReceiveIOSPayReceipt::Processor_106_ReceiveIOSPayReceipt(const Processor_106_ReceiveIOSPayReceipt& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_106_ReceiveIOSPayReceipt)
}

void Processor_106_ReceiveIOSPayReceipt::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  receipt_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_106_ReceiveIOSPayReceipt::~Processor_106_ReceiveIOSPayReceipt() {
  // @@protoc_insertion_point(destructor:msg.Processor_106_ReceiveIOSPayReceipt)
  SharedDtor();
}

void Processor_106_ReceiveIOSPayReceipt::SharedDtor() {
  if (receipt_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  if (this != default_instance_) {
  }
}

void Processor_106_ReceiveIOSPayReceipt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_106_ReceiveIOSPayReceipt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_106_ReceiveIOSPayReceipt_descriptor_;
}

const Processor_106_ReceiveIOSPayReceipt& Processor_106_ReceiveIOSPayReceipt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_106_ReceiveIOSPayReceipt* Processor_106_ReceiveIOSPayReceipt::default_instance_ = NULL;

Processor_106_ReceiveIOSPayReceipt* Processor_106_ReceiveIOSPayReceipt::New() const {
  return new Processor_106_ReceiveIOSPayReceipt;
}

void Processor_106_ReceiveIOSPayReceipt::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_receipt()) {
      if (receipt_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receipt_->clear();
      }
    }
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_106_ReceiveIOSPayReceipt::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_106_ReceiveIOSPayReceipt)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Receipt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receipt()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receipt().data(), this->receipt().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "receipt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_106_ReceiveIOSPayReceipt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_106_ReceiveIOSPayReceipt)
  return false;
#undef DO_
}

void Processor_106_ReceiveIOSPayReceipt::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_106_ReceiveIOSPayReceipt)
  // optional string Receipt = 1;
  if (has_receipt()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receipt().data(), this->receipt().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "receipt");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->receipt(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_106_ReceiveIOSPayReceipt)
}

::google_public::protobuf::uint8* Processor_106_ReceiveIOSPayReceipt::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_106_ReceiveIOSPayReceipt)
  // optional string Receipt = 1;
  if (has_receipt()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receipt().data(), this->receipt().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "receipt");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receipt(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_106_ReceiveIOSPayReceipt)
  return target;
}

int Processor_106_ReceiveIOSPayReceipt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Receipt = 1;
    if (has_receipt()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->receipt());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_106_ReceiveIOSPayReceipt::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_106_ReceiveIOSPayReceipt* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_106_ReceiveIOSPayReceipt*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_106_ReceiveIOSPayReceipt::MergeFrom(const Processor_106_ReceiveIOSPayReceipt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receipt()) {
      set_receipt(from.receipt());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_106_ReceiveIOSPayReceipt::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_106_ReceiveIOSPayReceipt::CopyFrom(const Processor_106_ReceiveIOSPayReceipt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_106_ReceiveIOSPayReceipt::IsInitialized() const {

  return true;
}

void Processor_106_ReceiveIOSPayReceipt::Swap(Processor_106_ReceiveIOSPayReceipt* other) {
  if (other != this) {
    std::swap(receipt_, other->receipt_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_106_ReceiveIOSPayReceipt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_106_ReceiveIOSPayReceipt_descriptor_;
  metadata.reflection = Processor_106_ReceiveIOSPayReceipt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_106_ReceiveIOSPayReceipt_Down::kResponseFieldNumber;
const int Processor_106_ReceiveIOSPayReceipt_Down::kReceiptMd5FieldNumber;
const int Processor_106_ReceiveIOSPayReceipt_Down::kTypeFieldNumber;
#endif  // !_MSC_VER

Processor_106_ReceiveIOSPayReceipt_Down::Processor_106_ReceiveIOSPayReceipt_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_106_ReceiveIOSPayReceipt_Down)
}

void Processor_106_ReceiveIOSPayReceipt_Down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_106_ReceiveIOSPayReceipt_Down::Processor_106_ReceiveIOSPayReceipt_Down(const Processor_106_ReceiveIOSPayReceipt_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_106_ReceiveIOSPayReceipt_Down)
}

void Processor_106_ReceiveIOSPayReceipt_Down::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  receiptmd5_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_106_ReceiveIOSPayReceipt_Down::~Processor_106_ReceiveIOSPayReceipt_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  SharedDtor();
}

void Processor_106_ReceiveIOSPayReceipt_Down::SharedDtor() {
  if (receiptmd5_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiptmd5_;
  }
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_106_ReceiveIOSPayReceipt_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_106_ReceiveIOSPayReceipt_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_106_ReceiveIOSPayReceipt_Down_descriptor_;
}

const Processor_106_ReceiveIOSPayReceipt_Down& Processor_106_ReceiveIOSPayReceipt_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_106_ReceiveIOSPayReceipt_Down* Processor_106_ReceiveIOSPayReceipt_Down::default_instance_ = NULL;

Processor_106_ReceiveIOSPayReceipt_Down* Processor_106_ReceiveIOSPayReceipt_Down::New() const {
  return new Processor_106_ReceiveIOSPayReceipt_Down;
}

void Processor_106_ReceiveIOSPayReceipt_Down::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_receiptmd5()) {
      if (receiptmd5_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receiptmd5_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_106_ReceiveIOSPayReceipt_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptMd5;
        break;
      }

      // optional string ReceiptMd5 = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptMd5:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiptmd5()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiptmd5().data(), this->receiptmd5().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "receiptmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .msg.VerificationType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::VerificationType_IsValid(value)) {
            set_type(static_cast< ::msg::VerificationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  return false;
#undef DO_
}

void Processor_106_ReceiveIOSPayReceipt_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional string ReceiptMd5 = 2;
  if (has_receiptmd5()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiptmd5().data(), this->receiptmd5().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "receiptmd5");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->receiptmd5(), output);
  }

  // optional .msg.VerificationType type = 3;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_106_ReceiveIOSPayReceipt_Down)
}

::google_public::protobuf::uint8* Processor_106_ReceiveIOSPayReceipt_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional string ReceiptMd5 = 2;
  if (has_receiptmd5()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiptmd5().data(), this->receiptmd5().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "receiptmd5");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiptmd5(), target);
  }

  // optional .msg.VerificationType type = 3;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_106_ReceiveIOSPayReceipt_Down)
  return target;
}

int Processor_106_ReceiveIOSPayReceipt_Down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional string ReceiptMd5 = 2;
    if (has_receiptmd5()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->receiptmd5());
    }

    // optional .msg.VerificationType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_106_ReceiveIOSPayReceipt_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_106_ReceiveIOSPayReceipt_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_106_ReceiveIOSPayReceipt_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_106_ReceiveIOSPayReceipt_Down::MergeFrom(const Processor_106_ReceiveIOSPayReceipt_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_receiptmd5()) {
      set_receiptmd5(from.receiptmd5());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_106_ReceiveIOSPayReceipt_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_106_ReceiveIOSPayReceipt_Down::CopyFrom(const Processor_106_ReceiveIOSPayReceipt_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_106_ReceiveIOSPayReceipt_Down::IsInitialized() const {

  return true;
}

void Processor_106_ReceiveIOSPayReceipt_Down::Swap(Processor_106_ReceiveIOSPayReceipt_Down* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(receiptmd5_, other->receiptmd5_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_106_ReceiveIOSPayReceipt_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_106_ReceiveIOSPayReceipt_Down_descriptor_;
  metadata.reflection = Processor_106_ReceiveIOSPayReceipt_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodInfo::kIDFieldNumber;
const int GoodInfo::kNameFieldNumber;
const int GoodInfo::kDescriptionFieldNumber;
const int GoodInfo::kPriceFieldNumber;
const int GoodInfo::kPicNameFieldNumber;
#endif  // !_MSC_VER

GoodInfo::GoodInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GoodInfo)
}

void GoodInfo::InitAsDefaultInstance() {
}

GoodInfo::GoodInfo(const GoodInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GoodInfo)
}

void GoodInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  picname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodInfo::~GoodInfo() {
  // @@protoc_insertion_point(destructor:msg.GoodInfo)
  SharedDtor();
}

void GoodInfo::SharedDtor() {
  if (id_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picname_;
  }
  if (this != default_instance_) {
  }
}

void GoodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GoodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodInfo_descriptor_;
}

const GoodInfo& GoodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GoodInfo* GoodInfo::default_instance_ = NULL;

GoodInfo* GoodInfo::New() const {
  return new GoodInfo;
}

void GoodInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_id()) {
      if (id_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    price_ = 0;
    if (has_picname()) {
      if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GoodInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Description;
        break;
      }

      // optional string Description = 3;
      case 3: {
        if (tag == 26) {
         parse_Description:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Price;
        break;
      }

      // optional int32 Price = 4;
      case 4: {
        if (tag == 32) {
         parse_Price:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PicName;
        break;
      }

      // optional string PicName = 5;
      case 5: {
        if (tag == 42) {
         parse_PicName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picname().data(), this->picname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "picname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GoodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GoodInfo)
  return false;
#undef DO_
}

void GoodInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GoodInfo)
  // optional string ID = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string Description = 3;
  if (has_description()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional int32 Price = 4;
  if (has_price()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional string PicName = 5;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->picname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GoodInfo)
}

::google_public::protobuf::uint8* GoodInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GoodInfo)
  // optional string ID = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Description = 3;
  if (has_description()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional int32 Price = 4;
  if (has_price()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional string PicName = 5;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->picname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GoodInfo)
  return target;
}

int GoodInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 Price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string PicName = 5;
    if (has_picname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->picname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GoodInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodInfo::MergeFrom(const GoodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_picname()) {
      set_picname(from.picname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodInfo::CopyFrom(const GoodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodInfo::IsInitialized() const {

  return true;
}

void GoodInfo::Swap(GoodInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(price_, other->price_);
    std::swap(picname_, other->picname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GoodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GoodInfo_descriptor_;
  metadata.reflection = GoodInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_107_GetGoodsInfo::kGoodsInfoFieldNumber;
#endif  // !_MSC_VER

Processor_107_GetGoodsInfo::Processor_107_GetGoodsInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_107_GetGoodsInfo)
}

void Processor_107_GetGoodsInfo::InitAsDefaultInstance() {
}

Processor_107_GetGoodsInfo::Processor_107_GetGoodsInfo(const Processor_107_GetGoodsInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_107_GetGoodsInfo)
}

void Processor_107_GetGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_107_GetGoodsInfo::~Processor_107_GetGoodsInfo() {
  // @@protoc_insertion_point(destructor:msg.Processor_107_GetGoodsInfo)
  SharedDtor();
}

void Processor_107_GetGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_107_GetGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_107_GetGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_107_GetGoodsInfo_descriptor_;
}

const Processor_107_GetGoodsInfo& Processor_107_GetGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_107_GetGoodsInfo* Processor_107_GetGoodsInfo::default_instance_ = NULL;

Processor_107_GetGoodsInfo* Processor_107_GetGoodsInfo::New() const {
  return new Processor_107_GetGoodsInfo;
}

void Processor_107_GetGoodsInfo::Clear() {
  goodsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_107_GetGoodsInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_107_GetGoodsInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.GoodInfo GoodsInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_GoodsInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GoodsInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_107_GetGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_107_GetGoodsInfo)
  return false;
#undef DO_
}

void Processor_107_GetGoodsInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_107_GetGoodsInfo)
  // repeated .msg.GoodInfo GoodsInfo = 1;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goodsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_107_GetGoodsInfo)
}

::google_public::protobuf::uint8* Processor_107_GetGoodsInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_107_GetGoodsInfo)
  // repeated .msg.GoodInfo GoodsInfo = 1;
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goodsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_107_GetGoodsInfo)
  return target;
}

int Processor_107_GetGoodsInfo::ByteSize() const {
  int total_size = 0;

  // repeated .msg.GoodInfo GoodsInfo = 1;
  total_size += 1 * this->goodsinfo_size();
  for (int i = 0; i < this->goodsinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_107_GetGoodsInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_107_GetGoodsInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_107_GetGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_107_GetGoodsInfo::MergeFrom(const Processor_107_GetGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsinfo_.MergeFrom(from.goodsinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_107_GetGoodsInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_107_GetGoodsInfo::CopyFrom(const Processor_107_GetGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_107_GetGoodsInfo::IsInitialized() const {

  return true;
}

void Processor_107_GetGoodsInfo::Swap(Processor_107_GetGoodsInfo* other) {
  if (other != this) {
    goodsinfo_.Swap(&other->goodsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_107_GetGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_107_GetGoodsInfo_descriptor_;
  metadata.reflection = Processor_107_GetGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_108_BuyGood::kGoodIDFieldNumber;
const int Processor_108_BuyGood::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_108_BuyGood::Processor_108_BuyGood()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_108_BuyGood)
}

void Processor_108_BuyGood::InitAsDefaultInstance() {
}

Processor_108_BuyGood::Processor_108_BuyGood(const Processor_108_BuyGood& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_108_BuyGood)
}

void Processor_108_BuyGood::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_108_BuyGood::~Processor_108_BuyGood() {
  // @@protoc_insertion_point(destructor:msg.Processor_108_BuyGood)
  SharedDtor();
}

void Processor_108_BuyGood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_108_BuyGood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_108_BuyGood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_108_BuyGood_descriptor_;
}

const Processor_108_BuyGood& Processor_108_BuyGood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_108_BuyGood* Processor_108_BuyGood::default_instance_ = NULL;

Processor_108_BuyGood* Processor_108_BuyGood::New() const {
  return new Processor_108_BuyGood;
}

void Processor_108_BuyGood::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_108_BuyGood*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodid_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_108_BuyGood::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_108_BuyGood)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GoodID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_108_BuyGood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_108_BuyGood)
  return false;
#undef DO_
}

void Processor_108_BuyGood::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_108_BuyGood)
  // optional int32 GoodID = 1;
  if (has_goodid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_108_BuyGood)
}

::google_public::protobuf::uint8* Processor_108_BuyGood::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_108_BuyGood)
  // optional int32 GoodID = 1;
  if (has_goodid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_108_BuyGood)
  return target;
}

int Processor_108_BuyGood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GoodID = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_108_BuyGood::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_108_BuyGood* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_108_BuyGood*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_108_BuyGood::MergeFrom(const Processor_108_BuyGood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_108_BuyGood::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_108_BuyGood::CopyFrom(const Processor_108_BuyGood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_108_BuyGood::IsInitialized() const {

  return true;
}

void Processor_108_BuyGood::Swap(Processor_108_BuyGood* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_108_BuyGood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_108_BuyGood_descriptor_;
  metadata.reflection = Processor_108_BuyGood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_109_AndroidPay::kUserIDFieldNumber;
const int Processor_109_AndroidPay::kProductIDFieldNumber;
#endif  // !_MSC_VER

Processor_109_AndroidPay::Processor_109_AndroidPay()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_109_AndroidPay)
}

void Processor_109_AndroidPay::InitAsDefaultInstance() {
}

Processor_109_AndroidPay::Processor_109_AndroidPay(const Processor_109_AndroidPay& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_109_AndroidPay)
}

void Processor_109_AndroidPay::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  productid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_109_AndroidPay::~Processor_109_AndroidPay() {
  // @@protoc_insertion_point(destructor:msg.Processor_109_AndroidPay)
  SharedDtor();
}

void Processor_109_AndroidPay::SharedDtor() {
  if (productid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void Processor_109_AndroidPay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_109_AndroidPay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_109_AndroidPay_descriptor_;
}

const Processor_109_AndroidPay& Processor_109_AndroidPay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_109_AndroidPay* Processor_109_AndroidPay::default_instance_ = NULL;

Processor_109_AndroidPay* Processor_109_AndroidPay::New() const {
  return new Processor_109_AndroidPay;
}

void Processor_109_AndroidPay::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    userid_ = 0;
    if (has_productid()) {
      if (productid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        productid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_109_AndroidPay::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_109_AndroidPay)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ProductID;
        break;
      }

      // optional string ProductID = 2;
      case 2: {
        if (tag == 18) {
         parse_ProductID:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->productid().data(), this->productid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "productid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_109_AndroidPay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_109_AndroidPay)
  return false;
#undef DO_
}

void Processor_109_AndroidPay::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_109_AndroidPay)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string ProductID = 2;
  if (has_productid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "productid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_109_AndroidPay)
}

::google_public::protobuf::uint8* Processor_109_AndroidPay::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_109_AndroidPay)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string ProductID = 2;
  if (has_productid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->productid().data(), this->productid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "productid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_109_AndroidPay)
  return target;
}

int Processor_109_AndroidPay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_109_AndroidPay::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_109_AndroidPay* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_109_AndroidPay*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_109_AndroidPay::MergeFrom(const Processor_109_AndroidPay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_109_AndroidPay::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_109_AndroidPay::CopyFrom(const Processor_109_AndroidPay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_109_AndroidPay::IsInitialized() const {

  return true;
}

void Processor_109_AndroidPay::Swap(Processor_109_AndroidPay* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_109_AndroidPay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_109_AndroidPay_descriptor_;
  metadata.reflection = Processor_109_AndroidPay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_109_AndroidPayDown::kAppIDFieldNumber;
const int Processor_109_AndroidPayDown::kPartnerIDFieldNumber;
const int Processor_109_AndroidPayDown::kPrepayIdFieldNumber;
const int Processor_109_AndroidPayDown::kNonceStrFieldNumber;
const int Processor_109_AndroidPayDown::kTimeStampFieldNumber;
const int Processor_109_AndroidPayDown::kSignFieldNumber;
#endif  // !_MSC_VER

Processor_109_AndroidPayDown::Processor_109_AndroidPayDown()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_109_AndroidPayDown)
}

void Processor_109_AndroidPayDown::InitAsDefaultInstance() {
}

Processor_109_AndroidPayDown::Processor_109_AndroidPayDown(const Processor_109_AndroidPayDown& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_109_AndroidPayDown)
}

void Processor_109_AndroidPayDown::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  partnerid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  prepayid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  noncestr_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_109_AndroidPayDown::~Processor_109_AndroidPayDown() {
  // @@protoc_insertion_point(destructor:msg.Processor_109_AndroidPayDown)
  SharedDtor();
}

void Processor_109_AndroidPayDown::SharedDtor() {
  if (appid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (partnerid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partnerid_;
  }
  if (prepayid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prepayid_;
  }
  if (noncestr_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noncestr_;
  }
  if (timestamp_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (sign_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void Processor_109_AndroidPayDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_109_AndroidPayDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_109_AndroidPayDown_descriptor_;
}

const Processor_109_AndroidPayDown& Processor_109_AndroidPayDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_109_AndroidPayDown* Processor_109_AndroidPayDown::default_instance_ = NULL;

Processor_109_AndroidPayDown* Processor_109_AndroidPayDown::New() const {
  return new Processor_109_AndroidPayDown;
}

void Processor_109_AndroidPayDown::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_appid()) {
      if (appid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appid_->clear();
      }
    }
    if (has_partnerid()) {
      if (partnerid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partnerid_->clear();
      }
    }
    if (has_prepayid()) {
      if (prepayid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prepayid_->clear();
      }
    }
    if (has_noncestr()) {
      if (noncestr_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        noncestr_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_109_AndroidPayDown::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_109_AndroidPayDown)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partnerID;
        break;
      }

      // optional string partnerID = 2;
      case 2: {
        if (tag == 18) {
         parse_partnerID:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnerid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partnerid().data(), this->partnerid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "partnerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prepayId;
        break;
      }

      // optional string prepayId = 3;
      case 3: {
        if (tag == 26) {
         parse_prepayId:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prepayid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prepayid().data(), this->prepayid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "prepayid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nonceStr;
        break;
      }

      // optional string nonceStr = 4;
      case 4: {
        if (tag == 34) {
         parse_nonceStr:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noncestr()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->noncestr().data(), this->noncestr().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "noncestr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timeStamp;
        break;
      }

      // optional string timeStamp = 5;
      case 5: {
        if (tag == 42) {
         parse_timeStamp:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional string sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_109_AndroidPayDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_109_AndroidPayDown)
  return false;
#undef DO_
}

void Processor_109_AndroidPayDown::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_109_AndroidPayDown)
  // optional string appID = 1;
  if (has_appid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appid(), output);
  }

  // optional string partnerID = 2;
  if (has_partnerid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnerid().data(), this->partnerid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "partnerid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partnerid(), output);
  }

  // optional string prepayId = 3;
  if (has_prepayid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prepayid().data(), this->prepayid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "prepayid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prepayid(), output);
  }

  // optional string nonceStr = 4;
  if (has_noncestr()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noncestr().data(), this->noncestr().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "noncestr");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->noncestr(), output);
  }

  // optional string timeStamp = 5;
  if (has_timestamp()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->timestamp(), output);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_109_AndroidPayDown)
}

::google_public::protobuf::uint8* Processor_109_AndroidPayDown::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_109_AndroidPayDown)
  // optional string appID = 1;
  if (has_appid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }

  // optional string partnerID = 2;
  if (has_partnerid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnerid().data(), this->partnerid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "partnerid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partnerid(), target);
  }

  // optional string prepayId = 3;
  if (has_prepayid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prepayid().data(), this->prepayid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "prepayid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prepayid(), target);
  }

  // optional string nonceStr = 4;
  if (has_noncestr()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noncestr().data(), this->noncestr().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "noncestr");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->noncestr(), target);
  }

  // optional string timeStamp = 5;
  if (has_timestamp()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_109_AndroidPayDown)
  return target;
}

int Processor_109_AndroidPayDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appID = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string partnerID = 2;
    if (has_partnerid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->partnerid());
    }

    // optional string prepayId = 3;
    if (has_prepayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->prepayid());
    }

    // optional string nonceStr = 4;
    if (has_noncestr()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->noncestr());
    }

    // optional string timeStamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_109_AndroidPayDown::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_109_AndroidPayDown* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_109_AndroidPayDown*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_109_AndroidPayDown::MergeFrom(const Processor_109_AndroidPayDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_prepayid()) {
      set_prepayid(from.prepayid());
    }
    if (from.has_noncestr()) {
      set_noncestr(from.noncestr());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_109_AndroidPayDown::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_109_AndroidPayDown::CopyFrom(const Processor_109_AndroidPayDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_109_AndroidPayDown::IsInitialized() const {

  return true;
}

void Processor_109_AndroidPayDown::Swap(Processor_109_AndroidPayDown* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(prepayid_, other->prepayid_);
    std::swap(noncestr_, other->noncestr_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_109_AndroidPayDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_109_AndroidPayDown_descriptor_;
  metadata.reflection = Processor_109_AndroidPayDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedBack::kDescribeFieldNumber;
const int FeedBack::kTypeFieldNumber;
const int FeedBack::kPicNameFieldNumber;
#endif  // !_MSC_VER

FeedBack::FeedBack()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FeedBack)
}

void FeedBack::InitAsDefaultInstance() {
}

FeedBack::FeedBack(const FeedBack& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.FeedBack)
}

void FeedBack::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  describe_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedBack::~FeedBack() {
  // @@protoc_insertion_point(destructor:msg.FeedBack)
  SharedDtor();
}

void FeedBack::SharedDtor() {
  if (describe_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete describe_;
  }
  if (type_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void FeedBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FeedBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedBack_descriptor_;
}

const FeedBack& FeedBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FeedBack* FeedBack::default_instance_ = NULL;

FeedBack* FeedBack::New() const {
  return new FeedBack;
}

void FeedBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_describe()) {
      if (describe_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        describe_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  picname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedBack::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.FeedBack)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Describe = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->describe().data(), this->describe().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "describe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Type;
        break;
      }

      // optional string Type = 2;
      case 2: {
        if (tag == 18) {
         parse_Type:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PicName;
        break;
      }

      // repeated string PicName = 3;
      case 3: {
        if (tag == 26) {
         parse_PicName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_picname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picname(this->picname_size() - 1).data(),
            this->picname(this->picname_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "picname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PicName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.FeedBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.FeedBack)
  return false;
#undef DO_
}

void FeedBack::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.FeedBack)
  // optional string Describe = 1;
  if (has_describe()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->describe(), output);
  }

  // optional string Type = 2;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string PicName = 3;
  for (int i = 0; i < this->picname_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->picname(i).data(), this->picname(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "picname");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->picname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.FeedBack)
}

::google_public::protobuf::uint8* FeedBack::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FeedBack)
  // optional string Describe = 1;
  if (has_describe()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->describe().data(), this->describe().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "describe");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->describe(), target);
  }

  // optional string Type = 2;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string PicName = 3;
  for (int i = 0; i < this->picname_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname(i).data(), this->picname(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->picname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FeedBack)
  return target;
}

int FeedBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Describe = 1;
    if (has_describe()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }

    // optional string Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated string PicName = 3;
  total_size += 1 * this->picname_size();
  for (int i = 0; i < this->picname_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->picname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedBack::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedBack* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FeedBack*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedBack::MergeFrom(const FeedBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  picname_.MergeFrom(from.picname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_describe()) {
      set_describe(from.describe());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedBack::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedBack::CopyFrom(const FeedBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedBack::IsInitialized() const {

  return true;
}

void FeedBack::Swap(FeedBack* other) {
  if (other != this) {
    std::swap(describe_, other->describe_);
    std::swap(type_, other->type_);
    picname_.Swap(&other->picname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FeedBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FeedBack_descriptor_;
  metadata.reflection = FeedBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGameSetting::kGameNameFieldNumber;
const int UserGameSetting::kGameIdFieldNumber;
const int UserGameSetting::kPropertyFieldNumber;
#endif  // !_MSC_VER

UserGameSetting::UserGameSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserGameSetting)
}

void UserGameSetting::InitAsDefaultInstance() {
}

UserGameSetting::UserGameSetting(const UserGameSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserGameSetting)
}

void UserGameSetting::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGameSetting::~UserGameSetting() {
  // @@protoc_insertion_point(destructor:msg.UserGameSetting)
  SharedDtor();
}

void UserGameSetting::SharedDtor() {
  if (gamename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (this != default_instance_) {
  }
}

void UserGameSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserGameSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGameSetting_descriptor_;
}

const UserGameSetting& UserGameSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserGameSetting* UserGameSetting::default_instance_ = NULL;

UserGameSetting* UserGameSetting::New() const {
  return new UserGameSetting;
}

void UserGameSetting::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamename()) {
      if (gamename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    gameid_ = 0;
  }
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGameSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserGameSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GameId;
        break;
      }

      // optional .msg.RoomType GameId = 2;
      case 2: {
        if (tag == 16) {
         parse_GameId:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_gameid(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Property;
        break;
      }

      // repeated .msg.Property Property = 3;
      case 3: {
        if (tag == 26) {
         parse_Property:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Property;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserGameSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserGameSetting)
  return false;
#undef DO_
}

void UserGameSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserGameSetting)
  // optional string GameName = 1;
  if (has_gamename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // optional .msg.RoomType GameId = 2;
  if (has_gameid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gameid(), output);
  }

  // repeated .msg.Property Property = 3;
  for (int i = 0; i < this->property_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserGameSetting)
}

::google_public::protobuf::uint8* UserGameSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserGameSetting)
  // optional string GameName = 1;
  if (has_gamename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // optional .msg.RoomType GameId = 2;
  if (has_gameid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gameid(), target);
  }

  // repeated .msg.Property Property = 3;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserGameSetting)
  return target;
}

int UserGameSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameName = 1;
    if (has_gamename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // optional .msg.RoomType GameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->gameid());
    }

  }
  // repeated .msg.Property Property = 3;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGameSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserGameSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGameSetting::MergeFrom(const UserGameSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGameSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameSetting::CopyFrom(const UserGameSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameSetting::IsInitialized() const {

  return true;
}

void UserGameSetting::Swap(UserGameSetting* other) {
  if (other != this) {
    std::swap(gamename_, other->gamename_);
    std::swap(gameid_, other->gameid_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserGameSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserGameSetting_descriptor_;
  metadata.reflection = UserGameSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGameSettings::kGameSettingFieldNumber;
#endif  // !_MSC_VER

UserGameSettings::UserGameSettings()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserGameSettings)
}

void UserGameSettings::InitAsDefaultInstance() {
}

UserGameSettings::UserGameSettings(const UserGameSettings& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserGameSettings)
}

void UserGameSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGameSettings::~UserGameSettings() {
  // @@protoc_insertion_point(destructor:msg.UserGameSettings)
  SharedDtor();
}

void UserGameSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserGameSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserGameSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGameSettings_descriptor_;
}

const UserGameSettings& UserGameSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserGameSettings* UserGameSettings::default_instance_ = NULL;

UserGameSettings* UserGameSettings::New() const {
  return new UserGameSettings;
}

void UserGameSettings::Clear() {
  gamesetting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGameSettings::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserGameSettings)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.UserGameSetting GameSetting = 1;
      case 1: {
        if (tag == 10) {
         parse_GameSetting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamesetting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GameSetting;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserGameSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserGameSettings)
  return false;
#undef DO_
}

void UserGameSettings::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserGameSettings)
  // repeated .msg.UserGameSetting GameSetting = 1;
  for (int i = 0; i < this->gamesetting_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamesetting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserGameSettings)
}

::google_public::protobuf::uint8* UserGameSettings::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserGameSettings)
  // repeated .msg.UserGameSetting GameSetting = 1;
  for (int i = 0; i < this->gamesetting_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamesetting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserGameSettings)
  return target;
}

int UserGameSettings::ByteSize() const {
  int total_size = 0;

  // repeated .msg.UserGameSetting GameSetting = 1;
  total_size += 1 * this->gamesetting_size();
  for (int i = 0; i < this->gamesetting_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamesetting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameSettings::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGameSettings* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserGameSettings*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGameSettings::MergeFrom(const UserGameSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamesetting_.MergeFrom(from.gamesetting_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGameSettings::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameSettings::CopyFrom(const UserGameSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameSettings::IsInitialized() const {

  return true;
}

void UserGameSettings::Swap(UserGameSettings* other) {
  if (other != this) {
    gamesetting_.Swap(&other->gamesetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserGameSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserGameSettings_descriptor_;
  metadata.reflection = UserGameSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_111_GetUserSetting::kResponseFieldNumber;
const int Processor_111_GetUserSetting::kGameSettingsFieldNumber;
const int Processor_111_GetUserSetting::kDiamondFieldNumber;
const int Processor_111_GetUserSetting::kHitPointFieldNumber;
const int Processor_111_GetUserSetting::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

Processor_111_GetUserSetting::Processor_111_GetUserSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_111_GetUserSetting)
}

void Processor_111_GetUserSetting::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  gamesettings_ = const_cast< ::msg::UserGameSettings*>(&::msg::UserGameSettings::default_instance());
}

Processor_111_GetUserSetting::Processor_111_GetUserSetting(const Processor_111_GetUserSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_111_GetUserSetting)
}

void Processor_111_GetUserSetting::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  gamesettings_ = NULL;
  diamond_ = 0;
  hitpoint_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_111_GetUserSetting::~Processor_111_GetUserSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_111_GetUserSetting)
  SharedDtor();
}

void Processor_111_GetUserSetting::SharedDtor() {
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
    delete response_;
    delete gamesettings_;
  }
}

void Processor_111_GetUserSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_111_GetUserSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_111_GetUserSetting_descriptor_;
}

const Processor_111_GetUserSetting& Processor_111_GetUserSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_111_GetUserSetting* Processor_111_GetUserSetting::default_instance_ = NULL;

Processor_111_GetUserSetting* Processor_111_GetUserSetting::New() const {
  return new Processor_111_GetUserSetting;
}

void Processor_111_GetUserSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_111_GetUserSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(diamond_, hitpoint_);
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_gamesettings()) {
      if (gamesettings_ != NULL) gamesettings_->::msg::UserGameSettings::Clear();
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_111_GetUserSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_111_GetUserSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GameSettings;
        break;
      }

      // optional .msg.UserGameSettings GameSettings = 3;
      case 3: {
        if (tag == 26) {
         parse_GameSettings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesettings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Diamond;
        break;
      }

      // optional int32 Diamond = 4;
      case 4: {
        if (tag == 32) {
         parse_Diamond:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HitPoint;
        break;
      }

      // optional int32 HitPoint = 5;
      case 5: {
        if (tag == 40) {
         parse_HitPoint:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitpoint_)));
          set_has_hitpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PhoneNumber;
        break;
      }

      // optional string PhoneNumber = 6;
      case 6: {
        if (tag == 50) {
         parse_PhoneNumber:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_111_GetUserSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_111_GetUserSetting)
  return false;
#undef DO_
}

void Processor_111_GetUserSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_111_GetUserSetting)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.UserGameSettings GameSettings = 3;
  if (has_gamesettings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gamesettings(), output);
  }

  // optional int32 Diamond = 4;
  if (has_diamond()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond(), output);
  }

  // optional int32 HitPoint = 5;
  if (has_hitpoint()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->hitpoint(), output);
  }

  // optional string PhoneNumber = 6;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_111_GetUserSetting)
}

::google_public::protobuf::uint8* Processor_111_GetUserSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_111_GetUserSetting)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.UserGameSettings GameSettings = 3;
  if (has_gamesettings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gamesettings(), target);
  }

  // optional int32 Diamond = 4;
  if (has_diamond()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond(), target);
  }

  // optional int32 HitPoint = 5;
  if (has_hitpoint()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hitpoint(), target);
  }

  // optional string PhoneNumber = 6;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_111_GetUserSetting)
  return target;
}

int Processor_111_GetUserSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.UserGameSettings GameSettings = 3;
    if (has_gamesettings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesettings());
    }

    // optional int32 Diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 HitPoint = 5;
    if (has_hitpoint()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->hitpoint());
    }

    // optional string PhoneNumber = 6;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_111_GetUserSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_111_GetUserSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_111_GetUserSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_111_GetUserSetting::MergeFrom(const Processor_111_GetUserSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_gamesettings()) {
      mutable_gamesettings()->::msg::UserGameSettings::MergeFrom(from.gamesettings());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_hitpoint()) {
      set_hitpoint(from.hitpoint());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_111_GetUserSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_111_GetUserSetting::CopyFrom(const Processor_111_GetUserSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_111_GetUserSetting::IsInitialized() const {

  return true;
}

void Processor_111_GetUserSetting::Swap(Processor_111_GetUserSetting* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(gamesettings_, other->gamesettings_);
    std::swap(diamond_, other->diamond_);
    std::swap(hitpoint_, other->hitpoint_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_111_GetUserSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_111_GetUserSetting_descriptor_;
  metadata.reflection = Processor_111_GetUserSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_112_ChangeUserSetting::kUserDetailInfoFieldNumber;
const int Processor_112_ChangeUserSetting::kUserLoginInfoFieldNumber;
const int Processor_112_ChangeUserSetting::kGameSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_112_ChangeUserSetting::Processor_112_ChangeUserSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_112_ChangeUserSetting)
}

void Processor_112_ChangeUserSetting::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
  userlogininfo_ = const_cast< ::msg::UserLoginInfo*>(&::msg::UserLoginInfo::default_instance());
  gamesettings_ = const_cast< ::msg::UserGameSettings*>(&::msg::UserGameSettings::default_instance());
}

Processor_112_ChangeUserSetting::Processor_112_ChangeUserSetting(const Processor_112_ChangeUserSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_112_ChangeUserSetting)
}

void Processor_112_ChangeUserSetting::SharedCtor() {
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  userlogininfo_ = NULL;
  gamesettings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_112_ChangeUserSetting::~Processor_112_ChangeUserSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_112_ChangeUserSetting)
  SharedDtor();
}

void Processor_112_ChangeUserSetting::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
    delete userlogininfo_;
    delete gamesettings_;
  }
}

void Processor_112_ChangeUserSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_112_ChangeUserSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_112_ChangeUserSetting_descriptor_;
}

const Processor_112_ChangeUserSetting& Processor_112_ChangeUserSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_112_ChangeUserSetting* Processor_112_ChangeUserSetting::default_instance_ = NULL;

Processor_112_ChangeUserSetting* Processor_112_ChangeUserSetting::New() const {
  return new Processor_112_ChangeUserSetting;
}

void Processor_112_ChangeUserSetting::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_userlogininfo()) {
      if (userlogininfo_ != NULL) userlogininfo_->::msg::UserLoginInfo::Clear();
    }
    if (has_gamesettings()) {
      if (gamesettings_ != NULL) gamesettings_->::msg::UserGameSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_112_ChangeUserSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_112_ChangeUserSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserLoginInfo;
        break;
      }

      // optional .msg.UserLoginInfo UserLoginInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserLoginInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userlogininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GameSettings;
        break;
      }

      // optional .msg.UserGameSettings GameSettings = 3;
      case 3: {
        if (tag == 26) {
         parse_GameSettings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesettings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_112_ChangeUserSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_112_ChangeUserSetting)
  return false;
#undef DO_
}

void Processor_112_ChangeUserSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_112_ChangeUserSetting)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional .msg.UserLoginInfo UserLoginInfo = 2;
  if (has_userlogininfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlogininfo(), output);
  }

  // optional .msg.UserGameSettings GameSettings = 3;
  if (has_gamesettings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gamesettings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_112_ChangeUserSetting)
}

::google_public::protobuf::uint8* Processor_112_ChangeUserSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_112_ChangeUserSetting)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional .msg.UserLoginInfo UserLoginInfo = 2;
  if (has_userlogininfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlogininfo(), target);
  }

  // optional .msg.UserGameSettings GameSettings = 3;
  if (has_gamesettings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gamesettings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_112_ChangeUserSetting)
  return target;
}

int Processor_112_ChangeUserSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional .msg.UserLoginInfo UserLoginInfo = 2;
    if (has_userlogininfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlogininfo());
    }

    // optional .msg.UserGameSettings GameSettings = 3;
    if (has_gamesettings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesettings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_112_ChangeUserSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_112_ChangeUserSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_112_ChangeUserSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_112_ChangeUserSetting::MergeFrom(const Processor_112_ChangeUserSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_userlogininfo()) {
      mutable_userlogininfo()->::msg::UserLoginInfo::MergeFrom(from.userlogininfo());
    }
    if (from.has_gamesettings()) {
      mutable_gamesettings()->::msg::UserGameSettings::MergeFrom(from.gamesettings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_112_ChangeUserSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_112_ChangeUserSetting::CopyFrom(const Processor_112_ChangeUserSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_112_ChangeUserSetting::IsInitialized() const {

  return true;
}

void Processor_112_ChangeUserSetting::Swap(Processor_112_ChangeUserSetting* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(userlogininfo_, other->userlogininfo_);
    std::swap(gamesettings_, other->gamesettings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_112_ChangeUserSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_112_ChangeUserSetting_descriptor_;
  metadata.reflection = Processor_112_ChangeUserSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_113_GetUserPermission_UP::kGroupIDFieldNumber;
const int Processor_113_GetUserPermission_UP::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_113_GetUserPermission_UP::Processor_113_GetUserPermission_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_113_GetUserPermission_UP)
}

void Processor_113_GetUserPermission_UP::InitAsDefaultInstance() {
}

Processor_113_GetUserPermission_UP::Processor_113_GetUserPermission_UP(const Processor_113_GetUserPermission_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_113_GetUserPermission_UP)
}

void Processor_113_GetUserPermission_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_113_GetUserPermission_UP::~Processor_113_GetUserPermission_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_113_GetUserPermission_UP)
  SharedDtor();
}

void Processor_113_GetUserPermission_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_113_GetUserPermission_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_113_GetUserPermission_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_113_GetUserPermission_UP_descriptor_;
}

const Processor_113_GetUserPermission_UP& Processor_113_GetUserPermission_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_113_GetUserPermission_UP* Processor_113_GetUserPermission_UP::default_instance_ = NULL;

Processor_113_GetUserPermission_UP* Processor_113_GetUserPermission_UP::New() const {
  return new Processor_113_GetUserPermission_UP;
}

void Processor_113_GetUserPermission_UP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_113_GetUserPermission_UP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_113_GetUserPermission_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_113_GetUserPermission_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_113_GetUserPermission_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_113_GetUserPermission_UP)
  return false;
#undef DO_
}

void Processor_113_GetUserPermission_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_113_GetUserPermission_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_113_GetUserPermission_UP)
}

::google_public::protobuf::uint8* Processor_113_GetUserPermission_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_113_GetUserPermission_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_113_GetUserPermission_UP)
  return target;
}

int Processor_113_GetUserPermission_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_113_GetUserPermission_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_113_GetUserPermission_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_113_GetUserPermission_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_113_GetUserPermission_UP::MergeFrom(const Processor_113_GetUserPermission_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_113_GetUserPermission_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_113_GetUserPermission_UP::CopyFrom(const Processor_113_GetUserPermission_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_113_GetUserPermission_UP::IsInitialized() const {

  return true;
}

void Processor_113_GetUserPermission_UP::Swap(Processor_113_GetUserPermission_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_113_GetUserPermission_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_113_GetUserPermission_UP_descriptor_;
  metadata.reflection = Processor_113_GetUserPermission_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_113_GetUserPermission_DOWN::kPermissionFieldNumber;
#endif  // !_MSC_VER

Processor_113_GetUserPermission_DOWN::Processor_113_GetUserPermission_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_113_GetUserPermission_DOWN)
}

void Processor_113_GetUserPermission_DOWN::InitAsDefaultInstance() {
  permission_ = const_cast< ::msg::GroupPermission*>(&::msg::GroupPermission::default_instance());
}

Processor_113_GetUserPermission_DOWN::Processor_113_GetUserPermission_DOWN(const Processor_113_GetUserPermission_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_113_GetUserPermission_DOWN)
}

void Processor_113_GetUserPermission_DOWN::SharedCtor() {
  _cached_size_ = 0;
  permission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_113_GetUserPermission_DOWN::~Processor_113_GetUserPermission_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_113_GetUserPermission_DOWN)
  SharedDtor();
}

void Processor_113_GetUserPermission_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete permission_;
  }
}

void Processor_113_GetUserPermission_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_113_GetUserPermission_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_113_GetUserPermission_DOWN_descriptor_;
}

const Processor_113_GetUserPermission_DOWN& Processor_113_GetUserPermission_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_113_GetUserPermission_DOWN* Processor_113_GetUserPermission_DOWN::default_instance_ = NULL;

Processor_113_GetUserPermission_DOWN* Processor_113_GetUserPermission_DOWN::New() const {
  return new Processor_113_GetUserPermission_DOWN;
}

void Processor_113_GetUserPermission_DOWN::Clear() {
  if (has_permission()) {
    if (permission_ != NULL) permission_->::msg::GroupPermission::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_113_GetUserPermission_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_113_GetUserPermission_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupPermission Permission = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_113_GetUserPermission_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_113_GetUserPermission_DOWN)
  return false;
#undef DO_
}

void Processor_113_GetUserPermission_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_113_GetUserPermission_DOWN)
  // optional .msg.GroupPermission Permission = 1;
  if (has_permission()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->permission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_113_GetUserPermission_DOWN)
}

::google_public::protobuf::uint8* Processor_113_GetUserPermission_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_113_GetUserPermission_DOWN)
  // optional .msg.GroupPermission Permission = 1;
  if (has_permission()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->permission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_113_GetUserPermission_DOWN)
  return target;
}

int Processor_113_GetUserPermission_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupPermission Permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_113_GetUserPermission_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_113_GetUserPermission_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_113_GetUserPermission_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_113_GetUserPermission_DOWN::MergeFrom(const Processor_113_GetUserPermission_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permission()) {
      mutable_permission()->::msg::GroupPermission::MergeFrom(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_113_GetUserPermission_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_113_GetUserPermission_DOWN::CopyFrom(const Processor_113_GetUserPermission_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_113_GetUserPermission_DOWN::IsInitialized() const {

  return true;
}

void Processor_113_GetUserPermission_DOWN::Swap(Processor_113_GetUserPermission_DOWN* other) {
  if (other != this) {
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_113_GetUserPermission_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_113_GetUserPermission_DOWN_descriptor_;
  metadata.reflection = Processor_113_GetUserPermission_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_114_ChangePermission::kUserIDFieldNumber;
const int Processor_114_ChangePermission::kPermissionFieldNumber;
#endif  // !_MSC_VER

Processor_114_ChangePermission::Processor_114_ChangePermission()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_114_ChangePermission)
}

void Processor_114_ChangePermission::InitAsDefaultInstance() {
  permission_ = const_cast< ::msg::GroupPermission*>(&::msg::GroupPermission::default_instance());
}

Processor_114_ChangePermission::Processor_114_ChangePermission(const Processor_114_ChangePermission& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_114_ChangePermission)
}

void Processor_114_ChangePermission::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  permission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_114_ChangePermission::~Processor_114_ChangePermission() {
  // @@protoc_insertion_point(destructor:msg.Processor_114_ChangePermission)
  SharedDtor();
}

void Processor_114_ChangePermission::SharedDtor() {
  if (this != default_instance_) {
    delete permission_;
  }
}

void Processor_114_ChangePermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_114_ChangePermission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_114_ChangePermission_descriptor_;
}

const Processor_114_ChangePermission& Processor_114_ChangePermission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_114_ChangePermission* Processor_114_ChangePermission::default_instance_ = NULL;

Processor_114_ChangePermission* Processor_114_ChangePermission::New() const {
  return new Processor_114_ChangePermission;
}

void Processor_114_ChangePermission::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    userid_ = 0;
    if (has_permission()) {
      if (permission_ != NULL) permission_->::msg::GroupPermission::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_114_ChangePermission::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_114_ChangePermission)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Permission;
        break;
      }

      // optional .msg.GroupPermission Permission = 2;
      case 2: {
        if (tag == 18) {
         parse_Permission:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_114_ChangePermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_114_ChangePermission)
  return false;
#undef DO_
}

void Processor_114_ChangePermission::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_114_ChangePermission)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .msg.GroupPermission Permission = 2;
  if (has_permission()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->permission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_114_ChangePermission)
}

::google_public::protobuf::uint8* Processor_114_ChangePermission::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_114_ChangePermission)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .msg.GroupPermission Permission = 2;
  if (has_permission()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->permission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_114_ChangePermission)
  return target;
}

int Processor_114_ChangePermission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.GroupPermission Permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_114_ChangePermission::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_114_ChangePermission* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_114_ChangePermission*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_114_ChangePermission::MergeFrom(const Processor_114_ChangePermission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_permission()) {
      mutable_permission()->::msg::GroupPermission::MergeFrom(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_114_ChangePermission::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_114_ChangePermission::CopyFrom(const Processor_114_ChangePermission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_114_ChangePermission::IsInitialized() const {

  return true;
}

void Processor_114_ChangePermission::Swap(Processor_114_ChangePermission* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_114_ChangePermission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_114_ChangePermission_descriptor_;
  metadata.reflection = Processor_114_ChangePermission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPermission::kGroupIDFieldNumber;
const int GroupPermission::kCreditFieldNumber;
#endif  // !_MSC_VER

GroupPermission::GroupPermission()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupPermission)
}

void GroupPermission::InitAsDefaultInstance() {
}

GroupPermission::GroupPermission(const GroupPermission& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupPermission)
}

void GroupPermission::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPermission::~GroupPermission() {
  // @@protoc_insertion_point(destructor:msg.GroupPermission)
  SharedDtor();
}

void GroupPermission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupPermission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPermission_descriptor_;
}

const GroupPermission& GroupPermission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupPermission* GroupPermission::default_instance_ = NULL;

GroupPermission* GroupPermission::New() const {
  return new GroupPermission;
}

void GroupPermission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupPermission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, credit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPermission::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupPermission)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Credit;
        break;
      }

      // optional int32 Credit = 2;
      case 2: {
        if (tag == 16) {
         parse_Credit:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupPermission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupPermission)
  return false;
#undef DO_
}

void GroupPermission::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupPermission)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional int32 Credit = 2;
  if (has_credit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupPermission)
}

::google_public::protobuf::uint8* GroupPermission::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupPermission)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional int32 Credit = 2;
  if (has_credit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupPermission)
  return target;
}

int GroupPermission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 Credit = 2;
    if (has_credit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPermission::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPermission* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupPermission*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPermission::MergeFrom(const GroupPermission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPermission::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPermission::CopyFrom(const GroupPermission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPermission::IsInitialized() const {

  return true;
}

void GroupPermission::Swap(GroupPermission* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(credit_, other->credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupPermission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupPermission_descriptor_;
  metadata.reflection = GroupPermission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_115_GetGroupSetting_UP::kGroupIDFieldNumber;
#endif  // !_MSC_VER

Processor_115_GetGroupSetting_UP::Processor_115_GetGroupSetting_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_115_GetGroupSetting_UP)
}

void Processor_115_GetGroupSetting_UP::InitAsDefaultInstance() {
}

Processor_115_GetGroupSetting_UP::Processor_115_GetGroupSetting_UP(const Processor_115_GetGroupSetting_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_115_GetGroupSetting_UP)
}

void Processor_115_GetGroupSetting_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_115_GetGroupSetting_UP::~Processor_115_GetGroupSetting_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_115_GetGroupSetting_UP)
  SharedDtor();
}

void Processor_115_GetGroupSetting_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_115_GetGroupSetting_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_115_GetGroupSetting_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_115_GetGroupSetting_UP_descriptor_;
}

const Processor_115_GetGroupSetting_UP& Processor_115_GetGroupSetting_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_115_GetGroupSetting_UP* Processor_115_GetGroupSetting_UP::default_instance_ = NULL;

Processor_115_GetGroupSetting_UP* Processor_115_GetGroupSetting_UP::New() const {
  return new Processor_115_GetGroupSetting_UP;
}

void Processor_115_GetGroupSetting_UP::Clear() {
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_115_GetGroupSetting_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_115_GetGroupSetting_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_115_GetGroupSetting_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_115_GetGroupSetting_UP)
  return false;
#undef DO_
}

void Processor_115_GetGroupSetting_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_115_GetGroupSetting_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_115_GetGroupSetting_UP)
}

::google_public::protobuf::uint8* Processor_115_GetGroupSetting_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_115_GetGroupSetting_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_115_GetGroupSetting_UP)
  return target;
}

int Processor_115_GetGroupSetting_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_115_GetGroupSetting_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_115_GetGroupSetting_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_115_GetGroupSetting_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_115_GetGroupSetting_UP::MergeFrom(const Processor_115_GetGroupSetting_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_115_GetGroupSetting_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_115_GetGroupSetting_UP::CopyFrom(const Processor_115_GetGroupSetting_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_115_GetGroupSetting_UP::IsInitialized() const {

  return true;
}

void Processor_115_GetGroupSetting_UP::Swap(Processor_115_GetGroupSetting_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_115_GetGroupSetting_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_115_GetGroupSetting_UP_descriptor_;
  metadata.reflection = Processor_115_GetGroupSetting_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_115_GetGroupSetting_DOWN::kSettingFieldNumber;
#endif  // !_MSC_VER

Processor_115_GetGroupSetting_DOWN::Processor_115_GetGroupSetting_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_115_GetGroupSetting_DOWN)
}

void Processor_115_GetGroupSetting_DOWN::InitAsDefaultInstance() {
  setting_ = const_cast< ::msg::GroupSetting*>(&::msg::GroupSetting::default_instance());
}

Processor_115_GetGroupSetting_DOWN::Processor_115_GetGroupSetting_DOWN(const Processor_115_GetGroupSetting_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_115_GetGroupSetting_DOWN)
}

void Processor_115_GetGroupSetting_DOWN::SharedCtor() {
  _cached_size_ = 0;
  setting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_115_GetGroupSetting_DOWN::~Processor_115_GetGroupSetting_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_115_GetGroupSetting_DOWN)
  SharedDtor();
}

void Processor_115_GetGroupSetting_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete setting_;
  }
}

void Processor_115_GetGroupSetting_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_115_GetGroupSetting_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_115_GetGroupSetting_DOWN_descriptor_;
}

const Processor_115_GetGroupSetting_DOWN& Processor_115_GetGroupSetting_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_115_GetGroupSetting_DOWN* Processor_115_GetGroupSetting_DOWN::default_instance_ = NULL;

Processor_115_GetGroupSetting_DOWN* Processor_115_GetGroupSetting_DOWN::New() const {
  return new Processor_115_GetGroupSetting_DOWN;
}

void Processor_115_GetGroupSetting_DOWN::Clear() {
  if (has_setting()) {
    if (setting_ != NULL) setting_->::msg::GroupSetting::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_115_GetGroupSetting_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_115_GetGroupSetting_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupSetting Setting = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_115_GetGroupSetting_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_115_GetGroupSetting_DOWN)
  return false;
#undef DO_
}

void Processor_115_GetGroupSetting_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_115_GetGroupSetting_DOWN)
  // optional .msg.GroupSetting Setting = 1;
  if (has_setting()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->setting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_115_GetGroupSetting_DOWN)
}

::google_public::protobuf::uint8* Processor_115_GetGroupSetting_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_115_GetGroupSetting_DOWN)
  // optional .msg.GroupSetting Setting = 1;
  if (has_setting()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->setting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_115_GetGroupSetting_DOWN)
  return target;
}

int Processor_115_GetGroupSetting_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupSetting Setting = 1;
    if (has_setting()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_115_GetGroupSetting_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_115_GetGroupSetting_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_115_GetGroupSetting_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_115_GetGroupSetting_DOWN::MergeFrom(const Processor_115_GetGroupSetting_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setting()) {
      mutable_setting()->::msg::GroupSetting::MergeFrom(from.setting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_115_GetGroupSetting_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_115_GetGroupSetting_DOWN::CopyFrom(const Processor_115_GetGroupSetting_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_115_GetGroupSetting_DOWN::IsInitialized() const {

  return true;
}

void Processor_115_GetGroupSetting_DOWN::Swap(Processor_115_GetGroupSetting_DOWN* other) {
  if (other != this) {
    std::swap(setting_, other->setting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_115_GetGroupSetting_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_115_GetGroupSetting_DOWN_descriptor_;
  metadata.reflection = Processor_115_GetGroupSetting_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_116_ChangeGroupSetting::kSettingFieldNumber;
#endif  // !_MSC_VER

Processor_116_ChangeGroupSetting::Processor_116_ChangeGroupSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_116_ChangeGroupSetting)
}

void Processor_116_ChangeGroupSetting::InitAsDefaultInstance() {
  setting_ = const_cast< ::msg::GroupSetting*>(&::msg::GroupSetting::default_instance());
}

Processor_116_ChangeGroupSetting::Processor_116_ChangeGroupSetting(const Processor_116_ChangeGroupSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_116_ChangeGroupSetting)
}

void Processor_116_ChangeGroupSetting::SharedCtor() {
  _cached_size_ = 0;
  setting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_116_ChangeGroupSetting::~Processor_116_ChangeGroupSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_116_ChangeGroupSetting)
  SharedDtor();
}

void Processor_116_ChangeGroupSetting::SharedDtor() {
  if (this != default_instance_) {
    delete setting_;
  }
}

void Processor_116_ChangeGroupSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_116_ChangeGroupSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_116_ChangeGroupSetting_descriptor_;
}

const Processor_116_ChangeGroupSetting& Processor_116_ChangeGroupSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_116_ChangeGroupSetting* Processor_116_ChangeGroupSetting::default_instance_ = NULL;

Processor_116_ChangeGroupSetting* Processor_116_ChangeGroupSetting::New() const {
  return new Processor_116_ChangeGroupSetting;
}

void Processor_116_ChangeGroupSetting::Clear() {
  if (has_setting()) {
    if (setting_ != NULL) setting_->::msg::GroupSetting::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_116_ChangeGroupSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_116_ChangeGroupSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupSetting Setting = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_116_ChangeGroupSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_116_ChangeGroupSetting)
  return false;
#undef DO_
}

void Processor_116_ChangeGroupSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_116_ChangeGroupSetting)
  // optional .msg.GroupSetting Setting = 1;
  if (has_setting()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->setting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_116_ChangeGroupSetting)
}

::google_public::protobuf::uint8* Processor_116_ChangeGroupSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_116_ChangeGroupSetting)
  // optional .msg.GroupSetting Setting = 1;
  if (has_setting()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->setting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_116_ChangeGroupSetting)
  return target;
}

int Processor_116_ChangeGroupSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupSetting Setting = 1;
    if (has_setting()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_116_ChangeGroupSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_116_ChangeGroupSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_116_ChangeGroupSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_116_ChangeGroupSetting::MergeFrom(const Processor_116_ChangeGroupSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setting()) {
      mutable_setting()->::msg::GroupSetting::MergeFrom(from.setting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_116_ChangeGroupSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_116_ChangeGroupSetting::CopyFrom(const Processor_116_ChangeGroupSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_116_ChangeGroupSetting::IsInitialized() const {

  return true;
}

void Processor_116_ChangeGroupSetting::Swap(Processor_116_ChangeGroupSetting* other) {
  if (other != this) {
    std::swap(setting_, other->setting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_116_ChangeGroupSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_116_ChangeGroupSetting_descriptor_;
  metadata.reflection = Processor_116_ChangeGroupSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_118_SendVerification::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

Processor_118_SendVerification::Processor_118_SendVerification()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_118_SendVerification)
}

void Processor_118_SendVerification::InitAsDefaultInstance() {
}

Processor_118_SendVerification::Processor_118_SendVerification(const Processor_118_SendVerification& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_118_SendVerification)
}

void Processor_118_SendVerification::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_118_SendVerification::~Processor_118_SendVerification() {
  // @@protoc_insertion_point(destructor:msg.Processor_118_SendVerification)
  SharedDtor();
}

void Processor_118_SendVerification::SharedDtor() {
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
  }
}

void Processor_118_SendVerification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_118_SendVerification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_118_SendVerification_descriptor_;
}

const Processor_118_SendVerification& Processor_118_SendVerification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_118_SendVerification* Processor_118_SendVerification::default_instance_ = NULL;

Processor_118_SendVerification* Processor_118_SendVerification::New() const {
  return new Processor_118_SendVerification;
}

void Processor_118_SendVerification::Clear() {
  if (has_phonenumber()) {
    if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      phonenumber_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_118_SendVerification::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_118_SendVerification)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PhoneNumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_118_SendVerification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_118_SendVerification)
  return false;
#undef DO_
}

void Processor_118_SendVerification::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_118_SendVerification)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phonenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_118_SendVerification)
}

::google_public::protobuf::uint8* Processor_118_SendVerification::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_118_SendVerification)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phonenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_118_SendVerification)
  return target;
}

int Processor_118_SendVerification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PhoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_118_SendVerification::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_118_SendVerification* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_118_SendVerification*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_118_SendVerification::MergeFrom(const Processor_118_SendVerification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_118_SendVerification::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_118_SendVerification::CopyFrom(const Processor_118_SendVerification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_118_SendVerification::IsInitialized() const {

  return true;
}

void Processor_118_SendVerification::Swap(Processor_118_SendVerification* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_118_SendVerification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_118_SendVerification_descriptor_;
  metadata.reflection = Processor_118_SendVerification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_119_BindPhone::kPhoneNumberFieldNumber;
const int Processor_119_BindPhone::kVerificationFieldNumber;
#endif  // !_MSC_VER

Processor_119_BindPhone::Processor_119_BindPhone()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_119_BindPhone)
}

void Processor_119_BindPhone::InitAsDefaultInstance() {
}

Processor_119_BindPhone::Processor_119_BindPhone(const Processor_119_BindPhone& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_119_BindPhone)
}

void Processor_119_BindPhone::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_119_BindPhone::~Processor_119_BindPhone() {
  // @@protoc_insertion_point(destructor:msg.Processor_119_BindPhone)
  SharedDtor();
}

void Processor_119_BindPhone::SharedDtor() {
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verification_;
  }
  if (this != default_instance_) {
  }
}

void Processor_119_BindPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_119_BindPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_119_BindPhone_descriptor_;
}

const Processor_119_BindPhone& Processor_119_BindPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_119_BindPhone* Processor_119_BindPhone::default_instance_ = NULL;

Processor_119_BindPhone* Processor_119_BindPhone::New() const {
  return new Processor_119_BindPhone;
}

void Processor_119_BindPhone::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_phonenumber()) {
      if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_verification()) {
      if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_119_BindPhone::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_119_BindPhone)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PhoneNumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Verification;
        break;
      }

      // optional string Verification = 2;
      case 2: {
        if (tag == 18) {
         parse_Verification:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verification().data(), this->verification().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "verification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_119_BindPhone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_119_BindPhone)
  return false;
#undef DO_
}

void Processor_119_BindPhone::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_119_BindPhone)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phonenumber(), output);
  }

  // optional string Verification = 2;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->verification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_119_BindPhone)
}

::google_public::protobuf::uint8* Processor_119_BindPhone::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_119_BindPhone)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phonenumber(), target);
  }

  // optional string Verification = 2;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->verification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_119_BindPhone)
  return target;
}

int Processor_119_BindPhone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PhoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string Verification = 2;
    if (has_verification()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->verification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_119_BindPhone::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_119_BindPhone* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_119_BindPhone*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_119_BindPhone::MergeFrom(const Processor_119_BindPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_verification()) {
      set_verification(from.verification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_119_BindPhone::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_119_BindPhone::CopyFrom(const Processor_119_BindPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_119_BindPhone::IsInitialized() const {

  return true;
}

void Processor_119_BindPhone::Swap(Processor_119_BindPhone* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(verification_, other->verification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_119_BindPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_119_BindPhone_descriptor_;
  metadata.reflection = Processor_119_BindPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupSetting::kGroupIDFieldNumber;
const int GroupSetting::kReceivePushFieldNumber;
#endif  // !_MSC_VER

GroupSetting::GroupSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupSetting)
}

void GroupSetting::InitAsDefaultInstance() {
}

GroupSetting::GroupSetting(const GroupSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupSetting)
}

void GroupSetting::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  receivepush_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupSetting::~GroupSetting() {
  // @@protoc_insertion_point(destructor:msg.GroupSetting)
  SharedDtor();
}

void GroupSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSetting_descriptor_;
}

const GroupSetting& GroupSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupSetting* GroupSetting::default_instance_ = NULL;

GroupSetting* GroupSetting::New() const {
  return new GroupSetting;
}

void GroupSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, receivepush_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceivePush;
        break;
      }

      // optional bool ReceivePush = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceivePush:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivepush_)));
          set_has_receivepush();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupSetting)
  return false;
#undef DO_
}

void GroupSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupSetting)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional bool ReceivePush = 2;
  if (has_receivepush()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->receivepush(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupSetting)
}

::google_public::protobuf::uint8* GroupSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupSetting)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional bool ReceivePush = 2;
  if (has_receivepush()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->receivepush(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupSetting)
  return target;
}

int GroupSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional bool ReceivePush = 2;
    if (has_receivepush()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupSetting::MergeFrom(const GroupSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_receivepush()) {
      set_receivepush(from.receivepush());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSetting::CopyFrom(const GroupSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSetting::IsInitialized() const {

  return true;
}

void GroupSetting::Swap(GroupSetting* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(receivepush_, other->receivepush_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupSetting_descriptor_;
  metadata.reflection = GroupSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kUserDetailInfoFieldNumber;
const int FriendInfo::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FriendInfo)
}

void FriendInfo::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.FriendInfo)
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  isonline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:msg.FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    isonline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.FriendInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsOnline;
        break;
      }

      // optional bool IsOnline = 2;
      case 2: {
        if (tag == 16) {
         parse_IsOnline:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.FriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.FriendInfo)
  return false;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.FriendInfo)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional bool IsOnline = 2;
  if (has_isonline()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->isonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.FriendInfo)
}

::google_public::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FriendInfo)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional bool IsOnline = 2;
  if (has_isonline()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FriendInfo)
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional bool IsOnline = 2;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_120_GetFriendList::kResponseFieldNumber;
const int Processor_120_GetFriendList::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

Processor_120_GetFriendList::Processor_120_GetFriendList()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_120_GetFriendList)
}

void Processor_120_GetFriendList::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_120_GetFriendList::Processor_120_GetFriendList(const Processor_120_GetFriendList& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_120_GetFriendList)
}

void Processor_120_GetFriendList::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_120_GetFriendList::~Processor_120_GetFriendList() {
  // @@protoc_insertion_point(destructor:msg.Processor_120_GetFriendList)
  SharedDtor();
}

void Processor_120_GetFriendList::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_120_GetFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_120_GetFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_120_GetFriendList_descriptor_;
}

const Processor_120_GetFriendList& Processor_120_GetFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_120_GetFriendList* Processor_120_GetFriendList::default_instance_ = NULL;

Processor_120_GetFriendList* Processor_120_GetFriendList::New() const {
  return new Processor_120_GetFriendList;
}

void Processor_120_GetFriendList::Clear() {
  if (has_response()) {
    if (response_ != NULL) response_->::msg::Response::Clear();
  }
  friendinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_120_GetFriendList::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_120_GetFriendList)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FriendInfo;
        break;
      }

      // repeated .msg.FriendInfo FriendInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_FriendInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FriendInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_120_GetFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_120_GetFriendList)
  return false;
#undef DO_
}

void Processor_120_GetFriendList::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_120_GetFriendList)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // repeated .msg.FriendInfo FriendInfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_120_GetFriendList)
}

::google_public::protobuf::uint8* Processor_120_GetFriendList::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_120_GetFriendList)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // repeated .msg.FriendInfo FriendInfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_120_GetFriendList)
  return target;
}

int Processor_120_GetFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  // repeated .msg.FriendInfo FriendInfo = 2;
  total_size += 1 * this->friendinfo_size();
  for (int i = 0; i < this->friendinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_120_GetFriendList::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_120_GetFriendList* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_120_GetFriendList*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_120_GetFriendList::MergeFrom(const Processor_120_GetFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendinfo_.MergeFrom(from.friendinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_120_GetFriendList::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_120_GetFriendList::CopyFrom(const Processor_120_GetFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_120_GetFriendList::IsInitialized() const {

  return true;
}

void Processor_120_GetFriendList::Swap(Processor_120_GetFriendList* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    friendinfo_.Swap(&other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_120_GetFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_120_GetFriendList_descriptor_;
  metadata.reflection = Processor_120_GetFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_121_SearchUser_UP::kSearchNameFieldNumber;
#endif  // !_MSC_VER

Processor_121_SearchUser_UP::Processor_121_SearchUser_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_121_SearchUser_UP)
}

void Processor_121_SearchUser_UP::InitAsDefaultInstance() {
}

Processor_121_SearchUser_UP::Processor_121_SearchUser_UP(const Processor_121_SearchUser_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_121_SearchUser_UP)
}

void Processor_121_SearchUser_UP::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  searchname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_121_SearchUser_UP::~Processor_121_SearchUser_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_121_SearchUser_UP)
  SharedDtor();
}

void Processor_121_SearchUser_UP::SharedDtor() {
  if (searchname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchname_;
  }
  if (this != default_instance_) {
  }
}

void Processor_121_SearchUser_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_121_SearchUser_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_121_SearchUser_UP_descriptor_;
}

const Processor_121_SearchUser_UP& Processor_121_SearchUser_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_121_SearchUser_UP* Processor_121_SearchUser_UP::default_instance_ = NULL;

Processor_121_SearchUser_UP* Processor_121_SearchUser_UP::New() const {
  return new Processor_121_SearchUser_UP;
}

void Processor_121_SearchUser_UP::Clear() {
  if (has_searchname()) {
    if (searchname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      searchname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_121_SearchUser_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_121_SearchUser_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SearchName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchname().data(), this->searchname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "searchname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_121_SearchUser_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_121_SearchUser_UP)
  return false;
#undef DO_
}

void Processor_121_SearchUser_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_121_SearchUser_UP)
  // optional string SearchName = 1;
  if (has_searchname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchname().data(), this->searchname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "searchname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->searchname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_121_SearchUser_UP)
}

::google_public::protobuf::uint8* Processor_121_SearchUser_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_121_SearchUser_UP)
  // optional string SearchName = 1;
  if (has_searchname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchname().data(), this->searchname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "searchname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->searchname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_121_SearchUser_UP)
  return target;
}

int Processor_121_SearchUser_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SearchName = 1;
    if (has_searchname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->searchname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_121_SearchUser_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_121_SearchUser_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_121_SearchUser_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_121_SearchUser_UP::MergeFrom(const Processor_121_SearchUser_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_searchname()) {
      set_searchname(from.searchname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_121_SearchUser_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_121_SearchUser_UP::CopyFrom(const Processor_121_SearchUser_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_121_SearchUser_UP::IsInitialized() const {

  return true;
}

void Processor_121_SearchUser_UP::Swap(Processor_121_SearchUser_UP* other) {
  if (other != this) {
    std::swap(searchname_, other->searchname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_121_SearchUser_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_121_SearchUser_UP_descriptor_;
  metadata.reflection = Processor_121_SearchUser_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_121_SearchUser_DOWN::kResponseFieldNumber;
const int Processor_121_SearchUser_DOWN::kUserDetailInfoFieldNumber;
#endif  // !_MSC_VER

Processor_121_SearchUser_DOWN::Processor_121_SearchUser_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_121_SearchUser_DOWN)
}

void Processor_121_SearchUser_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_121_SearchUser_DOWN::Processor_121_SearchUser_DOWN(const Processor_121_SearchUser_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_121_SearchUser_DOWN)
}

void Processor_121_SearchUser_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_121_SearchUser_DOWN::~Processor_121_SearchUser_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_121_SearchUser_DOWN)
  SharedDtor();
}

void Processor_121_SearchUser_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_121_SearchUser_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_121_SearchUser_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_121_SearchUser_DOWN_descriptor_;
}

const Processor_121_SearchUser_DOWN& Processor_121_SearchUser_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_121_SearchUser_DOWN* Processor_121_SearchUser_DOWN::default_instance_ = NULL;

Processor_121_SearchUser_DOWN* Processor_121_SearchUser_DOWN::New() const {
  return new Processor_121_SearchUser_DOWN;
}

void Processor_121_SearchUser_DOWN::Clear() {
  if (has_response()) {
    if (response_ != NULL) response_->::msg::Response::Clear();
  }
  userdetailinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_121_SearchUser_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_121_SearchUser_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserDetailInfo;
        break;
      }

      // repeated .msg.UserDetailInfo UserDetailInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserDetailInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserDetailInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_121_SearchUser_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_121_SearchUser_DOWN)
  return false;
#undef DO_
}

void Processor_121_SearchUser_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_121_SearchUser_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // repeated .msg.UserDetailInfo UserDetailInfo = 2;
  for (int i = 0; i < this->userdetailinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userdetailinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_121_SearchUser_DOWN)
}

::google_public::protobuf::uint8* Processor_121_SearchUser_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_121_SearchUser_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // repeated .msg.UserDetailInfo UserDetailInfo = 2;
  for (int i = 0; i < this->userdetailinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userdetailinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_121_SearchUser_DOWN)
  return target;
}

int Processor_121_SearchUser_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  // repeated .msg.UserDetailInfo UserDetailInfo = 2;
  total_size += 1 * this->userdetailinfo_size();
  for (int i = 0; i < this->userdetailinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdetailinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_121_SearchUser_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_121_SearchUser_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_121_SearchUser_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_121_SearchUser_DOWN::MergeFrom(const Processor_121_SearchUser_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  userdetailinfo_.MergeFrom(from.userdetailinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_121_SearchUser_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_121_SearchUser_DOWN::CopyFrom(const Processor_121_SearchUser_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_121_SearchUser_DOWN::IsInitialized() const {

  return true;
}

void Processor_121_SearchUser_DOWN::Swap(Processor_121_SearchUser_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    userdetailinfo_.Swap(&other->userdetailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_121_SearchUser_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_121_SearchUser_DOWN_descriptor_;
  metadata.reflection = Processor_121_SearchUser_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_122_SendRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

Processor_122_SendRequest::Processor_122_SendRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_122_SendRequest)
}

void Processor_122_SendRequest::InitAsDefaultInstance() {
}

Processor_122_SendRequest::Processor_122_SendRequest(const Processor_122_SendRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_122_SendRequest)
}

void Processor_122_SendRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_122_SendRequest::~Processor_122_SendRequest() {
  // @@protoc_insertion_point(destructor:msg.Processor_122_SendRequest)
  SharedDtor();
}

void Processor_122_SendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_122_SendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_122_SendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_122_SendRequest_descriptor_;
}

const Processor_122_SendRequest& Processor_122_SendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_122_SendRequest* Processor_122_SendRequest::default_instance_ = NULL;

Processor_122_SendRequest* Processor_122_SendRequest::New() const {
  return new Processor_122_SendRequest;
}

void Processor_122_SendRequest::Clear() {
  request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_122_SendRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_122_SendRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Request Request = 1;
      case 1: {
        if (tag == 10) {
         parse_Request:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Request;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_122_SendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_122_SendRequest)
  return false;
#undef DO_
}

void Processor_122_SendRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_122_SendRequest)
  // repeated .msg.Request Request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_122_SendRequest)
}

::google_public::protobuf::uint8* Processor_122_SendRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_122_SendRequest)
  // repeated .msg.Request Request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_122_SendRequest)
  return target;
}

int Processor_122_SendRequest::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Request Request = 1;
  total_size += 1 * this->request_size();
  for (int i = 0; i < this->request_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_122_SendRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_122_SendRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_122_SendRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_122_SendRequest::MergeFrom(const Processor_122_SendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_.MergeFrom(from.request_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_122_SendRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_122_SendRequest::CopyFrom(const Processor_122_SendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_122_SendRequest::IsInitialized() const {

  return true;
}

void Processor_122_SendRequest::Swap(Processor_122_SendRequest* other) {
  if (other != this) {
    request_.Swap(&other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_122_SendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_122_SendRequest_descriptor_;
  metadata.reflection = Processor_122_SendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_123_ReceiveRequestList::kRequestFieldNumber;
#endif  // !_MSC_VER

Processor_123_ReceiveRequestList::Processor_123_ReceiveRequestList()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_123_ReceiveRequestList)
}

void Processor_123_ReceiveRequestList::InitAsDefaultInstance() {
}

Processor_123_ReceiveRequestList::Processor_123_ReceiveRequestList(const Processor_123_ReceiveRequestList& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_123_ReceiveRequestList)
}

void Processor_123_ReceiveRequestList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_123_ReceiveRequestList::~Processor_123_ReceiveRequestList() {
  // @@protoc_insertion_point(destructor:msg.Processor_123_ReceiveRequestList)
  SharedDtor();
}

void Processor_123_ReceiveRequestList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_123_ReceiveRequestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_123_ReceiveRequestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_123_ReceiveRequestList_descriptor_;
}

const Processor_123_ReceiveRequestList& Processor_123_ReceiveRequestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_123_ReceiveRequestList* Processor_123_ReceiveRequestList::default_instance_ = NULL;

Processor_123_ReceiveRequestList* Processor_123_ReceiveRequestList::New() const {
  return new Processor_123_ReceiveRequestList;
}

void Processor_123_ReceiveRequestList::Clear() {
  request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_123_ReceiveRequestList::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_123_ReceiveRequestList)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Request Request = 1;
      case 1: {
        if (tag == 10) {
         parse_Request:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Request;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_123_ReceiveRequestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_123_ReceiveRequestList)
  return false;
#undef DO_
}

void Processor_123_ReceiveRequestList::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_123_ReceiveRequestList)
  // repeated .msg.Request Request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_123_ReceiveRequestList)
}

::google_public::protobuf::uint8* Processor_123_ReceiveRequestList::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_123_ReceiveRequestList)
  // repeated .msg.Request Request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_123_ReceiveRequestList)
  return target;
}

int Processor_123_ReceiveRequestList::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Request Request = 1;
  total_size += 1 * this->request_size();
  for (int i = 0; i < this->request_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_123_ReceiveRequestList::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_123_ReceiveRequestList* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_123_ReceiveRequestList*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_123_ReceiveRequestList::MergeFrom(const Processor_123_ReceiveRequestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_.MergeFrom(from.request_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_123_ReceiveRequestList::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_123_ReceiveRequestList::CopyFrom(const Processor_123_ReceiveRequestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_123_ReceiveRequestList::IsInitialized() const {

  return true;
}

void Processor_123_ReceiveRequestList::Swap(Processor_123_ReceiveRequestList* other) {
  if (other != this) {
    request_.Swap(&other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_123_ReceiveRequestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_123_ReceiveRequestList_descriptor_;
  metadata.reflection = Processor_123_ReceiveRequestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Invitation::kRequestFieldNumber;
const int Invitation::kSendingStatusFieldNumber;
const int Invitation::kStatusFieldNumber;
#endif  // !_MSC_VER

Invitation::Invitation()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Invitation)
}

void Invitation::InitAsDefaultInstance() {
  request_ = const_cast< ::msg::Request*>(&::msg::Request::default_instance());
}

Invitation::Invitation(const Invitation& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Invitation)
}

void Invitation::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  sendingstatus_ = 1;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invitation::~Invitation() {
  // @@protoc_insertion_point(destructor:msg.Invitation)
  SharedDtor();
}

void Invitation::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
  }
}

void Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invitation_descriptor_;
}

const Invitation& Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Invitation* Invitation::default_instance_ = NULL;

Invitation* Invitation::New() const {
  return new Invitation;
}

void Invitation::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_request()) {
      if (request_ != NULL) request_->::msg::Request::Clear();
    }
    sendingstatus_ = 1;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invitation::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Invitation)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Request Request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SendingStatus;
        break;
      }

      // optional .msg.MessageStatus SendingStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_SendingStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MessageStatus_IsValid(value)) {
            set_sendingstatus(static_cast< ::msg::MessageStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // optional .msg.InvitationStatus Status = 3;
      case 3: {
        if (tag == 24) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::InvitationStatus_IsValid(value)) {
            set_status(static_cast< ::msg::InvitationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Invitation)
  return false;
#undef DO_
}

void Invitation::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Invitation)
  // optional .msg.Request Request = 1;
  if (has_request()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .msg.MessageStatus SendingStatus = 2;
  if (has_sendingstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sendingstatus(), output);
  }

  // optional .msg.InvitationStatus Status = 3;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Invitation)
}

::google_public::protobuf::uint8* Invitation::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Invitation)
  // optional .msg.Request Request = 1;
  if (has_request()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .msg.MessageStatus SendingStatus = 2;
  if (has_sendingstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sendingstatus(), target);
  }

  // optional .msg.InvitationStatus Status = 3;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Invitation)
  return target;
}

int Invitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Request Request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .msg.MessageStatus SendingStatus = 2;
    if (has_sendingstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->sendingstatus());
    }

    // optional .msg.InvitationStatus Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invitation::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invitation* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Invitation*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::msg::Request::MergeFrom(from.request());
    }
    if (from.has_sendingstatus()) {
      set_sendingstatus(from.sendingstatus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invitation::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {

  return true;
}

void Invitation::Swap(Invitation* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(sendingstatus_, other->sendingstatus_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Invitation_descriptor_;
  metadata.reflection = Invitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kIDFieldNumber;
const int Request::kUserDetailInfoFieldNumber;
const int Request::kReceiverIDFieldNumber;
const int Request::kGroupInfoFieldNumber;
const int Request::kTypeFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Request)
}

void Request::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
}

Request::Request(const Request& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userdetailinfo_ = NULL;
  receiverid_ = 0;
  groupinfo_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:msg.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
    delete groupinfo_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, receiverid_);
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Request)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserDetailInfo;
        break;
      }

      // optional .msg.UserDetailInfo UserDetailInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserDetailInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceiverID;
        break;
      }

      // optional int32 ReceiverID = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceiverID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GroupInfo;
        break;
      }

      // optional .msg.GroupInfo GroupInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional .msg.RequestType Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RequestType_IsValid(value)) {
            set_type(static_cast< ::msg::RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Request)
  // optional int32 ID = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .msg.UserDetailInfo UserDetailInfo = 2;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userdetailinfo(), output);
  }

  // optional int32 ReceiverID = 3;
  if (has_receiverid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->receiverid(), output);
  }

  // optional .msg.GroupInfo GroupInfo = 4;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->groupinfo(), output);
  }

  // optional .msg.RequestType Type = 5;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Request)
}

::google_public::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Request)
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .msg.UserDetailInfo UserDetailInfo = 2;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userdetailinfo(), target);
  }

  // optional int32 ReceiverID = 3;
  if (has_receiverid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receiverid(), target);
  }

  // optional .msg.GroupInfo GroupInfo = 4;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->groupinfo(), target);
  }

  // optional .msg.RequestType Type = 5;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .msg.UserDetailInfo UserDetailInfo = 2;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional int32 ReceiverID = 3;
    if (has_receiverid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverid());
    }

    // optional .msg.GroupInfo GroupInfo = 4;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional .msg.RequestType Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_124_DealRequest::kAcceptedFieldNumber;
const int Processor_124_DealRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

Processor_124_DealRequest::Processor_124_DealRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_124_DealRequest)
}

void Processor_124_DealRequest::InitAsDefaultInstance() {
}

Processor_124_DealRequest::Processor_124_DealRequest(const Processor_124_DealRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_124_DealRequest)
}

void Processor_124_DealRequest::SharedCtor() {
  _cached_size_ = 0;
  accepted_ = false;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_124_DealRequest::~Processor_124_DealRequest() {
  // @@protoc_insertion_point(destructor:msg.Processor_124_DealRequest)
  SharedDtor();
}

void Processor_124_DealRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_124_DealRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_124_DealRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_124_DealRequest_descriptor_;
}

const Processor_124_DealRequest& Processor_124_DealRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_124_DealRequest* Processor_124_DealRequest::default_instance_ = NULL;

Processor_124_DealRequest* Processor_124_DealRequest::New() const {
  return new Processor_124_DealRequest;
}

void Processor_124_DealRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_124_DealRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(accepted_, requestid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_124_DealRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_124_DealRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Accepted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 2;
      case 2: {
        if (tag == 16) {
         parse_RequestID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_124_DealRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_124_DealRequest)
  return false;
#undef DO_
}

void Processor_124_DealRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_124_DealRequest)
  // optional bool Accepted = 1;
  if (has_accepted()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  // optional int32 RequestID = 2;
  if (has_requestid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_124_DealRequest)
}

::google_public::protobuf::uint8* Processor_124_DealRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_124_DealRequest)
  // optional bool Accepted = 1;
  if (has_accepted()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  // optional int32 RequestID = 2;
  if (has_requestid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_124_DealRequest)
  return target;
}

int Processor_124_DealRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Accepted = 1;
    if (has_accepted()) {
      total_size += 1 + 1;
    }

    // optional int32 RequestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_124_DealRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_124_DealRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_124_DealRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_124_DealRequest::MergeFrom(const Processor_124_DealRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_124_DealRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_124_DealRequest::CopyFrom(const Processor_124_DealRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_124_DealRequest::IsInitialized() const {

  return true;
}

void Processor_124_DealRequest::Swap(Processor_124_DealRequest* other) {
  if (other != this) {
    std::swap(accepted_, other->accepted_);
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_124_DealRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_124_DealRequest_descriptor_;
  metadata.reflection = Processor_124_DealRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_124_DealRequest_DOWN::kResponseFieldNumber;
const int Processor_124_DealRequest_DOWN::kRequestIDFieldNumber;
const int Processor_124_DealRequest_DOWN::kAcceptedFieldNumber;
#endif  // !_MSC_VER

Processor_124_DealRequest_DOWN::Processor_124_DealRequest_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_124_DealRequest_DOWN)
}

void Processor_124_DealRequest_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_124_DealRequest_DOWN::Processor_124_DealRequest_DOWN(const Processor_124_DealRequest_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_124_DealRequest_DOWN)
}

void Processor_124_DealRequest_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  requestid_ = 0;
  accepted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_124_DealRequest_DOWN::~Processor_124_DealRequest_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_124_DealRequest_DOWN)
  SharedDtor();
}

void Processor_124_DealRequest_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_124_DealRequest_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_124_DealRequest_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_124_DealRequest_DOWN_descriptor_;
}

const Processor_124_DealRequest_DOWN& Processor_124_DealRequest_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_124_DealRequest_DOWN* Processor_124_DealRequest_DOWN::default_instance_ = NULL;

Processor_124_DealRequest_DOWN* Processor_124_DealRequest_DOWN::New() const {
  return new Processor_124_DealRequest_DOWN;
}

void Processor_124_DealRequest_DOWN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_124_DealRequest_DOWN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(requestid_, accepted_);
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_124_DealRequest_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_124_DealRequest_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RequestID;
        break;
      }

      // optional int32 RequestID = 2;
      case 2: {
        if (tag == 16) {
         parse_RequestID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Accepted;
        break;
      }

      // optional bool Accepted = 3;
      case 3: {
        if (tag == 24) {
         parse_Accepted:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_124_DealRequest_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_124_DealRequest_DOWN)
  return false;
#undef DO_
}

void Processor_124_DealRequest_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_124_DealRequest_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional int32 RequestID = 2;
  if (has_requestid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestid(), output);
  }

  // optional bool Accepted = 3;
  if (has_accepted()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->accepted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_124_DealRequest_DOWN)
}

::google_public::protobuf::uint8* Processor_124_DealRequest_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_124_DealRequest_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional int32 RequestID = 2;
  if (has_requestid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestid(), target);
  }

  // optional bool Accepted = 3;
  if (has_accepted()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accepted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_124_DealRequest_DOWN)
  return target;
}

int Processor_124_DealRequest_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional int32 RequestID = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional bool Accepted = 3;
    if (has_accepted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_124_DealRequest_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_124_DealRequest_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_124_DealRequest_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_124_DealRequest_DOWN::MergeFrom(const Processor_124_DealRequest_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_124_DealRequest_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_124_DealRequest_DOWN::CopyFrom(const Processor_124_DealRequest_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_124_DealRequest_DOWN::IsInitialized() const {

  return true;
}

void Processor_124_DealRequest_DOWN::Swap(Processor_124_DealRequest_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(requestid_, other->requestid_);
    std::swap(accepted_, other->accepted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_124_DealRequest_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_124_DealRequest_DOWN_descriptor_;
  metadata.reflection = Processor_124_DealRequest_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_125_DeleteFriend::kUserIdFieldNumber;
#endif  // !_MSC_VER

Processor_125_DeleteFriend::Processor_125_DeleteFriend()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_125_DeleteFriend)
}

void Processor_125_DeleteFriend::InitAsDefaultInstance() {
}

Processor_125_DeleteFriend::Processor_125_DeleteFriend(const Processor_125_DeleteFriend& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_125_DeleteFriend)
}

void Processor_125_DeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_125_DeleteFriend::~Processor_125_DeleteFriend() {
  // @@protoc_insertion_point(destructor:msg.Processor_125_DeleteFriend)
  SharedDtor();
}

void Processor_125_DeleteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_125_DeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_125_DeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_125_DeleteFriend_descriptor_;
}

const Processor_125_DeleteFriend& Processor_125_DeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_125_DeleteFriend* Processor_125_DeleteFriend::default_instance_ = NULL;

Processor_125_DeleteFriend* Processor_125_DeleteFriend::New() const {
  return new Processor_125_DeleteFriend;
}

void Processor_125_DeleteFriend::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_125_DeleteFriend::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_125_DeleteFriend)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_125_DeleteFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_125_DeleteFriend)
  return false;
#undef DO_
}

void Processor_125_DeleteFriend::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_125_DeleteFriend)
  // optional int32 UserId = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_125_DeleteFriend)
}

::google_public::protobuf::uint8* Processor_125_DeleteFriend::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_125_DeleteFriend)
  // optional int32 UserId = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_125_DeleteFriend)
  return target;
}

int Processor_125_DeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_125_DeleteFriend::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_125_DeleteFriend* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_125_DeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_125_DeleteFriend::MergeFrom(const Processor_125_DeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_125_DeleteFriend::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_125_DeleteFriend::CopyFrom(const Processor_125_DeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_125_DeleteFriend::IsInitialized() const {

  return true;
}

void Processor_125_DeleteFriend::Swap(Processor_125_DeleteFriend* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_125_DeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_125_DeleteFriend_descriptor_;
  metadata.reflection = Processor_125_DeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_126_Set_MomentBlock::kUserIdFieldNumber;
const int Processor_126_Set_MomentBlock::kIsBlockFieldNumber;
#endif  // !_MSC_VER

Processor_126_Set_MomentBlock::Processor_126_Set_MomentBlock()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_126_Set_MomentBlock)
}

void Processor_126_Set_MomentBlock::InitAsDefaultInstance() {
}

Processor_126_Set_MomentBlock::Processor_126_Set_MomentBlock(const Processor_126_Set_MomentBlock& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_126_Set_MomentBlock)
}

void Processor_126_Set_MomentBlock::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  isblock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_126_Set_MomentBlock::~Processor_126_Set_MomentBlock() {
  // @@protoc_insertion_point(destructor:msg.Processor_126_Set_MomentBlock)
  SharedDtor();
}

void Processor_126_Set_MomentBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_126_Set_MomentBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_126_Set_MomentBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_126_Set_MomentBlock_descriptor_;
}

const Processor_126_Set_MomentBlock& Processor_126_Set_MomentBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_126_Set_MomentBlock* Processor_126_Set_MomentBlock::default_instance_ = NULL;

Processor_126_Set_MomentBlock* Processor_126_Set_MomentBlock::New() const {
  return new Processor_126_Set_MomentBlock;
}

void Processor_126_Set_MomentBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_126_Set_MomentBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, isblock_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_126_Set_MomentBlock::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_126_Set_MomentBlock)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsBlock;
        break;
      }

      // optional bool IsBlock = 2;
      case 2: {
        if (tag == 16) {
         parse_IsBlock:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_126_Set_MomentBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_126_Set_MomentBlock)
  return false;
#undef DO_
}

void Processor_126_Set_MomentBlock::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_126_Set_MomentBlock)
  // optional int32 UserId = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional bool IsBlock = 2;
  if (has_isblock()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->isblock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_126_Set_MomentBlock)
}

::google_public::protobuf::uint8* Processor_126_Set_MomentBlock::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_126_Set_MomentBlock)
  // optional int32 UserId = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional bool IsBlock = 2;
  if (has_isblock()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isblock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_126_Set_MomentBlock)
  return target;
}

int Processor_126_Set_MomentBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional bool IsBlock = 2;
    if (has_isblock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_126_Set_MomentBlock::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_126_Set_MomentBlock* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_126_Set_MomentBlock*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_126_Set_MomentBlock::MergeFrom(const Processor_126_Set_MomentBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_126_Set_MomentBlock::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_126_Set_MomentBlock::CopyFrom(const Processor_126_Set_MomentBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_126_Set_MomentBlock::IsInitialized() const {

  return true;
}

void Processor_126_Set_MomentBlock::Swap(Processor_126_Set_MomentBlock* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(isblock_, other->isblock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_126_Set_MomentBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_126_Set_MomentBlock_descriptor_;
  metadata.reflection = Processor_126_Set_MomentBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_127_SearchFriendByPhoneNumber_UP::kPhoneNumberFieldNumber;
#endif  // !_MSC_VER

Processor_127_SearchFriendByPhoneNumber_UP::Processor_127_SearchFriendByPhoneNumber_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_127_SearchFriendByPhoneNumber_UP)
}

void Processor_127_SearchFriendByPhoneNumber_UP::InitAsDefaultInstance() {
}

Processor_127_SearchFriendByPhoneNumber_UP::Processor_127_SearchFriendByPhoneNumber_UP(const Processor_127_SearchFriendByPhoneNumber_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_127_SearchFriendByPhoneNumber_UP)
}

void Processor_127_SearchFriendByPhoneNumber_UP::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_127_SearchFriendByPhoneNumber_UP::~Processor_127_SearchFriendByPhoneNumber_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  SharedDtor();
}

void Processor_127_SearchFriendByPhoneNumber_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_127_SearchFriendByPhoneNumber_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_127_SearchFriendByPhoneNumber_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_127_SearchFriendByPhoneNumber_UP_descriptor_;
}

const Processor_127_SearchFriendByPhoneNumber_UP& Processor_127_SearchFriendByPhoneNumber_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_127_SearchFriendByPhoneNumber_UP* Processor_127_SearchFriendByPhoneNumber_UP::default_instance_ = NULL;

Processor_127_SearchFriendByPhoneNumber_UP* Processor_127_SearchFriendByPhoneNumber_UP::New() const {
  return new Processor_127_SearchFriendByPhoneNumber_UP;
}

void Processor_127_SearchFriendByPhoneNumber_UP::Clear() {
  phonenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_127_SearchFriendByPhoneNumber_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string PhoneNumber = 1;
      case 1: {
        if (tag == 10) {
         parse_PhoneNumber:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber(this->phonenumber_size() - 1).data(),
            this->phonenumber(this->phonenumber_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PhoneNumber;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  return false;
#undef DO_
}

void Processor_127_SearchFriendByPhoneNumber_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  // repeated string PhoneNumber = 1;
  for (int i = 0; i < this->phonenumber_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->phonenumber(i).data(), this->phonenumber(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->phonenumber(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_127_SearchFriendByPhoneNumber_UP)
}

::google_public::protobuf::uint8* Processor_127_SearchFriendByPhoneNumber_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  // repeated string PhoneNumber = 1;
  for (int i = 0; i < this->phonenumber_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber(i).data(), this->phonenumber(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phonenumber(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_127_SearchFriendByPhoneNumber_UP)
  return target;
}

int Processor_127_SearchFriendByPhoneNumber_UP::ByteSize() const {
  int total_size = 0;

  // repeated string PhoneNumber = 1;
  total_size += 1 * this->phonenumber_size();
  for (int i = 0; i < this->phonenumber_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->phonenumber(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_127_SearchFriendByPhoneNumber_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_127_SearchFriendByPhoneNumber_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_127_SearchFriendByPhoneNumber_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_127_SearchFriendByPhoneNumber_UP::MergeFrom(const Processor_127_SearchFriendByPhoneNumber_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  phonenumber_.MergeFrom(from.phonenumber_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_127_SearchFriendByPhoneNumber_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_127_SearchFriendByPhoneNumber_UP::CopyFrom(const Processor_127_SearchFriendByPhoneNumber_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_127_SearchFriendByPhoneNumber_UP::IsInitialized() const {

  return true;
}

void Processor_127_SearchFriendByPhoneNumber_UP::Swap(Processor_127_SearchFriendByPhoneNumber_UP* other) {
  if (other != this) {
    phonenumber_.Swap(&other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_127_SearchFriendByPhoneNumber_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_127_SearchFriendByPhoneNumber_UP_descriptor_;
  metadata.reflection = Processor_127_SearchFriendByPhoneNumber_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendByPhoneNumber::kPhoneNumberFieldNumber;
const int FriendByPhoneNumber::kUsersFieldNumber;
const int FriendByPhoneNumber::kIsFriendFieldNumber;
#endif  // !_MSC_VER

FriendByPhoneNumber::FriendByPhoneNumber()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FriendByPhoneNumber)
}

void FriendByPhoneNumber::InitAsDefaultInstance() {
  users_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

FriendByPhoneNumber::FriendByPhoneNumber(const FriendByPhoneNumber& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.FriendByPhoneNumber)
}

void FriendByPhoneNumber::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  users_ = NULL;
  isfriend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendByPhoneNumber::~FriendByPhoneNumber() {
  // @@protoc_insertion_point(destructor:msg.FriendByPhoneNumber)
  SharedDtor();
}

void FriendByPhoneNumber::SharedDtor() {
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (this != default_instance_) {
    delete users_;
  }
}

void FriendByPhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FriendByPhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendByPhoneNumber_descriptor_;
}

const FriendByPhoneNumber& FriendByPhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

FriendByPhoneNumber* FriendByPhoneNumber::default_instance_ = NULL;

FriendByPhoneNumber* FriendByPhoneNumber::New() const {
  return new FriendByPhoneNumber;
}

void FriendByPhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_phonenumber()) {
      if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_users()) {
      if (users_ != NULL) users_->::msg::UserDetailInfo::Clear();
    }
    isfriend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendByPhoneNumber::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.FriendByPhoneNumber)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PhoneNumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Users;
        break;
      }

      // optional .msg.UserDetailInfo Users = 2;
      case 2: {
        if (tag == 18) {
         parse_Users:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsFriend;
        break;
      }

      // optional bool IsFriend = 3;
      case 3: {
        if (tag == 24) {
         parse_IsFriend:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.FriendByPhoneNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.FriendByPhoneNumber)
  return false;
#undef DO_
}

void FriendByPhoneNumber::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.FriendByPhoneNumber)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phonenumber(), output);
  }

  // optional .msg.UserDetailInfo Users = 2;
  if (has_users()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(), output);
  }

  // optional bool IsFriend = 3;
  if (has_isfriend()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->isfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.FriendByPhoneNumber)
}

::google_public::protobuf::uint8* FriendByPhoneNumber::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FriendByPhoneNumber)
  // optional string PhoneNumber = 1;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phonenumber(), target);
  }

  // optional .msg.UserDetailInfo Users = 2;
  if (has_users()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(), target);
  }

  // optional bool IsFriend = 3;
  if (has_isfriend()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FriendByPhoneNumber)
  return target;
}

int FriendByPhoneNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PhoneNumber = 1;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional .msg.UserDetailInfo Users = 2;
    if (has_users()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users());
    }

    // optional bool IsFriend = 3;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendByPhoneNumber::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendByPhoneNumber* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FriendByPhoneNumber*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendByPhoneNumber::MergeFrom(const FriendByPhoneNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_users()) {
      mutable_users()->::msg::UserDetailInfo::MergeFrom(from.users());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendByPhoneNumber::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendByPhoneNumber::CopyFrom(const FriendByPhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendByPhoneNumber::IsInitialized() const {

  return true;
}

void FriendByPhoneNumber::Swap(FriendByPhoneNumber* other) {
  if (other != this) {
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(users_, other->users_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FriendByPhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FriendByPhoneNumber_descriptor_;
  metadata.reflection = FriendByPhoneNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_127_SearchFriendByPhoneNumber_DOWN::kFriendsFieldNumber;
#endif  // !_MSC_VER

Processor_127_SearchFriendByPhoneNumber_DOWN::Processor_127_SearchFriendByPhoneNumber_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::InitAsDefaultInstance() {
}

Processor_127_SearchFriendByPhoneNumber_DOWN::Processor_127_SearchFriendByPhoneNumber_DOWN(const Processor_127_SearchFriendByPhoneNumber_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_127_SearchFriendByPhoneNumber_DOWN::~Processor_127_SearchFriendByPhoneNumber_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  SharedDtor();
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_127_SearchFriendByPhoneNumber_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_;
}

const Processor_127_SearchFriendByPhoneNumber_DOWN& Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_127_SearchFriendByPhoneNumber_DOWN* Processor_127_SearchFriendByPhoneNumber_DOWN::default_instance_ = NULL;

Processor_127_SearchFriendByPhoneNumber_DOWN* Processor_127_SearchFriendByPhoneNumber_DOWN::New() const {
  return new Processor_127_SearchFriendByPhoneNumber_DOWN;
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_127_SearchFriendByPhoneNumber_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.FriendByPhoneNumber Friends = 1;
      case 1: {
        if (tag == 10) {
         parse_Friends:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Friends;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  return false;
#undef DO_
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  // repeated .msg.FriendByPhoneNumber Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
}

::google_public::protobuf::uint8* Processor_127_SearchFriendByPhoneNumber_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  // repeated .msg.FriendByPhoneNumber Friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_127_SearchFriendByPhoneNumber_DOWN)
  return target;
}

int Processor_127_SearchFriendByPhoneNumber_DOWN::ByteSize() const {
  int total_size = 0;

  // repeated .msg.FriendByPhoneNumber Friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_127_SearchFriendByPhoneNumber_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_127_SearchFriendByPhoneNumber_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::MergeFrom(const Processor_127_SearchFriendByPhoneNumber_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::CopyFrom(const Processor_127_SearchFriendByPhoneNumber_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_127_SearchFriendByPhoneNumber_DOWN::IsInitialized() const {

  return true;
}

void Processor_127_SearchFriendByPhoneNumber_DOWN::Swap(Processor_127_SearchFriendByPhoneNumber_DOWN* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_127_SearchFriendByPhoneNumber_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_127_SearchFriendByPhoneNumber_DOWN_descriptor_;
  metadata.reflection = Processor_127_SearchFriendByPhoneNumber_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_128_GetMomentBlockUsers_DOWN::kUsersFieldNumber;
#endif  // !_MSC_VER

Processor_128_GetMomentBlockUsers_DOWN::Processor_128_GetMomentBlockUsers_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_128_GetMomentBlockUsers_DOWN)
}

void Processor_128_GetMomentBlockUsers_DOWN::InitAsDefaultInstance() {
}

Processor_128_GetMomentBlockUsers_DOWN::Processor_128_GetMomentBlockUsers_DOWN(const Processor_128_GetMomentBlockUsers_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_128_GetMomentBlockUsers_DOWN)
}

void Processor_128_GetMomentBlockUsers_DOWN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_128_GetMomentBlockUsers_DOWN::~Processor_128_GetMomentBlockUsers_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_128_GetMomentBlockUsers_DOWN)
  SharedDtor();
}

void Processor_128_GetMomentBlockUsers_DOWN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_128_GetMomentBlockUsers_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_128_GetMomentBlockUsers_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_128_GetMomentBlockUsers_DOWN_descriptor_;
}

const Processor_128_GetMomentBlockUsers_DOWN& Processor_128_GetMomentBlockUsers_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_128_GetMomentBlockUsers_DOWN* Processor_128_GetMomentBlockUsers_DOWN::default_instance_ = NULL;

Processor_128_GetMomentBlockUsers_DOWN* Processor_128_GetMomentBlockUsers_DOWN::New() const {
  return new Processor_128_GetMomentBlockUsers_DOWN;
}

void Processor_128_GetMomentBlockUsers_DOWN::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_128_GetMomentBlockUsers_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_128_GetMomentBlockUsers_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.UserDetailInfo Users = 1;
      case 1: {
        if (tag == 10) {
         parse_Users:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_128_GetMomentBlockUsers_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_128_GetMomentBlockUsers_DOWN)
  return false;
#undef DO_
}

void Processor_128_GetMomentBlockUsers_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_128_GetMomentBlockUsers_DOWN)
  // repeated .msg.UserDetailInfo Users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_128_GetMomentBlockUsers_DOWN)
}

::google_public::protobuf::uint8* Processor_128_GetMomentBlockUsers_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_128_GetMomentBlockUsers_DOWN)
  // repeated .msg.UserDetailInfo Users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_128_GetMomentBlockUsers_DOWN)
  return target;
}

int Processor_128_GetMomentBlockUsers_DOWN::ByteSize() const {
  int total_size = 0;

  // repeated .msg.UserDetailInfo Users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_128_GetMomentBlockUsers_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_128_GetMomentBlockUsers_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_128_GetMomentBlockUsers_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_128_GetMomentBlockUsers_DOWN::MergeFrom(const Processor_128_GetMomentBlockUsers_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_128_GetMomentBlockUsers_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_128_GetMomentBlockUsers_DOWN::CopyFrom(const Processor_128_GetMomentBlockUsers_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_128_GetMomentBlockUsers_DOWN::IsInitialized() const {

  return true;
}

void Processor_128_GetMomentBlockUsers_DOWN::Swap(Processor_128_GetMomentBlockUsers_DOWN* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_128_GetMomentBlockUsers_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_128_GetMomentBlockUsers_DOWN_descriptor_;
  metadata.reflection = Processor_128_GetMomentBlockUsers_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_130_Send_Diamond::kUserIDFieldNumber;
const int Processor_130_Send_Diamond::kAmountFieldNumber;
#endif  // !_MSC_VER

Processor_130_Send_Diamond::Processor_130_Send_Diamond()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_130_Send_Diamond)
}

void Processor_130_Send_Diamond::InitAsDefaultInstance() {
}

Processor_130_Send_Diamond::Processor_130_Send_Diamond(const Processor_130_Send_Diamond& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_130_Send_Diamond)
}

void Processor_130_Send_Diamond::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_130_Send_Diamond::~Processor_130_Send_Diamond() {
  // @@protoc_insertion_point(destructor:msg.Processor_130_Send_Diamond)
  SharedDtor();
}

void Processor_130_Send_Diamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_130_Send_Diamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_130_Send_Diamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_130_Send_Diamond_descriptor_;
}

const Processor_130_Send_Diamond& Processor_130_Send_Diamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_130_Send_Diamond* Processor_130_Send_Diamond::default_instance_ = NULL;

Processor_130_Send_Diamond* Processor_130_Send_Diamond::New() const {
  return new Processor_130_Send_Diamond;
}

void Processor_130_Send_Diamond::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_130_Send_Diamond*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_130_Send_Diamond::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_130_Send_Diamond)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Amount;
        break;
      }

      // optional int32 Amount = 2;
      case 2: {
        if (tag == 16) {
         parse_Amount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_130_Send_Diamond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_130_Send_Diamond)
  return false;
#undef DO_
}

void Processor_130_Send_Diamond::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_130_Send_Diamond)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 Amount = 2;
  if (has_amount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_130_Send_Diamond)
}

::google_public::protobuf::uint8* Processor_130_Send_Diamond::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_130_Send_Diamond)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 Amount = 2;
  if (has_amount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_130_Send_Diamond)
  return target;
}

int Processor_130_Send_Diamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 Amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_130_Send_Diamond::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_130_Send_Diamond* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_130_Send_Diamond*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_130_Send_Diamond::MergeFrom(const Processor_130_Send_Diamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_130_Send_Diamond::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_130_Send_Diamond::CopyFrom(const Processor_130_Send_Diamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_130_Send_Diamond::IsInitialized() const {

  return true;
}

void Processor_130_Send_Diamond::Swap(Processor_130_Send_Diamond* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_130_Send_Diamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_130_Send_Diamond_descriptor_;
  metadata.reflection = Processor_130_Send_Diamond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kUserDetailInfoFieldNumber;
const int ChatMessage::kGroupIDFieldNumber;
const int ChatMessage::kReceiveUserIDFieldNumber;
const int ChatMessage::kMessageInfoFieldNumber;
const int ChatMessage::kSubTimeFieldNumber;
const int ChatMessage::kIDFieldNumber;
const int ChatMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
  messageinfo_ = const_cast< ::msg::MessageInfo*>(&::msg::MessageInfo::default_instance());
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  groupid_ = 0;
  receiveuserid_ = 0;
  messageinfo_ = NULL;
  subtime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:msg.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (subtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtime_;
  }
  if (this != default_instance_) {
    delete userdetailinfo_;
    delete messageinfo_;
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(groupid_, receiveuserid_);
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_messageinfo()) {
      if (messageinfo_ != NULL) messageinfo_->::msg::MessageInfo::Clear();
    }
    if (has_subtime()) {
      if (subtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtime_->clear();
      }
    }
    id_ = 0;
    status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ChatMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // optional int32 GroupID = 2;
      case 2: {
        if (tag == 16) {
         parse_GroupID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceiveUserID;
        break;
      }

      // optional int32 ReceiveUserID = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceiveUserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiveuserid_)));
          set_has_receiveuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MessageInfo;
        break;
      }

      // optional .msg.MessageInfo MessageInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_MessageInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubTime;
        break;
      }

      // optional string SubTime = 5;
      case 5: {
        if (tag == 42) {
         parse_SubTime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtime().data(), this->subtime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "subtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ID;
        break;
      }

      // optional int32 ID = 6;
      case 6: {
        if (tag == 48) {
         parse_ID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Status;
        break;
      }

      // optional .msg.MessageStatus Status = 7;
      case 7: {
        if (tag == 56) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MessageStatus_IsValid(value)) {
            set_status(static_cast< ::msg::MessageStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ChatMessage)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional int32 GroupID = 2;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // optional int32 ReceiveUserID = 3;
  if (has_receiveuserid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->receiveuserid(), output);
  }

  // optional .msg.MessageInfo MessageInfo = 4;
  if (has_messageinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->messageinfo(), output);
  }

  // optional string SubTime = 5;
  if (has_subtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtime().data(), this->subtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "subtime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subtime(), output);
  }

  // optional int32 ID = 6;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }

  // optional .msg.MessageStatus Status = 7;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ChatMessage)
}

::google_public::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChatMessage)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional int32 GroupID = 2;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // optional int32 ReceiveUserID = 3;
  if (has_receiveuserid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receiveuserid(), target);
  }

  // optional .msg.MessageInfo MessageInfo = 4;
  if (has_messageinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->messageinfo(), target);
  }

  // optional string SubTime = 5;
  if (has_subtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtime().data(), this->subtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "subtime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subtime(), target);
  }

  // optional int32 ID = 6;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }

  // optional .msg.MessageStatus Status = 7;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional int32 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 ReceiveUserID = 3;
    if (has_receiveuserid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->receiveuserid());
    }

    // optional .msg.MessageInfo MessageInfo = 4;
    if (has_messageinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messageinfo());
    }

    // optional string SubTime = 5;
    if (has_subtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->subtime());
    }

    // optional int32 ID = 6;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .msg.MessageStatus Status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_receiveuserid()) {
      set_receiveuserid(from.receiveuserid());
    }
    if (from.has_messageinfo()) {
      mutable_messageinfo()->::msg::MessageInfo::MergeFrom(from.messageinfo());
    }
    if (from.has_subtime()) {
      set_subtime(from.subtime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(groupid_, other->groupid_);
    std::swap(receiveuserid_, other->receiveuserid_);
    std::swap(messageinfo_, other->messageinfo_);
    std::swap(subtime_, other->subtime_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageInfo::kTypeFieldNumber;
const int MessageInfo::kTextInfoFieldNumber;
const int MessageInfo::kPicInfoFieldNumber;
const int MessageInfo::kVoiceInfoFieldNumber;
const int MessageInfo::kCreateRoomInfoFieldNumber;
const int MessageInfo::kGroupNoticeInfoFieldNumber;
#endif  // !_MSC_VER

MessageInfo::MessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MessageInfo)
}

void MessageInfo::InitAsDefaultInstance() {
  textinfo_ = const_cast< ::msg::TextMessageInfo*>(&::msg::TextMessageInfo::default_instance());
  picinfo_ = const_cast< ::msg::PicMessageInfo*>(&::msg::PicMessageInfo::default_instance());
  voiceinfo_ = const_cast< ::msg::VoiceMessageInfo*>(&::msg::VoiceMessageInfo::default_instance());
  createroominfo_ = const_cast< ::msg::CreateRoomMessageInfo*>(&::msg::CreateRoomMessageInfo::default_instance());
  groupnoticeinfo_ = const_cast< ::msg::GroupNoticeMessageInfo*>(&::msg::GroupNoticeMessageInfo::default_instance());
}

MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MessageInfo)
}

void MessageInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  textinfo_ = NULL;
  picinfo_ = NULL;
  voiceinfo_ = NULL;
  createroominfo_ = NULL;
  groupnoticeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:msg.MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  if (this != default_instance_) {
    delete textinfo_;
    delete picinfo_;
    delete voiceinfo_;
    delete createroominfo_;
    delete groupnoticeinfo_;
  }
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageInfo_descriptor_;
}

const MessageInfo& MessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MessageInfo* MessageInfo::default_instance_ = NULL;

MessageInfo* MessageInfo::New() const {
  return new MessageInfo;
}

void MessageInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 1;
    if (has_textinfo()) {
      if (textinfo_ != NULL) textinfo_->::msg::TextMessageInfo::Clear();
    }
    if (has_picinfo()) {
      if (picinfo_ != NULL) picinfo_->::msg::PicMessageInfo::Clear();
    }
    if (has_voiceinfo()) {
      if (voiceinfo_ != NULL) voiceinfo_->::msg::VoiceMessageInfo::Clear();
    }
    if (has_createroominfo()) {
      if (createroominfo_ != NULL) createroominfo_->::msg::CreateRoomMessageInfo::Clear();
    }
    if (has_groupnoticeinfo()) {
      if (groupnoticeinfo_ != NULL) groupnoticeinfo_->::msg::GroupNoticeMessageInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.MessageType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MessageType_IsValid(value)) {
            set_type(static_cast< ::msg::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TextInfo;
        break;
      }

      // optional .msg.TextMessageInfo TextInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TextInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PicInfo;
        break;
      }

      // optional .msg.PicMessageInfo PicInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_PicInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VoiceInfo;
        break;
      }

      // optional .msg.VoiceMessageInfo VoiceInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_VoiceInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voiceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CreateRoomInfo;
        break;
      }

      // optional .msg.CreateRoomMessageInfo CreateRoomInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_CreateRoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GroupNoticeInfo;
        break;
      }

      // optional .msg.GroupNoticeMessageInfo GroupNoticeInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_GroupNoticeInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupnoticeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MessageInfo)
  return false;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MessageInfo)
  // optional .msg.MessageType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .msg.TextMessageInfo TextInfo = 2;
  if (has_textinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->textinfo(), output);
  }

  // optional .msg.PicMessageInfo PicInfo = 3;
  if (has_picinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->picinfo(), output);
  }

  // optional .msg.VoiceMessageInfo VoiceInfo = 4;
  if (has_voiceinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->voiceinfo(), output);
  }

  // optional .msg.CreateRoomMessageInfo CreateRoomInfo = 5;
  if (has_createroominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->createroominfo(), output);
  }

  // optional .msg.GroupNoticeMessageInfo GroupNoticeInfo = 6;
  if (has_groupnoticeinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->groupnoticeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MessageInfo)
}

::google_public::protobuf::uint8* MessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MessageInfo)
  // optional .msg.MessageType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .msg.TextMessageInfo TextInfo = 2;
  if (has_textinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->textinfo(), target);
  }

  // optional .msg.PicMessageInfo PicInfo = 3;
  if (has_picinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->picinfo(), target);
  }

  // optional .msg.VoiceMessageInfo VoiceInfo = 4;
  if (has_voiceinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->voiceinfo(), target);
  }

  // optional .msg.CreateRoomMessageInfo CreateRoomInfo = 5;
  if (has_createroominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->createroominfo(), target);
  }

  // optional .msg.GroupNoticeMessageInfo GroupNoticeInfo = 6;
  if (has_groupnoticeinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->groupnoticeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MessageInfo)
  return target;
}

int MessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.MessageType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.TextMessageInfo TextInfo = 2;
    if (has_textinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textinfo());
    }

    // optional .msg.PicMessageInfo PicInfo = 3;
    if (has_picinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picinfo());
    }

    // optional .msg.VoiceMessageInfo VoiceInfo = 4;
    if (has_voiceinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voiceinfo());
    }

    // optional .msg.CreateRoomMessageInfo CreateRoomInfo = 5;
    if (has_createroominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createroominfo());
    }

    // optional .msg.GroupNoticeMessageInfo GroupNoticeInfo = 6;
    if (has_groupnoticeinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupnoticeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_textinfo()) {
      mutable_textinfo()->::msg::TextMessageInfo::MergeFrom(from.textinfo());
    }
    if (from.has_picinfo()) {
      mutable_picinfo()->::msg::PicMessageInfo::MergeFrom(from.picinfo());
    }
    if (from.has_voiceinfo()) {
      mutable_voiceinfo()->::msg::VoiceMessageInfo::MergeFrom(from.voiceinfo());
    }
    if (from.has_createroominfo()) {
      mutable_createroominfo()->::msg::CreateRoomMessageInfo::MergeFrom(from.createroominfo());
    }
    if (from.has_groupnoticeinfo()) {
      mutable_groupnoticeinfo()->::msg::GroupNoticeMessageInfo::MergeFrom(from.groupnoticeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {

  return true;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(textinfo_, other->textinfo_);
    std::swap(picinfo_, other->picinfo_);
    std::swap(voiceinfo_, other->voiceinfo_);
    std::swap(createroominfo_, other->createroominfo_);
    std::swap(groupnoticeinfo_, other->groupnoticeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MessageInfo_descriptor_;
  metadata.reflection = MessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextMessageInfo::kTextFieldNumber;
#endif  // !_MSC_VER

TextMessageInfo::TextMessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TextMessageInfo)
}

void TextMessageInfo::InitAsDefaultInstance() {
}

TextMessageInfo::TextMessageInfo(const TextMessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TextMessageInfo)
}

void TextMessageInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextMessageInfo::~TextMessageInfo() {
  // @@protoc_insertion_point(destructor:msg.TextMessageInfo)
  SharedDtor();
}

void TextMessageInfo::SharedDtor() {
  if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TextMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TextMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextMessageInfo_descriptor_;
}

const TextMessageInfo& TextMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TextMessageInfo* TextMessageInfo::default_instance_ = NULL;

TextMessageInfo* TextMessageInfo::New() const {
  return new TextMessageInfo;
}

void TextMessageInfo::Clear() {
  if (has_text()) {
    if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      text_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextMessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TextMessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TextMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TextMessageInfo)
  return false;
#undef DO_
}

void TextMessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TextMessageInfo)
  // optional string Text = 1;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TextMessageInfo)
}

::google_public::protobuf::uint8* TextMessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TextMessageInfo)
  // optional string Text = 1;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TextMessageInfo)
  return target;
}

int TextMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextMessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TextMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextMessageInfo::MergeFrom(const TextMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextMessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessageInfo::CopyFrom(const TextMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessageInfo::IsInitialized() const {

  return true;
}

void TextMessageInfo::Swap(TextMessageInfo* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TextMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TextMessageInfo_descriptor_;
  metadata.reflection = TextMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicMessageInfo::kPicNameFieldNumber;
#endif  // !_MSC_VER

PicMessageInfo::PicMessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PicMessageInfo)
}

void PicMessageInfo::InitAsDefaultInstance() {
}

PicMessageInfo::PicMessageInfo(const PicMessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PicMessageInfo)
}

void PicMessageInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  picname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicMessageInfo::~PicMessageInfo() {
  // @@protoc_insertion_point(destructor:msg.PicMessageInfo)
  SharedDtor();
}

void PicMessageInfo::SharedDtor() {
  if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picname_;
  }
  if (this != default_instance_) {
  }
}

void PicMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PicMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicMessageInfo_descriptor_;
}

const PicMessageInfo& PicMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PicMessageInfo* PicMessageInfo::default_instance_ = NULL;

PicMessageInfo* PicMessageInfo::New() const {
  return new PicMessageInfo;
}

void PicMessageInfo::Clear() {
  if (has_picname()) {
    if (picname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      picname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicMessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PicMessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PicName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picname().data(), this->picname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "picname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PicMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PicMessageInfo)
  return false;
#undef DO_
}

void PicMessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PicMessageInfo)
  // optional string PicName = 1;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->picname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PicMessageInfo)
}

::google_public::protobuf::uint8* PicMessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PicMessageInfo)
  // optional string PicName = 1;
  if (has_picname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname().data(), this->picname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->picname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PicMessageInfo)
  return target;
}

int PicMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PicName = 1;
    if (has_picname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->picname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicMessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicMessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PicMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicMessageInfo::MergeFrom(const PicMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_picname()) {
      set_picname(from.picname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicMessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicMessageInfo::CopyFrom(const PicMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicMessageInfo::IsInitialized() const {

  return true;
}

void PicMessageInfo::Swap(PicMessageInfo* other) {
  if (other != this) {
    std::swap(picname_, other->picname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PicMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PicMessageInfo_descriptor_;
  metadata.reflection = PicMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoiceMessageInfo::kVoiceNameFieldNumber;
const int VoiceMessageInfo::kVoiceTimeFieldNumber;
#endif  // !_MSC_VER

VoiceMessageInfo::VoiceMessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.VoiceMessageInfo)
}

void VoiceMessageInfo::InitAsDefaultInstance() {
}

VoiceMessageInfo::VoiceMessageInfo(const VoiceMessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.VoiceMessageInfo)
}

void VoiceMessageInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  voicename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  voicetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoiceMessageInfo::~VoiceMessageInfo() {
  // @@protoc_insertion_point(destructor:msg.VoiceMessageInfo)
  SharedDtor();
}

void VoiceMessageInfo::SharedDtor() {
  if (voicename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voicename_;
  }
  if (this != default_instance_) {
  }
}

void VoiceMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* VoiceMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoiceMessageInfo_descriptor_;
}

const VoiceMessageInfo& VoiceMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

VoiceMessageInfo* VoiceMessageInfo::default_instance_ = NULL;

VoiceMessageInfo* VoiceMessageInfo::New() const {
  return new VoiceMessageInfo;
}

void VoiceMessageInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_voicename()) {
      if (voicename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voicename_->clear();
      }
    }
    voicetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoiceMessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.VoiceMessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string VoiceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voicename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voicename().data(), this->voicename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "voicename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_VoiceTime;
        break;
      }

      // optional int32 VoiceTime = 2;
      case 2: {
        if (tag == 16) {
         parse_VoiceTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.VoiceMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.VoiceMessageInfo)
  return false;
#undef DO_
}

void VoiceMessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.VoiceMessageInfo)
  // optional string VoiceName = 1;
  if (has_voicename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voicename().data(), this->voicename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voicename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->voicename(), output);
  }

  // optional int32 VoiceTime = 2;
  if (has_voicetime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->voicetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.VoiceMessageInfo)
}

::google_public::protobuf::uint8* VoiceMessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.VoiceMessageInfo)
  // optional string VoiceName = 1;
  if (has_voicename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voicename().data(), this->voicename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voicename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->voicename(), target);
  }

  // optional int32 VoiceTime = 2;
  if (has_voicetime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->voicetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.VoiceMessageInfo)
  return target;
}

int VoiceMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string VoiceName = 1;
    if (has_voicename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->voicename());
    }

    // optional int32 VoiceTime = 2;
    if (has_voicetime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->voicetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceMessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoiceMessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const VoiceMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoiceMessageInfo::MergeFrom(const VoiceMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voicename()) {
      set_voicename(from.voicename());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoiceMessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceMessageInfo::CopyFrom(const VoiceMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceMessageInfo::IsInitialized() const {

  return true;
}

void VoiceMessageInfo::Swap(VoiceMessageInfo* other) {
  if (other != this) {
    std::swap(voicename_, other->voicename_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata VoiceMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = VoiceMessageInfo_descriptor_;
  metadata.reflection = VoiceMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomMessageInfo::kTextFieldNumber;
const int CreateRoomMessageInfo::kRoomIDFieldNumber;
const int CreateRoomMessageInfo::kTypeFieldNumber;
const int CreateRoomMessageInfo::kRoomNameFieldNumber;
const int CreateRoomMessageInfo::kCreaterFieldNumber;
#endif  // !_MSC_VER

CreateRoomMessageInfo::CreateRoomMessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CreateRoomMessageInfo)
}

void CreateRoomMessageInfo::InitAsDefaultInstance() {
  creater_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

CreateRoomMessageInfo::CreateRoomMessageInfo(const CreateRoomMessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CreateRoomMessageInfo)
}

void CreateRoomMessageInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  type_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  creater_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomMessageInfo::~CreateRoomMessageInfo() {
  // @@protoc_insertion_point(destructor:msg.CreateRoomMessageInfo)
  SharedDtor();
}

void CreateRoomMessageInfo::SharedDtor() {
  if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (this != default_instance_) {
    delete creater_;
  }
}

void CreateRoomMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CreateRoomMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomMessageInfo_descriptor_;
}

const CreateRoomMessageInfo& CreateRoomMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CreateRoomMessageInfo* CreateRoomMessageInfo::default_instance_ = NULL;

CreateRoomMessageInfo* CreateRoomMessageInfo::New() const {
  return new CreateRoomMessageInfo;
}

void CreateRoomMessageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateRoomMessageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, type_);
    if (has_text()) {
      if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_creater()) {
      if (creater_ != NULL) creater_->::msg::UserDetailInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomMessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CreateRoomMessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional .msg.RoomType Type = 4;
      case 4: {
        if (tag == 32) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_type(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 5;
      case 5: {
        if (tag == 42) {
         parse_RoomName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Creater;
        break;
      }

      // optional .msg.UserDetailInfo Creater = 6;
      case 6: {
        if (tag == 50) {
         parse_Creater:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CreateRoomMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CreateRoomMessageInfo)
  return false;
#undef DO_
}

void CreateRoomMessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CreateRoomMessageInfo)
  // optional string Text = 1;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional .msg.RoomType Type = 4;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string RoomName = 5;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->roomname(), output);
  }

  // optional .msg.UserDetailInfo Creater = 6;
  if (has_creater()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->creater(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CreateRoomMessageInfo)
}

::google_public::protobuf::uint8* CreateRoomMessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreateRoomMessageInfo)
  // optional string Text = 1;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional .msg.RoomType Type = 4;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string RoomName = 5;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomname(), target);
  }

  // optional .msg.UserDetailInfo Creater = 6;
  if (has_creater()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->creater(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreateRoomMessageInfo)
  return target;
}

int CreateRoomMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.RoomType Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string RoomName = 5;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional .msg.UserDetailInfo Creater = 6;
    if (has_creater()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creater());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomMessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomMessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CreateRoomMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomMessageInfo::MergeFrom(const CreateRoomMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_creater()) {
      mutable_creater()->::msg::UserDetailInfo::MergeFrom(from.creater());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomMessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomMessageInfo::CopyFrom(const CreateRoomMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomMessageInfo::IsInitialized() const {

  return true;
}

void CreateRoomMessageInfo::Swap(CreateRoomMessageInfo* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(roomid_, other->roomid_);
    std::swap(type_, other->type_);
    std::swap(roomname_, other->roomname_);
    std::swap(creater_, other->creater_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CreateRoomMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomMessageInfo_descriptor_;
  metadata.reflection = CreateRoomMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupNoticeMessageInfo::kInviteIntoGroupFieldNumber;
const int GroupNoticeMessageInfo::kIntoGroupFieldNumber;
const int GroupNoticeMessageInfo::kGroupUserNumFieldNumber;
const int GroupNoticeMessageInfo::kTextFieldNumber;
const int GroupNoticeMessageInfo::kOutGroupFieldNumber;
#endif  // !_MSC_VER

GroupNoticeMessageInfo::GroupNoticeMessageInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupNoticeMessageInfo)
}

void GroupNoticeMessageInfo::InitAsDefaultInstance() {
  inviteintogroup_ = const_cast< ::msg::InviteIntoGroup*>(&::msg::InviteIntoGroup::default_instance());
  intogroup_ = const_cast< ::msg::IntoGroup*>(&::msg::IntoGroup::default_instance());
  outgroup_ = const_cast< ::msg::OutGroup*>(&::msg::OutGroup::default_instance());
}

GroupNoticeMessageInfo::GroupNoticeMessageInfo(const GroupNoticeMessageInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupNoticeMessageInfo)
}

void GroupNoticeMessageInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inviteintogroup_ = NULL;
  intogroup_ = NULL;
  groupusernum_ = 0;
  text_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  outgroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupNoticeMessageInfo::~GroupNoticeMessageInfo() {
  // @@protoc_insertion_point(destructor:msg.GroupNoticeMessageInfo)
  SharedDtor();
}

void GroupNoticeMessageInfo::SharedDtor() {
  if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
    delete inviteintogroup_;
    delete intogroup_;
    delete outgroup_;
  }
}

void GroupNoticeMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupNoticeMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupNoticeMessageInfo_descriptor_;
}

const GroupNoticeMessageInfo& GroupNoticeMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupNoticeMessageInfo* GroupNoticeMessageInfo::default_instance_ = NULL;

GroupNoticeMessageInfo* GroupNoticeMessageInfo::New() const {
  return new GroupNoticeMessageInfo;
}

void GroupNoticeMessageInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_inviteintogroup()) {
      if (inviteintogroup_ != NULL) inviteintogroup_->::msg::InviteIntoGroup::Clear();
    }
    if (has_intogroup()) {
      if (intogroup_ != NULL) intogroup_->::msg::IntoGroup::Clear();
    }
    groupusernum_ = 0;
    if (has_text()) {
      if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_outgroup()) {
      if (outgroup_ != NULL) outgroup_->::msg::OutGroup::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupNoticeMessageInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupNoticeMessageInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.InviteIntoGroup InviteIntoGroup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviteintogroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IntoGroup;
        break;
      }

      // optional .msg.IntoGroup IntoGroup = 2;
      case 2: {
        if (tag == 18) {
         parse_IntoGroup:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intogroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupUserNum;
        break;
      }

      // optional int32 GroupUserNum = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupUserNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupusernum_)));
          set_has_groupusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Text;
        break;
      }

      // optional string Text = 4;
      case 4: {
        if (tag == 34) {
         parse_Text:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OutGroup;
        break;
      }

      // optional .msg.OutGroup OutGroup = 5;
      case 5: {
        if (tag == 42) {
         parse_OutGroup:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outgroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupNoticeMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupNoticeMessageInfo)
  return false;
#undef DO_
}

void GroupNoticeMessageInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupNoticeMessageInfo)
  // optional .msg.InviteIntoGroup InviteIntoGroup = 1;
  if (has_inviteintogroup()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inviteintogroup(), output);
  }

  // optional .msg.IntoGroup IntoGroup = 2;
  if (has_intogroup()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intogroup(), output);
  }

  // optional int32 GroupUserNum = 3;
  if (has_groupusernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupusernum(), output);
  }

  // optional string Text = 4;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional .msg.OutGroup OutGroup = 5;
  if (has_outgroup()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupNoticeMessageInfo)
}

::google_public::protobuf::uint8* GroupNoticeMessageInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupNoticeMessageInfo)
  // optional .msg.InviteIntoGroup InviteIntoGroup = 1;
  if (has_inviteintogroup()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inviteintogroup(), target);
  }

  // optional .msg.IntoGroup IntoGroup = 2;
  if (has_intogroup()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intogroup(), target);
  }

  // optional int32 GroupUserNum = 3;
  if (has_groupusernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupusernum(), target);
  }

  // optional string Text = 4;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional .msg.OutGroup OutGroup = 5;
  if (has_outgroup()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->outgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupNoticeMessageInfo)
  return target;
}

int GroupNoticeMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.InviteIntoGroup InviteIntoGroup = 1;
    if (has_inviteintogroup()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviteintogroup());
    }

    // optional .msg.IntoGroup IntoGroup = 2;
    if (has_intogroup()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intogroup());
    }

    // optional int32 GroupUserNum = 3;
    if (has_groupusernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupusernum());
    }

    // optional string Text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .msg.OutGroup OutGroup = 5;
    if (has_outgroup()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupNoticeMessageInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupNoticeMessageInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupNoticeMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupNoticeMessageInfo::MergeFrom(const GroupNoticeMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteintogroup()) {
      mutable_inviteintogroup()->::msg::InviteIntoGroup::MergeFrom(from.inviteintogroup());
    }
    if (from.has_intogroup()) {
      mutable_intogroup()->::msg::IntoGroup::MergeFrom(from.intogroup());
    }
    if (from.has_groupusernum()) {
      set_groupusernum(from.groupusernum());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_outgroup()) {
      mutable_outgroup()->::msg::OutGroup::MergeFrom(from.outgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupNoticeMessageInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupNoticeMessageInfo::CopyFrom(const GroupNoticeMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupNoticeMessageInfo::IsInitialized() const {

  return true;
}

void GroupNoticeMessageInfo::Swap(GroupNoticeMessageInfo* other) {
  if (other != this) {
    std::swap(inviteintogroup_, other->inviteintogroup_);
    std::swap(intogroup_, other->intogroup_);
    std::swap(groupusernum_, other->groupusernum_);
    std::swap(text_, other->text_);
    std::swap(outgroup_, other->outgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupNoticeMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupNoticeMessageInfo_descriptor_;
  metadata.reflection = GroupNoticeMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteIntoGroup::kInviterFieldNumber;
const int InviteIntoGroup::kInviteeFieldNumber;
#endif  // !_MSC_VER

InviteIntoGroup::InviteIntoGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.InviteIntoGroup)
}

void InviteIntoGroup::InitAsDefaultInstance() {
  inviter_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
  invitee_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

InviteIntoGroup::InviteIntoGroup(const InviteIntoGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.InviteIntoGroup)
}

void InviteIntoGroup::SharedCtor() {
  _cached_size_ = 0;
  inviter_ = NULL;
  invitee_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteIntoGroup::~InviteIntoGroup() {
  // @@protoc_insertion_point(destructor:msg.InviteIntoGroup)
  SharedDtor();
}

void InviteIntoGroup::SharedDtor() {
  if (this != default_instance_) {
    delete inviter_;
    delete invitee_;
  }
}

void InviteIntoGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* InviteIntoGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteIntoGroup_descriptor_;
}

const InviteIntoGroup& InviteIntoGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

InviteIntoGroup* InviteIntoGroup::default_instance_ = NULL;

InviteIntoGroup* InviteIntoGroup::New() const {
  return new InviteIntoGroup;
}

void InviteIntoGroup::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_inviter()) {
      if (inviter_ != NULL) inviter_->::msg::UserDetailInfo::Clear();
    }
    if (has_invitee()) {
      if (invitee_ != NULL) invitee_->::msg::UserDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteIntoGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.InviteIntoGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo Inviter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Invitee;
        break;
      }

      // optional .msg.UserDetailInfo Invitee = 2;
      case 2: {
        if (tag == 18) {
         parse_Invitee:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.InviteIntoGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.InviteIntoGroup)
  return false;
#undef DO_
}

void InviteIntoGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.InviteIntoGroup)
  // optional .msg.UserDetailInfo Inviter = 1;
  if (has_inviter()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inviter(), output);
  }

  // optional .msg.UserDetailInfo Invitee = 2;
  if (has_invitee()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invitee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.InviteIntoGroup)
}

::google_public::protobuf::uint8* InviteIntoGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.InviteIntoGroup)
  // optional .msg.UserDetailInfo Inviter = 1;
  if (has_inviter()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inviter(), target);
  }

  // optional .msg.UserDetailInfo Invitee = 2;
  if (has_invitee()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invitee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.InviteIntoGroup)
  return target;
}

int InviteIntoGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo Inviter = 1;
    if (has_inviter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviter());
    }

    // optional .msg.UserDetailInfo Invitee = 2;
    if (has_invitee()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteIntoGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteIntoGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const InviteIntoGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteIntoGroup::MergeFrom(const InviteIntoGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter()) {
      mutable_inviter()->::msg::UserDetailInfo::MergeFrom(from.inviter());
    }
    if (from.has_invitee()) {
      mutable_invitee()->::msg::UserDetailInfo::MergeFrom(from.invitee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteIntoGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteIntoGroup::CopyFrom(const InviteIntoGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteIntoGroup::IsInitialized() const {

  return true;
}

void InviteIntoGroup::Swap(InviteIntoGroup* other) {
  if (other != this) {
    std::swap(inviter_, other->inviter_);
    std::swap(invitee_, other->invitee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata InviteIntoGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = InviteIntoGroup_descriptor_;
  metadata.reflection = InviteIntoGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutGroup::kOuterFieldNumber;
#endif  // !_MSC_VER

OutGroup::OutGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OutGroup)
}

void OutGroup::InitAsDefaultInstance() {
  outer_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

OutGroup::OutGroup(const OutGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OutGroup)
}

void OutGroup::SharedCtor() {
  _cached_size_ = 0;
  outer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutGroup::~OutGroup() {
  // @@protoc_insertion_point(destructor:msg.OutGroup)
  SharedDtor();
}

void OutGroup::SharedDtor() {
  if (this != default_instance_) {
    delete outer_;
  }
}

void OutGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OutGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutGroup_descriptor_;
}

const OutGroup& OutGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OutGroup* OutGroup::default_instance_ = NULL;

OutGroup* OutGroup::New() const {
  return new OutGroup;
}

void OutGroup::Clear() {
  if (has_outer()) {
    if (outer_ != NULL) outer_->::msg::UserDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OutGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OutGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OutGroup)
  return false;
#undef DO_
}

void OutGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OutGroup)
  // optional .msg.UserDetailInfo outer = 1;
  if (has_outer()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->outer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OutGroup)
}

::google_public::protobuf::uint8* OutGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OutGroup)
  // optional .msg.UserDetailInfo outer = 1;
  if (has_outer()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->outer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OutGroup)
  return target;
}

int OutGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo outer = 1;
    if (has_outer()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OutGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutGroup::MergeFrom(const OutGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outer()) {
      mutable_outer()->::msg::UserDetailInfo::MergeFrom(from.outer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutGroup::CopyFrom(const OutGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutGroup::IsInitialized() const {

  return true;
}

void OutGroup::Swap(OutGroup* other) {
  if (other != this) {
    std::swap(outer_, other->outer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OutGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OutGroup_descriptor_;
  metadata.reflection = OutGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntoGroup::kIntoGroupUserFieldNumber;
#endif  // !_MSC_VER

IntoGroup::IntoGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.IntoGroup)
}

void IntoGroup::InitAsDefaultInstance() {
  intogroupuser_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

IntoGroup::IntoGroup(const IntoGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.IntoGroup)
}

void IntoGroup::SharedCtor() {
  _cached_size_ = 0;
  intogroupuser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntoGroup::~IntoGroup() {
  // @@protoc_insertion_point(destructor:msg.IntoGroup)
  SharedDtor();
}

void IntoGroup::SharedDtor() {
  if (this != default_instance_) {
    delete intogroupuser_;
  }
}

void IntoGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* IntoGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntoGroup_descriptor_;
}

const IntoGroup& IntoGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

IntoGroup* IntoGroup::default_instance_ = NULL;

IntoGroup* IntoGroup::New() const {
  return new IntoGroup;
}

void IntoGroup::Clear() {
  if (has_intogroupuser()) {
    if (intogroupuser_ != NULL) intogroupuser_->::msg::UserDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntoGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.IntoGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo IntoGroupUser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intogroupuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.IntoGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.IntoGroup)
  return false;
#undef DO_
}

void IntoGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.IntoGroup)
  // optional .msg.UserDetailInfo IntoGroupUser = 1;
  if (has_intogroupuser()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->intogroupuser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.IntoGroup)
}

::google_public::protobuf::uint8* IntoGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.IntoGroup)
  // optional .msg.UserDetailInfo IntoGroupUser = 1;
  if (has_intogroupuser()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->intogroupuser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.IntoGroup)
  return target;
}

int IntoGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo IntoGroupUser = 1;
    if (has_intogroupuser()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intogroupuser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntoGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntoGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const IntoGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntoGroup::MergeFrom(const IntoGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intogroupuser()) {
      mutable_intogroupuser()->::msg::UserDetailInfo::MergeFrom(from.intogroupuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntoGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntoGroup::CopyFrom(const IntoGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntoGroup::IsInitialized() const {

  return true;
}

void IntoGroup::Swap(IntoGroup* other) {
  if (other != this) {
    std::swap(intogroupuser_, other->intogroupuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata IntoGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = IntoGroup_descriptor_;
  metadata.reflection = IntoGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kGroupIdFieldNumber;
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kGroupCommentFieldNumber;
const int GroupInfo::kHiddenFieldNumber;
const int GroupInfo::kGroupPicFieldNumber;
const int GroupInfo::kUserStatusFieldNumber;
const int GroupInfo::kTypeFieldNumber;
const int GroupInfo::kGroupOwnerIDFieldNumber;
const int GroupInfo::kRankVisibleFieldNumber;
const int GroupInfo::kAllowCreateRoomFieldNumber;
const int GroupInfo::kAllowChatFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  groupcomment_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_ = 0;
  grouppic_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  userstatus_ = 1;
  type_ = 0;
  groupownerid_ = 0;
  rankvisible_ = false;
  allowcreateroom_ = false;
  allowchat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:msg.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  if (groupname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupname_;
  }
  if (groupcomment_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupcomment_;
  }
  if (grouppic_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grouppic_;
  }
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New() const {
  return new GroupInfo;
}

void GroupInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(groupid_, hidden_);
    ZR_(type_, groupownerid_);
    if (has_groupname()) {
      if (groupname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupname_->clear();
      }
    }
    if (has_groupcomment()) {
      if (groupcomment_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupcomment_->clear();
      }
    }
    if (has_grouppic()) {
      if (grouppic_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grouppic_->clear();
      }
    }
    userstatus_ = 1;
  }
  ZR_(rankvisible_, allowchat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupName;
        break;
      }

      // optional string GroupName = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "groupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupComment;
        break;
      }

      // optional string GroupComment = 3;
      case 3: {
        if (tag == 26) {
         parse_GroupComment:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupcomment()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupcomment().data(), this->groupcomment().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "groupcomment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Hidden;
        break;
      }

      // optional int32 Hidden = 4;
      case 4: {
        if (tag == 32) {
         parse_Hidden:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GroupPic;
        break;
      }

      // optional string GroupPic = 5;
      case 5: {
        if (tag == 42) {
         parse_GroupPic:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouppic()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grouppic().data(), this->grouppic().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "grouppic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_UserStatus;
        break;
      }

      // optional .msg.GroupUserStatus UserStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_UserStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GroupUserStatus_IsValid(value)) {
            set_userstatus(static_cast< ::msg::GroupUserStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Type;
        break;
      }

      // optional .msg.GroupType Type = 7;
      case 7: {
        if (tag == 56) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GroupType_IsValid(value)) {
            set_type(static_cast< ::msg::GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_GroupOwnerID;
        break;
      }

      // optional int32 GroupOwnerID = 8;
      case 8: {
        if (tag == 64) {
         parse_GroupOwnerID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupownerid_)));
          set_has_groupownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RankVisible;
        break;
      }

      // optional bool RankVisible = 9;
      case 9: {
        if (tag == 72) {
         parse_RankVisible:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rankvisible_)));
          set_has_rankvisible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AllowCreateRoom;
        break;
      }

      // optional bool AllowCreateRoom = 10;
      case 10: {
        if (tag == 80) {
         parse_AllowCreateRoom:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowcreateroom_)));
          set_has_allowcreateroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_AllowChat;
        break;
      }

      // optional bool AllowChat = 11;
      case 11: {
        if (tag == 88) {
         parse_AllowChat:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowchat_)));
          set_has_allowchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupInfo)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional string GroupName = 2;
  if (has_groupname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // optional string GroupComment = 3;
  if (has_groupcomment()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupcomment().data(), this->groupcomment().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupcomment");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupcomment(), output);
  }

  // optional int32 Hidden = 4;
  if (has_hidden()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->hidden(), output);
  }

  // optional string GroupPic = 5;
  if (has_grouppic()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouppic().data(), this->grouppic().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "grouppic");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->grouppic(), output);
  }

  // optional .msg.GroupUserStatus UserStatus = 6;
  if (has_userstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->userstatus(), output);
  }

  // optional .msg.GroupType Type = 7;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional int32 GroupOwnerID = 8;
  if (has_groupownerid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->groupownerid(), output);
  }

  // optional bool RankVisible = 9;
  if (has_rankvisible()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(9, this->rankvisible(), output);
  }

  // optional bool AllowCreateRoom = 10;
  if (has_allowcreateroom()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(10, this->allowcreateroom(), output);
  }

  // optional bool AllowChat = 11;
  if (has_allowchat()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(11, this->allowchat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupInfo)
}

::google_public::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupInfo)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional string GroupName = 2;
  if (has_groupname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // optional string GroupComment = 3;
  if (has_groupcomment()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupcomment().data(), this->groupcomment().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupcomment");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupcomment(), target);
  }

  // optional int32 Hidden = 4;
  if (has_hidden()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hidden(), target);
  }

  // optional string GroupPic = 5;
  if (has_grouppic()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grouppic().data(), this->grouppic().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "grouppic");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->grouppic(), target);
  }

  // optional .msg.GroupUserStatus UserStatus = 6;
  if (has_userstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->userstatus(), target);
  }

  // optional .msg.GroupType Type = 7;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional int32 GroupOwnerID = 8;
  if (has_groupownerid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->groupownerid(), target);
  }

  // optional bool RankVisible = 9;
  if (has_rankvisible()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->rankvisible(), target);
  }

  // optional bool AllowCreateRoom = 10;
  if (has_allowcreateroom()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allowcreateroom(), target);
  }

  // optional bool AllowChat = 11;
  if (has_allowchat()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->allowchat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupInfo)
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional string GroupName = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional string GroupComment = 3;
    if (has_groupcomment()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->groupcomment());
    }

    // optional int32 Hidden = 4;
    if (has_hidden()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->hidden());
    }

    // optional string GroupPic = 5;
    if (has_grouppic()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->grouppic());
    }

    // optional .msg.GroupUserStatus UserStatus = 6;
    if (has_userstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->userstatus());
    }

    // optional .msg.GroupType Type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 GroupOwnerID = 8;
    if (has_groupownerid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupownerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool RankVisible = 9;
    if (has_rankvisible()) {
      total_size += 1 + 1;
    }

    // optional bool AllowCreateRoom = 10;
    if (has_allowcreateroom()) {
      total_size += 1 + 1;
    }

    // optional bool AllowChat = 11;
    if (has_allowchat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_groupcomment()) {
      set_groupcomment(from.groupcomment());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_grouppic()) {
      set_grouppic(from.grouppic());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_groupownerid()) {
      set_groupownerid(from.groupownerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rankvisible()) {
      set_rankvisible(from.rankvisible());
    }
    if (from.has_allowcreateroom()) {
      set_allowcreateroom(from.allowcreateroom());
    }
    if (from.has_allowchat()) {
      set_allowchat(from.allowchat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    std::swap(groupcomment_, other->groupcomment_);
    std::swap(hidden_, other->hidden_);
    std::swap(grouppic_, other->grouppic_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(type_, other->type_);
    std::swap(groupownerid_, other->groupownerid_);
    std::swap(rankvisible_, other->rankvisible_);
    std::swap(allowcreateroom_, other->allowcreateroom_);
    std::swap(allowchat_, other->allowchat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_140_CreateGroup::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

Processor_140_CreateGroup::Processor_140_CreateGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_140_CreateGroup)
}

void Processor_140_CreateGroup::InitAsDefaultInstance() {
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
}

Processor_140_CreateGroup::Processor_140_CreateGroup(const Processor_140_CreateGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_140_CreateGroup)
}

void Processor_140_CreateGroup::SharedCtor() {
  _cached_size_ = 0;
  groupinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_140_CreateGroup::~Processor_140_CreateGroup() {
  // @@protoc_insertion_point(destructor:msg.Processor_140_CreateGroup)
  SharedDtor();
}

void Processor_140_CreateGroup::SharedDtor() {
  if (this != default_instance_) {
    delete groupinfo_;
  }
}

void Processor_140_CreateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_140_CreateGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_140_CreateGroup_descriptor_;
}

const Processor_140_CreateGroup& Processor_140_CreateGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_140_CreateGroup* Processor_140_CreateGroup::default_instance_ = NULL;

Processor_140_CreateGroup* Processor_140_CreateGroup::New() const {
  return new Processor_140_CreateGroup;
}

void Processor_140_CreateGroup::Clear() {
  if (has_groupinfo()) {
    if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_140_CreateGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_140_CreateGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupInfo GroupInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_140_CreateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_140_CreateGroup)
  return false;
#undef DO_
}

void Processor_140_CreateGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_140_CreateGroup)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groupinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_140_CreateGroup)
}

::google_public::protobuf::uint8* Processor_140_CreateGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_140_CreateGroup)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groupinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_140_CreateGroup)
  return target;
}

int Processor_140_CreateGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupInfo GroupInfo = 1;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_140_CreateGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_140_CreateGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_140_CreateGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_140_CreateGroup::MergeFrom(const Processor_140_CreateGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_140_CreateGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_140_CreateGroup::CopyFrom(const Processor_140_CreateGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_140_CreateGroup::IsInitialized() const {

  return true;
}

void Processor_140_CreateGroup::Swap(Processor_140_CreateGroup* other) {
  if (other != this) {
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_140_CreateGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_140_CreateGroup_descriptor_;
  metadata.reflection = Processor_140_CreateGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_140_CreateGroup_Down::kResponseFieldNumber;
const int Processor_140_CreateGroup_Down::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

Processor_140_CreateGroup_Down::Processor_140_CreateGroup_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_140_CreateGroup_Down)
}

void Processor_140_CreateGroup_Down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
}

Processor_140_CreateGroup_Down::Processor_140_CreateGroup_Down(const Processor_140_CreateGroup_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_140_CreateGroup_Down)
}

void Processor_140_CreateGroup_Down::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  groupinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_140_CreateGroup_Down::~Processor_140_CreateGroup_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_140_CreateGroup_Down)
  SharedDtor();
}

void Processor_140_CreateGroup_Down::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete groupinfo_;
  }
}

void Processor_140_CreateGroup_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_140_CreateGroup_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_140_CreateGroup_Down_descriptor_;
}

const Processor_140_CreateGroup_Down& Processor_140_CreateGroup_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_140_CreateGroup_Down* Processor_140_CreateGroup_Down::default_instance_ = NULL;

Processor_140_CreateGroup_Down* Processor_140_CreateGroup_Down::New() const {
  return new Processor_140_CreateGroup_Down;
}

void Processor_140_CreateGroup_Down::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_140_CreateGroup_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_140_CreateGroup_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupInfo;
        break;
      }

      // optional .msg.GroupInfo GroupInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_140_CreateGroup_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_140_CreateGroup_Down)
  return false;
#undef DO_
}

void Processor_140_CreateGroup_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_140_CreateGroup_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_140_CreateGroup_Down)
}

::google_public::protobuf::uint8* Processor_140_CreateGroup_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_140_CreateGroup_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_140_CreateGroup_Down)
  return target;
}

int Processor_140_CreateGroup_Down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.GroupInfo GroupInfo = 2;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_140_CreateGroup_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_140_CreateGroup_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_140_CreateGroup_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_140_CreateGroup_Down::MergeFrom(const Processor_140_CreateGroup_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_140_CreateGroup_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_140_CreateGroup_Down::CopyFrom(const Processor_140_CreateGroup_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_140_CreateGroup_Down::IsInitialized() const {

  return true;
}

void Processor_140_CreateGroup_Down::Swap(Processor_140_CreateGroup_Down* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_140_CreateGroup_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_140_CreateGroup_Down_descriptor_;
  metadata.reflection = Processor_140_CreateGroup_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_141_EditGroup::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

Processor_141_EditGroup::Processor_141_EditGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_141_EditGroup)
}

void Processor_141_EditGroup::InitAsDefaultInstance() {
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
}

Processor_141_EditGroup::Processor_141_EditGroup(const Processor_141_EditGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_141_EditGroup)
}

void Processor_141_EditGroup::SharedCtor() {
  _cached_size_ = 0;
  groupinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_141_EditGroup::~Processor_141_EditGroup() {
  // @@protoc_insertion_point(destructor:msg.Processor_141_EditGroup)
  SharedDtor();
}

void Processor_141_EditGroup::SharedDtor() {
  if (this != default_instance_) {
    delete groupinfo_;
  }
}

void Processor_141_EditGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_141_EditGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_141_EditGroup_descriptor_;
}

const Processor_141_EditGroup& Processor_141_EditGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_141_EditGroup* Processor_141_EditGroup::default_instance_ = NULL;

Processor_141_EditGroup* Processor_141_EditGroup::New() const {
  return new Processor_141_EditGroup;
}

void Processor_141_EditGroup::Clear() {
  if (has_groupinfo()) {
    if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_141_EditGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_141_EditGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupInfo GroupInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_141_EditGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_141_EditGroup)
  return false;
#undef DO_
}

void Processor_141_EditGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_141_EditGroup)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groupinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_141_EditGroup)
}

::google_public::protobuf::uint8* Processor_141_EditGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_141_EditGroup)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groupinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_141_EditGroup)
  return target;
}

int Processor_141_EditGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupInfo GroupInfo = 1;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_141_EditGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_141_EditGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_141_EditGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_141_EditGroup::MergeFrom(const Processor_141_EditGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_141_EditGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_141_EditGroup::CopyFrom(const Processor_141_EditGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_141_EditGroup::IsInitialized() const {

  return true;
}

void Processor_141_EditGroup::Swap(Processor_141_EditGroup* other) {
  if (other != this) {
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_141_EditGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_141_EditGroup_descriptor_;
  metadata.reflection = Processor_141_EditGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_142_SearchGroup_UP::kTypeFieldNumber;
const int Processor_142_SearchGroup_UP::kSearchNameFieldNumber;
#endif  // !_MSC_VER

Processor_142_SearchGroup_UP::Processor_142_SearchGroup_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_142_SearchGroup_UP)
}

void Processor_142_SearchGroup_UP::InitAsDefaultInstance() {
}

Processor_142_SearchGroup_UP::Processor_142_SearchGroup_UP(const Processor_142_SearchGroup_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_142_SearchGroup_UP)
}

void Processor_142_SearchGroup_UP::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  searchname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_142_SearchGroup_UP::~Processor_142_SearchGroup_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_142_SearchGroup_UP)
  SharedDtor();
}

void Processor_142_SearchGroup_UP::SharedDtor() {
  if (searchname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchname_;
  }
  if (this != default_instance_) {
  }
}

void Processor_142_SearchGroup_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_142_SearchGroup_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_142_SearchGroup_UP_descriptor_;
}

const Processor_142_SearchGroup_UP& Processor_142_SearchGroup_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_142_SearchGroup_UP* Processor_142_SearchGroup_UP::default_instance_ = NULL;

Processor_142_SearchGroup_UP* Processor_142_SearchGroup_UP::New() const {
  return new Processor_142_SearchGroup_UP;
}

void Processor_142_SearchGroup_UP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_searchname()) {
      if (searchname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_142_SearchGroup_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_142_SearchGroup_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupSearchType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GroupSearchType_IsValid(value)) {
            set_type(static_cast< ::msg::GroupSearchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SearchName;
        break;
      }

      // optional string SearchName = 2;
      case 2: {
        if (tag == 18) {
         parse_SearchName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchname().data(), this->searchname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "searchname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_142_SearchGroup_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_142_SearchGroup_UP)
  return false;
#undef DO_
}

void Processor_142_SearchGroup_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_142_SearchGroup_UP)
  // optional .msg.GroupSearchType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string SearchName = 2;
  if (has_searchname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchname().data(), this->searchname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "searchname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->searchname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_142_SearchGroup_UP)
}

::google_public::protobuf::uint8* Processor_142_SearchGroup_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_142_SearchGroup_UP)
  // optional .msg.GroupSearchType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string SearchName = 2;
  if (has_searchname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchname().data(), this->searchname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "searchname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->searchname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_142_SearchGroup_UP)
  return target;
}

int Processor_142_SearchGroup_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupSearchType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string SearchName = 2;
    if (has_searchname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->searchname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_142_SearchGroup_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_142_SearchGroup_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_142_SearchGroup_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_142_SearchGroup_UP::MergeFrom(const Processor_142_SearchGroup_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_searchname()) {
      set_searchname(from.searchname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_142_SearchGroup_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_142_SearchGroup_UP::CopyFrom(const Processor_142_SearchGroup_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_142_SearchGroup_UP::IsInitialized() const {

  return true;
}

void Processor_142_SearchGroup_UP::Swap(Processor_142_SearchGroup_UP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(searchname_, other->searchname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_142_SearchGroup_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_142_SearchGroup_UP_descriptor_;
  metadata.reflection = Processor_142_SearchGroup_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_142_SearchGroup_DOWN::kResponseFieldNumber;
const int Processor_142_SearchGroup_DOWN::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

Processor_142_SearchGroup_DOWN::Processor_142_SearchGroup_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_142_SearchGroup_DOWN)
}

void Processor_142_SearchGroup_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_142_SearchGroup_DOWN::Processor_142_SearchGroup_DOWN(const Processor_142_SearchGroup_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_142_SearchGroup_DOWN)
}

void Processor_142_SearchGroup_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_142_SearchGroup_DOWN::~Processor_142_SearchGroup_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_142_SearchGroup_DOWN)
  SharedDtor();
}

void Processor_142_SearchGroup_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_142_SearchGroup_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_142_SearchGroup_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_142_SearchGroup_DOWN_descriptor_;
}

const Processor_142_SearchGroup_DOWN& Processor_142_SearchGroup_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_142_SearchGroup_DOWN* Processor_142_SearchGroup_DOWN::default_instance_ = NULL;

Processor_142_SearchGroup_DOWN* Processor_142_SearchGroup_DOWN::New() const {
  return new Processor_142_SearchGroup_DOWN;
}

void Processor_142_SearchGroup_DOWN::Clear() {
  if (has_response()) {
    if (response_ != NULL) response_->::msg::Response::Clear();
  }
  groupinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_142_SearchGroup_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_142_SearchGroup_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupInfo;
        break;
      }

      // repeated .msg.GroupInfo GroupInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_142_SearchGroup_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_142_SearchGroup_DOWN)
  return false;
#undef DO_
}

void Processor_142_SearchGroup_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_142_SearchGroup_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // repeated .msg.GroupInfo GroupInfo = 2;
  for (int i = 0; i < this->groupinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_142_SearchGroup_DOWN)
}

::google_public::protobuf::uint8* Processor_142_SearchGroup_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_142_SearchGroup_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // repeated .msg.GroupInfo GroupInfo = 2;
  for (int i = 0; i < this->groupinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_142_SearchGroup_DOWN)
  return target;
}

int Processor_142_SearchGroup_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  // repeated .msg.GroupInfo GroupInfo = 2;
  total_size += 1 * this->groupinfo_size();
  for (int i = 0; i < this->groupinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_142_SearchGroup_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_142_SearchGroup_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_142_SearchGroup_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_142_SearchGroup_DOWN::MergeFrom(const Processor_142_SearchGroup_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupinfo_.MergeFrom(from.groupinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_142_SearchGroup_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_142_SearchGroup_DOWN::CopyFrom(const Processor_142_SearchGroup_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_142_SearchGroup_DOWN::IsInitialized() const {

  return true;
}

void Processor_142_SearchGroup_DOWN::Swap(Processor_142_SearchGroup_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    groupinfo_.Swap(&other->groupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_142_SearchGroup_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_142_SearchGroup_DOWN_descriptor_;
  metadata.reflection = Processor_142_SearchGroup_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_144_KickUserFromGroup::kGroupIdFieldNumber;
const int Processor_144_KickUserFromGroup::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_144_KickUserFromGroup::Processor_144_KickUserFromGroup()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_144_KickUserFromGroup)
}

void Processor_144_KickUserFromGroup::InitAsDefaultInstance() {
}

Processor_144_KickUserFromGroup::Processor_144_KickUserFromGroup(const Processor_144_KickUserFromGroup& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_144_KickUserFromGroup)
}

void Processor_144_KickUserFromGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_144_KickUserFromGroup::~Processor_144_KickUserFromGroup() {
  // @@protoc_insertion_point(destructor:msg.Processor_144_KickUserFromGroup)
  SharedDtor();
}

void Processor_144_KickUserFromGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_144_KickUserFromGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_144_KickUserFromGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_144_KickUserFromGroup_descriptor_;
}

const Processor_144_KickUserFromGroup& Processor_144_KickUserFromGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_144_KickUserFromGroup* Processor_144_KickUserFromGroup::default_instance_ = NULL;

Processor_144_KickUserFromGroup* Processor_144_KickUserFromGroup::New() const {
  return new Processor_144_KickUserFromGroup;
}

void Processor_144_KickUserFromGroup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_144_KickUserFromGroup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_144_KickUserFromGroup::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_144_KickUserFromGroup)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_144_KickUserFromGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_144_KickUserFromGroup)
  return false;
#undef DO_
}

void Processor_144_KickUserFromGroup::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_144_KickUserFromGroup)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_144_KickUserFromGroup)
}

::google_public::protobuf::uint8* Processor_144_KickUserFromGroup::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_144_KickUserFromGroup)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_144_KickUserFromGroup)
  return target;
}

int Processor_144_KickUserFromGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_144_KickUserFromGroup::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_144_KickUserFromGroup* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_144_KickUserFromGroup*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_144_KickUserFromGroup::MergeFrom(const Processor_144_KickUserFromGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_144_KickUserFromGroup::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_144_KickUserFromGroup::CopyFrom(const Processor_144_KickUserFromGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_144_KickUserFromGroup::IsInitialized() const {

  return true;
}

void Processor_144_KickUserFromGroup::Swap(Processor_144_KickUserFromGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_144_KickUserFromGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_144_KickUserFromGroup_descriptor_;
  metadata.reflection = Processor_144_KickUserFromGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_145_GetGroupInfo_UP::kGroupIdFieldNumber;
#endif  // !_MSC_VER

Processor_145_GetGroupInfo_UP::Processor_145_GetGroupInfo_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_145_GetGroupInfo_UP)
}

void Processor_145_GetGroupInfo_UP::InitAsDefaultInstance() {
}

Processor_145_GetGroupInfo_UP::Processor_145_GetGroupInfo_UP(const Processor_145_GetGroupInfo_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_145_GetGroupInfo_UP)
}

void Processor_145_GetGroupInfo_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_145_GetGroupInfo_UP::~Processor_145_GetGroupInfo_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_145_GetGroupInfo_UP)
  SharedDtor();
}

void Processor_145_GetGroupInfo_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_145_GetGroupInfo_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_145_GetGroupInfo_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_145_GetGroupInfo_UP_descriptor_;
}

const Processor_145_GetGroupInfo_UP& Processor_145_GetGroupInfo_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_145_GetGroupInfo_UP* Processor_145_GetGroupInfo_UP::default_instance_ = NULL;

Processor_145_GetGroupInfo_UP* Processor_145_GetGroupInfo_UP::New() const {
  return new Processor_145_GetGroupInfo_UP;
}

void Processor_145_GetGroupInfo_UP::Clear() {
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_145_GetGroupInfo_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_145_GetGroupInfo_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_145_GetGroupInfo_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_145_GetGroupInfo_UP)
  return false;
#undef DO_
}

void Processor_145_GetGroupInfo_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_145_GetGroupInfo_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_145_GetGroupInfo_UP)
}

::google_public::protobuf::uint8* Processor_145_GetGroupInfo_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_145_GetGroupInfo_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_145_GetGroupInfo_UP)
  return target;
}

int Processor_145_GetGroupInfo_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_145_GetGroupInfo_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_145_GetGroupInfo_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_145_GetGroupInfo_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_145_GetGroupInfo_UP::MergeFrom(const Processor_145_GetGroupInfo_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_145_GetGroupInfo_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_145_GetGroupInfo_UP::CopyFrom(const Processor_145_GetGroupInfo_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_145_GetGroupInfo_UP::IsInitialized() const {

  return true;
}

void Processor_145_GetGroupInfo_UP::Swap(Processor_145_GetGroupInfo_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_145_GetGroupInfo_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_145_GetGroupInfo_UP_descriptor_;
  metadata.reflection = Processor_145_GetGroupInfo_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_145_GetGroupInfo_DOWN::kResponseFieldNumber;
const int Processor_145_GetGroupInfo_DOWN::kGroupInfoFieldNumber;
const int Processor_145_GetGroupInfo_DOWN::kGroupUserNumFieldNumber;
#endif  // !_MSC_VER

Processor_145_GetGroupInfo_DOWN::Processor_145_GetGroupInfo_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_145_GetGroupInfo_DOWN)
}

void Processor_145_GetGroupInfo_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
}

Processor_145_GetGroupInfo_DOWN::Processor_145_GetGroupInfo_DOWN(const Processor_145_GetGroupInfo_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_145_GetGroupInfo_DOWN)
}

void Processor_145_GetGroupInfo_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  groupinfo_ = NULL;
  groupusernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_145_GetGroupInfo_DOWN::~Processor_145_GetGroupInfo_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_145_GetGroupInfo_DOWN)
  SharedDtor();
}

void Processor_145_GetGroupInfo_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete groupinfo_;
  }
}

void Processor_145_GetGroupInfo_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_145_GetGroupInfo_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_145_GetGroupInfo_DOWN_descriptor_;
}

const Processor_145_GetGroupInfo_DOWN& Processor_145_GetGroupInfo_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_145_GetGroupInfo_DOWN* Processor_145_GetGroupInfo_DOWN::default_instance_ = NULL;

Processor_145_GetGroupInfo_DOWN* Processor_145_GetGroupInfo_DOWN::New() const {
  return new Processor_145_GetGroupInfo_DOWN;
}

void Processor_145_GetGroupInfo_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
    groupusernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_145_GetGroupInfo_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_145_GetGroupInfo_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupInfo;
        break;
      }

      // optional .msg.GroupInfo GroupInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupUserNum;
        break;
      }

      // optional int32 GroupUserNum = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupUserNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupusernum_)));
          set_has_groupusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_145_GetGroupInfo_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_145_GetGroupInfo_DOWN)
  return false;
#undef DO_
}

void Processor_145_GetGroupInfo_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_145_GetGroupInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupinfo(), output);
  }

  // optional int32 GroupUserNum = 3;
  if (has_groupusernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupusernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_145_GetGroupInfo_DOWN)
}

::google_public::protobuf::uint8* Processor_145_GetGroupInfo_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_145_GetGroupInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupinfo(), target);
  }

  // optional int32 GroupUserNum = 3;
  if (has_groupusernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupusernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_145_GetGroupInfo_DOWN)
  return target;
}

int Processor_145_GetGroupInfo_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.GroupInfo GroupInfo = 2;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional int32 GroupUserNum = 3;
    if (has_groupusernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupusernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_145_GetGroupInfo_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_145_GetGroupInfo_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_145_GetGroupInfo_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_145_GetGroupInfo_DOWN::MergeFrom(const Processor_145_GetGroupInfo_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
    if (from.has_groupusernum()) {
      set_groupusernum(from.groupusernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_145_GetGroupInfo_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_145_GetGroupInfo_DOWN::CopyFrom(const Processor_145_GetGroupInfo_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_145_GetGroupInfo_DOWN::IsInitialized() const {

  return true;
}

void Processor_145_GetGroupInfo_DOWN::Swap(Processor_145_GetGroupInfo_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(groupusernum_, other->groupusernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_145_GetGroupInfo_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_145_GetGroupInfo_DOWN_descriptor_;
  metadata.reflection = Processor_145_GetGroupInfo_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_146_GetGroupDetailInfo_UP::kGroupIDFieldNumber;
#endif  // !_MSC_VER

Processor_146_GetGroupDetailInfo_UP::Processor_146_GetGroupDetailInfo_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_146_GetGroupDetailInfo_UP)
}

void Processor_146_GetGroupDetailInfo_UP::InitAsDefaultInstance() {
}

Processor_146_GetGroupDetailInfo_UP::Processor_146_GetGroupDetailInfo_UP(const Processor_146_GetGroupDetailInfo_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_146_GetGroupDetailInfo_UP)
}

void Processor_146_GetGroupDetailInfo_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_146_GetGroupDetailInfo_UP::~Processor_146_GetGroupDetailInfo_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_146_GetGroupDetailInfo_UP)
  SharedDtor();
}

void Processor_146_GetGroupDetailInfo_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_146_GetGroupDetailInfo_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_146_GetGroupDetailInfo_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_146_GetGroupDetailInfo_UP_descriptor_;
}

const Processor_146_GetGroupDetailInfo_UP& Processor_146_GetGroupDetailInfo_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_146_GetGroupDetailInfo_UP* Processor_146_GetGroupDetailInfo_UP::default_instance_ = NULL;

Processor_146_GetGroupDetailInfo_UP* Processor_146_GetGroupDetailInfo_UP::New() const {
  return new Processor_146_GetGroupDetailInfo_UP;
}

void Processor_146_GetGroupDetailInfo_UP::Clear() {
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_146_GetGroupDetailInfo_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_146_GetGroupDetailInfo_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_146_GetGroupDetailInfo_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_146_GetGroupDetailInfo_UP)
  return false;
#undef DO_
}

void Processor_146_GetGroupDetailInfo_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_146_GetGroupDetailInfo_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_146_GetGroupDetailInfo_UP)
}

::google_public::protobuf::uint8* Processor_146_GetGroupDetailInfo_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_146_GetGroupDetailInfo_UP)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_146_GetGroupDetailInfo_UP)
  return target;
}

int Processor_146_GetGroupDetailInfo_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_146_GetGroupDetailInfo_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_146_GetGroupDetailInfo_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_146_GetGroupDetailInfo_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_146_GetGroupDetailInfo_UP::MergeFrom(const Processor_146_GetGroupDetailInfo_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_146_GetGroupDetailInfo_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_146_GetGroupDetailInfo_UP::CopyFrom(const Processor_146_GetGroupDetailInfo_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_146_GetGroupDetailInfo_UP::IsInitialized() const {

  return true;
}

void Processor_146_GetGroupDetailInfo_UP::Swap(Processor_146_GetGroupDetailInfo_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_146_GetGroupDetailInfo_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_146_GetGroupDetailInfo_UP_descriptor_;
  metadata.reflection = Processor_146_GetGroupDetailInfo_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUserInfo::kUserDetailInfoFieldNumber;
const int GroupUserInfo::kUserStatusFieldNumber;
#endif  // !_MSC_VER

GroupUserInfo::GroupUserInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupUserInfo)
}

void GroupUserInfo::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

GroupUserInfo::GroupUserInfo(const GroupUserInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupUserInfo)
}

void GroupUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  userstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUserInfo::~GroupUserInfo() {
  // @@protoc_insertion_point(destructor:msg.GroupUserInfo)
  SharedDtor();
}

void GroupUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
  }
}

void GroupUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUserInfo_descriptor_;
}

const GroupUserInfo& GroupUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupUserInfo* GroupUserInfo::default_instance_ = NULL;

GroupUserInfo* GroupUserInfo::New() const {
  return new GroupUserInfo;
}

void GroupUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    userstatus_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUserInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupUserInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserStatus;
        break;
      }

      // optional .msg.GroupUserStatus UserStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_UserStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GroupUserStatus_IsValid(value)) {
            set_userstatus(static_cast< ::msg::GroupUserStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupUserInfo)
  return false;
#undef DO_
}

void GroupUserInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupUserInfo)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional .msg.GroupUserStatus UserStatus = 2;
  if (has_userstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupUserInfo)
}

::google_public::protobuf::uint8* GroupUserInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupUserInfo)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional .msg.GroupUserStatus UserStatus = 2;
  if (has_userstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupUserInfo)
  return target;
}

int GroupUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional .msg.GroupUserStatus UserStatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUserInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUserInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupUserInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUserInfo::MergeFrom(const GroupUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUserInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUserInfo::CopyFrom(const GroupUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUserInfo::IsInitialized() const {

  return true;
}

void GroupUserInfo::Swap(GroupUserInfo* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupUserInfo_descriptor_;
  metadata.reflection = GroupUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupManageSetting::kIsClubFieldNumber;
const int GroupManageSetting::kCreditRefillAfterGameFieldNumber;
const int GroupManageSetting::kCanChatFieldNumber;
const int GroupManageSetting::kCanSeeOtherMemberFieldNumber;
const int GroupManageSetting::kRakePercentFieldNumber;
#endif  // !_MSC_VER

GroupManageSetting::GroupManageSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GroupManageSetting)
}

void GroupManageSetting::InitAsDefaultInstance() {
}

GroupManageSetting::GroupManageSetting(const GroupManageSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GroupManageSetting)
}

void GroupManageSetting::SharedCtor() {
  _cached_size_ = 0;
  isclub_ = false;
  creditrefillaftergame_ = false;
  canchat_ = false;
  canseeothermember_ = false;
  rakepercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupManageSetting::~GroupManageSetting() {
  // @@protoc_insertion_point(destructor:msg.GroupManageSetting)
  SharedDtor();
}

void GroupManageSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupManageSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GroupManageSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupManageSetting_descriptor_;
}

const GroupManageSetting& GroupManageSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GroupManageSetting* GroupManageSetting::default_instance_ = NULL;

GroupManageSetting* GroupManageSetting::New() const {
  return new GroupManageSetting;
}

void GroupManageSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupManageSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(isclub_, rakepercent_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupManageSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GroupManageSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsClub = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclub_)));
          set_has_isclub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CreditRefillAfterGame;
        break;
      }

      // optional bool CreditRefillAfterGame = 2;
      case 2: {
        if (tag == 16) {
         parse_CreditRefillAfterGame:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &creditrefillaftergame_)));
          set_has_creditrefillaftergame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanChat;
        break;
      }

      // optional bool CanChat = 3;
      case 3: {
        if (tag == 24) {
         parse_CanChat:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canchat_)));
          set_has_canchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CanSeeOtherMember;
        break;
      }

      // optional bool CanSeeOtherMember = 4;
      case 4: {
        if (tag == 32) {
         parse_CanSeeOtherMember:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canseeothermember_)));
          set_has_canseeothermember();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RakePercent;
        break;
      }

      // optional int32 RakePercent = 5;
      case 5: {
        if (tag == 40) {
         parse_RakePercent:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rakepercent_)));
          set_has_rakepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GroupManageSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GroupManageSetting)
  return false;
#undef DO_
}

void GroupManageSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GroupManageSetting)
  // optional bool IsClub = 1;
  if (has_isclub()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->isclub(), output);
  }

  // optional bool CreditRefillAfterGame = 2;
  if (has_creditrefillaftergame()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->creditrefillaftergame(), output);
  }

  // optional bool CanChat = 3;
  if (has_canchat()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->canchat(), output);
  }

  // optional bool CanSeeOtherMember = 4;
  if (has_canseeothermember()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->canseeothermember(), output);
  }

  // optional int32 RakePercent = 5;
  if (has_rakepercent()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->rakepercent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GroupManageSetting)
}

::google_public::protobuf::uint8* GroupManageSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupManageSetting)
  // optional bool IsClub = 1;
  if (has_isclub()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isclub(), target);
  }

  // optional bool CreditRefillAfterGame = 2;
  if (has_creditrefillaftergame()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->creditrefillaftergame(), target);
  }

  // optional bool CanChat = 3;
  if (has_canchat()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canchat(), target);
  }

  // optional bool CanSeeOtherMember = 4;
  if (has_canseeothermember()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canseeothermember(), target);
  }

  // optional int32 RakePercent = 5;
  if (has_rakepercent()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rakepercent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupManageSetting)
  return target;
}

int GroupManageSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsClub = 1;
    if (has_isclub()) {
      total_size += 1 + 1;
    }

    // optional bool CreditRefillAfterGame = 2;
    if (has_creditrefillaftergame()) {
      total_size += 1 + 1;
    }

    // optional bool CanChat = 3;
    if (has_canchat()) {
      total_size += 1 + 1;
    }

    // optional bool CanSeeOtherMember = 4;
    if (has_canseeothermember()) {
      total_size += 1 + 1;
    }

    // optional int32 RakePercent = 5;
    if (has_rakepercent()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->rakepercent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupManageSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupManageSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GroupManageSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupManageSetting::MergeFrom(const GroupManageSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isclub()) {
      set_isclub(from.isclub());
    }
    if (from.has_creditrefillaftergame()) {
      set_creditrefillaftergame(from.creditrefillaftergame());
    }
    if (from.has_canchat()) {
      set_canchat(from.canchat());
    }
    if (from.has_canseeothermember()) {
      set_canseeothermember(from.canseeothermember());
    }
    if (from.has_rakepercent()) {
      set_rakepercent(from.rakepercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupManageSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupManageSetting::CopyFrom(const GroupManageSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupManageSetting::IsInitialized() const {

  return true;
}

void GroupManageSetting::Swap(GroupManageSetting* other) {
  if (other != this) {
    std::swap(isclub_, other->isclub_);
    std::swap(creditrefillaftergame_, other->creditrefillaftergame_);
    std::swap(canchat_, other->canchat_);
    std::swap(canseeothermember_, other->canseeothermember_);
    std::swap(rakepercent_, other->rakepercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GroupManageSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GroupManageSetting_descriptor_;
  metadata.reflection = GroupManageSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_146_GetGroupDetailInfo_DOWN::kResponseFieldNumber;
const int Processor_146_GetGroupDetailInfo_DOWN::kGroupInfoFieldNumber;
const int Processor_146_GetGroupDetailInfo_DOWN::kGroupUserInfoFieldNumber;
const int Processor_146_GetGroupDetailInfo_DOWN::kSettingFieldNumber;
const int Processor_146_GetGroupDetailInfo_DOWN::kPermissionFieldNumber;
const int Processor_146_GetGroupDetailInfo_DOWN::kManageSettingFieldNumber;
#endif  // !_MSC_VER

Processor_146_GetGroupDetailInfo_DOWN::Processor_146_GetGroupDetailInfo_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_146_GetGroupDetailInfo_DOWN)
}

void Processor_146_GetGroupDetailInfo_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
  setting_ = const_cast< ::msg::GroupSetting*>(&::msg::GroupSetting::default_instance());
  permission_ = const_cast< ::msg::GroupPermission*>(&::msg::GroupPermission::default_instance());
  managesetting_ = const_cast< ::msg::GroupManageSetting*>(&::msg::GroupManageSetting::default_instance());
}

Processor_146_GetGroupDetailInfo_DOWN::Processor_146_GetGroupDetailInfo_DOWN(const Processor_146_GetGroupDetailInfo_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_146_GetGroupDetailInfo_DOWN)
}

void Processor_146_GetGroupDetailInfo_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  groupinfo_ = NULL;
  setting_ = NULL;
  permission_ = NULL;
  managesetting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_146_GetGroupDetailInfo_DOWN::~Processor_146_GetGroupDetailInfo_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_146_GetGroupDetailInfo_DOWN)
  SharedDtor();
}

void Processor_146_GetGroupDetailInfo_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete groupinfo_;
    delete setting_;
    delete permission_;
    delete managesetting_;
  }
}

void Processor_146_GetGroupDetailInfo_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_146_GetGroupDetailInfo_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_146_GetGroupDetailInfo_DOWN_descriptor_;
}

const Processor_146_GetGroupDetailInfo_DOWN& Processor_146_GetGroupDetailInfo_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_146_GetGroupDetailInfo_DOWN* Processor_146_GetGroupDetailInfo_DOWN::default_instance_ = NULL;

Processor_146_GetGroupDetailInfo_DOWN* Processor_146_GetGroupDetailInfo_DOWN::New() const {
  return new Processor_146_GetGroupDetailInfo_DOWN;
}

void Processor_146_GetGroupDetailInfo_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
    if (has_setting()) {
      if (setting_ != NULL) setting_->::msg::GroupSetting::Clear();
    }
    if (has_permission()) {
      if (permission_ != NULL) permission_->::msg::GroupPermission::Clear();
    }
    if (has_managesetting()) {
      if (managesetting_ != NULL) managesetting_->::msg::GroupManageSetting::Clear();
    }
  }
  groupuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_146_GetGroupDetailInfo_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_146_GetGroupDetailInfo_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupInfo;
        break;
      }

      // optional .msg.GroupInfo GroupInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupUserInfo;
        break;
      }

      // repeated .msg.GroupUserInfo GroupUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_GroupUserInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupUserInfo;
        if (input->ExpectTag(34)) goto parse_Setting;
        break;
      }

      // optional .msg.GroupSetting Setting = 4;
      case 4: {
        if (tag == 34) {
         parse_Setting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Permission;
        break;
      }

      // optional .msg.GroupPermission Permission = 5;
      case 5: {
        if (tag == 42) {
         parse_Permission:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ManageSetting;
        break;
      }

      // optional .msg.GroupManageSetting ManageSetting = 6;
      case 6: {
        if (tag == 50) {
         parse_ManageSetting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managesetting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_146_GetGroupDetailInfo_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_146_GetGroupDetailInfo_DOWN)
  return false;
#undef DO_
}

void Processor_146_GetGroupDetailInfo_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_146_GetGroupDetailInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupinfo(), output);
  }

  // repeated .msg.GroupUserInfo GroupUserInfo = 3;
  for (int i = 0; i < this->groupuserinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->groupuserinfo(i), output);
  }

  // optional .msg.GroupSetting Setting = 4;
  if (has_setting()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->setting(), output);
  }

  // optional .msg.GroupPermission Permission = 5;
  if (has_permission()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->permission(), output);
  }

  // optional .msg.GroupManageSetting ManageSetting = 6;
  if (has_managesetting()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->managesetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_146_GetGroupDetailInfo_DOWN)
}

::google_public::protobuf::uint8* Processor_146_GetGroupDetailInfo_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_146_GetGroupDetailInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.GroupInfo GroupInfo = 2;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupinfo(), target);
  }

  // repeated .msg.GroupUserInfo GroupUserInfo = 3;
  for (int i = 0; i < this->groupuserinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->groupuserinfo(i), target);
  }

  // optional .msg.GroupSetting Setting = 4;
  if (has_setting()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->setting(), target);
  }

  // optional .msg.GroupPermission Permission = 5;
  if (has_permission()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->permission(), target);
  }

  // optional .msg.GroupManageSetting ManageSetting = 6;
  if (has_managesetting()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->managesetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_146_GetGroupDetailInfo_DOWN)
  return target;
}

int Processor_146_GetGroupDetailInfo_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.GroupInfo GroupInfo = 2;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional .msg.GroupSetting Setting = 4;
    if (has_setting()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

    // optional .msg.GroupPermission Permission = 5;
    if (has_permission()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permission());
    }

    // optional .msg.GroupManageSetting ManageSetting = 6;
    if (has_managesetting()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->managesetting());
    }

  }
  // repeated .msg.GroupUserInfo GroupUserInfo = 3;
  total_size += 1 * this->groupuserinfo_size();
  for (int i = 0; i < this->groupuserinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupuserinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_146_GetGroupDetailInfo_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_146_GetGroupDetailInfo_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_146_GetGroupDetailInfo_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_146_GetGroupDetailInfo_DOWN::MergeFrom(const Processor_146_GetGroupDetailInfo_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupuserinfo_.MergeFrom(from.groupuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
    if (from.has_setting()) {
      mutable_setting()->::msg::GroupSetting::MergeFrom(from.setting());
    }
    if (from.has_permission()) {
      mutable_permission()->::msg::GroupPermission::MergeFrom(from.permission());
    }
    if (from.has_managesetting()) {
      mutable_managesetting()->::msg::GroupManageSetting::MergeFrom(from.managesetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_146_GetGroupDetailInfo_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_146_GetGroupDetailInfo_DOWN::CopyFrom(const Processor_146_GetGroupDetailInfo_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_146_GetGroupDetailInfo_DOWN::IsInitialized() const {

  return true;
}

void Processor_146_GetGroupDetailInfo_DOWN::Swap(Processor_146_GetGroupDetailInfo_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(groupinfo_, other->groupinfo_);
    groupuserinfo_.Swap(&other->groupuserinfo_);
    std::swap(setting_, other->setting_);
    std::swap(permission_, other->permission_);
    std::swap(managesetting_, other->managesetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_146_GetGroupDetailInfo_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_146_GetGroupDetailInfo_DOWN_descriptor_;
  metadata.reflection = Processor_146_GetGroupDetailInfo_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_147_SetGroupManageSetting::kGroupIDFieldNumber;
const int Processor_147_SetGroupManageSetting::kSettingFieldNumber;
#endif  // !_MSC_VER

Processor_147_SetGroupManageSetting::Processor_147_SetGroupManageSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_147_SetGroupManageSetting)
}

void Processor_147_SetGroupManageSetting::InitAsDefaultInstance() {
  setting_ = const_cast< ::msg::GroupManageSetting*>(&::msg::GroupManageSetting::default_instance());
}

Processor_147_SetGroupManageSetting::Processor_147_SetGroupManageSetting(const Processor_147_SetGroupManageSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_147_SetGroupManageSetting)
}

void Processor_147_SetGroupManageSetting::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  setting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_147_SetGroupManageSetting::~Processor_147_SetGroupManageSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_147_SetGroupManageSetting)
  SharedDtor();
}

void Processor_147_SetGroupManageSetting::SharedDtor() {
  if (this != default_instance_) {
    delete setting_;
  }
}

void Processor_147_SetGroupManageSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_147_SetGroupManageSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_147_SetGroupManageSetting_descriptor_;
}

const Processor_147_SetGroupManageSetting& Processor_147_SetGroupManageSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_147_SetGroupManageSetting* Processor_147_SetGroupManageSetting::default_instance_ = NULL;

Processor_147_SetGroupManageSetting* Processor_147_SetGroupManageSetting::New() const {
  return new Processor_147_SetGroupManageSetting;
}

void Processor_147_SetGroupManageSetting::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    groupid_ = 0;
    if (has_setting()) {
      if (setting_ != NULL) setting_->::msg::GroupManageSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_147_SetGroupManageSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_147_SetGroupManageSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Setting;
        break;
      }

      // optional .msg.GroupManageSetting Setting = 2;
      case 2: {
        if (tag == 18) {
         parse_Setting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_147_SetGroupManageSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_147_SetGroupManageSetting)
  return false;
#undef DO_
}

void Processor_147_SetGroupManageSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_147_SetGroupManageSetting)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional .msg.GroupManageSetting Setting = 2;
  if (has_setting()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_147_SetGroupManageSetting)
}

::google_public::protobuf::uint8* Processor_147_SetGroupManageSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_147_SetGroupManageSetting)
  // optional int32 GroupID = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional .msg.GroupManageSetting Setting = 2;
  if (has_setting()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_147_SetGroupManageSetting)
  return target;
}

int Processor_147_SetGroupManageSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional .msg.GroupManageSetting Setting = 2;
    if (has_setting()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_147_SetGroupManageSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_147_SetGroupManageSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_147_SetGroupManageSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_147_SetGroupManageSetting::MergeFrom(const Processor_147_SetGroupManageSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_setting()) {
      mutable_setting()->::msg::GroupManageSetting::MergeFrom(from.setting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_147_SetGroupManageSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_147_SetGroupManageSetting::CopyFrom(const Processor_147_SetGroupManageSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_147_SetGroupManageSetting::IsInitialized() const {

  return true;
}

void Processor_147_SetGroupManageSetting::Swap(Processor_147_SetGroupManageSetting* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(setting_, other->setting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_147_SetGroupManageSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_147_SetGroupManageSetting_descriptor_;
  metadata.reflection = Processor_147_SetGroupManageSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_148_SetGroupAdmin::kGroupIdFieldNumber;
const int Processor_148_SetGroupAdmin::kUserIDFieldNumber;
const int Processor_148_SetGroupAdmin::kIsAdminFieldNumber;
#endif  // !_MSC_VER

Processor_148_SetGroupAdmin::Processor_148_SetGroupAdmin()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_148_SetGroupAdmin)
}

void Processor_148_SetGroupAdmin::InitAsDefaultInstance() {
}

Processor_148_SetGroupAdmin::Processor_148_SetGroupAdmin(const Processor_148_SetGroupAdmin& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_148_SetGroupAdmin)
}

void Processor_148_SetGroupAdmin::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  userid_ = 0;
  isadmin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_148_SetGroupAdmin::~Processor_148_SetGroupAdmin() {
  // @@protoc_insertion_point(destructor:msg.Processor_148_SetGroupAdmin)
  SharedDtor();
}

void Processor_148_SetGroupAdmin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_148_SetGroupAdmin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_148_SetGroupAdmin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_148_SetGroupAdmin_descriptor_;
}

const Processor_148_SetGroupAdmin& Processor_148_SetGroupAdmin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_148_SetGroupAdmin* Processor_148_SetGroupAdmin::default_instance_ = NULL;

Processor_148_SetGroupAdmin* Processor_148_SetGroupAdmin::New() const {
  return new Processor_148_SetGroupAdmin;
}

void Processor_148_SetGroupAdmin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_148_SetGroupAdmin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, isadmin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_148_SetGroupAdmin::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_148_SetGroupAdmin)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsAdmin;
        break;
      }

      // optional bool IsAdmin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsAdmin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadmin_)));
          set_has_isadmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_148_SetGroupAdmin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_148_SetGroupAdmin)
  return false;
#undef DO_
}

void Processor_148_SetGroupAdmin::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_148_SetGroupAdmin)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional bool IsAdmin = 3;
  if (has_isadmin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->isadmin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_148_SetGroupAdmin)
}

::google_public::protobuf::uint8* Processor_148_SetGroupAdmin::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_148_SetGroupAdmin)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional bool IsAdmin = 3;
  if (has_isadmin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isadmin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_148_SetGroupAdmin)
  return target;
}

int Processor_148_SetGroupAdmin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional bool IsAdmin = 3;
    if (has_isadmin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_148_SetGroupAdmin::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_148_SetGroupAdmin* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_148_SetGroupAdmin*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_148_SetGroupAdmin::MergeFrom(const Processor_148_SetGroupAdmin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_isadmin()) {
      set_isadmin(from.isadmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_148_SetGroupAdmin::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_148_SetGroupAdmin::CopyFrom(const Processor_148_SetGroupAdmin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_148_SetGroupAdmin::IsInitialized() const {

  return true;
}

void Processor_148_SetGroupAdmin::Swap(Processor_148_SetGroupAdmin* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(userid_, other->userid_);
    std::swap(isadmin_, other->isadmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_148_SetGroupAdmin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_148_SetGroupAdmin_descriptor_;
  metadata.reflection = Processor_148_SetGroupAdmin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomTypeInfo::kRoomTypeFieldNumber;
const int RoomTypeInfo::kRoomTypeNameFieldNumber;
#endif  // !_MSC_VER

RoomTypeInfo::RoomTypeInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoomTypeInfo)
}

void RoomTypeInfo::InitAsDefaultInstance() {
}

RoomTypeInfo::RoomTypeInfo(const RoomTypeInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.RoomTypeInfo)
}

void RoomTypeInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomtype_ = 0;
  roomtypename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomTypeInfo::~RoomTypeInfo() {
  // @@protoc_insertion_point(destructor:msg.RoomTypeInfo)
  SharedDtor();
}

void RoomTypeInfo::SharedDtor() {
  if (roomtypename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomtypename_;
  }
  if (this != default_instance_) {
  }
}

void RoomTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RoomTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomTypeInfo_descriptor_;
}

const RoomTypeInfo& RoomTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RoomTypeInfo* RoomTypeInfo::default_instance_ = NULL;

RoomTypeInfo* RoomTypeInfo::New() const {
  return new RoomTypeInfo;
}

void RoomTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomtype_ = 0;
    if (has_roomtypename()) {
      if (roomtypename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomtypename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomTypeInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.RoomTypeInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomType RoomType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomTypeName;
        break;
      }

      // optional string RoomTypeName = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomTypeName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtypename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtypename().data(), this->roomtypename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomtypename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.RoomTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.RoomTypeInfo)
  return false;
#undef DO_
}

void RoomTypeInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.RoomTypeInfo)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roomtype(), output);
  }

  // optional string RoomTypeName = 2;
  if (has_roomtypename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtypename().data(), this->roomtypename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomtypename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomtypename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.RoomTypeInfo)
}

::google_public::protobuf::uint8* RoomTypeInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoomTypeInfo)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roomtype(), target);
  }

  // optional string RoomTypeName = 2;
  if (has_roomtypename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtypename().data(), this->roomtypename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomtypename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomtypename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoomTypeInfo)
  return target;
}

int RoomTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomType RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional string RoomTypeName = 2;
    if (has_roomtypename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomtypename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomTypeInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomTypeInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RoomTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomTypeInfo::MergeFrom(const RoomTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomtypename()) {
      set_roomtypename(from.roomtypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomTypeInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomTypeInfo::CopyFrom(const RoomTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomTypeInfo::IsInitialized() const {

  return true;
}

void RoomTypeInfo::Swap(RoomTypeInfo* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomtypename_, other->roomtypename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RoomTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RoomTypeInfo_descriptor_;
  metadata.reflection = RoomTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kRoomIdFieldNumber;
const int RoomInfo::kRoomStatusFieldNumber;
const int RoomInfo::kRoomNameFieldNumber;
const int RoomInfo::kRoomTypeFieldNumber;
const int RoomInfo::kRoomNoteFieldNumber;
const int RoomInfo::kPlayerNumFieldNumber;
const int RoomInfo::kMaxPlayerNumFieldNumber;
const int RoomInfo::kGroupInfoFieldNumber;
const int RoomInfo::kIsTournamentFieldNumber;
const int RoomInfo::kStartTimeFieldNumber;
const int RoomInfo::kCreaterInfoFieldNumber;
const int RoomInfo::kEndTimeFieldNumber;
const int RoomInfo::kRoomIpFieldNumber;
const int RoomInfo::kRoomPortFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
  roomtype_ = const_cast< ::msg::RoomTypeInfo*>(&::msg::RoomTypeInfo::default_instance());
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
  createrinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  roomstatus_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_ = NULL;
  roomnote_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  playernum_ = 0;
  maxplayernum_ = 0;
  groupinfo_ = NULL;
  istournament_ = false;
  starttime_ = GOOGLE_LONGLONG(0);
  createrinfo_ = NULL;
  endtime_ = GOOGLE_LONGLONG(0);
  roomip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:msg.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomnote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomnote_;
  }
  if (roomip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomip_;
  }
  if (this != default_instance_) {
    delete roomtype_;
    delete groupinfo_;
    delete createrinfo_;
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roomid_, roomstatus_);
    ZR_(playernum_, maxplayernum_);
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_roomtype()) {
      if (roomtype_ != NULL) roomtype_->::msg::RoomTypeInfo::Clear();
    }
    if (has_roomnote()) {
      if (roomnote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomnote_->clear();
      }
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(istournament_, endtime_);
    starttime_ = GOOGLE_LONGLONG(0);
    if (has_createrinfo()) {
      if (createrinfo_ != NULL) createrinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_roomip()) {
      if (roomip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.RoomInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomStatus;
        break;
      }

      // optional .msg.RoomStatus RoomStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomStatus_IsValid(value)) {
            set_roomstatus(static_cast< ::msg::RoomStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoomType;
        break;
      }

      // optional .msg.RoomTypeInfo RoomType = 4;
      case 4: {
        if (tag == 34) {
         parse_RoomType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RoomNote;
        break;
      }

      // optional string RoomNote = 5;
      case 5: {
        if (tag == 42) {
         parse_RoomNote:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomnote()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomnote().data(), this->roomnote().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomnote");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PlayerNum;
        break;
      }

      // optional int32 PlayerNum = 6;
      case 6: {
        if (tag == 48) {
         parse_PlayerNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MaxPlayerNum;
        break;
      }

      // optional int32 MaxPlayerNum = 7;
      case 7: {
        if (tag == 56) {
         parse_MaxPlayerNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GroupInfo;
        break;
      }

      // optional .msg.GroupInfo GroupInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_GroupInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 9;
      case 9: {
        if (tag == 72) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_StartTime;
        break;
      }

      // optional int64 StartTime = 10;
      case 10: {
        if (tag == 80) {
         parse_StartTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CreaterInfo;
        break;
      }

      // optional .msg.UserDetailInfo CreaterInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_CreaterInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 12;
      case 12: {
        if (tag == 96) {
         parse_EndTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_RoomIp;
        break;
      }

      // optional string RoomIp = 13;
      case 13: {
        if (tag == 106) {
         parse_RoomIp:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomip()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomip().data(), this->roomip().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RoomPort;
        break;
      }

      // optional int32 RoomPort = 14;
      case 14: {
        if (tag == 112) {
         parse_RoomPort:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomport_)));
          set_has_roomport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.RoomInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.RoomStatus RoomStatus = 2;
  if (has_roomstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->roomstatus(), output);
  }

  // optional string RoomName = 3;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // optional .msg.RoomTypeInfo RoomType = 4;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomtype(), output);
  }

  // optional string RoomNote = 5;
  if (has_roomnote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnote().data(), this->roomnote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomnote");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->roomnote(), output);
  }

  // optional int32 PlayerNum = 6;
  if (has_playernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->playernum(), output);
  }

  // optional int32 MaxPlayerNum = 7;
  if (has_maxplayernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxplayernum(), output);
  }

  // optional .msg.GroupInfo GroupInfo = 8;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->groupinfo(), output);
  }

  // optional bool IsTournament = 9;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(9, this->istournament(), output);
  }

  // optional int64 StartTime = 10;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(10, this->starttime(), output);
  }

  // optional .msg.UserDetailInfo CreaterInfo = 11;
  if (has_createrinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->createrinfo(), output);
  }

  // optional int64 EndTime = 12;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(12, this->endtime(), output);
  }

  // optional string RoomIp = 13;
  if (has_roomip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomip().data(), this->roomip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomip");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->roomip(), output);
  }

  // optional int32 RoomPort = 14;
  if (has_roomport()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(14, this->roomport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.RoomInfo)
}

::google_public::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoomInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.RoomStatus RoomStatus = 2;
  if (has_roomstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->roomstatus(), target);
  }

  // optional string RoomName = 3;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // optional .msg.RoomTypeInfo RoomType = 4;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomtype(), target);
  }

  // optional string RoomNote = 5;
  if (has_roomnote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnote().data(), this->roomnote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomnote");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomnote(), target);
  }

  // optional int32 PlayerNum = 6;
  if (has_playernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playernum(), target);
  }

  // optional int32 MaxPlayerNum = 7;
  if (has_maxplayernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxplayernum(), target);
  }

  // optional .msg.GroupInfo GroupInfo = 8;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->groupinfo(), target);
  }

  // optional bool IsTournament = 9;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->istournament(), target);
  }

  // optional int64 StartTime = 10;
  if (has_starttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->starttime(), target);
  }

  // optional .msg.UserDetailInfo CreaterInfo = 11;
  if (has_createrinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->createrinfo(), target);
  }

  // optional int64 EndTime = 12;
  if (has_endtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->endtime(), target);
  }

  // optional string RoomIp = 13;
  if (has_roomip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomip().data(), this->roomip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomip");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->roomip(), target);
  }

  // optional int32 RoomPort = 14;
  if (has_roomport()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->roomport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.RoomStatus RoomStatus = 2;
    if (has_roomstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomstatus());
    }

    // optional string RoomName = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional .msg.RoomTypeInfo RoomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomtype());
    }

    // optional string RoomNote = 5;
    if (has_roomnote()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomnote());
    }

    // optional int32 PlayerNum = 6;
    if (has_playernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

    // optional int32 MaxPlayerNum = 7;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional .msg.GroupInfo GroupInfo = 8;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsTournament = 9;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

    // optional int64 StartTime = 10;
    if (has_starttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional .msg.UserDetailInfo CreaterInfo = 11;
    if (has_createrinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createrinfo());
    }

    // optional int64 EndTime = 12;
    if (has_endtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional string RoomIp = 13;
    if (has_roomip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomip());
    }

    // optional int32 RoomPort = 14;
    if (has_roomport()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomstatus()) {
      set_roomstatus(from.roomstatus());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomtype()) {
      mutable_roomtype()->::msg::RoomTypeInfo::MergeFrom(from.roomtype());
    }
    if (from.has_roomnote()) {
      set_roomnote(from.roomnote());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_createrinfo()) {
      mutable_createrinfo()->::msg::UserDetailInfo::MergeFrom(from.createrinfo());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_roomip()) {
      set_roomip(from.roomip());
    }
    if (from.has_roomport()) {
      set_roomport(from.roomport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomstatus_, other->roomstatus_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomnote_, other->roomnote_);
    std::swap(playernum_, other->playernum_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(istournament_, other->istournament_);
    std::swap(starttime_, other->starttime_);
    std::swap(createrinfo_, other->createrinfo_);
    std::swap(endtime_, other->endtime_);
    std::swap(roomip_, other->roomip_);
    std::swap(roomport_, other->roomport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_150_GetRoomInfo_UP::kGroupIdFieldNumber;
#endif  // !_MSC_VER

Processor_150_GetRoomInfo_UP::Processor_150_GetRoomInfo_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_150_GetRoomInfo_UP)
}

void Processor_150_GetRoomInfo_UP::InitAsDefaultInstance() {
}

Processor_150_GetRoomInfo_UP::Processor_150_GetRoomInfo_UP(const Processor_150_GetRoomInfo_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_150_GetRoomInfo_UP)
}

void Processor_150_GetRoomInfo_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_150_GetRoomInfo_UP::~Processor_150_GetRoomInfo_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_150_GetRoomInfo_UP)
  SharedDtor();
}

void Processor_150_GetRoomInfo_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_150_GetRoomInfo_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_150_GetRoomInfo_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_150_GetRoomInfo_UP_descriptor_;
}

const Processor_150_GetRoomInfo_UP& Processor_150_GetRoomInfo_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_150_GetRoomInfo_UP* Processor_150_GetRoomInfo_UP::default_instance_ = NULL;

Processor_150_GetRoomInfo_UP* Processor_150_GetRoomInfo_UP::New() const {
  return new Processor_150_GetRoomInfo_UP;
}

void Processor_150_GetRoomInfo_UP::Clear() {
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_150_GetRoomInfo_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_150_GetRoomInfo_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_150_GetRoomInfo_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_150_GetRoomInfo_UP)
  return false;
#undef DO_
}

void Processor_150_GetRoomInfo_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_150_GetRoomInfo_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_150_GetRoomInfo_UP)
}

::google_public::protobuf::uint8* Processor_150_GetRoomInfo_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_150_GetRoomInfo_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_150_GetRoomInfo_UP)
  return target;
}

int Processor_150_GetRoomInfo_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_150_GetRoomInfo_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_150_GetRoomInfo_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_150_GetRoomInfo_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_150_GetRoomInfo_UP::MergeFrom(const Processor_150_GetRoomInfo_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_150_GetRoomInfo_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_150_GetRoomInfo_UP::CopyFrom(const Processor_150_GetRoomInfo_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_150_GetRoomInfo_UP::IsInitialized() const {

  return true;
}

void Processor_150_GetRoomInfo_UP::Swap(Processor_150_GetRoomInfo_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_150_GetRoomInfo_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_150_GetRoomInfo_UP_descriptor_;
  metadata.reflection = Processor_150_GetRoomInfo_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_150_GetRoomInfo_DOWN::kResponseFieldNumber;
const int Processor_150_GetRoomInfo_DOWN::kRoomServerFieldNumber;
const int Processor_150_GetRoomInfo_DOWN::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

Processor_150_GetRoomInfo_DOWN::Processor_150_GetRoomInfo_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_150_GetRoomInfo_DOWN)
}

void Processor_150_GetRoomInfo_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  roomserver_ = const_cast< ::msg::ServerInfo*>(&::msg::ServerInfo::default_instance());
}

Processor_150_GetRoomInfo_DOWN::Processor_150_GetRoomInfo_DOWN(const Processor_150_GetRoomInfo_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_150_GetRoomInfo_DOWN)
}

void Processor_150_GetRoomInfo_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  roomserver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_150_GetRoomInfo_DOWN::~Processor_150_GetRoomInfo_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_150_GetRoomInfo_DOWN)
  SharedDtor();
}

void Processor_150_GetRoomInfo_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete roomserver_;
  }
}

void Processor_150_GetRoomInfo_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_150_GetRoomInfo_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_150_GetRoomInfo_DOWN_descriptor_;
}

const Processor_150_GetRoomInfo_DOWN& Processor_150_GetRoomInfo_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_150_GetRoomInfo_DOWN* Processor_150_GetRoomInfo_DOWN::default_instance_ = NULL;

Processor_150_GetRoomInfo_DOWN* Processor_150_GetRoomInfo_DOWN::New() const {
  return new Processor_150_GetRoomInfo_DOWN;
}

void Processor_150_GetRoomInfo_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_roomserver()) {
      if (roomserver_ != NULL) roomserver_->::msg::ServerInfo::Clear();
    }
  }
  roominfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_150_GetRoomInfo_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_150_GetRoomInfo_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomServer;
        break;
      }

      // optional .msg.ServerInfo RoomServer = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomServer:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomInfo;
        break;
      }

      // repeated .msg.RoomInfo RoomInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_150_GetRoomInfo_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_150_GetRoomInfo_DOWN)
  return false;
#undef DO_
}

void Processor_150_GetRoomInfo_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_150_GetRoomInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.ServerInfo RoomServer = 2;
  if (has_roomserver()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomserver(), output);
  }

  // repeated .msg.RoomInfo RoomInfo = 3;
  for (int i = 0; i < this->roominfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roominfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_150_GetRoomInfo_DOWN)
}

::google_public::protobuf::uint8* Processor_150_GetRoomInfo_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_150_GetRoomInfo_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.ServerInfo RoomServer = 2;
  if (has_roomserver()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomserver(), target);
  }

  // repeated .msg.RoomInfo RoomInfo = 3;
  for (int i = 0; i < this->roominfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roominfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_150_GetRoomInfo_DOWN)
  return target;
}

int Processor_150_GetRoomInfo_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.ServerInfo RoomServer = 2;
    if (has_roomserver()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserver());
    }

  }
  // repeated .msg.RoomInfo RoomInfo = 3;
  total_size += 1 * this->roominfo_size();
  for (int i = 0; i < this->roominfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_150_GetRoomInfo_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_150_GetRoomInfo_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_150_GetRoomInfo_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_150_GetRoomInfo_DOWN::MergeFrom(const Processor_150_GetRoomInfo_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  roominfo_.MergeFrom(from.roominfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_roomserver()) {
      mutable_roomserver()->::msg::ServerInfo::MergeFrom(from.roomserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_150_GetRoomInfo_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_150_GetRoomInfo_DOWN::CopyFrom(const Processor_150_GetRoomInfo_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_150_GetRoomInfo_DOWN::IsInitialized() const {

  return true;
}

void Processor_150_GetRoomInfo_DOWN::Swap(Processor_150_GetRoomInfo_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(roomserver_, other->roomserver_);
    roominfo_.Swap(&other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_150_GetRoomInfo_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_150_GetRoomInfo_DOWN_descriptor_;
  metadata.reflection = Processor_150_GetRoomInfo_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomInfo::kRoomTypeFieldNumber;
const int CreateRoomInfo::kRoomPropFieldNumber;
const int CreateRoomInfo::kSupportTournamentFieldNumber;
#endif  // !_MSC_VER

CreateRoomInfo::CreateRoomInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CreateRoomInfo)
}

void CreateRoomInfo::InitAsDefaultInstance() {
  roomtype_ = const_cast< ::msg::RoomTypeInfo*>(&::msg::RoomTypeInfo::default_instance());
  roomprop_ = const_cast< ::msg::RoomProp*>(&::msg::RoomProp::default_instance());
}

CreateRoomInfo::CreateRoomInfo(const CreateRoomInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CreateRoomInfo)
}

void CreateRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = NULL;
  roomprop_ = NULL;
  supporttournament_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomInfo::~CreateRoomInfo() {
  // @@protoc_insertion_point(destructor:msg.CreateRoomInfo)
  SharedDtor();
}

void CreateRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roomtype_;
    delete roomprop_;
  }
}

void CreateRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CreateRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomInfo_descriptor_;
}

const CreateRoomInfo& CreateRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CreateRoomInfo* CreateRoomInfo::default_instance_ = NULL;

CreateRoomInfo* CreateRoomInfo::New() const {
  return new CreateRoomInfo;
}

void CreateRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_roomtype()) {
      if (roomtype_ != NULL) roomtype_->::msg::RoomTypeInfo::Clear();
    }
    if (has_roomprop()) {
      if (roomprop_ != NULL) roomprop_->::msg::RoomProp::Clear();
    }
    supporttournament_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CreateRoomInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomTypeInfo RoomType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomProp;
        break;
      }

      // optional .msg.RoomProp RoomProp = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomProp:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportTournament;
        break;
      }

      // optional bool SupportTournament = 3;
      case 3: {
        if (tag == 24) {
         parse_SupportTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supporttournament_)));
          set_has_supporttournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CreateRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CreateRoomInfo)
  return false;
#undef DO_
}

void CreateRoomInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CreateRoomInfo)
  // optional .msg.RoomTypeInfo RoomType = 1;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomtype(), output);
  }

  // optional .msg.RoomProp RoomProp = 2;
  if (has_roomprop()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomprop(), output);
  }

  // optional bool SupportTournament = 3;
  if (has_supporttournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->supporttournament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CreateRoomInfo)
}

::google_public::protobuf::uint8* CreateRoomInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreateRoomInfo)
  // optional .msg.RoomTypeInfo RoomType = 1;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomtype(), target);
  }

  // optional .msg.RoomProp RoomProp = 2;
  if (has_roomprop()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomprop(), target);
  }

  // optional bool SupportTournament = 3;
  if (has_supporttournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->supporttournament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreateRoomInfo)
  return target;
}

int CreateRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomTypeInfo RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomtype());
    }

    // optional .msg.RoomProp RoomProp = 2;
    if (has_roomprop()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomprop());
    }

    // optional bool SupportTournament = 3;
    if (has_supporttournament()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CreateRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomInfo::MergeFrom(const CreateRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      mutable_roomtype()->::msg::RoomTypeInfo::MergeFrom(from.roomtype());
    }
    if (from.has_roomprop()) {
      mutable_roomprop()->::msg::RoomProp::MergeFrom(from.roomprop());
    }
    if (from.has_supporttournament()) {
      set_supporttournament(from.supporttournament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomInfo::CopyFrom(const CreateRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomInfo::IsInitialized() const {

  return true;
}

void CreateRoomInfo::Swap(CreateRoomInfo* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomprop_, other->roomprop_);
    std::swap(supporttournament_, other->supporttournament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CreateRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomInfo_descriptor_;
  metadata.reflection = CreateRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlindLevel::kSmallBlindFieldNumber;
const int BlindLevel::kBigBlindFieldNumber;
const int BlindLevel::kAnteFieldNumber;
const int BlindLevel::kLastTimeFieldNumber;
const int BlindLevel::kRestTimeFieldNumber;
#endif  // !_MSC_VER

BlindLevel::BlindLevel()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.BlindLevel)
}

void BlindLevel::InitAsDefaultInstance() {
}

BlindLevel::BlindLevel(const BlindLevel& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.BlindLevel)
}

void BlindLevel::SharedCtor() {
  _cached_size_ = 0;
  smallblind_ = 0;
  bigblind_ = 0;
  ante_ = 0;
  lasttime_ = 0;
  resttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlindLevel::~BlindLevel() {
  // @@protoc_insertion_point(destructor:msg.BlindLevel)
  SharedDtor();
}

void BlindLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlindLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* BlindLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlindLevel_descriptor_;
}

const BlindLevel& BlindLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

BlindLevel* BlindLevel::default_instance_ = NULL;

BlindLevel* BlindLevel::New() const {
  return new BlindLevel;
}

void BlindLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlindLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(smallblind_, resttime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlindLevel::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.BlindLevel)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SmallBlind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallblind_)));
          set_has_smallblind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BigBlind;
        break;
      }

      // optional int32 BigBlind = 2;
      case 2: {
        if (tag == 16) {
         parse_BigBlind:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigblind_)));
          set_has_bigblind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Ante;
        break;
      }

      // optional int32 Ante = 3;
      case 3: {
        if (tag == 24) {
         parse_Ante:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ante_)));
          set_has_ante();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 4;
      case 4: {
        if (tag == 32) {
         parse_LastTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RestTime;
        break;
      }

      // optional int32 RestTime = 5;
      case 5: {
        if (tag == 40) {
         parse_RestTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resttime_)));
          set_has_resttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.BlindLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.BlindLevel)
  return false;
#undef DO_
}

void BlindLevel::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.BlindLevel)
  // optional int32 SmallBlind = 1;
  if (has_smallblind()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->smallblind(), output);
  }

  // optional int32 BigBlind = 2;
  if (has_bigblind()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->bigblind(), output);
  }

  // optional int32 Ante = 3;
  if (has_ante()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->ante(), output);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasttime(), output);
  }

  // optional int32 RestTime = 5;
  if (has_resttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->resttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.BlindLevel)
}

::google_public::protobuf::uint8* BlindLevel::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BlindLevel)
  // optional int32 SmallBlind = 1;
  if (has_smallblind()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->smallblind(), target);
  }

  // optional int32 BigBlind = 2;
  if (has_bigblind()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bigblind(), target);
  }

  // optional int32 Ante = 3;
  if (has_ante()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ante(), target);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasttime(), target);
  }

  // optional int32 RestTime = 5;
  if (has_resttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BlindLevel)
  return target;
}

int BlindLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SmallBlind = 1;
    if (has_smallblind()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->smallblind());
    }

    // optional int32 BigBlind = 2;
    if (has_bigblind()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bigblind());
    }

    // optional int32 Ante = 3;
    if (has_ante()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ante());
    }

    // optional int32 LastTime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 RestTime = 5;
    if (has_resttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->resttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlindLevel::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlindLevel* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const BlindLevel*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlindLevel::MergeFrom(const BlindLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smallblind()) {
      set_smallblind(from.smallblind());
    }
    if (from.has_bigblind()) {
      set_bigblind(from.bigblind());
    }
    if (from.has_ante()) {
      set_ante(from.ante());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_resttime()) {
      set_resttime(from.resttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlindLevel::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlindLevel::CopyFrom(const BlindLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlindLevel::IsInitialized() const {

  return true;
}

void BlindLevel::Swap(BlindLevel* other) {
  if (other != this) {
    std::swap(smallblind_, other->smallblind_);
    std::swap(bigblind_, other->bigblind_);
    std::swap(ante_, other->ante_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(resttime_, other->resttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata BlindLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = BlindLevel_descriptor_;
  metadata.reflection = BlindLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentLevel::kLevelFieldNumber;
#endif  // !_MSC_VER

TournamentLevel::TournamentLevel()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TournamentLevel)
}

void TournamentLevel::InitAsDefaultInstance() {
}

TournamentLevel::TournamentLevel(const TournamentLevel& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TournamentLevel)
}

void TournamentLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentLevel::~TournamentLevel() {
  // @@protoc_insertion_point(destructor:msg.TournamentLevel)
  SharedDtor();
}

void TournamentLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TournamentLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TournamentLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentLevel_descriptor_;
}

const TournamentLevel& TournamentLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TournamentLevel* TournamentLevel::default_instance_ = NULL;

TournamentLevel* TournamentLevel::New() const {
  return new TournamentLevel;
}

void TournamentLevel::Clear() {
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentLevel::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TournamentLevel)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.BlindLevel Level = 1;
      case 1: {
        if (tag == 10) {
         parse_Level:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TournamentLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TournamentLevel)
  return false;
#undef DO_
}

void TournamentLevel::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TournamentLevel)
  // repeated .msg.BlindLevel Level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TournamentLevel)
}

::google_public::protobuf::uint8* TournamentLevel::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentLevel)
  // repeated .msg.BlindLevel Level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentLevel)
  return target;
}

int TournamentLevel::ByteSize() const {
  int total_size = 0;

  // repeated .msg.BlindLevel Level = 1;
  total_size += 1 * this->level_size();
  for (int i = 0; i < this->level_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentLevel::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentLevel* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TournamentLevel*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentLevel::MergeFrom(const TournamentLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentLevel::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentLevel::CopyFrom(const TournamentLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentLevel::IsInitialized() const {

  return true;
}

void TournamentLevel::Swap(TournamentLevel* other) {
  if (other != this) {
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TournamentLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TournamentLevel_descriptor_;
  metadata.reflection = TournamentLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeLevel::kPrizePercentFieldNumber;
const int PrizeLevel::kMinRankFieldNumber;
const int PrizeLevel::kMaxRankFieldNumber;
const int PrizeLevel::kOtherPrizeFieldNumber;
#endif  // !_MSC_VER

PrizeLevel::PrizeLevel()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PrizeLevel)
}

void PrizeLevel::InitAsDefaultInstance() {
}

PrizeLevel::PrizeLevel(const PrizeLevel& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PrizeLevel)
}

void PrizeLevel::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prizepercent_ = 0;
  minrank_ = 0;
  maxrank_ = 0;
  otherprize_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeLevel::~PrizeLevel() {
  // @@protoc_insertion_point(destructor:msg.PrizeLevel)
  SharedDtor();
}

void PrizeLevel::SharedDtor() {
  if (otherprize_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete otherprize_;
  }
  if (this != default_instance_) {
  }
}

void PrizeLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PrizeLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeLevel_descriptor_;
}

const PrizeLevel& PrizeLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PrizeLevel* PrizeLevel::default_instance_ = NULL;

PrizeLevel* PrizeLevel::New() const {
  return new PrizeLevel;
}

void PrizeLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrizeLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(prizepercent_, minrank_);
    maxrank_ = 0;
    if (has_otherprize()) {
      if (otherprize_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        otherprize_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeLevel::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PrizeLevel)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PrizePercent = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizepercent_)));
          set_has_prizepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MinRank;
        break;
      }

      // optional int32 MinRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MinRank:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minrank_)));
          set_has_minrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxRank;
        break;
      }

      // optional int32 MaxRank = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxRank:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_OtherPrize;
        break;
      }

      // optional string OtherPrize = 4;
      case 4: {
        if (tag == 34) {
         parse_OtherPrize:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherprize()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->otherprize().data(), this->otherprize().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "otherprize");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PrizeLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PrizeLevel)
  return false;
#undef DO_
}

void PrizeLevel::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PrizeLevel)
  // optional int32 PrizePercent = 1;
  if (has_prizepercent()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->prizepercent(), output);
  }

  // optional int32 MinRank = 2;
  if (has_minrank()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->minrank(), output);
  }

  // optional int32 MaxRank = 3;
  if (has_maxrank()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxrank(), output);
  }

  // optional string OtherPrize = 4;
  if (has_otherprize()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otherprize().data(), this->otherprize().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "otherprize");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->otherprize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PrizeLevel)
}

::google_public::protobuf::uint8* PrizeLevel::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PrizeLevel)
  // optional int32 PrizePercent = 1;
  if (has_prizepercent()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prizepercent(), target);
  }

  // optional int32 MinRank = 2;
  if (has_minrank()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minrank(), target);
  }

  // optional int32 MaxRank = 3;
  if (has_maxrank()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxrank(), target);
  }

  // optional string OtherPrize = 4;
  if (has_otherprize()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otherprize().data(), this->otherprize().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "otherprize");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->otherprize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PrizeLevel)
  return target;
}

int PrizeLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PrizePercent = 1;
    if (has_prizepercent()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->prizepercent());
    }

    // optional int32 MinRank = 2;
    if (has_minrank()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->minrank());
    }

    // optional int32 MaxRank = 3;
    if (has_maxrank()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }

    // optional string OtherPrize = 4;
    if (has_otherprize()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->otherprize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeLevel::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeLevel* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PrizeLevel*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeLevel::MergeFrom(const PrizeLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizepercent()) {
      set_prizepercent(from.prizepercent());
    }
    if (from.has_minrank()) {
      set_minrank(from.minrank());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
    if (from.has_otherprize()) {
      set_otherprize(from.otherprize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeLevel::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeLevel::CopyFrom(const PrizeLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeLevel::IsInitialized() const {

  return true;
}

void PrizeLevel::Swap(PrizeLevel* other) {
  if (other != this) {
    std::swap(prizepercent_, other->prizepercent_);
    std::swap(minrank_, other->minrank_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(otherprize_, other->otherprize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PrizeLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PrizeLevel_descriptor_;
  metadata.reflection = PrizeLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentPrize::kLevelFieldNumber;
#endif  // !_MSC_VER

TournamentPrize::TournamentPrize()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TournamentPrize)
}

void TournamentPrize::InitAsDefaultInstance() {
}

TournamentPrize::TournamentPrize(const TournamentPrize& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TournamentPrize)
}

void TournamentPrize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentPrize::~TournamentPrize() {
  // @@protoc_insertion_point(destructor:msg.TournamentPrize)
  SharedDtor();
}

void TournamentPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TournamentPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TournamentPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentPrize_descriptor_;
}

const TournamentPrize& TournamentPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TournamentPrize* TournamentPrize::default_instance_ = NULL;

TournamentPrize* TournamentPrize::New() const {
  return new TournamentPrize;
}

void TournamentPrize::Clear() {
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentPrize::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TournamentPrize)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.PrizeLevel Level = 1;
      case 1: {
        if (tag == 10) {
         parse_Level:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TournamentPrize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TournamentPrize)
  return false;
#undef DO_
}

void TournamentPrize::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TournamentPrize)
  // repeated .msg.PrizeLevel Level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TournamentPrize)
}

::google_public::protobuf::uint8* TournamentPrize::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentPrize)
  // repeated .msg.PrizeLevel Level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentPrize)
  return target;
}

int TournamentPrize::ByteSize() const {
  int total_size = 0;

  // repeated .msg.PrizeLevel Level = 1;
  total_size += 1 * this->level_size();
  for (int i = 0; i < this->level_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentPrize::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentPrize* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TournamentPrize*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentPrize::MergeFrom(const TournamentPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentPrize::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentPrize::CopyFrom(const TournamentPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPrize::IsInitialized() const {

  return true;
}

void TournamentPrize::Swap(TournamentPrize* other) {
  if (other != this) {
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TournamentPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TournamentPrize_descriptor_;
  metadata.reflection = TournamentPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentInfo::kStartTimeFieldNumber;
const int TournamentInfo::kTournamentLevelFieldNumber;
const int TournamentInfo::kTournamentPrizeFieldNumber;
const int TournamentInfo::kMinPlayerNumFieldNumber;
const int TournamentInfo::kMaxPlayerNumFieldNumber;
const int TournamentInfo::kPlayerPerTableFieldNumber;
const int TournamentInfo::kBuyinFieldNumber;
const int TournamentInfo::kStartBBFieldNumber;
const int TournamentInfo::kMaxAddonLevelFieldNumber;
const int TournamentInfo::kPrizePercentFieldNumber;
const int TournamentInfo::kActionTimeFieldNumber;
const int TournamentInfo::kRoomNameFieldNumber;
const int TournamentInfo::kTemplateNameFieldNumber;
const int TournamentInfo::kIsSitAndGoFieldNumber;
const int TournamentInfo::kBlindTimeFieldNumber;
#endif  // !_MSC_VER

TournamentInfo::TournamentInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TournamentInfo)
}

void TournamentInfo::InitAsDefaultInstance() {
  tournamentlevel_ = const_cast< ::msg::TournamentLevel*>(&::msg::TournamentLevel::default_instance());
  tournamentprize_ = const_cast< ::msg::TournamentPrize*>(&::msg::TournamentPrize::default_instance());
}

TournamentInfo::TournamentInfo(const TournamentInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TournamentInfo)
}

void TournamentInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  tournamentlevel_ = NULL;
  tournamentprize_ = NULL;
  minplayernum_ = 0;
  maxplayernum_ = 0;
  playerpertable_ = 0;
  buyin_ = 0;
  startbb_ = 0;
  maxaddonlevel_ = 0;
  prizepercent_ = 0;
  actiontime_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  templatename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  issitandgo_ = false;
  blindtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentInfo::~TournamentInfo() {
  // @@protoc_insertion_point(destructor:msg.TournamentInfo)
  SharedDtor();
}

void TournamentInfo::SharedDtor() {
  if (starttime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (templatename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templatename_;
  }
  if (this != default_instance_) {
    delete tournamentlevel_;
    delete tournamentprize_;
  }
}

void TournamentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TournamentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentInfo_descriptor_;
}

const TournamentInfo& TournamentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TournamentInfo* TournamentInfo::default_instance_ = NULL;

TournamentInfo* TournamentInfo::New() const {
  return new TournamentInfo;
}

void TournamentInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TournamentInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(minplayernum_, startbb_);
    if (has_starttime()) {
      if (starttime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_tournamentlevel()) {
      if (tournamentlevel_ != NULL) tournamentlevel_->::msg::TournamentLevel::Clear();
    }
    if (has_tournamentprize()) {
      if (tournamentprize_ != NULL) tournamentprize_->::msg::TournamentPrize::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(maxaddonlevel_, actiontime_);
    ZR_(issitandgo_, blindtime_);
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_templatename()) {
      if (templatename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        templatename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TournamentInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string StartTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TournamentLevel;
        break;
      }

      // optional .msg.TournamentLevel TournamentLevel = 2;
      case 2: {
        if (tag == 18) {
         parse_TournamentLevel:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentlevel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TournamentPrize;
        break;
      }

      // optional .msg.TournamentPrize TournamentPrize = 3;
      case 3: {
        if (tag == 26) {
         parse_TournamentPrize:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentprize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MinPlayerNum;
        break;
      }

      // optional int32 MinPlayerNum = 4;
      case 4: {
        if (tag == 32) {
         parse_MinPlayerNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minplayernum_)));
          set_has_minplayernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxPlayerNum;
        break;
      }

      // optional int32 MaxPlayerNum = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxPlayerNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PlayerPerTable;
        break;
      }

      // optional int32 PlayerPerTable = 6;
      case 6: {
        if (tag == 48) {
         parse_PlayerPerTable:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerpertable_)));
          set_has_playerpertable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Buyin;
        break;
      }

      // optional int32 Buyin = 7;
      case 7: {
        if (tag == 56) {
         parse_Buyin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyin_)));
          set_has_buyin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_StartBB;
        break;
      }

      // optional int32 StartBB = 8;
      case 8: {
        if (tag == 64) {
         parse_StartBB:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startbb_)));
          set_has_startbb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MaxAddonLevel;
        break;
      }

      // optional int32 MaxAddonLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_MaxAddonLevel:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxaddonlevel_)));
          set_has_maxaddonlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_PrizePercent;
        break;
      }

      // optional int32 PrizePercent = 10;
      case 10: {
        if (tag == 80) {
         parse_PrizePercent:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizepercent_)));
          set_has_prizepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ActionTime;
        break;
      }

      // optional int32 ActionTime = 11;
      case 11: {
        if (tag == 88) {
         parse_ActionTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontime_)));
          set_has_actiontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 12;
      case 12: {
        if (tag == 98) {
         parse_RoomName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_TemplateName;
        break;
      }

      // optional string TemplateName = 13;
      case 13: {
        if (tag == 106) {
         parse_TemplateName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatename().data(), this->templatename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "templatename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsSitAndGo;
        break;
      }

      // optional bool IsSitAndGo = 14;
      case 14: {
        if (tag == 112) {
         parse_IsSitAndGo:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issitandgo_)));
          set_has_issitandgo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_BlindTime;
        break;
      }

      // optional int32 BlindTime = 15;
      case 15: {
        if (tag == 120) {
         parse_BlindTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blindtime_)));
          set_has_blindtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TournamentInfo)
  return false;
#undef DO_
}

void TournamentInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TournamentInfo)
  // optional string StartTime = 1;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->starttime(), output);
  }

  // optional .msg.TournamentLevel TournamentLevel = 2;
  if (has_tournamentlevel()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournamentlevel(), output);
  }

  // optional .msg.TournamentPrize TournamentPrize = 3;
  if (has_tournamentprize()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournamentprize(), output);
  }

  // optional int32 MinPlayerNum = 4;
  if (has_minplayernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->minplayernum(), output);
  }

  // optional int32 MaxPlayerNum = 5;
  if (has_maxplayernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayernum(), output);
  }

  // optional int32 PlayerPerTable = 6;
  if (has_playerpertable()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerpertable(), output);
  }

  // optional int32 Buyin = 7;
  if (has_buyin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyin(), output);
  }

  // optional int32 StartBB = 8;
  if (has_startbb()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->startbb(), output);
  }

  // optional int32 MaxAddonLevel = 9;
  if (has_maxaddonlevel()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxaddonlevel(), output);
  }

  // optional int32 PrizePercent = 10;
  if (has_prizepercent()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->prizepercent(), output);
  }

  // optional int32 ActionTime = 11;
  if (has_actiontime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->actiontime(), output);
  }

  // optional string RoomName = 12;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->roomname(), output);
  }

  // optional string TemplateName = 13;
  if (has_templatename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->templatename(), output);
  }

  // optional bool IsSitAndGo = 14;
  if (has_issitandgo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(14, this->issitandgo(), output);
  }

  // optional int32 BlindTime = 15;
  if (has_blindtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(15, this->blindtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TournamentInfo)
}

::google_public::protobuf::uint8* TournamentInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentInfo)
  // optional string StartTime = 1;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // optional .msg.TournamentLevel TournamentLevel = 2;
  if (has_tournamentlevel()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournamentlevel(), target);
  }

  // optional .msg.TournamentPrize TournamentPrize = 3;
  if (has_tournamentprize()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tournamentprize(), target);
  }

  // optional int32 MinPlayerNum = 4;
  if (has_minplayernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minplayernum(), target);
  }

  // optional int32 MaxPlayerNum = 5;
  if (has_maxplayernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxplayernum(), target);
  }

  // optional int32 PlayerPerTable = 6;
  if (has_playerpertable()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerpertable(), target);
  }

  // optional int32 Buyin = 7;
  if (has_buyin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyin(), target);
  }

  // optional int32 StartBB = 8;
  if (has_startbb()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->startbb(), target);
  }

  // optional int32 MaxAddonLevel = 9;
  if (has_maxaddonlevel()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxaddonlevel(), target);
  }

  // optional int32 PrizePercent = 10;
  if (has_prizepercent()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->prizepercent(), target);
  }

  // optional int32 ActionTime = 11;
  if (has_actiontime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->actiontime(), target);
  }

  // optional string RoomName = 12;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->roomname(), target);
  }

  // optional string TemplateName = 13;
  if (has_templatename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatename().data(), this->templatename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->templatename(), target);
  }

  // optional bool IsSitAndGo = 14;
  if (has_issitandgo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->issitandgo(), target);
  }

  // optional int32 BlindTime = 15;
  if (has_blindtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->blindtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentInfo)
  return target;
}

int TournamentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional .msg.TournamentLevel TournamentLevel = 2;
    if (has_tournamentlevel()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentlevel());
    }

    // optional .msg.TournamentPrize TournamentPrize = 3;
    if (has_tournamentprize()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentprize());
    }

    // optional int32 MinPlayerNum = 4;
    if (has_minplayernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->minplayernum());
    }

    // optional int32 MaxPlayerNum = 5;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional int32 PlayerPerTable = 6;
    if (has_playerpertable()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerpertable());
    }

    // optional int32 Buyin = 7;
    if (has_buyin()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->buyin());
    }

    // optional int32 StartBB = 8;
    if (has_startbb()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->startbb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MaxAddonLevel = 9;
    if (has_maxaddonlevel()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxaddonlevel());
    }

    // optional int32 PrizePercent = 10;
    if (has_prizepercent()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->prizepercent());
    }

    // optional int32 ActionTime = 11;
    if (has_actiontime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontime());
    }

    // optional string RoomName = 12;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional string TemplateName = 13;
    if (has_templatename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }

    // optional bool IsSitAndGo = 14;
    if (has_issitandgo()) {
      total_size += 1 + 1;
    }

    // optional int32 BlindTime = 15;
    if (has_blindtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->blindtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TournamentInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentInfo::MergeFrom(const TournamentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_tournamentlevel()) {
      mutable_tournamentlevel()->::msg::TournamentLevel::MergeFrom(from.tournamentlevel());
    }
    if (from.has_tournamentprize()) {
      mutable_tournamentprize()->::msg::TournamentPrize::MergeFrom(from.tournamentprize());
    }
    if (from.has_minplayernum()) {
      set_minplayernum(from.minplayernum());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_playerpertable()) {
      set_playerpertable(from.playerpertable());
    }
    if (from.has_buyin()) {
      set_buyin(from.buyin());
    }
    if (from.has_startbb()) {
      set_startbb(from.startbb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxaddonlevel()) {
      set_maxaddonlevel(from.maxaddonlevel());
    }
    if (from.has_prizepercent()) {
      set_prizepercent(from.prizepercent());
    }
    if (from.has_actiontime()) {
      set_actiontime(from.actiontime());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_templatename()) {
      set_templatename(from.templatename());
    }
    if (from.has_issitandgo()) {
      set_issitandgo(from.issitandgo());
    }
    if (from.has_blindtime()) {
      set_blindtime(from.blindtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentInfo::CopyFrom(const TournamentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentInfo::IsInitialized() const {

  return true;
}

void TournamentInfo::Swap(TournamentInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(tournamentlevel_, other->tournamentlevel_);
    std::swap(tournamentprize_, other->tournamentprize_);
    std::swap(minplayernum_, other->minplayernum_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(playerpertable_, other->playerpertable_);
    std::swap(buyin_, other->buyin_);
    std::swap(startbb_, other->startbb_);
    std::swap(maxaddonlevel_, other->maxaddonlevel_);
    std::swap(prizepercent_, other->prizepercent_);
    std::swap(actiontime_, other->actiontime_);
    std::swap(roomname_, other->roomname_);
    std::swap(templatename_, other->templatename_);
    std::swap(issitandgo_, other->issitandgo_);
    std::swap(blindtime_, other->blindtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TournamentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TournamentInfo_descriptor_;
  metadata.reflection = TournamentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomProp::kPropertyFieldNumber;
#endif  // !_MSC_VER

RoomProp::RoomProp()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoomProp)
}

void RoomProp::InitAsDefaultInstance() {
}

RoomProp::RoomProp(const RoomProp& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.RoomProp)
}

void RoomProp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomProp::~RoomProp() {
  // @@protoc_insertion_point(destructor:msg.RoomProp)
  SharedDtor();
}

void RoomProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RoomProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomProp_descriptor_;
}

const RoomProp& RoomProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

RoomProp* RoomProp::default_instance_ = NULL;

RoomProp* RoomProp::New() const {
  return new RoomProp;
}

void RoomProp::Clear() {
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomProp::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.RoomProp)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Property Property = 1;
      case 1: {
        if (tag == 10) {
         parse_Property:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Property;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.RoomProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.RoomProp)
  return false;
#undef DO_
}

void RoomProp::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.RoomProp)
  // repeated .msg.Property Property = 1;
  for (int i = 0; i < this->property_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.RoomProp)
}

::google_public::protobuf::uint8* RoomProp::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoomProp)
  // repeated .msg.Property Property = 1;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoomProp)
  return target;
}

int RoomProp::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Property Property = 1;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomProp::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomProp* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RoomProp*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomProp::MergeFrom(const RoomProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomProp::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomProp::CopyFrom(const RoomProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomProp::IsInitialized() const {

  return true;
}

void RoomProp::Swap(RoomProp* other) {
  if (other != this) {
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RoomProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RoomProp_descriptor_;
  metadata.reflection = RoomProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_151_GetRoomInfomation::kRoomInfomationFieldNumber;
#endif  // !_MSC_VER

Processor_151_GetRoomInfomation::Processor_151_GetRoomInfomation()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_151_GetRoomInfomation)
}

void Processor_151_GetRoomInfomation::InitAsDefaultInstance() {
  roominfomation_ = const_cast< ::msg::RoomInfomation*>(&::msg::RoomInfomation::default_instance());
}

Processor_151_GetRoomInfomation::Processor_151_GetRoomInfomation(const Processor_151_GetRoomInfomation& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_151_GetRoomInfomation)
}

void Processor_151_GetRoomInfomation::SharedCtor() {
  _cached_size_ = 0;
  roominfomation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_151_GetRoomInfomation::~Processor_151_GetRoomInfomation() {
  // @@protoc_insertion_point(destructor:msg.Processor_151_GetRoomInfomation)
  SharedDtor();
}

void Processor_151_GetRoomInfomation::SharedDtor() {
  if (this != default_instance_) {
    delete roominfomation_;
  }
}

void Processor_151_GetRoomInfomation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_151_GetRoomInfomation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_151_GetRoomInfomation_descriptor_;
}

const Processor_151_GetRoomInfomation& Processor_151_GetRoomInfomation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_151_GetRoomInfomation* Processor_151_GetRoomInfomation::default_instance_ = NULL;

Processor_151_GetRoomInfomation* Processor_151_GetRoomInfomation::New() const {
  return new Processor_151_GetRoomInfomation;
}

void Processor_151_GetRoomInfomation::Clear() {
  if (has_roominfomation()) {
    if (roominfomation_ != NULL) roominfomation_->::msg::RoomInfomation::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_151_GetRoomInfomation::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_151_GetRoomInfomation)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomInfomation RoomInfomation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfomation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_151_GetRoomInfomation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_151_GetRoomInfomation)
  return false;
#undef DO_
}

void Processor_151_GetRoomInfomation::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_151_GetRoomInfomation)
  // optional .msg.RoomInfomation RoomInfomation = 1;
  if (has_roominfomation()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfomation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_151_GetRoomInfomation)
}

::google_public::protobuf::uint8* Processor_151_GetRoomInfomation::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_151_GetRoomInfomation)
  // optional .msg.RoomInfomation RoomInfomation = 1;
  if (has_roominfomation()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfomation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_151_GetRoomInfomation)
  return target;
}

int Processor_151_GetRoomInfomation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomInfomation RoomInfomation = 1;
    if (has_roominfomation()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfomation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_151_GetRoomInfomation::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_151_GetRoomInfomation* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_151_GetRoomInfomation*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_151_GetRoomInfomation::MergeFrom(const Processor_151_GetRoomInfomation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roominfomation()) {
      mutable_roominfomation()->::msg::RoomInfomation::MergeFrom(from.roominfomation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_151_GetRoomInfomation::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_151_GetRoomInfomation::CopyFrom(const Processor_151_GetRoomInfomation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_151_GetRoomInfomation::IsInitialized() const {

  return true;
}

void Processor_151_GetRoomInfomation::Swap(Processor_151_GetRoomInfomation* other) {
  if (other != this) {
    std::swap(roominfomation_, other->roominfomation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_151_GetRoomInfomation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_151_GetRoomInfomation_descriptor_;
  metadata.reflection = Processor_151_GetRoomInfomation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_152_CreateRoom::kRoomInfoFieldNumber;
const int Processor_152_CreateRoom::kRoomPropFieldNumber;
const int Processor_152_CreateRoom::kTournamentInfoFieldNumber;
#endif  // !_MSC_VER

Processor_152_CreateRoom::Processor_152_CreateRoom()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_152_CreateRoom)
}

void Processor_152_CreateRoom::InitAsDefaultInstance() {
  roominfo_ = const_cast< ::msg::RoomInfo*>(&::msg::RoomInfo::default_instance());
  roomprop_ = const_cast< ::msg::RoomProp*>(&::msg::RoomProp::default_instance());
  tournamentinfo_ = const_cast< ::msg::TournamentInfo*>(&::msg::TournamentInfo::default_instance());
}

Processor_152_CreateRoom::Processor_152_CreateRoom(const Processor_152_CreateRoom& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_152_CreateRoom)
}

void Processor_152_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  roominfo_ = NULL;
  roomprop_ = NULL;
  tournamentinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_152_CreateRoom::~Processor_152_CreateRoom() {
  // @@protoc_insertion_point(destructor:msg.Processor_152_CreateRoom)
  SharedDtor();
}

void Processor_152_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
    delete roominfo_;
    delete roomprop_;
    delete tournamentinfo_;
  }
}

void Processor_152_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_152_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_152_CreateRoom_descriptor_;
}

const Processor_152_CreateRoom& Processor_152_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_152_CreateRoom* Processor_152_CreateRoom::default_instance_ = NULL;

Processor_152_CreateRoom* Processor_152_CreateRoom::New() const {
  return new Processor_152_CreateRoom;
}

void Processor_152_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::msg::RoomInfo::Clear();
    }
    if (has_roomprop()) {
      if (roomprop_ != NULL) roomprop_->::msg::RoomProp::Clear();
    }
    if (has_tournamentinfo()) {
      if (tournamentinfo_ != NULL) tournamentinfo_->::msg::TournamentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_152_CreateRoom::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_152_CreateRoom)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomInfo RoomInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomProp;
        break;
      }

      // optional .msg.RoomProp RoomProp = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomProp:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TournamentInfo;
        break;
      }

      // optional .msg.TournamentInfo TournamentInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_TournamentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_152_CreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_152_CreateRoom)
  return false;
#undef DO_
}

void Processor_152_CreateRoom::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_152_CreateRoom)
  // optional .msg.RoomInfo RoomInfo = 1;
  if (has_roominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(), output);
  }

  // optional .msg.RoomProp RoomProp = 2;
  if (has_roomprop()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomprop(), output);
  }

  // optional .msg.TournamentInfo TournamentInfo = 3;
  if (has_tournamentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournamentinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_152_CreateRoom)
}

::google_public::protobuf::uint8* Processor_152_CreateRoom::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_152_CreateRoom)
  // optional .msg.RoomInfo RoomInfo = 1;
  if (has_roominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(), target);
  }

  // optional .msg.RoomProp RoomProp = 2;
  if (has_roomprop()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomprop(), target);
  }

  // optional .msg.TournamentInfo TournamentInfo = 3;
  if (has_tournamentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tournamentinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_152_CreateRoom)
  return target;
}

int Processor_152_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomInfo RoomInfo = 1;
    if (has_roominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

    // optional .msg.RoomProp RoomProp = 2;
    if (has_roomprop()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomprop());
    }

    // optional .msg.TournamentInfo TournamentInfo = 3;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_152_CreateRoom::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_152_CreateRoom* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_152_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_152_CreateRoom::MergeFrom(const Processor_152_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roominfo()) {
      mutable_roominfo()->::msg::RoomInfo::MergeFrom(from.roominfo());
    }
    if (from.has_roomprop()) {
      mutable_roomprop()->::msg::RoomProp::MergeFrom(from.roomprop());
    }
    if (from.has_tournamentinfo()) {
      mutable_tournamentinfo()->::msg::TournamentInfo::MergeFrom(from.tournamentinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_152_CreateRoom::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_152_CreateRoom::CopyFrom(const Processor_152_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_152_CreateRoom::IsInitialized() const {

  return true;
}

void Processor_152_CreateRoom::Swap(Processor_152_CreateRoom* other) {
  if (other != this) {
    std::swap(roominfo_, other->roominfo_);
    std::swap(roomprop_, other->roomprop_);
    std::swap(tournamentinfo_, other->tournamentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_152_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_152_CreateRoom_descriptor_;
  metadata.reflection = Processor_152_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_152_CreateRoom_down::kRoomIDFieldNumber;
const int Processor_152_CreateRoom_down::kResponseFieldNumber;
#endif  // !_MSC_VER

Processor_152_CreateRoom_down::Processor_152_CreateRoom_down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_152_CreateRoom_down)
}

void Processor_152_CreateRoom_down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_152_CreateRoom_down::Processor_152_CreateRoom_down(const Processor_152_CreateRoom_down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_152_CreateRoom_down)
}

void Processor_152_CreateRoom_down::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_152_CreateRoom_down::~Processor_152_CreateRoom_down() {
  // @@protoc_insertion_point(destructor:msg.Processor_152_CreateRoom_down)
  SharedDtor();
}

void Processor_152_CreateRoom_down::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_152_CreateRoom_down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_152_CreateRoom_down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_152_CreateRoom_down_descriptor_;
}

const Processor_152_CreateRoom_down& Processor_152_CreateRoom_down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_152_CreateRoom_down* Processor_152_CreateRoom_down::default_instance_ = NULL;

Processor_152_CreateRoom_down* Processor_152_CreateRoom_down::New() const {
  return new Processor_152_CreateRoom_down;
}

void Processor_152_CreateRoom_down::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_152_CreateRoom_down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_152_CreateRoom_down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .msg.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_152_CreateRoom_down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_152_CreateRoom_down)
  return false;
#undef DO_
}

void Processor_152_CreateRoom_down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_152_CreateRoom_down)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.Response response = 2;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_152_CreateRoom_down)
}

::google_public::protobuf::uint8* Processor_152_CreateRoom_down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_152_CreateRoom_down)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.Response response = 2;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_152_CreateRoom_down)
  return target;
}

int Processor_152_CreateRoom_down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_152_CreateRoom_down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_152_CreateRoom_down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_152_CreateRoom_down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_152_CreateRoom_down::MergeFrom(const Processor_152_CreateRoom_down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_152_CreateRoom_down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_152_CreateRoom_down::CopyFrom(const Processor_152_CreateRoom_down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_152_CreateRoom_down::IsInitialized() const {

  return true;
}

void Processor_152_CreateRoom_down::Swap(Processor_152_CreateRoom_down* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_152_CreateRoom_down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_152_CreateRoom_down_descriptor_;
  metadata.reflection = Processor_152_CreateRoom_down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_154_CancelTournament::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_154_CancelTournament::Processor_154_CancelTournament()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_154_CancelTournament)
}

void Processor_154_CancelTournament::InitAsDefaultInstance() {
}

Processor_154_CancelTournament::Processor_154_CancelTournament(const Processor_154_CancelTournament& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_154_CancelTournament)
}

void Processor_154_CancelTournament::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_154_CancelTournament::~Processor_154_CancelTournament() {
  // @@protoc_insertion_point(destructor:msg.Processor_154_CancelTournament)
  SharedDtor();
}

void Processor_154_CancelTournament::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_154_CancelTournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_154_CancelTournament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_154_CancelTournament_descriptor_;
}

const Processor_154_CancelTournament& Processor_154_CancelTournament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_154_CancelTournament* Processor_154_CancelTournament::default_instance_ = NULL;

Processor_154_CancelTournament* Processor_154_CancelTournament::New() const {
  return new Processor_154_CancelTournament;
}

void Processor_154_CancelTournament::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_154_CancelTournament::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_154_CancelTournament)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_154_CancelTournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_154_CancelTournament)
  return false;
#undef DO_
}

void Processor_154_CancelTournament::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_154_CancelTournament)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_154_CancelTournament)
}

::google_public::protobuf::uint8* Processor_154_CancelTournament::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_154_CancelTournament)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_154_CancelTournament)
  return target;
}

int Processor_154_CancelTournament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_154_CancelTournament::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_154_CancelTournament* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_154_CancelTournament*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_154_CancelTournament::MergeFrom(const Processor_154_CancelTournament& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_154_CancelTournament::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_154_CancelTournament::CopyFrom(const Processor_154_CancelTournament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_154_CancelTournament::IsInitialized() const {

  return true;
}

void Processor_154_CancelTournament::Swap(Processor_154_CancelTournament* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_154_CancelTournament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_154_CancelTournament_descriptor_;
  metadata.reflection = Processor_154_CancelTournament_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_160_SendChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

Processor_160_SendChatMessage::Processor_160_SendChatMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_160_SendChatMessage)
}

void Processor_160_SendChatMessage::InitAsDefaultInstance() {
  chatmessage_ = const_cast< ::msg::ChatMessage*>(&::msg::ChatMessage::default_instance());
}

Processor_160_SendChatMessage::Processor_160_SendChatMessage(const Processor_160_SendChatMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_160_SendChatMessage)
}

void Processor_160_SendChatMessage::SharedCtor() {
  _cached_size_ = 0;
  chatmessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_160_SendChatMessage::~Processor_160_SendChatMessage() {
  // @@protoc_insertion_point(destructor:msg.Processor_160_SendChatMessage)
  SharedDtor();
}

void Processor_160_SendChatMessage::SharedDtor() {
  if (this != default_instance_) {
    delete chatmessage_;
  }
}

void Processor_160_SendChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_160_SendChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_160_SendChatMessage_descriptor_;
}

const Processor_160_SendChatMessage& Processor_160_SendChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_160_SendChatMessage* Processor_160_SendChatMessage::default_instance_ = NULL;

Processor_160_SendChatMessage* Processor_160_SendChatMessage::New() const {
  return new Processor_160_SendChatMessage;
}

void Processor_160_SendChatMessage::Clear() {
  if (has_chatmessage()) {
    if (chatmessage_ != NULL) chatmessage_->::msg::ChatMessage::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_160_SendChatMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_160_SendChatMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.ChatMessage ChatMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_160_SendChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_160_SendChatMessage)
  return false;
#undef DO_
}

void Processor_160_SendChatMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_160_SendChatMessage)
  // optional .msg.ChatMessage ChatMessage = 1;
  if (has_chatmessage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_160_SendChatMessage)
}

::google_public::protobuf::uint8* Processor_160_SendChatMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_160_SendChatMessage)
  // optional .msg.ChatMessage ChatMessage = 1;
  if (has_chatmessage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_160_SendChatMessage)
  return target;
}

int Processor_160_SendChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.ChatMessage ChatMessage = 1;
    if (has_chatmessage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_160_SendChatMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_160_SendChatMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_160_SendChatMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_160_SendChatMessage::MergeFrom(const Processor_160_SendChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatmessage()) {
      mutable_chatmessage()->::msg::ChatMessage::MergeFrom(from.chatmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_160_SendChatMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_160_SendChatMessage::CopyFrom(const Processor_160_SendChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_160_SendChatMessage::IsInitialized() const {

  return true;
}

void Processor_160_SendChatMessage::Swap(Processor_160_SendChatMessage* other) {
  if (other != this) {
    std::swap(chatmessage_, other->chatmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_160_SendChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_160_SendChatMessage_descriptor_;
  metadata.reflection = Processor_160_SendChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_160_SendChatMessage_Down::kResponseFieldNumber;
const int Processor_160_SendChatMessage_Down::kSubmitTimeFieldNumber;
#endif  // !_MSC_VER

Processor_160_SendChatMessage_Down::Processor_160_SendChatMessage_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_160_SendChatMessage_Down)
}

void Processor_160_SendChatMessage_Down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_160_SendChatMessage_Down::Processor_160_SendChatMessage_Down(const Processor_160_SendChatMessage_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_160_SendChatMessage_Down)
}

void Processor_160_SendChatMessage_Down::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = NULL;
  submittime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_160_SendChatMessage_Down::~Processor_160_SendChatMessage_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_160_SendChatMessage_Down)
  SharedDtor();
}

void Processor_160_SendChatMessage_Down::SharedDtor() {
  if (submittime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete submittime_;
  }
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_160_SendChatMessage_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_160_SendChatMessage_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_160_SendChatMessage_Down_descriptor_;
}

const Processor_160_SendChatMessage_Down& Processor_160_SendChatMessage_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_160_SendChatMessage_Down* Processor_160_SendChatMessage_Down::default_instance_ = NULL;

Processor_160_SendChatMessage_Down* Processor_160_SendChatMessage_Down::New() const {
  return new Processor_160_SendChatMessage_Down;
}

void Processor_160_SendChatMessage_Down::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_submittime()) {
      if (submittime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        submittime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_160_SendChatMessage_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_160_SendChatMessage_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SubmitTime;
        break;
      }

      // optional string SubmitTime = 2;
      case 2: {
        if (tag == 18) {
         parse_SubmitTime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submittime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->submittime().data(), this->submittime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "submittime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_160_SendChatMessage_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_160_SendChatMessage_Down)
  return false;
#undef DO_
}

void Processor_160_SendChatMessage_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_160_SendChatMessage_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional string SubmitTime = 2;
  if (has_submittime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submittime().data(), this->submittime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "submittime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->submittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_160_SendChatMessage_Down)
}

::google_public::protobuf::uint8* Processor_160_SendChatMessage_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_160_SendChatMessage_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional string SubmitTime = 2;
  if (has_submittime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->submittime().data(), this->submittime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "submittime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_160_SendChatMessage_Down)
  return target;
}

int Processor_160_SendChatMessage_Down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional string SubmitTime = 2;
    if (has_submittime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->submittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_160_SendChatMessage_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_160_SendChatMessage_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_160_SendChatMessage_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_160_SendChatMessage_Down::MergeFrom(const Processor_160_SendChatMessage_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_submittime()) {
      set_submittime(from.submittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_160_SendChatMessage_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_160_SendChatMessage_Down::CopyFrom(const Processor_160_SendChatMessage_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_160_SendChatMessage_Down::IsInitialized() const {

  return true;
}

void Processor_160_SendChatMessage_Down::Swap(Processor_160_SendChatMessage_Down* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(submittime_, other->submittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_160_SendChatMessage_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_160_SendChatMessage_Down_descriptor_;
  metadata.reflection = Processor_160_SendChatMessage_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_161_ReceiveChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

Processor_161_ReceiveChatMessage::Processor_161_ReceiveChatMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_161_ReceiveChatMessage)
}

void Processor_161_ReceiveChatMessage::InitAsDefaultInstance() {
}

Processor_161_ReceiveChatMessage::Processor_161_ReceiveChatMessage(const Processor_161_ReceiveChatMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_161_ReceiveChatMessage)
}

void Processor_161_ReceiveChatMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_161_ReceiveChatMessage::~Processor_161_ReceiveChatMessage() {
  // @@protoc_insertion_point(destructor:msg.Processor_161_ReceiveChatMessage)
  SharedDtor();
}

void Processor_161_ReceiveChatMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_161_ReceiveChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_161_ReceiveChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_161_ReceiveChatMessage_descriptor_;
}

const Processor_161_ReceiveChatMessage& Processor_161_ReceiveChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_161_ReceiveChatMessage* Processor_161_ReceiveChatMessage::default_instance_ = NULL;

Processor_161_ReceiveChatMessage* Processor_161_ReceiveChatMessage::New() const {
  return new Processor_161_ReceiveChatMessage;
}

void Processor_161_ReceiveChatMessage::Clear() {
  chatmessage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_161_ReceiveChatMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_161_ReceiveChatMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ChatMessage ChatMessage = 1;
      case 1: {
        if (tag == 10) {
         parse_ChatMessage:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChatMessage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_161_ReceiveChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_161_ReceiveChatMessage)
  return false;
#undef DO_
}

void Processor_161_ReceiveChatMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_161_ReceiveChatMessage)
  // repeated .msg.ChatMessage ChatMessage = 1;
  for (int i = 0; i < this->chatmessage_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmessage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_161_ReceiveChatMessage)
}

::google_public::protobuf::uint8* Processor_161_ReceiveChatMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_161_ReceiveChatMessage)
  // repeated .msg.ChatMessage ChatMessage = 1;
  for (int i = 0; i < this->chatmessage_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmessage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_161_ReceiveChatMessage)
  return target;
}

int Processor_161_ReceiveChatMessage::ByteSize() const {
  int total_size = 0;

  // repeated .msg.ChatMessage ChatMessage = 1;
  total_size += 1 * this->chatmessage_size();
  for (int i = 0; i < this->chatmessage_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatmessage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_161_ReceiveChatMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_161_ReceiveChatMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_161_ReceiveChatMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_161_ReceiveChatMessage::MergeFrom(const Processor_161_ReceiveChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatmessage_.MergeFrom(from.chatmessage_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_161_ReceiveChatMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_161_ReceiveChatMessage::CopyFrom(const Processor_161_ReceiveChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_161_ReceiveChatMessage::IsInitialized() const {

  return true;
}

void Processor_161_ReceiveChatMessage::Swap(Processor_161_ReceiveChatMessage* other) {
  if (other != this) {
    chatmessage_.Swap(&other->chatmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_161_ReceiveChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_161_ReceiveChatMessage_descriptor_;
  metadata.reflection = Processor_161_ReceiveChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_161_ReceiveChatMessage_UP::kLastMsgIDFieldNumber;
#endif  // !_MSC_VER

Processor_161_ReceiveChatMessage_UP::Processor_161_ReceiveChatMessage_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_161_ReceiveChatMessage_UP)
}

void Processor_161_ReceiveChatMessage_UP::InitAsDefaultInstance() {
}

Processor_161_ReceiveChatMessage_UP::Processor_161_ReceiveChatMessage_UP(const Processor_161_ReceiveChatMessage_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_161_ReceiveChatMessage_UP)
}

void Processor_161_ReceiveChatMessage_UP::SharedCtor() {
  _cached_size_ = 0;
  lastmsgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_161_ReceiveChatMessage_UP::~Processor_161_ReceiveChatMessage_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_161_ReceiveChatMessage_UP)
  SharedDtor();
}

void Processor_161_ReceiveChatMessage_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_161_ReceiveChatMessage_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_161_ReceiveChatMessage_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_161_ReceiveChatMessage_UP_descriptor_;
}

const Processor_161_ReceiveChatMessage_UP& Processor_161_ReceiveChatMessage_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_161_ReceiveChatMessage_UP* Processor_161_ReceiveChatMessage_UP::default_instance_ = NULL;

Processor_161_ReceiveChatMessage_UP* Processor_161_ReceiveChatMessage_UP::New() const {
  return new Processor_161_ReceiveChatMessage_UP;
}

void Processor_161_ReceiveChatMessage_UP::Clear() {
  lastmsgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_161_ReceiveChatMessage_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_161_ReceiveChatMessage_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LastMsgID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastmsgid_)));
          set_has_lastmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_161_ReceiveChatMessage_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_161_ReceiveChatMessage_UP)
  return false;
#undef DO_
}

void Processor_161_ReceiveChatMessage_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_161_ReceiveChatMessage_UP)
  // optional int32 LastMsgID = 1;
  if (has_lastmsgid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastmsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_161_ReceiveChatMessage_UP)
}

::google_public::protobuf::uint8* Processor_161_ReceiveChatMessage_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_161_ReceiveChatMessage_UP)
  // optional int32 LastMsgID = 1;
  if (has_lastmsgid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lastmsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_161_ReceiveChatMessage_UP)
  return target;
}

int Processor_161_ReceiveChatMessage_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LastMsgID = 1;
    if (has_lastmsgid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastmsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_161_ReceiveChatMessage_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_161_ReceiveChatMessage_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_161_ReceiveChatMessage_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_161_ReceiveChatMessage_UP::MergeFrom(const Processor_161_ReceiveChatMessage_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastmsgid()) {
      set_lastmsgid(from.lastmsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_161_ReceiveChatMessage_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_161_ReceiveChatMessage_UP::CopyFrom(const Processor_161_ReceiveChatMessage_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_161_ReceiveChatMessage_UP::IsInitialized() const {

  return true;
}

void Processor_161_ReceiveChatMessage_UP::Swap(Processor_161_ReceiveChatMessage_UP* other) {
  if (other != this) {
    std::swap(lastmsgid_, other->lastmsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_161_ReceiveChatMessage_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_161_ReceiveChatMessage_UP_descriptor_;
  metadata.reflection = Processor_161_ReceiveChatMessage_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_170_GetHistoryScore_Up::kRoomTypeFieldNumber;
const int Processor_170_GetHistoryScore_Up::kIsTournamentFieldNumber;
const int Processor_170_GetHistoryScore_Up::kStartTimeFieldNumber;
const int Processor_170_GetHistoryScore_Up::kEndTimeFieldNumber;
const int Processor_170_GetHistoryScore_Up::kGroupidFieldNumber;
#endif  // !_MSC_VER

Processor_170_GetHistoryScore_Up::Processor_170_GetHistoryScore_Up()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_170_GetHistoryScore_Up)
}

void Processor_170_GetHistoryScore_Up::InitAsDefaultInstance() {
}

Processor_170_GetHistoryScore_Up::Processor_170_GetHistoryScore_Up(const Processor_170_GetHistoryScore_Up& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_170_GetHistoryScore_Up)
}

void Processor_170_GetHistoryScore_Up::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomtype_ = 0;
  istournament_ = false;
  starttime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_170_GetHistoryScore_Up::~Processor_170_GetHistoryScore_Up() {
  // @@protoc_insertion_point(destructor:msg.Processor_170_GetHistoryScore_Up)
  SharedDtor();
}

void Processor_170_GetHistoryScore_Up::SharedDtor() {
  if (starttime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (endtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void Processor_170_GetHistoryScore_Up::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_170_GetHistoryScore_Up::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_170_GetHistoryScore_Up_descriptor_;
}

const Processor_170_GetHistoryScore_Up& Processor_170_GetHistoryScore_Up::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_170_GetHistoryScore_Up* Processor_170_GetHistoryScore_Up::default_instance_ = NULL;

Processor_170_GetHistoryScore_Up* Processor_170_GetHistoryScore_Up::New() const {
  return new Processor_170_GetHistoryScore_Up;
}

void Processor_170_GetHistoryScore_Up::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_170_GetHistoryScore_Up*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomtype_, istournament_);
    if (has_starttime()) {
      if (starttime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
    groupid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_170_GetHistoryScore_Up::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_170_GetHistoryScore_Up)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomType RoomType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 2;
      case 2: {
        if (tag == 16) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StartTime;
        break;
      }

      // optional string StartTime = 3;
      case 3: {
        if (tag == 26) {
         parse_StartTime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EndTime;
        break;
      }

      // optional string EndTime = 4;
      case 4: {
        if (tag == 34) {
         parse_EndTime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 5;
      case 5: {
        if (tag == 40) {
         parse_groupid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_170_GetHistoryScore_Up)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_170_GetHistoryScore_Up)
  return false;
#undef DO_
}

void Processor_170_GetHistoryScore_Up::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_170_GetHistoryScore_Up)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roomtype(), output);
  }

  // optional bool IsTournament = 2;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->istournament(), output);
  }

  // optional string StartTime = 3;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starttime(), output);
  }

  // optional string EndTime = 4;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->endtime(), output);
  }

  // optional int32 groupid = 5;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_170_GetHistoryScore_Up)
}

::google_public::protobuf::uint8* Processor_170_GetHistoryScore_Up::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_170_GetHistoryScore_Up)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roomtype(), target);
  }

  // optional bool IsTournament = 2;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istournament(), target);
  }

  // optional string StartTime = 3;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string EndTime = 4;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->endtime(), target);
  }

  // optional int32 groupid = 5;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_170_GetHistoryScore_Up)
  return target;
}

int Processor_170_GetHistoryScore_Up::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomType RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional bool IsTournament = 2;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

    // optional string StartTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string EndTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional int32 groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_170_GetHistoryScore_Up::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_170_GetHistoryScore_Up* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_170_GetHistoryScore_Up*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_170_GetHistoryScore_Up::MergeFrom(const Processor_170_GetHistoryScore_Up& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_170_GetHistoryScore_Up::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_170_GetHistoryScore_Up::CopyFrom(const Processor_170_GetHistoryScore_Up& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_170_GetHistoryScore_Up::IsInitialized() const {

  return true;
}

void Processor_170_GetHistoryScore_Up::Swap(Processor_170_GetHistoryScore_Up* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(istournament_, other->istournament_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_170_GetHistoryScore_Up::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_170_GetHistoryScore_Up_descriptor_;
  metadata.reflection = Processor_170_GetHistoryScore_Up_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryScore::kRoomIDFieldNumber;
const int HistoryScore::kEndTimeFieldNumber;
const int HistoryScore::kRoomNameFieldNumber;
const int HistoryScore::kScoreFieldNumber;
const int HistoryScore::kPlayTimeFieldNumber;
const int HistoryScore::kPlayHandsFieldNumber;
const int HistoryScore::kGroupNameFieldNumber;
const int HistoryScore::kLabelFieldNumber;
#endif  // !_MSC_VER

HistoryScore::HistoryScore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.HistoryScore)
}

void HistoryScore::InitAsDefaultInstance() {
}

HistoryScore::HistoryScore(const HistoryScore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.HistoryScore)
}

void HistoryScore::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  endtime_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  playtime_ = GOOGLE_LONGLONG(0);
  playhands_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryScore::~HistoryScore() {
  // @@protoc_insertion_point(destructor:msg.HistoryScore)
  SharedDtor();
}

void HistoryScore::SharedDtor() {
  if (endtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime_;
  }
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (groupname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void HistoryScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* HistoryScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryScore_descriptor_;
}

const HistoryScore& HistoryScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

HistoryScore* HistoryScore::default_instance_ = NULL;

HistoryScore* HistoryScore::New() const {
  return new HistoryScore;
}

void HistoryScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistoryScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roomid_, score_);
    if (has_endtime()) {
      if (endtime_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endtime_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    playtime_ = GOOGLE_LONGLONG(0);
    playhands_ = 0;
    if (has_groupname()) {
      if (groupname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryScore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.HistoryScore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EndTime;
        break;
      }

      // optional string EndTime = 2;
      case 2: {
        if (tag == 18) {
         parse_EndTime:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "endtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // optional int32 Score = 4;
      case 4: {
        if (tag == 32) {
         parse_Score:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PlayTime;
        break;
      }

      // optional int64 PlayTime = 5;
      case 5: {
        if (tag == 40) {
         parse_PlayTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playtime_)));
          set_has_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PlayHands;
        break;
      }

      // optional int32 PlayHands = 6;
      case 6: {
        if (tag == 48) {
         parse_PlayHands:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playhands_)));
          set_has_playhands();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GroupName;
        break;
      }

      // optional string GroupName = 7;
      case 7: {
        if (tag == 58) {
         parse_GroupName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "groupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Label;
        break;
      }

      // repeated string Label = 8;
      case 8: {
        if (tag == 66) {
         parse_Label:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_label()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label(this->label_size() - 1).data(),
            this->label(this->label_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Label;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.HistoryScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.HistoryScore)
  return false;
#undef DO_
}

void HistoryScore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.HistoryScore)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string EndTime = 2;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endtime(), output);
  }

  // optional string RoomName = 3;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // optional int32 Score = 4;
  if (has_score()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int64 PlayTime = 5;
  if (has_playtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(5, this->playtime(), output);
  }

  // optional int32 PlayHands = 6;
  if (has_playhands()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->playhands(), output);
  }

  // optional string GroupName = 7;
  if (has_groupname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->groupname(), output);
  }

  // repeated string Label = 8;
  for (int i = 0; i < this->label_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->label(i).data(), this->label(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "label");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      8, this->label(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.HistoryScore)
}

::google_public::protobuf::uint8* HistoryScore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HistoryScore)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string EndTime = 2;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "endtime");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endtime(), target);
  }

  // optional string RoomName = 3;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // optional int32 Score = 4;
  if (has_score()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int64 PlayTime = 5;
  if (has_playtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->playtime(), target);
  }

  // optional int32 PlayHands = 6;
  if (has_playhands()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playhands(), target);
  }

  // optional string GroupName = 7;
  if (has_groupname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->groupname(), target);
  }

  // repeated string Label = 8;
  for (int i = 0; i < this->label_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label(i).data(), this->label(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->label(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HistoryScore)
  return target;
}

int HistoryScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string EndTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string RoomName = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int64 PlayTime = 5;
    if (has_playtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->playtime());
    }

    // optional int32 PlayHands = 6;
    if (has_playhands()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playhands());
    }

    // optional string GroupName = 7;
    if (has_groupname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated string Label = 8;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->label(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryScore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryScore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const HistoryScore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryScore::MergeFrom(const HistoryScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_playtime()) {
      set_playtime(from.playtime());
    }
    if (from.has_playhands()) {
      set_playhands(from.playhands());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryScore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryScore::CopyFrom(const HistoryScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryScore::IsInitialized() const {

  return true;
}

void HistoryScore::Swap(HistoryScore* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(endtime_, other->endtime_);
    std::swap(roomname_, other->roomname_);
    std::swap(score_, other->score_);
    std::swap(playtime_, other->playtime_);
    std::swap(playhands_, other->playhands_);
    std::swap(groupname_, other->groupname_);
    label_.Swap(&other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata HistoryScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = HistoryScore_descriptor_;
  metadata.reflection = HistoryScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_170_GetHistoryScore_Down::kScoreFieldNumber;
#endif  // !_MSC_VER

Processor_170_GetHistoryScore_Down::Processor_170_GetHistoryScore_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_170_GetHistoryScore_Down)
}

void Processor_170_GetHistoryScore_Down::InitAsDefaultInstance() {
}

Processor_170_GetHistoryScore_Down::Processor_170_GetHistoryScore_Down(const Processor_170_GetHistoryScore_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_170_GetHistoryScore_Down)
}

void Processor_170_GetHistoryScore_Down::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_170_GetHistoryScore_Down::~Processor_170_GetHistoryScore_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_170_GetHistoryScore_Down)
  SharedDtor();
}

void Processor_170_GetHistoryScore_Down::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_170_GetHistoryScore_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_170_GetHistoryScore_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_170_GetHistoryScore_Down_descriptor_;
}

const Processor_170_GetHistoryScore_Down& Processor_170_GetHistoryScore_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_170_GetHistoryScore_Down* Processor_170_GetHistoryScore_Down::default_instance_ = NULL;

Processor_170_GetHistoryScore_Down* Processor_170_GetHistoryScore_Down::New() const {
  return new Processor_170_GetHistoryScore_Down;
}

void Processor_170_GetHistoryScore_Down::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_170_GetHistoryScore_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_170_GetHistoryScore_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.HistoryScore Score = 1;
      case 1: {
        if (tag == 10) {
         parse_Score:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_170_GetHistoryScore_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_170_GetHistoryScore_Down)
  return false;
#undef DO_
}

void Processor_170_GetHistoryScore_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_170_GetHistoryScore_Down)
  // repeated .msg.HistoryScore Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_170_GetHistoryScore_Down)
}

::google_public::protobuf::uint8* Processor_170_GetHistoryScore_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_170_GetHistoryScore_Down)
  // repeated .msg.HistoryScore Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_170_GetHistoryScore_Down)
  return target;
}

int Processor_170_GetHistoryScore_Down::ByteSize() const {
  int total_size = 0;

  // repeated .msg.HistoryScore Score = 1;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_170_GetHistoryScore_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_170_GetHistoryScore_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_170_GetHistoryScore_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_170_GetHistoryScore_Down::MergeFrom(const Processor_170_GetHistoryScore_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_170_GetHistoryScore_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_170_GetHistoryScore_Down::CopyFrom(const Processor_170_GetHistoryScore_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_170_GetHistoryScore_Down::IsInitialized() const {

  return true;
}

void Processor_170_GetHistoryScore_Down::Swap(Processor_170_GetHistoryScore_Down* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_170_GetHistoryScore_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_170_GetHistoryScore_Down_descriptor_;
  metadata.reflection = Processor_170_GetHistoryScore_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_171_GetGroupUserRank_UP::kGroupIdFieldNumber;
const int Processor_171_GetGroupUserRank_UP::kRoomTypeFieldNumber;
const int Processor_171_GetGroupUserRank_UP::kIsTournamentFieldNumber;
#endif  // !_MSC_VER

Processor_171_GetGroupUserRank_UP::Processor_171_GetGroupUserRank_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_171_GetGroupUserRank_UP)
}

void Processor_171_GetGroupUserRank_UP::InitAsDefaultInstance() {
}

Processor_171_GetGroupUserRank_UP::Processor_171_GetGroupUserRank_UP(const Processor_171_GetGroupUserRank_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_171_GetGroupUserRank_UP)
}

void Processor_171_GetGroupUserRank_UP::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  roomtype_ = 0;
  istournament_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_171_GetGroupUserRank_UP::~Processor_171_GetGroupUserRank_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_171_GetGroupUserRank_UP)
  SharedDtor();
}

void Processor_171_GetGroupUserRank_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_171_GetGroupUserRank_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_171_GetGroupUserRank_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_171_GetGroupUserRank_UP_descriptor_;
}

const Processor_171_GetGroupUserRank_UP& Processor_171_GetGroupUserRank_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_171_GetGroupUserRank_UP* Processor_171_GetGroupUserRank_UP::default_instance_ = NULL;

Processor_171_GetGroupUserRank_UP* Processor_171_GetGroupUserRank_UP::New() const {
  return new Processor_171_GetGroupUserRank_UP;
}

void Processor_171_GetGroupUserRank_UP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_171_GetGroupUserRank_UP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, istournament_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_171_GetGroupUserRank_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_171_GetGroupUserRank_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomType;
        break;
      }

      // optional .msg.RoomType RoomType = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 3;
      case 3: {
        if (tag == 24) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_171_GetGroupUserRank_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_171_GetGroupUserRank_UP)
  return false;
#undef DO_
}

void Processor_171_GetGroupUserRank_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_171_GetGroupUserRank_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional .msg.RoomType RoomType = 2;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->roomtype(), output);
  }

  // optional bool IsTournament = 3;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->istournament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_171_GetGroupUserRank_UP)
}

::google_public::protobuf::uint8* Processor_171_GetGroupUserRank_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_171_GetGroupUserRank_UP)
  // optional int32 GroupId = 1;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional .msg.RoomType RoomType = 2;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->roomtype(), target);
  }

  // optional bool IsTournament = 3;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istournament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_171_GetGroupUserRank_UP)
  return target;
}

int Processor_171_GetGroupUserRank_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional .msg.RoomType RoomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional bool IsTournament = 3;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_171_GetGroupUserRank_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_171_GetGroupUserRank_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_171_GetGroupUserRank_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_171_GetGroupUserRank_UP::MergeFrom(const Processor_171_GetGroupUserRank_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_171_GetGroupUserRank_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_171_GetGroupUserRank_UP::CopyFrom(const Processor_171_GetGroupUserRank_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_171_GetGroupUserRank_UP::IsInitialized() const {

  return true;
}

void Processor_171_GetGroupUserRank_UP::Swap(Processor_171_GetGroupUserRank_UP* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(istournament_, other->istournament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_171_GetGroupUserRank_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_171_GetGroupUserRank_UP_descriptor_;
  metadata.reflection = Processor_171_GetGroupUserRank_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_171_GetGroupUserRank_DOWN::kGroupInfoFieldNumber;
const int Processor_171_GetGroupUserRank_DOWN::kRoomTypeFieldNumber;
const int Processor_171_GetGroupUserRank_DOWN::kIsTournamentFieldNumber;
const int Processor_171_GetGroupUserRank_DOWN::kPlayerScoresFieldNumber;
#endif  // !_MSC_VER

Processor_171_GetGroupUserRank_DOWN::Processor_171_GetGroupUserRank_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_171_GetGroupUserRank_DOWN)
}

void Processor_171_GetGroupUserRank_DOWN::InitAsDefaultInstance() {
  groupinfo_ = const_cast< ::msg::GroupInfo*>(&::msg::GroupInfo::default_instance());
  playerscores_ = const_cast< ::msg::PlayerScores*>(&::msg::PlayerScores::default_instance());
}

Processor_171_GetGroupUserRank_DOWN::Processor_171_GetGroupUserRank_DOWN(const Processor_171_GetGroupUserRank_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_171_GetGroupUserRank_DOWN)
}

void Processor_171_GetGroupUserRank_DOWN::SharedCtor() {
  _cached_size_ = 0;
  groupinfo_ = NULL;
  roomtype_ = 0;
  istournament_ = false;
  playerscores_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_171_GetGroupUserRank_DOWN::~Processor_171_GetGroupUserRank_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_171_GetGroupUserRank_DOWN)
  SharedDtor();
}

void Processor_171_GetGroupUserRank_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete groupinfo_;
    delete playerscores_;
  }
}

void Processor_171_GetGroupUserRank_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_171_GetGroupUserRank_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_171_GetGroupUserRank_DOWN_descriptor_;
}

const Processor_171_GetGroupUserRank_DOWN& Processor_171_GetGroupUserRank_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_171_GetGroupUserRank_DOWN* Processor_171_GetGroupUserRank_DOWN::default_instance_ = NULL;

Processor_171_GetGroupUserRank_DOWN* Processor_171_GetGroupUserRank_DOWN::New() const {
  return new Processor_171_GetGroupUserRank_DOWN;
}

void Processor_171_GetGroupUserRank_DOWN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_171_GetGroupUserRank_DOWN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomtype_, istournament_);
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::msg::GroupInfo::Clear();
    }
    if (has_playerscores()) {
      if (playerscores_ != NULL) playerscores_->::msg::PlayerScores::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_171_GetGroupUserRank_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_171_GetGroupUserRank_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.GroupInfo GroupInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomType;
        break;
      }

      // optional .msg.RoomType RoomType = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 3;
      case 3: {
        if (tag == 24) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PlayerScores;
        break;
      }

      // optional .msg.PlayerScores PlayerScores = 4;
      case 4: {
        if (tag == 34) {
         parse_PlayerScores:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerscores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_171_GetGroupUserRank_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_171_GetGroupUserRank_DOWN)
  return false;
#undef DO_
}

void Processor_171_GetGroupUserRank_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_171_GetGroupUserRank_DOWN)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groupinfo(), output);
  }

  // optional .msg.RoomType RoomType = 2;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->roomtype(), output);
  }

  // optional bool IsTournament = 3;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->istournament(), output);
  }

  // optional .msg.PlayerScores PlayerScores = 4;
  if (has_playerscores()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playerscores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_171_GetGroupUserRank_DOWN)
}

::google_public::protobuf::uint8* Processor_171_GetGroupUserRank_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_171_GetGroupUserRank_DOWN)
  // optional .msg.GroupInfo GroupInfo = 1;
  if (has_groupinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groupinfo(), target);
  }

  // optional .msg.RoomType RoomType = 2;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->roomtype(), target);
  }

  // optional bool IsTournament = 3;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istournament(), target);
  }

  // optional .msg.PlayerScores PlayerScores = 4;
  if (has_playerscores()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerscores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_171_GetGroupUserRank_DOWN)
  return target;
}

int Processor_171_GetGroupUserRank_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.GroupInfo GroupInfo = 1;
    if (has_groupinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional .msg.RoomType RoomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional bool IsTournament = 3;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

    // optional .msg.PlayerScores PlayerScores = 4;
    if (has_playerscores()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerscores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_171_GetGroupUserRank_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_171_GetGroupUserRank_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_171_GetGroupUserRank_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_171_GetGroupUserRank_DOWN::MergeFrom(const Processor_171_GetGroupUserRank_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::msg::GroupInfo::MergeFrom(from.groupinfo());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
    if (from.has_playerscores()) {
      mutable_playerscores()->::msg::PlayerScores::MergeFrom(from.playerscores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_171_GetGroupUserRank_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_171_GetGroupUserRank_DOWN::CopyFrom(const Processor_171_GetGroupUserRank_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_171_GetGroupUserRank_DOWN::IsInitialized() const {

  return true;
}

void Processor_171_GetGroupUserRank_DOWN::Swap(Processor_171_GetGroupUserRank_DOWN* other) {
  if (other != this) {
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(istournament_, other->istournament_);
    std::swap(playerscores_, other->playerscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_171_GetGroupUserRank_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_171_GetGroupUserRank_DOWN_descriptor_;
  metadata.reflection = Processor_171_GetGroupUserRank_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_181_JoinTournament::kRoomIDFieldNumber;
const int Processor_181_JoinTournament::kIsJoinFieldNumber;
#endif  // !_MSC_VER

Processor_181_JoinTournament::Processor_181_JoinTournament()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_181_JoinTournament)
}

void Processor_181_JoinTournament::InitAsDefaultInstance() {
}

Processor_181_JoinTournament::Processor_181_JoinTournament(const Processor_181_JoinTournament& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_181_JoinTournament)
}

void Processor_181_JoinTournament::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  isjoin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_181_JoinTournament::~Processor_181_JoinTournament() {
  // @@protoc_insertion_point(destructor:msg.Processor_181_JoinTournament)
  SharedDtor();
}

void Processor_181_JoinTournament::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_181_JoinTournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_181_JoinTournament::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_181_JoinTournament_descriptor_;
}

const Processor_181_JoinTournament& Processor_181_JoinTournament::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_181_JoinTournament* Processor_181_JoinTournament::default_instance_ = NULL;

Processor_181_JoinTournament* Processor_181_JoinTournament::New() const {
  return new Processor_181_JoinTournament;
}

void Processor_181_JoinTournament::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_181_JoinTournament*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, isjoin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_181_JoinTournament::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_181_JoinTournament)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsJoin;
        break;
      }

      // optional bool IsJoin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsJoin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_181_JoinTournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_181_JoinTournament)
  return false;
#undef DO_
}

void Processor_181_JoinTournament::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_181_JoinTournament)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional bool IsJoin = 2;
  if (has_isjoin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->isjoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_181_JoinTournament)
}

::google_public::protobuf::uint8* Processor_181_JoinTournament::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_181_JoinTournament)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional bool IsJoin = 2;
  if (has_isjoin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isjoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_181_JoinTournament)
  return target;
}

int Processor_181_JoinTournament::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional bool IsJoin = 2;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_181_JoinTournament::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_181_JoinTournament* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_181_JoinTournament*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_181_JoinTournament::MergeFrom(const Processor_181_JoinTournament& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_181_JoinTournament::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_181_JoinTournament::CopyFrom(const Processor_181_JoinTournament& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_181_JoinTournament::IsInitialized() const {

  return true;
}

void Processor_181_JoinTournament::Swap(Processor_181_JoinTournament* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(isjoin_, other->isjoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_181_JoinTournament::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_181_JoinTournament_descriptor_;
  metadata.reflection = Processor_181_JoinTournament_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_182_TournamentStart::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_182_TournamentStart::Processor_182_TournamentStart()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_182_TournamentStart)
}

void Processor_182_TournamentStart::InitAsDefaultInstance() {
}

Processor_182_TournamentStart::Processor_182_TournamentStart(const Processor_182_TournamentStart& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_182_TournamentStart)
}

void Processor_182_TournamentStart::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_182_TournamentStart::~Processor_182_TournamentStart() {
  // @@protoc_insertion_point(destructor:msg.Processor_182_TournamentStart)
  SharedDtor();
}

void Processor_182_TournamentStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_182_TournamentStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_182_TournamentStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_182_TournamentStart_descriptor_;
}

const Processor_182_TournamentStart& Processor_182_TournamentStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_182_TournamentStart* Processor_182_TournamentStart::default_instance_ = NULL;

Processor_182_TournamentStart* Processor_182_TournamentStart::New() const {
  return new Processor_182_TournamentStart;
}

void Processor_182_TournamentStart::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_182_TournamentStart::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_182_TournamentStart)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_182_TournamentStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_182_TournamentStart)
  return false;
#undef DO_
}

void Processor_182_TournamentStart::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_182_TournamentStart)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_182_TournamentStart)
}

::google_public::protobuf::uint8* Processor_182_TournamentStart::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_182_TournamentStart)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_182_TournamentStart)
  return target;
}

int Processor_182_TournamentStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_182_TournamentStart::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_182_TournamentStart* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_182_TournamentStart*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_182_TournamentStart::MergeFrom(const Processor_182_TournamentStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_182_TournamentStart::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_182_TournamentStart::CopyFrom(const Processor_182_TournamentStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_182_TournamentStart::IsInitialized() const {

  return true;
}

void Processor_182_TournamentStart::Swap(Processor_182_TournamentStart* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_182_TournamentStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_182_TournamentStart_descriptor_;
  metadata.reflection = Processor_182_TournamentStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_190_ReceiveMessage::kMessageFieldNumber;
const int Processor_190_ReceiveMessage::kIdFieldNumber;
#endif  // !_MSC_VER

Processor_190_ReceiveMessage::Processor_190_ReceiveMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_190_ReceiveMessage)
}

void Processor_190_ReceiveMessage::InitAsDefaultInstance() {
}

Processor_190_ReceiveMessage::Processor_190_ReceiveMessage(const Processor_190_ReceiveMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_190_ReceiveMessage)
}

void Processor_190_ReceiveMessage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_190_ReceiveMessage::~Processor_190_ReceiveMessage() {
  // @@protoc_insertion_point(destructor:msg.Processor_190_ReceiveMessage)
  SharedDtor();
}

void Processor_190_ReceiveMessage::SharedDtor() {
  if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Processor_190_ReceiveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_190_ReceiveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_190_ReceiveMessage_descriptor_;
}

const Processor_190_ReceiveMessage& Processor_190_ReceiveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_190_ReceiveMessage* Processor_190_ReceiveMessage::default_instance_ = NULL;

Processor_190_ReceiveMessage* Processor_190_ReceiveMessage::New() const {
  return new Processor_190_ReceiveMessage;
}

void Processor_190_ReceiveMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_190_ReceiveMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_190_ReceiveMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_190_ReceiveMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_190_ReceiveMessage)
  return false;
#undef DO_
}

void Processor_190_ReceiveMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_190_ReceiveMessage)
  // optional string Message = 1;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_190_ReceiveMessage)
}

::google_public::protobuf::uint8* Processor_190_ReceiveMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_190_ReceiveMessage)
  // optional string Message = 1;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_190_ReceiveMessage)
  return target;
}

int Processor_190_ReceiveMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_190_ReceiveMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_190_ReceiveMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_190_ReceiveMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_190_ReceiveMessage::MergeFrom(const Processor_190_ReceiveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_190_ReceiveMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_190_ReceiveMessage::CopyFrom(const Processor_190_ReceiveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_190_ReceiveMessage::IsInitialized() const {

  return true;
}

void Processor_190_ReceiveMessage::Swap(Processor_190_ReceiveMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_190_ReceiveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_190_ReceiveMessage_descriptor_;
  metadata.reflection = Processor_190_ReceiveMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_190_ReceiveMessage_UP::kChoiceFieldNumber;
const int Processor_190_ReceiveMessage_UP::kIdFieldNumber;
#endif  // !_MSC_VER

Processor_190_ReceiveMessage_UP::Processor_190_ReceiveMessage_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_190_ReceiveMessage_UP)
}

void Processor_190_ReceiveMessage_UP::InitAsDefaultInstance() {
}

Processor_190_ReceiveMessage_UP::Processor_190_ReceiveMessage_UP(const Processor_190_ReceiveMessage_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_190_ReceiveMessage_UP)
}

void Processor_190_ReceiveMessage_UP::SharedCtor() {
  _cached_size_ = 0;
  choice_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_190_ReceiveMessage_UP::~Processor_190_ReceiveMessage_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_190_ReceiveMessage_UP)
  SharedDtor();
}

void Processor_190_ReceiveMessage_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_190_ReceiveMessage_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_190_ReceiveMessage_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_190_ReceiveMessage_UP_descriptor_;
}

const Processor_190_ReceiveMessage_UP& Processor_190_ReceiveMessage_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_190_ReceiveMessage_UP* Processor_190_ReceiveMessage_UP::default_instance_ = NULL;

Processor_190_ReceiveMessage_UP* Processor_190_ReceiveMessage_UP::New() const {
  return new Processor_190_ReceiveMessage_UP;
}

void Processor_190_ReceiveMessage_UP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_190_ReceiveMessage_UP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(choice_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_190_ReceiveMessage_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_190_ReceiveMessage_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool choice = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &choice_)));
          set_has_choice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_190_ReceiveMessage_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_190_ReceiveMessage_UP)
  return false;
#undef DO_
}

void Processor_190_ReceiveMessage_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_190_ReceiveMessage_UP)
  // optional bool choice = 1;
  if (has_choice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->choice(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_190_ReceiveMessage_UP)
}

::google_public::protobuf::uint8* Processor_190_ReceiveMessage_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_190_ReceiveMessage_UP)
  // optional bool choice = 1;
  if (has_choice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->choice(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_190_ReceiveMessage_UP)
  return target;
}

int Processor_190_ReceiveMessage_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool choice = 1;
    if (has_choice()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_190_ReceiveMessage_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_190_ReceiveMessage_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_190_ReceiveMessage_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_190_ReceiveMessage_UP::MergeFrom(const Processor_190_ReceiveMessage_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choice()) {
      set_choice(from.choice());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_190_ReceiveMessage_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_190_ReceiveMessage_UP::CopyFrom(const Processor_190_ReceiveMessage_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_190_ReceiveMessage_UP::IsInitialized() const {

  return true;
}

void Processor_190_ReceiveMessage_UP::Swap(Processor_190_ReceiveMessage_UP* other) {
  if (other != this) {
    std::swap(choice_, other->choice_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_190_ReceiveMessage_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_190_ReceiveMessage_UP_descriptor_;
  metadata.reflection = Processor_190_ReceiveMessage_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_191_NotifyChange::kRoomChangeFieldNumber;
const int Processor_191_NotifyChange::kFriendChangeFieldNumber;
const int Processor_191_NotifyChange::kGroupChangeFieldNumber;
#endif  // !_MSC_VER

Processor_191_NotifyChange::Processor_191_NotifyChange()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_191_NotifyChange)
}

void Processor_191_NotifyChange::InitAsDefaultInstance() {
}

Processor_191_NotifyChange::Processor_191_NotifyChange(const Processor_191_NotifyChange& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_191_NotifyChange)
}

void Processor_191_NotifyChange::SharedCtor() {
  _cached_size_ = 0;
  roomchange_ = false;
  friendchange_ = false;
  groupchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_191_NotifyChange::~Processor_191_NotifyChange() {
  // @@protoc_insertion_point(destructor:msg.Processor_191_NotifyChange)
  SharedDtor();
}

void Processor_191_NotifyChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_191_NotifyChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_191_NotifyChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_191_NotifyChange_descriptor_;
}

const Processor_191_NotifyChange& Processor_191_NotifyChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_191_NotifyChange* Processor_191_NotifyChange::default_instance_ = NULL;

Processor_191_NotifyChange* Processor_191_NotifyChange::New() const {
  return new Processor_191_NotifyChange;
}

void Processor_191_NotifyChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_191_NotifyChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomchange_, groupchange_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_191_NotifyChange::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_191_NotifyChange)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool RoomChange = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roomchange_)));
          set_has_roomchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FriendChange;
        break;
      }

      // optional bool FriendChange = 2;
      case 2: {
        if (tag == 16) {
         parse_FriendChange:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friendchange_)));
          set_has_friendchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupChange;
        break;
      }

      // optional bool GroupChange = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupChange:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &groupchange_)));
          set_has_groupchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_191_NotifyChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_191_NotifyChange)
  return false;
#undef DO_
}

void Processor_191_NotifyChange::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_191_NotifyChange)
  // optional bool RoomChange = 1;
  if (has_roomchange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->roomchange(), output);
  }

  // optional bool FriendChange = 2;
  if (has_friendchange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->friendchange(), output);
  }

  // optional bool GroupChange = 3;
  if (has_groupchange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->groupchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_191_NotifyChange)
}

::google_public::protobuf::uint8* Processor_191_NotifyChange::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_191_NotifyChange)
  // optional bool RoomChange = 1;
  if (has_roomchange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->roomchange(), target);
  }

  // optional bool FriendChange = 2;
  if (has_friendchange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->friendchange(), target);
  }

  // optional bool GroupChange = 3;
  if (has_groupchange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->groupchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_191_NotifyChange)
  return target;
}

int Processor_191_NotifyChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool RoomChange = 1;
    if (has_roomchange()) {
      total_size += 1 + 1;
    }

    // optional bool FriendChange = 2;
    if (has_friendchange()) {
      total_size += 1 + 1;
    }

    // optional bool GroupChange = 3;
    if (has_groupchange()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_191_NotifyChange::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_191_NotifyChange* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_191_NotifyChange*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_191_NotifyChange::MergeFrom(const Processor_191_NotifyChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomchange()) {
      set_roomchange(from.roomchange());
    }
    if (from.has_friendchange()) {
      set_friendchange(from.friendchange());
    }
    if (from.has_groupchange()) {
      set_groupchange(from.groupchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_191_NotifyChange::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_191_NotifyChange::CopyFrom(const Processor_191_NotifyChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_191_NotifyChange::IsInitialized() const {

  return true;
}

void Processor_191_NotifyChange::Swap(Processor_191_NotifyChange* other) {
  if (other != this) {
    std::swap(roomchange_, other->roomchange_);
    std::swap(friendchange_, other->friendchange_);
    std::swap(groupchange_, other->groupchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_191_NotifyChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_191_NotifyChange_descriptor_;
  metadata.reflection = Processor_191_NotifyChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Moment::kUserInfoFieldNumber;
const int Moment::kMomentIdFieldNumber;
const int Moment::kMomentInfoFieldNumber;
const int Moment::kDisplayTypeFieldNumber;
const int Moment::kTimeFieldNumber;
const int Moment::kCommentInfosFieldNumber;
#endif  // !_MSC_VER

Moment::Moment()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Moment)
}

void Moment::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
  momentinfo_ = const_cast< ::msg::MomentInfo*>(&::msg::MomentInfo::default_instance());
  commentinfos_ = const_cast< ::msg::CommentInfos*>(&::msg::CommentInfos::default_instance());
}

Moment::Moment(const Moment& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Moment)
}

void Moment::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  momentid_ = 0;
  momentinfo_ = NULL;
  displaytype_ = 1;
  time_ = GOOGLE_LONGLONG(0);
  commentinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Moment::~Moment() {
  // @@protoc_insertion_point(destructor:msg.Moment)
  SharedDtor();
}

void Moment::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete momentinfo_;
    delete commentinfos_;
  }
}

void Moment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Moment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Moment_descriptor_;
}

const Moment& Moment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Moment* Moment::default_instance_ = NULL;

Moment* Moment::New() const {
  return new Moment;
}

void Moment::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::msg::UserDetailInfo::Clear();
    }
    momentid_ = 0;
    if (has_momentinfo()) {
      if (momentinfo_ != NULL) momentinfo_->::msg::MomentInfo::Clear();
    }
    displaytype_ = 1;
    time_ = GOOGLE_LONGLONG(0);
    if (has_commentinfos()) {
      if (commentinfos_ != NULL) commentinfos_->::msg::CommentInfos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Moment::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Moment)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MomentId;
        break;
      }

      // optional int32 MomentId = 2;
      case 2: {
        if (tag == 16) {
         parse_MomentId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MomentInfo;
        break;
      }

      // optional .msg.MomentInfo MomentInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_MomentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_momentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DisplayType;
        break;
      }

      // optional .msg.MomentDisplayType DisplayType = 4;
      case 4: {
        if (tag == 32) {
         parse_DisplayType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MomentDisplayType_IsValid(value)) {
            set_displaytype(static_cast< ::msg::MomentDisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // optional int64 Time = 5;
      case 5: {
        if (tag == 40) {
         parse_Time:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CommentInfos;
        break;
      }

      // optional .msg.CommentInfos CommentInfos = 6;
      case 6: {
        if (tag == 50) {
         parse_CommentInfos:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Moment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Moment)
  return false;
#undef DO_
}

void Moment::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Moment)
  // optional .msg.UserDetailInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional int32 MomentId = 2;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->momentid(), output);
  }

  // optional .msg.MomentInfo MomentInfo = 3;
  if (has_momentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->momentinfo(), output);
  }

  // optional .msg.MomentDisplayType DisplayType = 4;
  if (has_displaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->displaytype(), output);
  }

  // optional int64 Time = 5;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }

  // optional .msg.CommentInfos CommentInfos = 6;
  if (has_commentinfos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->commentinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Moment)
}

::google_public::protobuf::uint8* Moment::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Moment)
  // optional .msg.UserDetailInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional int32 MomentId = 2;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->momentid(), target);
  }

  // optional .msg.MomentInfo MomentInfo = 3;
  if (has_momentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->momentinfo(), target);
  }

  // optional .msg.MomentDisplayType DisplayType = 4;
  if (has_displaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->displaytype(), target);
  }

  // optional int64 Time = 5;
  if (has_time()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }

  // optional .msg.CommentInfos CommentInfos = 6;
  if (has_commentinfos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->commentinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Moment)
  return target;
}

int Moment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 MomentId = 2;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

    // optional .msg.MomentInfo MomentInfo = 3;
    if (has_momentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->momentinfo());
    }

    // optional .msg.MomentDisplayType DisplayType = 4;
    if (has_displaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->displaytype());
    }

    // optional int64 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .msg.CommentInfos CommentInfos = 6;
    if (has_commentinfos()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Moment::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Moment* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Moment*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Moment::MergeFrom(const Moment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::msg::UserDetailInfo::MergeFrom(from.userinfo());
    }
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
    if (from.has_momentinfo()) {
      mutable_momentinfo()->::msg::MomentInfo::MergeFrom(from.momentinfo());
    }
    if (from.has_displaytype()) {
      set_displaytype(from.displaytype());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_commentinfos()) {
      mutable_commentinfos()->::msg::CommentInfos::MergeFrom(from.commentinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Moment::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Moment::CopyFrom(const Moment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Moment::IsInitialized() const {

  return true;
}

void Moment::Swap(Moment* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(momentid_, other->momentid_);
    std::swap(momentinfo_, other->momentinfo_);
    std::swap(displaytype_, other->displaytype_);
    std::swap(time_, other->time_);
    std::swap(commentinfos_, other->commentinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Moment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Moment_descriptor_;
  metadata.reflection = Moment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentInfos::kCommentInfoFieldNumber;
#endif  // !_MSC_VER

CommentInfos::CommentInfos()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CommentInfos)
}

void CommentInfos::InitAsDefaultInstance() {
}

CommentInfos::CommentInfos(const CommentInfos& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CommentInfos)
}

void CommentInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentInfos::~CommentInfos() {
  // @@protoc_insertion_point(destructor:msg.CommentInfos)
  SharedDtor();
}

void CommentInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommentInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CommentInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentInfos_descriptor_;
}

const CommentInfos& CommentInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CommentInfos* CommentInfos::default_instance_ = NULL;

CommentInfos* CommentInfos::New() const {
  return new CommentInfos;
}

void CommentInfos::Clear() {
  commentinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentInfos::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CommentInfos)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.CommentInfo CommentInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_CommentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CommentInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CommentInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CommentInfos)
  return false;
#undef DO_
}

void CommentInfos::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CommentInfos)
  // repeated .msg.CommentInfo CommentInfo = 1;
  for (int i = 0; i < this->commentinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commentinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CommentInfos)
}

::google_public::protobuf::uint8* CommentInfos::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CommentInfos)
  // repeated .msg.CommentInfo CommentInfo = 1;
  for (int i = 0; i < this->commentinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commentinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CommentInfos)
  return target;
}

int CommentInfos::ByteSize() const {
  int total_size = 0;

  // repeated .msg.CommentInfo CommentInfo = 1;
  total_size += 1 * this->commentinfo_size();
  for (int i = 0; i < this->commentinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commentinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentInfos::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentInfos* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CommentInfos*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentInfos::MergeFrom(const CommentInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  commentinfo_.MergeFrom(from.commentinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentInfos::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentInfos::CopyFrom(const CommentInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInfos::IsInitialized() const {

  return true;
}

void CommentInfos::Swap(CommentInfos* other) {
  if (other != this) {
    commentinfo_.Swap(&other->commentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CommentInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CommentInfos_descriptor_;
  metadata.reflection = CommentInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MomentInfo::kMomentTypeFieldNumber;
const int MomentInfo::kNormalMomentInfoFieldNumber;
#endif  // !_MSC_VER

MomentInfo::MomentInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MomentInfo)
}

void MomentInfo::InitAsDefaultInstance() {
  normalmomentinfo_ = const_cast< ::msg::NormalMomentInfo*>(&::msg::NormalMomentInfo::default_instance());
}

MomentInfo::MomentInfo(const MomentInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MomentInfo)
}

void MomentInfo::SharedCtor() {
  _cached_size_ = 0;
  momenttype_ = 0;
  normalmomentinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MomentInfo::~MomentInfo() {
  // @@protoc_insertion_point(destructor:msg.MomentInfo)
  SharedDtor();
}

void MomentInfo::SharedDtor() {
  if (this != default_instance_) {
    delete normalmomentinfo_;
  }
}

void MomentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MomentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MomentInfo_descriptor_;
}

const MomentInfo& MomentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MomentInfo* MomentInfo::default_instance_ = NULL;

MomentInfo* MomentInfo::New() const {
  return new MomentInfo;
}

void MomentInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    momenttype_ = 0;
    if (has_normalmomentinfo()) {
      if (normalmomentinfo_ != NULL) normalmomentinfo_->::msg::NormalMomentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MomentInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MomentInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momenttype_)));
          set_has_momenttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NormalMomentInfo;
        break;
      }

      // optional .msg.NormalMomentInfo NormalMomentInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_NormalMomentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalmomentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MomentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MomentInfo)
  return false;
#undef DO_
}

void MomentInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MomentInfo)
  // optional int32 MomentType = 1;
  if (has_momenttype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momenttype(), output);
  }

  // optional .msg.NormalMomentInfo NormalMomentInfo = 2;
  if (has_normalmomentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normalmomentinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MomentInfo)
}

::google_public::protobuf::uint8* MomentInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MomentInfo)
  // optional int32 MomentType = 1;
  if (has_momenttype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momenttype(), target);
  }

  // optional .msg.NormalMomentInfo NormalMomentInfo = 2;
  if (has_normalmomentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normalmomentinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MomentInfo)
  return target;
}

int MomentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentType = 1;
    if (has_momenttype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momenttype());
    }

    // optional .msg.NormalMomentInfo NormalMomentInfo = 2;
    if (has_normalmomentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normalmomentinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MomentInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MomentInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MomentInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MomentInfo::MergeFrom(const MomentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momenttype()) {
      set_momenttype(from.momenttype());
    }
    if (from.has_normalmomentinfo()) {
      mutable_normalmomentinfo()->::msg::NormalMomentInfo::MergeFrom(from.normalmomentinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MomentInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MomentInfo::CopyFrom(const MomentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MomentInfo::IsInitialized() const {

  return true;
}

void MomentInfo::Swap(MomentInfo* other) {
  if (other != this) {
    std::swap(momenttype_, other->momenttype_);
    std::swap(normalmomentinfo_, other->normalmomentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MomentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MomentInfo_descriptor_;
  metadata.reflection = MomentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalMomentInfo::kWordContentFieldNumber;
const int NormalMomentInfo::kPicNameFieldNumber;
const int NormalMomentInfo::kHandIdFieldNumber;
#endif  // !_MSC_VER

NormalMomentInfo::NormalMomentInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.NormalMomentInfo)
}

void NormalMomentInfo::InitAsDefaultInstance() {
}

NormalMomentInfo::NormalMomentInfo(const NormalMomentInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.NormalMomentInfo)
}

void NormalMomentInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wordcontent_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  handid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalMomentInfo::~NormalMomentInfo() {
  // @@protoc_insertion_point(destructor:msg.NormalMomentInfo)
  SharedDtor();
}

void NormalMomentInfo::SharedDtor() {
  if (wordcontent_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wordcontent_;
  }
  if (this != default_instance_) {
  }
}

void NormalMomentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* NormalMomentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalMomentInfo_descriptor_;
}

const NormalMomentInfo& NormalMomentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

NormalMomentInfo* NormalMomentInfo::default_instance_ = NULL;

NormalMomentInfo* NormalMomentInfo::New() const {
  return new NormalMomentInfo;
}

void NormalMomentInfo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_wordcontent()) {
      if (wordcontent_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wordcontent_->clear();
      }
    }
    handid_ = 0;
  }
  picname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalMomentInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.NormalMomentInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string WordContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wordcontent()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wordcontent().data(), this->wordcontent().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "wordcontent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PicName;
        break;
      }

      // repeated string PicName = 2;
      case 2: {
        if (tag == 18) {
         parse_PicName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_picname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picname(this->picname_size() - 1).data(),
            this->picname(this->picname_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "picname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PicName;
        if (input->ExpectTag(24)) goto parse_HandId;
        break;
      }

      // optional int32 HandId = 3;
      case 3: {
        if (tag == 24) {
         parse_HandId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.NormalMomentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.NormalMomentInfo)
  return false;
#undef DO_
}

void NormalMomentInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.NormalMomentInfo)
  // optional string WordContent = 1;
  if (has_wordcontent()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordcontent().data(), this->wordcontent().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "wordcontent");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wordcontent(), output);
  }

  // repeated string PicName = 2;
  for (int i = 0; i < this->picname_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->picname(i).data(), this->picname(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "picname");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->picname(i), output);
  }

  // optional int32 HandId = 3;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->handid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.NormalMomentInfo)
}

::google_public::protobuf::uint8* NormalMomentInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.NormalMomentInfo)
  // optional string WordContent = 1;
  if (has_wordcontent()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordcontent().data(), this->wordcontent().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "wordcontent");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wordcontent(), target);
  }

  // repeated string PicName = 2;
  for (int i = 0; i < this->picname_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picname(i).data(), this->picname(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "picname");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->picname(i), target);
  }

  // optional int32 HandId = 3;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.NormalMomentInfo)
  return target;
}

int NormalMomentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string WordContent = 1;
    if (has_wordcontent()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->wordcontent());
    }

    // optional int32 HandId = 3;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

  }
  // repeated string PicName = 2;
  total_size += 1 * this->picname_size();
  for (int i = 0; i < this->picname_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->picname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalMomentInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalMomentInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const NormalMomentInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalMomentInfo::MergeFrom(const NormalMomentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  picname_.MergeFrom(from.picname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wordcontent()) {
      set_wordcontent(from.wordcontent());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalMomentInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalMomentInfo::CopyFrom(const NormalMomentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalMomentInfo::IsInitialized() const {

  return true;
}

void NormalMomentInfo::Swap(NormalMomentInfo* other) {
  if (other != this) {
    std::swap(wordcontent_, other->wordcontent_);
    picname_.Swap(&other->picname_);
    std::swap(handid_, other->handid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata NormalMomentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = NormalMomentInfo_descriptor_;
  metadata.reflection = NormalMomentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_200_PublishMoment::kMomentFieldNumber;
#endif  // !_MSC_VER

Processor_200_PublishMoment::Processor_200_PublishMoment()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_200_PublishMoment)
}

void Processor_200_PublishMoment::InitAsDefaultInstance() {
  moment_ = const_cast< ::msg::Moment*>(&::msg::Moment::default_instance());
}

Processor_200_PublishMoment::Processor_200_PublishMoment(const Processor_200_PublishMoment& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_200_PublishMoment)
}

void Processor_200_PublishMoment::SharedCtor() {
  _cached_size_ = 0;
  moment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_200_PublishMoment::~Processor_200_PublishMoment() {
  // @@protoc_insertion_point(destructor:msg.Processor_200_PublishMoment)
  SharedDtor();
}

void Processor_200_PublishMoment::SharedDtor() {
  if (this != default_instance_) {
    delete moment_;
  }
}

void Processor_200_PublishMoment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_200_PublishMoment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_200_PublishMoment_descriptor_;
}

const Processor_200_PublishMoment& Processor_200_PublishMoment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_200_PublishMoment* Processor_200_PublishMoment::default_instance_ = NULL;

Processor_200_PublishMoment* Processor_200_PublishMoment::New() const {
  return new Processor_200_PublishMoment;
}

void Processor_200_PublishMoment::Clear() {
  if (has_moment()) {
    if (moment_ != NULL) moment_->::msg::Moment::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_200_PublishMoment::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_200_PublishMoment)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Moment Moment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_200_PublishMoment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_200_PublishMoment)
  return false;
#undef DO_
}

void Processor_200_PublishMoment::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_200_PublishMoment)
  // optional .msg.Moment Moment = 1;
  if (has_moment()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_200_PublishMoment)
}

::google_public::protobuf::uint8* Processor_200_PublishMoment::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_200_PublishMoment)
  // optional .msg.Moment Moment = 1;
  if (has_moment()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_200_PublishMoment)
  return target;
}

int Processor_200_PublishMoment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Moment Moment = 1;
    if (has_moment()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_200_PublishMoment::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_200_PublishMoment* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_200_PublishMoment*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_200_PublishMoment::MergeFrom(const Processor_200_PublishMoment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moment()) {
      mutable_moment()->::msg::Moment::MergeFrom(from.moment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_200_PublishMoment::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_200_PublishMoment::CopyFrom(const Processor_200_PublishMoment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_200_PublishMoment::IsInitialized() const {

  return true;
}

void Processor_200_PublishMoment::Swap(Processor_200_PublishMoment* other) {
  if (other != this) {
    std::swap(moment_, other->moment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_200_PublishMoment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_200_PublishMoment_descriptor_;
  metadata.reflection = Processor_200_PublishMoment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_201_GetMoment_UP::kMomentIdFieldNumber;
const int Processor_201_GetMoment_UP::kIsDownFieldNumber;
const int Processor_201_GetMoment_UP::kTypeFieldNumber;
#endif  // !_MSC_VER

Processor_201_GetMoment_UP::Processor_201_GetMoment_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_201_GetMoment_UP)
}

void Processor_201_GetMoment_UP::InitAsDefaultInstance() {
}

Processor_201_GetMoment_UP::Processor_201_GetMoment_UP(const Processor_201_GetMoment_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_201_GetMoment_UP)
}

void Processor_201_GetMoment_UP::SharedCtor() {
  _cached_size_ = 0;
  momentid_ = 0;
  isdown_ = false;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_201_GetMoment_UP::~Processor_201_GetMoment_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_201_GetMoment_UP)
  SharedDtor();
}

void Processor_201_GetMoment_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_201_GetMoment_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_201_GetMoment_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_201_GetMoment_UP_descriptor_;
}

const Processor_201_GetMoment_UP& Processor_201_GetMoment_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_201_GetMoment_UP* Processor_201_GetMoment_UP::default_instance_ = NULL;

Processor_201_GetMoment_UP* Processor_201_GetMoment_UP::New() const {
  return new Processor_201_GetMoment_UP;
}

void Processor_201_GetMoment_UP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_201_GetMoment_UP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(momentid_, isdown_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_201_GetMoment_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_201_GetMoment_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsDown;
        break;
      }

      // optional bool IsDown = 2;
      case 2: {
        if (tag == 16) {
         parse_IsDown:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdown_)));
          set_has_isdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional .msg.MomentDisplayType Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MomentDisplayType_IsValid(value)) {
            set_type(static_cast< ::msg::MomentDisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_201_GetMoment_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_201_GetMoment_UP)
  return false;
#undef DO_
}

void Processor_201_GetMoment_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_201_GetMoment_UP)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momentid(), output);
  }

  // optional bool IsDown = 2;
  if (has_isdown()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->isdown(), output);
  }

  // optional .msg.MomentDisplayType Type = 3;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_201_GetMoment_UP)
}

::google_public::protobuf::uint8* Processor_201_GetMoment_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_201_GetMoment_UP)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momentid(), target);
  }

  // optional bool IsDown = 2;
  if (has_isdown()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdown(), target);
  }

  // optional .msg.MomentDisplayType Type = 3;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_201_GetMoment_UP)
  return target;
}

int Processor_201_GetMoment_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentId = 1;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

    // optional bool IsDown = 2;
    if (has_isdown()) {
      total_size += 1 + 1;
    }

    // optional .msg.MomentDisplayType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_201_GetMoment_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_201_GetMoment_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_201_GetMoment_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_201_GetMoment_UP::MergeFrom(const Processor_201_GetMoment_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
    if (from.has_isdown()) {
      set_isdown(from.isdown());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_201_GetMoment_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_201_GetMoment_UP::CopyFrom(const Processor_201_GetMoment_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_201_GetMoment_UP::IsInitialized() const {

  return true;
}

void Processor_201_GetMoment_UP::Swap(Processor_201_GetMoment_UP* other) {
  if (other != this) {
    std::swap(momentid_, other->momentid_);
    std::swap(isdown_, other->isdown_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_201_GetMoment_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_201_GetMoment_UP_descriptor_;
  metadata.reflection = Processor_201_GetMoment_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_201_GetMoment_DOWN::kMomentFieldNumber;
#endif  // !_MSC_VER

Processor_201_GetMoment_DOWN::Processor_201_GetMoment_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_201_GetMoment_DOWN)
}

void Processor_201_GetMoment_DOWN::InitAsDefaultInstance() {
}

Processor_201_GetMoment_DOWN::Processor_201_GetMoment_DOWN(const Processor_201_GetMoment_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_201_GetMoment_DOWN)
}

void Processor_201_GetMoment_DOWN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_201_GetMoment_DOWN::~Processor_201_GetMoment_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_201_GetMoment_DOWN)
  SharedDtor();
}

void Processor_201_GetMoment_DOWN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_201_GetMoment_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_201_GetMoment_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_201_GetMoment_DOWN_descriptor_;
}

const Processor_201_GetMoment_DOWN& Processor_201_GetMoment_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_201_GetMoment_DOWN* Processor_201_GetMoment_DOWN::default_instance_ = NULL;

Processor_201_GetMoment_DOWN* Processor_201_GetMoment_DOWN::New() const {
  return new Processor_201_GetMoment_DOWN;
}

void Processor_201_GetMoment_DOWN::Clear() {
  moment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_201_GetMoment_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_201_GetMoment_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Moment Moment = 1;
      case 1: {
        if (tag == 10) {
         parse_Moment:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Moment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_201_GetMoment_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_201_GetMoment_DOWN)
  return false;
#undef DO_
}

void Processor_201_GetMoment_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_201_GetMoment_DOWN)
  // repeated .msg.Moment Moment = 1;
  for (int i = 0; i < this->moment_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_201_GetMoment_DOWN)
}

::google_public::protobuf::uint8* Processor_201_GetMoment_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_201_GetMoment_DOWN)
  // repeated .msg.Moment Moment = 1;
  for (int i = 0; i < this->moment_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_201_GetMoment_DOWN)
  return target;
}

int Processor_201_GetMoment_DOWN::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Moment Moment = 1;
  total_size += 1 * this->moment_size();
  for (int i = 0; i < this->moment_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_201_GetMoment_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_201_GetMoment_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_201_GetMoment_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_201_GetMoment_DOWN::MergeFrom(const Processor_201_GetMoment_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  moment_.MergeFrom(from.moment_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_201_GetMoment_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_201_GetMoment_DOWN::CopyFrom(const Processor_201_GetMoment_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_201_GetMoment_DOWN::IsInitialized() const {

  return true;
}

void Processor_201_GetMoment_DOWN::Swap(Processor_201_GetMoment_DOWN* other) {
  if (other != this) {
    moment_.Swap(&other->moment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_201_GetMoment_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_201_GetMoment_DOWN_descriptor_;
  metadata.reflection = Processor_201_GetMoment_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_202_DeleteMoment::kMomentIdFieldNumber;
#endif  // !_MSC_VER

Processor_202_DeleteMoment::Processor_202_DeleteMoment()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_202_DeleteMoment)
}

void Processor_202_DeleteMoment::InitAsDefaultInstance() {
}

Processor_202_DeleteMoment::Processor_202_DeleteMoment(const Processor_202_DeleteMoment& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_202_DeleteMoment)
}

void Processor_202_DeleteMoment::SharedCtor() {
  _cached_size_ = 0;
  momentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_202_DeleteMoment::~Processor_202_DeleteMoment() {
  // @@protoc_insertion_point(destructor:msg.Processor_202_DeleteMoment)
  SharedDtor();
}

void Processor_202_DeleteMoment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_202_DeleteMoment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_202_DeleteMoment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_202_DeleteMoment_descriptor_;
}

const Processor_202_DeleteMoment& Processor_202_DeleteMoment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_202_DeleteMoment* Processor_202_DeleteMoment::default_instance_ = NULL;

Processor_202_DeleteMoment* Processor_202_DeleteMoment::New() const {
  return new Processor_202_DeleteMoment;
}

void Processor_202_DeleteMoment::Clear() {
  momentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_202_DeleteMoment::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_202_DeleteMoment)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_202_DeleteMoment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_202_DeleteMoment)
  return false;
#undef DO_
}

void Processor_202_DeleteMoment::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_202_DeleteMoment)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_202_DeleteMoment)
}

::google_public::protobuf::uint8* Processor_202_DeleteMoment::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_202_DeleteMoment)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_202_DeleteMoment)
  return target;
}

int Processor_202_DeleteMoment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentId = 1;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_202_DeleteMoment::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_202_DeleteMoment* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_202_DeleteMoment*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_202_DeleteMoment::MergeFrom(const Processor_202_DeleteMoment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_202_DeleteMoment::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_202_DeleteMoment::CopyFrom(const Processor_202_DeleteMoment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_202_DeleteMoment::IsInitialized() const {

  return true;
}

void Processor_202_DeleteMoment::Swap(Processor_202_DeleteMoment* other) {
  if (other != this) {
    std::swap(momentid_, other->momentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_202_DeleteMoment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_202_DeleteMoment_descriptor_;
  metadata.reflection = Processor_202_DeleteMoment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentInfo::kMomentIdFieldNumber;
const int CommentInfo::kCommentIdFieldNumber;
const int CommentInfo::kTypeFieldNumber;
const int CommentInfo::kUserInfoFieldNumber;
const int CommentInfo::kContentFieldNumber;
const int CommentInfo::kTimeFieldNumber;
const int CommentInfo::kParentCommentFieldNumber;
const int CommentInfo::kIsDeleteFieldNumber;
#endif  // !_MSC_VER

CommentInfo::CommentInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CommentInfo)
}

void CommentInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

CommentInfo::CommentInfo(const CommentInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CommentInfo)
}

void CommentInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  momentid_ = 0;
  commentid_ = 0;
  type_ = 1;
  userinfo_ = NULL;
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  parentcomment_ = 0;
  isdelete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentInfo::~CommentInfo() {
  // @@protoc_insertion_point(destructor:msg.CommentInfo)
  SharedDtor();
}

void CommentInfo::SharedDtor() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CommentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CommentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentInfo_descriptor_;
}

const CommentInfo& CommentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CommentInfo* CommentInfo::default_instance_ = NULL;

CommentInfo* CommentInfo::New() const {
  return new CommentInfo;
}

void CommentInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommentInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(momentid_, commentid_);
    ZR_(parentcomment_, isdelete_);
    type_ = 1;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CommentInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CommentId;
        break;
      }

      // optional int32 CommentId = 2;
      case 2: {
        if (tag == 16) {
         parse_CommentId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentid_)));
          set_has_commentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional .msg.CommentType Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::CommentType_IsValid(value)) {
            set_type(static_cast< ::msg::CommentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .msg.UserDetailInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Content;
        break;
      }

      // optional string Content = 5;
      case 5: {
        if (tag == 42) {
         parse_Content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Time;
        break;
      }

      // optional int64 Time = 6;
      case 6: {
        if (tag == 48) {
         parse_Time:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_parentComment;
        break;
      }

      // optional int32 parentComment = 7;
      case 7: {
        if (tag == 56) {
         parse_parentComment:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentcomment_)));
          set_has_parentcomment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isDelete;
        break;
      }

      // optional bool isDelete = 8;
      case 8: {
        if (tag == 64) {
         parse_isDelete:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CommentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CommentInfo)
  return false;
#undef DO_
}

void CommentInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CommentInfo)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momentid(), output);
  }

  // optional int32 CommentId = 2;
  if (has_commentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->commentid(), output);
  }

  // optional .msg.CommentType Type = 3;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .msg.UserDetailInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  // optional string Content = 5;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional int64 Time = 6;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  // optional int32 parentComment = 7;
  if (has_parentcomment()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->parentcomment(), output);
  }

  // optional bool isDelete = 8;
  if (has_isdelete()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(8, this->isdelete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CommentInfo)
}

::google_public::protobuf::uint8* CommentInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CommentInfo)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momentid(), target);
  }

  // optional int32 CommentId = 2;
  if (has_commentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->commentid(), target);
  }

  // optional .msg.CommentType Type = 3;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .msg.UserDetailInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  // optional string Content = 5;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional int64 Time = 6;
  if (has_time()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  // optional int32 parentComment = 7;
  if (has_parentcomment()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->parentcomment(), target);
  }

  // optional bool isDelete = 8;
  if (has_isdelete()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdelete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CommentInfo)
  return target;
}

int CommentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentId = 1;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

    // optional int32 CommentId = 2;
    if (has_commentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->commentid());
    }

    // optional .msg.CommentType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.UserDetailInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional string Content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 Time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 parentComment = 7;
    if (has_parentcomment()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->parentcomment());
    }

    // optional bool isDelete = 8;
    if (has_isdelete()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CommentInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentInfo::MergeFrom(const CommentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
    if (from.has_commentid()) {
      set_commentid(from.commentid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::msg::UserDetailInfo::MergeFrom(from.userinfo());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_parentcomment()) {
      set_parentcomment(from.parentcomment());
    }
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentInfo::CopyFrom(const CommentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInfo::IsInitialized() const {

  return true;
}

void CommentInfo::Swap(CommentInfo* other) {
  if (other != this) {
    std::swap(momentid_, other->momentid_);
    std::swap(commentid_, other->commentid_);
    std::swap(type_, other->type_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(content_, other->content_);
    std::swap(time_, other->time_);
    std::swap(parentcomment_, other->parentcomment_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CommentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CommentInfo_descriptor_;
  metadata.reflection = CommentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_203_PublishComment::kCommentInfoFieldNumber;
#endif  // !_MSC_VER

Processor_203_PublishComment::Processor_203_PublishComment()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_203_PublishComment)
}

void Processor_203_PublishComment::InitAsDefaultInstance() {
  commentinfo_ = const_cast< ::msg::CommentInfo*>(&::msg::CommentInfo::default_instance());
}

Processor_203_PublishComment::Processor_203_PublishComment(const Processor_203_PublishComment& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_203_PublishComment)
}

void Processor_203_PublishComment::SharedCtor() {
  _cached_size_ = 0;
  commentinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_203_PublishComment::~Processor_203_PublishComment() {
  // @@protoc_insertion_point(destructor:msg.Processor_203_PublishComment)
  SharedDtor();
}

void Processor_203_PublishComment::SharedDtor() {
  if (this != default_instance_) {
    delete commentinfo_;
  }
}

void Processor_203_PublishComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_203_PublishComment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_203_PublishComment_descriptor_;
}

const Processor_203_PublishComment& Processor_203_PublishComment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_203_PublishComment* Processor_203_PublishComment::default_instance_ = NULL;

Processor_203_PublishComment* Processor_203_PublishComment::New() const {
  return new Processor_203_PublishComment;
}

void Processor_203_PublishComment::Clear() {
  if (has_commentinfo()) {
    if (commentinfo_ != NULL) commentinfo_->::msg::CommentInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_203_PublishComment::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_203_PublishComment)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommentInfo CommentInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_203_PublishComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_203_PublishComment)
  return false;
#undef DO_
}

void Processor_203_PublishComment::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_203_PublishComment)
  // optional .msg.CommentInfo CommentInfo = 1;
  if (has_commentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commentinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_203_PublishComment)
}

::google_public::protobuf::uint8* Processor_203_PublishComment::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_203_PublishComment)
  // optional .msg.CommentInfo CommentInfo = 1;
  if (has_commentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commentinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_203_PublishComment)
  return target;
}

int Processor_203_PublishComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommentInfo CommentInfo = 1;
    if (has_commentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_203_PublishComment::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_203_PublishComment* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_203_PublishComment*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_203_PublishComment::MergeFrom(const Processor_203_PublishComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commentinfo()) {
      mutable_commentinfo()->::msg::CommentInfo::MergeFrom(from.commentinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_203_PublishComment::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_203_PublishComment::CopyFrom(const Processor_203_PublishComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_203_PublishComment::IsInitialized() const {

  return true;
}

void Processor_203_PublishComment::Swap(Processor_203_PublishComment* other) {
  if (other != this) {
    std::swap(commentinfo_, other->commentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_203_PublishComment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_203_PublishComment_descriptor_;
  metadata.reflection = Processor_203_PublishComment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_204_GetComment_UP::kMomentIdFieldNumber;
#endif  // !_MSC_VER

Processor_204_GetComment_UP::Processor_204_GetComment_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_204_GetComment_UP)
}

void Processor_204_GetComment_UP::InitAsDefaultInstance() {
}

Processor_204_GetComment_UP::Processor_204_GetComment_UP(const Processor_204_GetComment_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_204_GetComment_UP)
}

void Processor_204_GetComment_UP::SharedCtor() {
  _cached_size_ = 0;
  momentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_204_GetComment_UP::~Processor_204_GetComment_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_204_GetComment_UP)
  SharedDtor();
}

void Processor_204_GetComment_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_204_GetComment_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_204_GetComment_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_204_GetComment_UP_descriptor_;
}

const Processor_204_GetComment_UP& Processor_204_GetComment_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_204_GetComment_UP* Processor_204_GetComment_UP::default_instance_ = NULL;

Processor_204_GetComment_UP* Processor_204_GetComment_UP::New() const {
  return new Processor_204_GetComment_UP;
}

void Processor_204_GetComment_UP::Clear() {
  momentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_204_GetComment_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_204_GetComment_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_204_GetComment_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_204_GetComment_UP)
  return false;
#undef DO_
}

void Processor_204_GetComment_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_204_GetComment_UP)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_204_GetComment_UP)
}

::google_public::protobuf::uint8* Processor_204_GetComment_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_204_GetComment_UP)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_204_GetComment_UP)
  return target;
}

int Processor_204_GetComment_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentId = 1;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_204_GetComment_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_204_GetComment_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_204_GetComment_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_204_GetComment_UP::MergeFrom(const Processor_204_GetComment_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_204_GetComment_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_204_GetComment_UP::CopyFrom(const Processor_204_GetComment_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_204_GetComment_UP::IsInitialized() const {

  return true;
}

void Processor_204_GetComment_UP::Swap(Processor_204_GetComment_UP* other) {
  if (other != this) {
    std::swap(momentid_, other->momentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_204_GetComment_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_204_GetComment_UP_descriptor_;
  metadata.reflection = Processor_204_GetComment_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_204_GetComment_DOWN::kCommentInfoFieldNumber;
#endif  // !_MSC_VER

Processor_204_GetComment_DOWN::Processor_204_GetComment_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_204_GetComment_DOWN)
}

void Processor_204_GetComment_DOWN::InitAsDefaultInstance() {
}

Processor_204_GetComment_DOWN::Processor_204_GetComment_DOWN(const Processor_204_GetComment_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_204_GetComment_DOWN)
}

void Processor_204_GetComment_DOWN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_204_GetComment_DOWN::~Processor_204_GetComment_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_204_GetComment_DOWN)
  SharedDtor();
}

void Processor_204_GetComment_DOWN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_204_GetComment_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_204_GetComment_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_204_GetComment_DOWN_descriptor_;
}

const Processor_204_GetComment_DOWN& Processor_204_GetComment_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_204_GetComment_DOWN* Processor_204_GetComment_DOWN::default_instance_ = NULL;

Processor_204_GetComment_DOWN* Processor_204_GetComment_DOWN::New() const {
  return new Processor_204_GetComment_DOWN;
}

void Processor_204_GetComment_DOWN::Clear() {
  commentinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_204_GetComment_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_204_GetComment_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.CommentInfo CommentInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_CommentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CommentInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_204_GetComment_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_204_GetComment_DOWN)
  return false;
#undef DO_
}

void Processor_204_GetComment_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_204_GetComment_DOWN)
  // repeated .msg.CommentInfo CommentInfo = 1;
  for (int i = 0; i < this->commentinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commentinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_204_GetComment_DOWN)
}

::google_public::protobuf::uint8* Processor_204_GetComment_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_204_GetComment_DOWN)
  // repeated .msg.CommentInfo CommentInfo = 1;
  for (int i = 0; i < this->commentinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commentinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_204_GetComment_DOWN)
  return target;
}

int Processor_204_GetComment_DOWN::ByteSize() const {
  int total_size = 0;

  // repeated .msg.CommentInfo CommentInfo = 1;
  total_size += 1 * this->commentinfo_size();
  for (int i = 0; i < this->commentinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commentinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_204_GetComment_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_204_GetComment_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_204_GetComment_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_204_GetComment_DOWN::MergeFrom(const Processor_204_GetComment_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  commentinfo_.MergeFrom(from.commentinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_204_GetComment_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_204_GetComment_DOWN::CopyFrom(const Processor_204_GetComment_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_204_GetComment_DOWN::IsInitialized() const {

  return true;
}

void Processor_204_GetComment_DOWN::Swap(Processor_204_GetComment_DOWN* other) {
  if (other != this) {
    commentinfo_.Swap(&other->commentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_204_GetComment_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_204_GetComment_DOWN_descriptor_;
  metadata.reflection = Processor_204_GetComment_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_205_DeleteMoment::kMomentIdFieldNumber;
const int Processor_205_DeleteMoment::kCommentIdFieldNumber;
#endif  // !_MSC_VER

Processor_205_DeleteMoment::Processor_205_DeleteMoment()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_205_DeleteMoment)
}

void Processor_205_DeleteMoment::InitAsDefaultInstance() {
}

Processor_205_DeleteMoment::Processor_205_DeleteMoment(const Processor_205_DeleteMoment& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_205_DeleteMoment)
}

void Processor_205_DeleteMoment::SharedCtor() {
  _cached_size_ = 0;
  momentid_ = 0;
  commentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_205_DeleteMoment::~Processor_205_DeleteMoment() {
  // @@protoc_insertion_point(destructor:msg.Processor_205_DeleteMoment)
  SharedDtor();
}

void Processor_205_DeleteMoment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_205_DeleteMoment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_205_DeleteMoment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_205_DeleteMoment_descriptor_;
}

const Processor_205_DeleteMoment& Processor_205_DeleteMoment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_205_DeleteMoment* Processor_205_DeleteMoment::default_instance_ = NULL;

Processor_205_DeleteMoment* Processor_205_DeleteMoment::New() const {
  return new Processor_205_DeleteMoment;
}

void Processor_205_DeleteMoment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_205_DeleteMoment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(momentid_, commentid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_205_DeleteMoment::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_205_DeleteMoment)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MomentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentid_)));
          set_has_momentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CommentId;
        break;
      }

      // optional int32 CommentId = 2;
      case 2: {
        if (tag == 16) {
         parse_CommentId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentid_)));
          set_has_commentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_205_DeleteMoment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_205_DeleteMoment)
  return false;
#undef DO_
}

void Processor_205_DeleteMoment::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_205_DeleteMoment)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->momentid(), output);
  }

  // optional int32 CommentId = 2;
  if (has_commentid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->commentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_205_DeleteMoment)
}

::google_public::protobuf::uint8* Processor_205_DeleteMoment::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_205_DeleteMoment)
  // optional int32 MomentId = 1;
  if (has_momentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->momentid(), target);
  }

  // optional int32 CommentId = 2;
  if (has_commentid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->commentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_205_DeleteMoment)
  return target;
}

int Processor_205_DeleteMoment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MomentId = 1;
    if (has_momentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->momentid());
    }

    // optional int32 CommentId = 2;
    if (has_commentid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->commentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_205_DeleteMoment::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_205_DeleteMoment* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_205_DeleteMoment*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_205_DeleteMoment::MergeFrom(const Processor_205_DeleteMoment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_momentid()) {
      set_momentid(from.momentid());
    }
    if (from.has_commentid()) {
      set_commentid(from.commentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_205_DeleteMoment::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_205_DeleteMoment::CopyFrom(const Processor_205_DeleteMoment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_205_DeleteMoment::IsInitialized() const {

  return true;
}

void Processor_205_DeleteMoment::Swap(Processor_205_DeleteMoment* other) {
  if (other != this) {
    std::swap(momentid_, other->momentid_);
    std::swap(commentid_, other->commentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_205_DeleteMoment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_205_DeleteMoment_descriptor_;
  metadata.reflection = Processor_205_DeleteMoment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_400_LoginRoom_UP::kKeyFieldNumber;
#endif  // !_MSC_VER

Processor_400_LoginRoom_UP::Processor_400_LoginRoom_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_400_LoginRoom_UP)
}

void Processor_400_LoginRoom_UP::InitAsDefaultInstance() {
}

Processor_400_LoginRoom_UP::Processor_400_LoginRoom_UP(const Processor_400_LoginRoom_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_400_LoginRoom_UP)
}

void Processor_400_LoginRoom_UP::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_400_LoginRoom_UP::~Processor_400_LoginRoom_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_400_LoginRoom_UP)
  SharedDtor();
}

void Processor_400_LoginRoom_UP::SharedDtor() {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void Processor_400_LoginRoom_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_400_LoginRoom_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_400_LoginRoom_UP_descriptor_;
}

const Processor_400_LoginRoom_UP& Processor_400_LoginRoom_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_400_LoginRoom_UP* Processor_400_LoginRoom_UP::default_instance_ = NULL;

Processor_400_LoginRoom_UP* Processor_400_LoginRoom_UP::New() const {
  return new Processor_400_LoginRoom_UP;
}

void Processor_400_LoginRoom_UP::Clear() {
  if (has_key()) {
    if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_400_LoginRoom_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_400_LoginRoom_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_400_LoginRoom_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_400_LoginRoom_UP)
  return false;
#undef DO_
}

void Processor_400_LoginRoom_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_400_LoginRoom_UP)
  // optional string Key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_400_LoginRoom_UP)
}

::google_public::protobuf::uint8* Processor_400_LoginRoom_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_400_LoginRoom_UP)
  // optional string Key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_400_LoginRoom_UP)
  return target;
}

int Processor_400_LoginRoom_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_400_LoginRoom_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_400_LoginRoom_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_400_LoginRoom_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_400_LoginRoom_UP::MergeFrom(const Processor_400_LoginRoom_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_400_LoginRoom_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_400_LoginRoom_UP::CopyFrom(const Processor_400_LoginRoom_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_400_LoginRoom_UP::IsInitialized() const {

  return true;
}

void Processor_400_LoginRoom_UP::Swap(Processor_400_LoginRoom_UP* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_400_LoginRoom_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_400_LoginRoom_UP_descriptor_;
  metadata.reflection = Processor_400_LoginRoom_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_400_LoginRoom_DOWN::kResponseFieldNumber;
const int Processor_400_LoginRoom_DOWN::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_400_LoginRoom_DOWN::Processor_400_LoginRoom_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_400_LoginRoom_DOWN)
}

void Processor_400_LoginRoom_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_400_LoginRoom_DOWN::Processor_400_LoginRoom_DOWN(const Processor_400_LoginRoom_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_400_LoginRoom_DOWN)
}

void Processor_400_LoginRoom_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_400_LoginRoom_DOWN::~Processor_400_LoginRoom_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_400_LoginRoom_DOWN)
  SharedDtor();
}

void Processor_400_LoginRoom_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_400_LoginRoom_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_400_LoginRoom_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_400_LoginRoom_DOWN_descriptor_;
}

const Processor_400_LoginRoom_DOWN& Processor_400_LoginRoom_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_400_LoginRoom_DOWN* Processor_400_LoginRoom_DOWN::default_instance_ = NULL;

Processor_400_LoginRoom_DOWN* Processor_400_LoginRoom_DOWN::New() const {
  return new Processor_400_LoginRoom_DOWN;
}

void Processor_400_LoginRoom_DOWN::Clear() {
  if (has_response()) {
    if (response_ != NULL) response_->::msg::Response::Clear();
  }
  roomid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_400_LoginRoom_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_400_LoginRoom_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // repeated int32 RoomID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_roomid())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roomid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_400_LoginRoom_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_400_LoginRoom_DOWN)
  return false;
#undef DO_
}

void Processor_400_LoginRoom_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_400_LoginRoom_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // repeated int32 RoomID = 2;
  for (int i = 0; i < this->roomid_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->roomid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_400_LoginRoom_DOWN)
}

::google_public::protobuf::uint8* Processor_400_LoginRoom_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_400_LoginRoom_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // repeated int32 RoomID = 2;
  for (int i = 0; i < this->roomid_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->roomid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_400_LoginRoom_DOWN)
  return target;
}

int Processor_400_LoginRoom_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  // repeated int32 RoomID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roomid_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->roomid(i));
    }
    total_size += 1 * this->roomid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_400_LoginRoom_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_400_LoginRoom_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_400_LoginRoom_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_400_LoginRoom_DOWN::MergeFrom(const Processor_400_LoginRoom_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomid_.MergeFrom(from.roomid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_400_LoginRoom_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_400_LoginRoom_DOWN::CopyFrom(const Processor_400_LoginRoom_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_400_LoginRoom_DOWN::IsInitialized() const {

  return true;
}

void Processor_400_LoginRoom_DOWN::Swap(Processor_400_LoginRoom_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    roomid_.Swap(&other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_400_LoginRoom_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_400_LoginRoom_DOWN_descriptor_;
  metadata.reflection = Processor_400_LoginRoom_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_410_EnterRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_410_EnterRoom::Processor_410_EnterRoom()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_410_EnterRoom)
}

void Processor_410_EnterRoom::InitAsDefaultInstance() {
}

Processor_410_EnterRoom::Processor_410_EnterRoom(const Processor_410_EnterRoom& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_410_EnterRoom)
}

void Processor_410_EnterRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_410_EnterRoom::~Processor_410_EnterRoom() {
  // @@protoc_insertion_point(destructor:msg.Processor_410_EnterRoom)
  SharedDtor();
}

void Processor_410_EnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_410_EnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_410_EnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_410_EnterRoom_descriptor_;
}

const Processor_410_EnterRoom& Processor_410_EnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_410_EnterRoom* Processor_410_EnterRoom::default_instance_ = NULL;

Processor_410_EnterRoom* Processor_410_EnterRoom::New() const {
  return new Processor_410_EnterRoom;
}

void Processor_410_EnterRoom::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_410_EnterRoom::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_410_EnterRoom)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_410_EnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_410_EnterRoom)
  return false;
#undef DO_
}

void Processor_410_EnterRoom::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_410_EnterRoom)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_410_EnterRoom)
}

::google_public::protobuf::uint8* Processor_410_EnterRoom::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_410_EnterRoom)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_410_EnterRoom)
  return target;
}

int Processor_410_EnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_410_EnterRoom::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_410_EnterRoom* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_410_EnterRoom*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_410_EnterRoom::MergeFrom(const Processor_410_EnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_410_EnterRoom::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_410_EnterRoom::CopyFrom(const Processor_410_EnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_410_EnterRoom::IsInitialized() const {

  return true;
}

void Processor_410_EnterRoom::Swap(Processor_410_EnterRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_410_EnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_410_EnterRoom_descriptor_;
  metadata.reflection = Processor_410_EnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_410_EnterRoom_DOWN::kResponseFieldNumber;
const int Processor_410_EnterRoom_DOWN::kTournamentInfoFieldNumber;
const int Processor_410_EnterRoom_DOWN::kUserInfoFieldNumber;
const int Processor_410_EnterRoom_DOWN::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

Processor_410_EnterRoom_DOWN::Processor_410_EnterRoom_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_410_EnterRoom_DOWN)
}

void Processor_410_EnterRoom_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  tournamentinfo_ = const_cast< ::msg::TournamentInfo*>(&::msg::TournamentInfo::default_instance());
  roominfo_ = const_cast< ::msg::RoomInfo*>(&::msg::RoomInfo::default_instance());
}

Processor_410_EnterRoom_DOWN::Processor_410_EnterRoom_DOWN(const Processor_410_EnterRoom_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_410_EnterRoom_DOWN)
}

void Processor_410_EnterRoom_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  tournamentinfo_ = NULL;
  roominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_410_EnterRoom_DOWN::~Processor_410_EnterRoom_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_410_EnterRoom_DOWN)
  SharedDtor();
}

void Processor_410_EnterRoom_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete tournamentinfo_;
    delete roominfo_;
  }
}

void Processor_410_EnterRoom_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_410_EnterRoom_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_410_EnterRoom_DOWN_descriptor_;
}

const Processor_410_EnterRoom_DOWN& Processor_410_EnterRoom_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_410_EnterRoom_DOWN* Processor_410_EnterRoom_DOWN::default_instance_ = NULL;

Processor_410_EnterRoom_DOWN* Processor_410_EnterRoom_DOWN::New() const {
  return new Processor_410_EnterRoom_DOWN;
}

void Processor_410_EnterRoom_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    if (has_tournamentinfo()) {
      if (tournamentinfo_ != NULL) tournamentinfo_->::msg::TournamentInfo::Clear();
    }
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::msg::RoomInfo::Clear();
    }
  }
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_410_EnterRoom_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_410_EnterRoom_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TournamentInfo;
        break;
      }

      // optional .msg.TournamentInfo TournamentInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TournamentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // repeated .msg.UserDetailInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        if (input->ExpectTag(34)) goto parse_RoomInfo;
        break;
      }

      // optional .msg.RoomInfo RoomInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_RoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_410_EnterRoom_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_410_EnterRoom_DOWN)
  return false;
#undef DO_
}

void Processor_410_EnterRoom_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_410_EnterRoom_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional .msg.TournamentInfo TournamentInfo = 2;
  if (has_tournamentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournamentinfo(), output);
  }

  // repeated .msg.UserDetailInfo UserInfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(i), output);
  }

  // optional .msg.RoomInfo RoomInfo = 4;
  if (has_roominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roominfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_410_EnterRoom_DOWN)
}

::google_public::protobuf::uint8* Processor_410_EnterRoom_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_410_EnterRoom_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional .msg.TournamentInfo TournamentInfo = 2;
  if (has_tournamentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournamentinfo(), target);
  }

  // repeated .msg.UserDetailInfo UserInfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(i), target);
  }

  // optional .msg.RoomInfo RoomInfo = 4;
  if (has_roominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roominfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_410_EnterRoom_DOWN)
  return target;
}

int Processor_410_EnterRoom_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .msg.TournamentInfo TournamentInfo = 2;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentinfo());
    }

    // optional .msg.RoomInfo RoomInfo = 4;
    if (has_roominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

  }
  // repeated .msg.UserDetailInfo UserInfo = 3;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_410_EnterRoom_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_410_EnterRoom_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_410_EnterRoom_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_410_EnterRoom_DOWN::MergeFrom(const Processor_410_EnterRoom_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_tournamentinfo()) {
      mutable_tournamentinfo()->::msg::TournamentInfo::MergeFrom(from.tournamentinfo());
    }
    if (from.has_roominfo()) {
      mutable_roominfo()->::msg::RoomInfo::MergeFrom(from.roominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_410_EnterRoom_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_410_EnterRoom_DOWN::CopyFrom(const Processor_410_EnterRoom_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_410_EnterRoom_DOWN::IsInitialized() const {

  return true;
}

void Processor_410_EnterRoom_DOWN::Swap(Processor_410_EnterRoom_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(tournamentinfo_, other->tournamentinfo_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(roominfo_, other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_410_EnterRoom_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_410_EnterRoom_DOWN_descriptor_;
  metadata.reflection = Processor_410_EnterRoom_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_411_SendSeatInfo::kRoomIdFieldNumber;
const int Processor_411_SendSeatInfo::kSittingStatusFieldNumber;
const int Processor_411_SendSeatInfo::kSitNumFieldNumber;
#endif  // !_MSC_VER

Processor_411_SendSeatInfo::Processor_411_SendSeatInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_411_SendSeatInfo)
}

void Processor_411_SendSeatInfo::InitAsDefaultInstance() {
}

Processor_411_SendSeatInfo::Processor_411_SendSeatInfo(const Processor_411_SendSeatInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_411_SendSeatInfo)
}

void Processor_411_SendSeatInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  sittingstatus_ = 0;
  sitnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_411_SendSeatInfo::~Processor_411_SendSeatInfo() {
  // @@protoc_insertion_point(destructor:msg.Processor_411_SendSeatInfo)
  SharedDtor();
}

void Processor_411_SendSeatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_411_SendSeatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_411_SendSeatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_411_SendSeatInfo_descriptor_;
}

const Processor_411_SendSeatInfo& Processor_411_SendSeatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_411_SendSeatInfo* Processor_411_SendSeatInfo::default_instance_ = NULL;

Processor_411_SendSeatInfo* Processor_411_SendSeatInfo::New() const {
  return new Processor_411_SendSeatInfo;
}

void Processor_411_SendSeatInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_411_SendSeatInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, sitnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_411_SendSeatInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_411_SendSeatInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SittingStatus;
        break;
      }

      // optional .msg.SittingStatus SittingStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_SittingStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SittingStatus_IsValid(value)) {
            set_sittingstatus(static_cast< ::msg::SittingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SitNum;
        break;
      }

      // optional int32 SitNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SitNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitnum_)));
          set_has_sitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_411_SendSeatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_411_SendSeatInfo)
  return false;
#undef DO_
}

void Processor_411_SendSeatInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_411_SendSeatInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.SittingStatus SittingStatus = 2;
  if (has_sittingstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sittingstatus(), output);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->sitnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_411_SendSeatInfo)
}

::google_public::protobuf::uint8* Processor_411_SendSeatInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_411_SendSeatInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.SittingStatus SittingStatus = 2;
  if (has_sittingstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sittingstatus(), target);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sitnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_411_SendSeatInfo)
  return target;
}

int Processor_411_SendSeatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.SittingStatus SittingStatus = 2;
    if (has_sittingstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->sittingstatus());
    }

    // optional int32 SitNum = 3;
    if (has_sitnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sitnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_411_SendSeatInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_411_SendSeatInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_411_SendSeatInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_411_SendSeatInfo::MergeFrom(const Processor_411_SendSeatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sittingstatus()) {
      set_sittingstatus(from.sittingstatus());
    }
    if (from.has_sitnum()) {
      set_sitnum(from.sitnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_411_SendSeatInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_411_SendSeatInfo::CopyFrom(const Processor_411_SendSeatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_411_SendSeatInfo::IsInitialized() const {

  return true;
}

void Processor_411_SendSeatInfo::Swap(Processor_411_SendSeatInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(sittingstatus_, other->sittingstatus_);
    std::swap(sitnum_, other->sitnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_411_SendSeatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_411_SendSeatInfo_descriptor_;
  metadata.reflection = Processor_411_SendSeatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_411_SendSeatInfo_Down::kResponseFieldNumber;
const int Processor_411_SendSeatInfo_Down::kIsHitNotEnoughFieldNumber;
#endif  // !_MSC_VER

Processor_411_SendSeatInfo_Down::Processor_411_SendSeatInfo_Down()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_411_SendSeatInfo_Down)
}

void Processor_411_SendSeatInfo_Down::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
}

Processor_411_SendSeatInfo_Down::Processor_411_SendSeatInfo_Down(const Processor_411_SendSeatInfo_Down& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_411_SendSeatInfo_Down)
}

void Processor_411_SendSeatInfo_Down::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  ishitnotenough_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_411_SendSeatInfo_Down::~Processor_411_SendSeatInfo_Down() {
  // @@protoc_insertion_point(destructor:msg.Processor_411_SendSeatInfo_Down)
  SharedDtor();
}

void Processor_411_SendSeatInfo_Down::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void Processor_411_SendSeatInfo_Down::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_411_SendSeatInfo_Down::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_411_SendSeatInfo_Down_descriptor_;
}

const Processor_411_SendSeatInfo_Down& Processor_411_SendSeatInfo_Down::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_411_SendSeatInfo_Down* Processor_411_SendSeatInfo_Down::default_instance_ = NULL;

Processor_411_SendSeatInfo_Down* Processor_411_SendSeatInfo_Down::New() const {
  return new Processor_411_SendSeatInfo_Down;
}

void Processor_411_SendSeatInfo_Down::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    ishitnotenough_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_411_SendSeatInfo_Down::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_411_SendSeatInfo_Down)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsHitNotEnough;
        break;
      }

      // optional bool IsHitNotEnough = 2;
      case 2: {
        if (tag == 16) {
         parse_IsHitNotEnough:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishitnotenough_)));
          set_has_ishitnotenough();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_411_SendSeatInfo_Down)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_411_SendSeatInfo_Down)
  return false;
#undef DO_
}

void Processor_411_SendSeatInfo_Down::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_411_SendSeatInfo_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional bool IsHitNotEnough = 2;
  if (has_ishitnotenough()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->ishitnotenough(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_411_SendSeatInfo_Down)
}

::google_public::protobuf::uint8* Processor_411_SendSeatInfo_Down::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_411_SendSeatInfo_Down)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional bool IsHitNotEnough = 2;
  if (has_ishitnotenough()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ishitnotenough(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_411_SendSeatInfo_Down)
  return target;
}

int Processor_411_SendSeatInfo_Down::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional bool IsHitNotEnough = 2;
    if (has_ishitnotenough()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_411_SendSeatInfo_Down::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_411_SendSeatInfo_Down* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_411_SendSeatInfo_Down*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_411_SendSeatInfo_Down::MergeFrom(const Processor_411_SendSeatInfo_Down& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_ishitnotenough()) {
      set_ishitnotenough(from.ishitnotenough());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_411_SendSeatInfo_Down::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_411_SendSeatInfo_Down::CopyFrom(const Processor_411_SendSeatInfo_Down& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_411_SendSeatInfo_Down::IsInitialized() const {

  return true;
}

void Processor_411_SendSeatInfo_Down::Swap(Processor_411_SendSeatInfo_Down* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(ishitnotenough_, other->ishitnotenough_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_411_SendSeatInfo_Down::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_411_SendSeatInfo_Down_descriptor_;
  metadata.reflection = Processor_411_SendSeatInfo_Down_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSitStatus::kInfoFieldNumber;
const int PlayerSitStatus::kStatusFieldNumber;
const int PlayerSitStatus::kSitNumFieldNumber;
#endif  // !_MSC_VER

PlayerSitStatus::PlayerSitStatus()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerSitStatus)
}

void PlayerSitStatus::InitAsDefaultInstance() {
  info_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

PlayerSitStatus::PlayerSitStatus(const PlayerSitStatus& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerSitStatus)
}

void PlayerSitStatus::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  status_ = 0;
  sitnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSitStatus::~PlayerSitStatus() {
  // @@protoc_insertion_point(destructor:msg.PlayerSitStatus)
  SharedDtor();
}

void PlayerSitStatus::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PlayerSitStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PlayerSitStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSitStatus_descriptor_;
}

const PlayerSitStatus& PlayerSitStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayerSitStatus* PlayerSitStatus::default_instance_ = NULL;

PlayerSitStatus* PlayerSitStatus::New() const {
  return new PlayerSitStatus;
}

void PlayerSitStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerSitStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(status_, sitnum_);
    if (has_info()) {
      if (info_ != NULL) info_->::msg::UserDetailInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSitStatus::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PlayerSitStatus)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .msg.SittingStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SittingStatus_IsValid(value)) {
            set_status(static_cast< ::msg::SittingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SitNum;
        break;
      }

      // optional int32 SitNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SitNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitnum_)));
          set_has_sitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PlayerSitStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PlayerSitStatus)
  return false;
#undef DO_
}

void PlayerSitStatus::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PlayerSitStatus)
  // optional .msg.UserDetailInfo Info = 1;
  if (has_info()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .msg.SittingStatus Status = 2;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->sitnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PlayerSitStatus)
}

::google_public::protobuf::uint8* PlayerSitStatus::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerSitStatus)
  // optional .msg.UserDetailInfo Info = 1;
  if (has_info()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .msg.SittingStatus Status = 2;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sitnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerSitStatus)
  return target;
}

int PlayerSitStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .msg.SittingStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 SitNum = 3;
    if (has_sitnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sitnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSitStatus::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSitStatus* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PlayerSitStatus*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSitStatus::MergeFrom(const PlayerSitStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::msg::UserDetailInfo::MergeFrom(from.info());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sitnum()) {
      set_sitnum(from.sitnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSitStatus::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSitStatus::CopyFrom(const PlayerSitStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSitStatus::IsInitialized() const {

  return true;
}

void PlayerSitStatus::Swap(PlayerSitStatus* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(status_, other->status_);
    std::swap(sitnum_, other->sitnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PlayerSitStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSitStatus_descriptor_;
  metadata.reflection = PlayerSitStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_412_ReceiveSeatInfo::kRoomIdFieldNumber;
const int Processor_412_ReceiveSeatInfo::kPlayerSitStatusFieldNumber;
#endif  // !_MSC_VER

Processor_412_ReceiveSeatInfo::Processor_412_ReceiveSeatInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_412_ReceiveSeatInfo)
}

void Processor_412_ReceiveSeatInfo::InitAsDefaultInstance() {
}

Processor_412_ReceiveSeatInfo::Processor_412_ReceiveSeatInfo(const Processor_412_ReceiveSeatInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_412_ReceiveSeatInfo)
}

void Processor_412_ReceiveSeatInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_412_ReceiveSeatInfo::~Processor_412_ReceiveSeatInfo() {
  // @@protoc_insertion_point(destructor:msg.Processor_412_ReceiveSeatInfo)
  SharedDtor();
}

void Processor_412_ReceiveSeatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_412_ReceiveSeatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_412_ReceiveSeatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_412_ReceiveSeatInfo_descriptor_;
}

const Processor_412_ReceiveSeatInfo& Processor_412_ReceiveSeatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_412_ReceiveSeatInfo* Processor_412_ReceiveSeatInfo::default_instance_ = NULL;

Processor_412_ReceiveSeatInfo* Processor_412_ReceiveSeatInfo::New() const {
  return new Processor_412_ReceiveSeatInfo;
}

void Processor_412_ReceiveSeatInfo::Clear() {
  roomid_ = 0;
  playersitstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_412_ReceiveSeatInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_412_ReceiveSeatInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerSitStatus;
        break;
      }

      // repeated .msg.PlayerSitStatus PlayerSitStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerSitStatus:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playersitstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerSitStatus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_412_ReceiveSeatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_412_ReceiveSeatInfo)
  return false;
#undef DO_
}

void Processor_412_ReceiveSeatInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_412_ReceiveSeatInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated .msg.PlayerSitStatus PlayerSitStatus = 2;
  for (int i = 0; i < this->playersitstatus_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playersitstatus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_412_ReceiveSeatInfo)
}

::google_public::protobuf::uint8* Processor_412_ReceiveSeatInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_412_ReceiveSeatInfo)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated .msg.PlayerSitStatus PlayerSitStatus = 2;
  for (int i = 0; i < this->playersitstatus_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playersitstatus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_412_ReceiveSeatInfo)
  return target;
}

int Processor_412_ReceiveSeatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .msg.PlayerSitStatus PlayerSitStatus = 2;
  total_size += 1 * this->playersitstatus_size();
  for (int i = 0; i < this->playersitstatus_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playersitstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_412_ReceiveSeatInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_412_ReceiveSeatInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_412_ReceiveSeatInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_412_ReceiveSeatInfo::MergeFrom(const Processor_412_ReceiveSeatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playersitstatus_.MergeFrom(from.playersitstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_412_ReceiveSeatInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_412_ReceiveSeatInfo::CopyFrom(const Processor_412_ReceiveSeatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_412_ReceiveSeatInfo::IsInitialized() const {

  return true;
}

void Processor_412_ReceiveSeatInfo::Swap(Processor_412_ReceiveSeatInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    playersitstatus_.Swap(&other->playersitstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_412_ReceiveSeatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_412_ReceiveSeatInfo_descriptor_;
  metadata.reflection = Processor_412_ReceiveSeatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_413_ReceiveGameStart::kRoomIdFieldNumber;
const int Processor_413_ReceiveGameStart::kMessageFieldNumber;
const int Processor_413_ReceiveGameStart::kDealerPosFieldNumber;
const int Processor_413_ReceiveGameStart::kHandIDFieldNumber;
#endif  // !_MSC_VER

Processor_413_ReceiveGameStart::Processor_413_ReceiveGameStart()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_413_ReceiveGameStart)
}

void Processor_413_ReceiveGameStart::InitAsDefaultInstance() {
}

Processor_413_ReceiveGameStart::Processor_413_ReceiveGameStart(const Processor_413_ReceiveGameStart& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_413_ReceiveGameStart)
}

void Processor_413_ReceiveGameStart::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  message_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  dealerpos_ = 0;
  handid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_413_ReceiveGameStart::~Processor_413_ReceiveGameStart() {
  // @@protoc_insertion_point(destructor:msg.Processor_413_ReceiveGameStart)
  SharedDtor();
}

void Processor_413_ReceiveGameStart::SharedDtor() {
  if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Processor_413_ReceiveGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_413_ReceiveGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_413_ReceiveGameStart_descriptor_;
}

const Processor_413_ReceiveGameStart& Processor_413_ReceiveGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_413_ReceiveGameStart* Processor_413_ReceiveGameStart::default_instance_ = NULL;

Processor_413_ReceiveGameStart* Processor_413_ReceiveGameStart::New() const {
  return new Processor_413_ReceiveGameStart;
}

void Processor_413_ReceiveGameStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_413_ReceiveGameStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, handid_);
    if (has_message()) {
      if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_413_ReceiveGameStart::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_413_ReceiveGameStart)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DealerPos;
        break;
      }

      // optional int32 DealerPos = 3;
      case 3: {
        if (tag == 24) {
         parse_DealerPos:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerpos_)));
          set_has_dealerpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HandID;
        break;
      }

      // optional int32 HandID = 4;
      case 4: {
        if (tag == 32) {
         parse_HandID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_413_ReceiveGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_413_ReceiveGameStart)
  return false;
#undef DO_
}

void Processor_413_ReceiveGameStart::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_413_ReceiveGameStart)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional int32 DealerPos = 3;
  if (has_dealerpos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->dealerpos(), output);
  }

  // optional int32 HandID = 4;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->handid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_413_ReceiveGameStart)
}

::google_public::protobuf::uint8* Processor_413_ReceiveGameStart::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_413_ReceiveGameStart)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int32 DealerPos = 3;
  if (has_dealerpos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dealerpos(), target);
  }

  // optional int32 HandID = 4;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->handid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_413_ReceiveGameStart)
  return target;
}

int Processor_413_ReceiveGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 DealerPos = 3;
    if (has_dealerpos()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerpos());
    }

    // optional int32 HandID = 4;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_413_ReceiveGameStart::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_413_ReceiveGameStart* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_413_ReceiveGameStart*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_413_ReceiveGameStart::MergeFrom(const Processor_413_ReceiveGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_dealerpos()) {
      set_dealerpos(from.dealerpos());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_413_ReceiveGameStart::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_413_ReceiveGameStart::CopyFrom(const Processor_413_ReceiveGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_413_ReceiveGameStart::IsInitialized() const {

  return true;
}

void Processor_413_ReceiveGameStart::Swap(Processor_413_ReceiveGameStart* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(message_, other->message_);
    std::swap(dealerpos_, other->dealerpos_);
    std::swap(handid_, other->handid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_413_ReceiveGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_413_ReceiveGameStart_descriptor_;
  metadata.reflection = Processor_413_ReceiveGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_414_ReceiveGameEnd::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_414_ReceiveGameEnd::Processor_414_ReceiveGameEnd()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_414_ReceiveGameEnd)
}

void Processor_414_ReceiveGameEnd::InitAsDefaultInstance() {
}

Processor_414_ReceiveGameEnd::Processor_414_ReceiveGameEnd(const Processor_414_ReceiveGameEnd& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_414_ReceiveGameEnd)
}

void Processor_414_ReceiveGameEnd::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_414_ReceiveGameEnd::~Processor_414_ReceiveGameEnd() {
  // @@protoc_insertion_point(destructor:msg.Processor_414_ReceiveGameEnd)
  SharedDtor();
}

void Processor_414_ReceiveGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_414_ReceiveGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_414_ReceiveGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_414_ReceiveGameEnd_descriptor_;
}

const Processor_414_ReceiveGameEnd& Processor_414_ReceiveGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_414_ReceiveGameEnd* Processor_414_ReceiveGameEnd::default_instance_ = NULL;

Processor_414_ReceiveGameEnd* Processor_414_ReceiveGameEnd::New() const {
  return new Processor_414_ReceiveGameEnd;
}

void Processor_414_ReceiveGameEnd::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_414_ReceiveGameEnd::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_414_ReceiveGameEnd)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_414_ReceiveGameEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_414_ReceiveGameEnd)
  return false;
#undef DO_
}

void Processor_414_ReceiveGameEnd::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_414_ReceiveGameEnd)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_414_ReceiveGameEnd)
}

::google_public::protobuf::uint8* Processor_414_ReceiveGameEnd::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_414_ReceiveGameEnd)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_414_ReceiveGameEnd)
  return target;
}

int Processor_414_ReceiveGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_414_ReceiveGameEnd::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_414_ReceiveGameEnd* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_414_ReceiveGameEnd*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_414_ReceiveGameEnd::MergeFrom(const Processor_414_ReceiveGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_414_ReceiveGameEnd::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_414_ReceiveGameEnd::CopyFrom(const Processor_414_ReceiveGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_414_ReceiveGameEnd::IsInitialized() const {

  return true;
}

void Processor_414_ReceiveGameEnd::Swap(Processor_414_ReceiveGameEnd* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_414_ReceiveGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_414_ReceiveGameEnd_descriptor_;
  metadata.reflection = Processor_414_ReceiveGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_415_DisableAutoAction::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_415_DisableAutoAction::Processor_415_DisableAutoAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_415_DisableAutoAction)
}

void Processor_415_DisableAutoAction::InitAsDefaultInstance() {
}

Processor_415_DisableAutoAction::Processor_415_DisableAutoAction(const Processor_415_DisableAutoAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_415_DisableAutoAction)
}

void Processor_415_DisableAutoAction::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_415_DisableAutoAction::~Processor_415_DisableAutoAction() {
  // @@protoc_insertion_point(destructor:msg.Processor_415_DisableAutoAction)
  SharedDtor();
}

void Processor_415_DisableAutoAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_415_DisableAutoAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_415_DisableAutoAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_415_DisableAutoAction_descriptor_;
}

const Processor_415_DisableAutoAction& Processor_415_DisableAutoAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_415_DisableAutoAction* Processor_415_DisableAutoAction::default_instance_ = NULL;

Processor_415_DisableAutoAction* Processor_415_DisableAutoAction::New() const {
  return new Processor_415_DisableAutoAction;
}

void Processor_415_DisableAutoAction::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_415_DisableAutoAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_415_DisableAutoAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_415_DisableAutoAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_415_DisableAutoAction)
  return false;
#undef DO_
}

void Processor_415_DisableAutoAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_415_DisableAutoAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_415_DisableAutoAction)
}

::google_public::protobuf::uint8* Processor_415_DisableAutoAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_415_DisableAutoAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_415_DisableAutoAction)
  return target;
}

int Processor_415_DisableAutoAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_415_DisableAutoAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_415_DisableAutoAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_415_DisableAutoAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_415_DisableAutoAction::MergeFrom(const Processor_415_DisableAutoAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_415_DisableAutoAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_415_DisableAutoAction::CopyFrom(const Processor_415_DisableAutoAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_415_DisableAutoAction::IsInitialized() const {

  return true;
}

void Processor_415_DisableAutoAction::Swap(Processor_415_DisableAutoAction* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_415_DisableAutoAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_415_DisableAutoAction_descriptor_;
  metadata.reflection = Processor_415_DisableAutoAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionRequest::kActionPlayerIdFieldNumber;
const int ActionRequest::kCountDownFieldNumber;
const int ActionRequest::kIsUsingTimeBankFieldNumber;
#endif  // !_MSC_VER

ActionRequest::ActionRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ActionRequest)
}

void ActionRequest::InitAsDefaultInstance() {
}

ActionRequest::ActionRequest(const ActionRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ActionRequest)
}

void ActionRequest::SharedCtor() {
  _cached_size_ = 0;
  actionplayerid_ = 0;
  countdown_ = 0;
  isusingtimebank_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRequest::~ActionRequest() {
  // @@protoc_insertion_point(destructor:msg.ActionRequest)
  SharedDtor();
}

void ActionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRequest_descriptor_;
}

const ActionRequest& ActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ActionRequest* ActionRequest::default_instance_ = NULL;

ActionRequest* ActionRequest::New() const {
  return new ActionRequest;
}

void ActionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actionplayerid_, isusingtimebank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ActionRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ActionPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionplayerid_)));
          set_has_actionplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CountDown;
        break;
      }

      // optional int32 CountDown = 2;
      case 2: {
        if (tag == 16) {
         parse_CountDown:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsUsingTimeBank;
        break;
      }

      // optional bool IsUsingTimeBank = 3;
      case 3: {
        if (tag == 24) {
         parse_IsUsingTimeBank:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusingtimebank_)));
          set_has_isusingtimebank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ActionRequest)
  return false;
#undef DO_
}

void ActionRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ActionRequest)
  // optional int32 ActionPlayerId = 1;
  if (has_actionplayerid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->actionplayerid(), output);
  }

  // optional int32 CountDown = 2;
  if (has_countdown()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->countdown(), output);
  }

  // optional bool IsUsingTimeBank = 3;
  if (has_isusingtimebank()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->isusingtimebank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ActionRequest)
}

::google_public::protobuf::uint8* ActionRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ActionRequest)
  // optional int32 ActionPlayerId = 1;
  if (has_actionplayerid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actionplayerid(), target);
  }

  // optional int32 CountDown = 2;
  if (has_countdown()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countdown(), target);
  }

  // optional bool IsUsingTimeBank = 3;
  if (has_isusingtimebank()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isusingtimebank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ActionRequest)
  return target;
}

int ActionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ActionPlayerId = 1;
    if (has_actionplayerid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->actionplayerid());
    }

    // optional int32 CountDown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional bool IsUsingTimeBank = 3;
    if (has_isusingtimebank()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ActionRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRequest::MergeFrom(const ActionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionplayerid()) {
      set_actionplayerid(from.actionplayerid());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_isusingtimebank()) {
      set_isusingtimebank(from.isusingtimebank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRequest::CopyFrom(const ActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRequest::IsInitialized() const {

  return true;
}

void ActionRequest::Swap(ActionRequest* other) {
  if (other != this) {
    std::swap(actionplayerid_, other->actionplayerid_);
    std::swap(countdown_, other->countdown_);
    std::swap(isusingtimebank_, other->isusingtimebank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ActionRequest_descriptor_;
  metadata.reflection = ActionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_417_ReceiveOtherPlayerAction::kRoomIdFieldNumber;
const int Processor_417_ReceiveOtherPlayerAction::kActionRequestFieldNumber;
#endif  // !_MSC_VER

Processor_417_ReceiveOtherPlayerAction::Processor_417_ReceiveOtherPlayerAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_417_ReceiveOtherPlayerAction)
}

void Processor_417_ReceiveOtherPlayerAction::InitAsDefaultInstance() {
  actionrequest_ = const_cast< ::msg::ActionRequest*>(&::msg::ActionRequest::default_instance());
}

Processor_417_ReceiveOtherPlayerAction::Processor_417_ReceiveOtherPlayerAction(const Processor_417_ReceiveOtherPlayerAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_417_ReceiveOtherPlayerAction)
}

void Processor_417_ReceiveOtherPlayerAction::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  actionrequest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_417_ReceiveOtherPlayerAction::~Processor_417_ReceiveOtherPlayerAction() {
  // @@protoc_insertion_point(destructor:msg.Processor_417_ReceiveOtherPlayerAction)
  SharedDtor();
}

void Processor_417_ReceiveOtherPlayerAction::SharedDtor() {
  if (this != default_instance_) {
    delete actionrequest_;
  }
}

void Processor_417_ReceiveOtherPlayerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_417_ReceiveOtherPlayerAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_417_ReceiveOtherPlayerAction_descriptor_;
}

const Processor_417_ReceiveOtherPlayerAction& Processor_417_ReceiveOtherPlayerAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_417_ReceiveOtherPlayerAction* Processor_417_ReceiveOtherPlayerAction::default_instance_ = NULL;

Processor_417_ReceiveOtherPlayerAction* Processor_417_ReceiveOtherPlayerAction::New() const {
  return new Processor_417_ReceiveOtherPlayerAction;
}

void Processor_417_ReceiveOtherPlayerAction::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::ActionRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_417_ReceiveOtherPlayerAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_417_ReceiveOtherPlayerAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ActionRequest;
        break;
      }

      // optional .msg.ActionRequest ActionRequest = 2;
      case 2: {
        if (tag == 18) {
         parse_ActionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_417_ReceiveOtherPlayerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_417_ReceiveOtherPlayerAction)
  return false;
#undef DO_
}

void Processor_417_ReceiveOtherPlayerAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_417_ReceiveOtherPlayerAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.ActionRequest ActionRequest = 2;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actionrequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_417_ReceiveOtherPlayerAction)
}

::google_public::protobuf::uint8* Processor_417_ReceiveOtherPlayerAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_417_ReceiveOtherPlayerAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.ActionRequest ActionRequest = 2;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actionrequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_417_ReceiveOtherPlayerAction)
  return target;
}

int Processor_417_ReceiveOtherPlayerAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.ActionRequest ActionRequest = 2;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_417_ReceiveOtherPlayerAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_417_ReceiveOtherPlayerAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_417_ReceiveOtherPlayerAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_417_ReceiveOtherPlayerAction::MergeFrom(const Processor_417_ReceiveOtherPlayerAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::ActionRequest::MergeFrom(from.actionrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_417_ReceiveOtherPlayerAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_417_ReceiveOtherPlayerAction::CopyFrom(const Processor_417_ReceiveOtherPlayerAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_417_ReceiveOtherPlayerAction::IsInitialized() const {

  return true;
}

void Processor_417_ReceiveOtherPlayerAction::Swap(Processor_417_ReceiveOtherPlayerAction* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_417_ReceiveOtherPlayerAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_417_ReceiveOtherPlayerAction_descriptor_;
  metadata.reflection = Processor_417_ReceiveOtherPlayerAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_420_PokerGetScore_UP::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_420_PokerGetScore_UP::Processor_420_PokerGetScore_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_420_PokerGetScore_UP)
}

void Processor_420_PokerGetScore_UP::InitAsDefaultInstance() {
}

Processor_420_PokerGetScore_UP::Processor_420_PokerGetScore_UP(const Processor_420_PokerGetScore_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_420_PokerGetScore_UP)
}

void Processor_420_PokerGetScore_UP::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_420_PokerGetScore_UP::~Processor_420_PokerGetScore_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_420_PokerGetScore_UP)
  SharedDtor();
}

void Processor_420_PokerGetScore_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_420_PokerGetScore_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_420_PokerGetScore_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_420_PokerGetScore_UP_descriptor_;
}

const Processor_420_PokerGetScore_UP& Processor_420_PokerGetScore_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_420_PokerGetScore_UP* Processor_420_PokerGetScore_UP::default_instance_ = NULL;

Processor_420_PokerGetScore_UP* Processor_420_PokerGetScore_UP::New() const {
  return new Processor_420_PokerGetScore_UP;
}

void Processor_420_PokerGetScore_UP::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_420_PokerGetScore_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_420_PokerGetScore_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_420_PokerGetScore_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_420_PokerGetScore_UP)
  return false;
#undef DO_
}

void Processor_420_PokerGetScore_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_420_PokerGetScore_UP)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_420_PokerGetScore_UP)
}

::google_public::protobuf::uint8* Processor_420_PokerGetScore_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_420_PokerGetScore_UP)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_420_PokerGetScore_UP)
  return target;
}

int Processor_420_PokerGetScore_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_420_PokerGetScore_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_420_PokerGetScore_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_420_PokerGetScore_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_420_PokerGetScore_UP::MergeFrom(const Processor_420_PokerGetScore_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_420_PokerGetScore_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_420_PokerGetScore_UP::CopyFrom(const Processor_420_PokerGetScore_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_420_PokerGetScore_UP::IsInitialized() const {

  return true;
}

void Processor_420_PokerGetScore_UP::Swap(Processor_420_PokerGetScore_UP* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_420_PokerGetScore_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_420_PokerGetScore_UP_descriptor_;
  metadata.reflection = Processor_420_PokerGetScore_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerScore::kUserDetailInfoFieldNumber;
const int PlayerScore::kTotalBuyinFieldNumber;
const int PlayerScore::kTotalWinFieldNumber;
const int PlayerScore::kRankFieldNumber;
const int PlayerScore::kOtherPrizeFieldNumber;
const int PlayerScore::kPlayTimeFieldNumber;
const int PlayerScore::kPlayHandsFieldNumber;
const int PlayerScore::kHPLostFieldNumber;
#endif  // !_MSC_VER

PlayerScore::PlayerScore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerScore)
}

void PlayerScore::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

PlayerScore::PlayerScore(const PlayerScore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerScore)
}

void PlayerScore::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  totalbuyin_ = 0;
  totalwin_ = 0;
  rank_ = 0;
  otherprize_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  playtime_ = GOOGLE_LONGLONG(0);
  playhands_ = 0;
  hplost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerScore::~PlayerScore() {
  // @@protoc_insertion_point(destructor:msg.PlayerScore)
  SharedDtor();
}

void PlayerScore::SharedDtor() {
  if (otherprize_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete otherprize_;
  }
  if (this != default_instance_) {
    delete userdetailinfo_;
  }
}

void PlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PlayerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerScore_descriptor_;
}

const PlayerScore& PlayerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayerScore* PlayerScore::default_instance_ = NULL;

PlayerScore* PlayerScore::New() const {
  return new PlayerScore;
}

void PlayerScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(totalbuyin_, totalwin_);
    ZR_(rank_, hplost_);
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    if (has_otherprize()) {
      if (otherprize_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        otherprize_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerScore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PlayerScore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalBuyin;
        break;
      }

      // optional int32 TotalBuyin = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalBuyin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalbuyin_)));
          set_has_totalbuyin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalWin;
        break;
      }

      // optional int32 TotalWin = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalWin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalwin_)));
          set_has_totalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 4;
      case 4: {
        if (tag == 32) {
         parse_Rank:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OtherPrize;
        break;
      }

      // optional string OtherPrize = 5;
      case 5: {
        if (tag == 42) {
         parse_OtherPrize:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherprize()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->otherprize().data(), this->otherprize().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "otherprize");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PlayTime;
        break;
      }

      // optional int64 PlayTime = 6;
      case 6: {
        if (tag == 48) {
         parse_PlayTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playtime_)));
          set_has_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PlayHands;
        break;
      }

      // optional int32 PlayHands = 7;
      case 7: {
        if (tag == 56) {
         parse_PlayHands:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playhands_)));
          set_has_playhands();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HPLost;
        break;
      }

      // optional int32 HPLost = 8;
      case 8: {
        if (tag == 64) {
         parse_HPLost:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hplost_)));
          set_has_hplost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PlayerScore)
  return false;
#undef DO_
}

void PlayerScore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PlayerScore)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional int32 TotalBuyin = 2;
  if (has_totalbuyin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalbuyin(), output);
  }

  // optional int32 TotalWin = 3;
  if (has_totalwin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalwin(), output);
  }

  // optional int32 Rank = 4;
  if (has_rank()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional string OtherPrize = 5;
  if (has_otherprize()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otherprize().data(), this->otherprize().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "otherprize");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->otherprize(), output);
  }

  // optional int64 PlayTime = 6;
  if (has_playtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(6, this->playtime(), output);
  }

  // optional int32 PlayHands = 7;
  if (has_playhands()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->playhands(), output);
  }

  // optional int32 HPLost = 8;
  if (has_hplost()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->hplost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PlayerScore)
}

::google_public::protobuf::uint8* PlayerScore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerScore)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional int32 TotalBuyin = 2;
  if (has_totalbuyin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalbuyin(), target);
  }

  // optional int32 TotalWin = 3;
  if (has_totalwin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalwin(), target);
  }

  // optional int32 Rank = 4;
  if (has_rank()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional string OtherPrize = 5;
  if (has_otherprize()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otherprize().data(), this->otherprize().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "otherprize");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->otherprize(), target);
  }

  // optional int64 PlayTime = 6;
  if (has_playtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->playtime(), target);
  }

  // optional int32 PlayHands = 7;
  if (has_playhands()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playhands(), target);
  }

  // optional int32 HPLost = 8;
  if (has_hplost()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hplost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerScore)
  return target;
}

int PlayerScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional int32 TotalBuyin = 2;
    if (has_totalbuyin()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalbuyin());
    }

    // optional int32 TotalWin = 3;
    if (has_totalwin()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalwin());
    }

    // optional int32 Rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string OtherPrize = 5;
    if (has_otherprize()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->otherprize());
    }

    // optional int64 PlayTime = 6;
    if (has_playtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->playtime());
    }

    // optional int32 PlayHands = 7;
    if (has_playhands()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playhands());
    }

    // optional int32 HPLost = 8;
    if (has_hplost()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->hplost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerScore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerScore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PlayerScore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerScore::MergeFrom(const PlayerScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_totalbuyin()) {
      set_totalbuyin(from.totalbuyin());
    }
    if (from.has_totalwin()) {
      set_totalwin(from.totalwin());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_otherprize()) {
      set_otherprize(from.otherprize());
    }
    if (from.has_playtime()) {
      set_playtime(from.playtime());
    }
    if (from.has_playhands()) {
      set_playhands(from.playhands());
    }
    if (from.has_hplost()) {
      set_hplost(from.hplost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerScore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerScore::CopyFrom(const PlayerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerScore::IsInitialized() const {

  return true;
}

void PlayerScore::Swap(PlayerScore* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(totalbuyin_, other->totalbuyin_);
    std::swap(totalwin_, other->totalwin_);
    std::swap(rank_, other->rank_);
    std::swap(otherprize_, other->otherprize_);
    std::swap(playtime_, other->playtime_);
    std::swap(playhands_, other->playhands_);
    std::swap(hplost_, other->hplost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PlayerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PlayerScore_descriptor_;
  metadata.reflection = PlayerScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerScores::kScoreFieldNumber;
#endif  // !_MSC_VER

PlayerScores::PlayerScores()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerScores)
}

void PlayerScores::InitAsDefaultInstance() {
}

PlayerScores::PlayerScores(const PlayerScores& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerScores)
}

void PlayerScores::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerScores::~PlayerScores() {
  // @@protoc_insertion_point(destructor:msg.PlayerScores)
  SharedDtor();
}

void PlayerScores::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerScores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PlayerScores::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerScores_descriptor_;
}

const PlayerScores& PlayerScores::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayerScores* PlayerScores::default_instance_ = NULL;

PlayerScores* PlayerScores::New() const {
  return new PlayerScores;
}

void PlayerScores::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerScores::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PlayerScores)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.PlayerScore Score = 1;
      case 1: {
        if (tag == 10) {
         parse_Score:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PlayerScores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PlayerScores)
  return false;
#undef DO_
}

void PlayerScores::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PlayerScores)
  // repeated .msg.PlayerScore Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PlayerScores)
}

::google_public::protobuf::uint8* PlayerScores::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerScores)
  // repeated .msg.PlayerScore Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerScores)
  return target;
}

int PlayerScores::ByteSize() const {
  int total_size = 0;

  // repeated .msg.PlayerScore Score = 1;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerScores::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerScores* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PlayerScores*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerScores::MergeFrom(const PlayerScores& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerScores::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerScores::CopyFrom(const PlayerScores& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerScores::IsInitialized() const {

  return true;
}

void PlayerScores::Swap(PlayerScores* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PlayerScores::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PlayerScores_descriptor_;
  metadata.reflection = PlayerScores_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_420_PokerGetScore_DOWN::kRoomIDFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kRoomNameFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kRoomNoteFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kTimeFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kHandCountFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kPlayerScoresFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kRoomTypeFieldNumber;
const int Processor_420_PokerGetScore_DOWN::kIsTournamentFieldNumber;
#endif  // !_MSC_VER

Processor_420_PokerGetScore_DOWN::Processor_420_PokerGetScore_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_420_PokerGetScore_DOWN)
}

void Processor_420_PokerGetScore_DOWN::InitAsDefaultInstance() {
  playerscores_ = const_cast< ::msg::PlayerScores*>(&::msg::PlayerScores::default_instance());
}

Processor_420_PokerGetScore_DOWN::Processor_420_PokerGetScore_DOWN(const Processor_420_PokerGetScore_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_420_PokerGetScore_DOWN)
}

void Processor_420_PokerGetScore_DOWN::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomnote_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  handcount_ = 0;
  playerscores_ = NULL;
  roomtype_ = 0;
  istournament_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_420_PokerGetScore_DOWN::~Processor_420_PokerGetScore_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_420_PokerGetScore_DOWN)
  SharedDtor();
}

void Processor_420_PokerGetScore_DOWN::SharedDtor() {
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomnote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomnote_;
  }
  if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
    delete playerscores_;
  }
}

void Processor_420_PokerGetScore_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_420_PokerGetScore_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_420_PokerGetScore_DOWN_descriptor_;
}

const Processor_420_PokerGetScore_DOWN& Processor_420_PokerGetScore_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_420_PokerGetScore_DOWN* Processor_420_PokerGetScore_DOWN::default_instance_ = NULL;

Processor_420_PokerGetScore_DOWN* Processor_420_PokerGetScore_DOWN::New() const {
  return new Processor_420_PokerGetScore_DOWN;
}

void Processor_420_PokerGetScore_DOWN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_420_PokerGetScore_DOWN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roomid_, handcount_);
    ZR_(roomtype_, istournament_);
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_roomnote()) {
      if (roomnote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomnote_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    if (has_playerscores()) {
      if (playerscores_ != NULL) playerscores_->::msg::PlayerScores::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_420_PokerGetScore_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_420_PokerGetScore_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomNote;
        break;
      }

      // optional string RoomNote = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomNote:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomnote()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomnote().data(), this->roomnote().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomnote");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Time;
        break;
      }

      // optional string Time = 4;
      case 4: {
        if (tag == 34) {
         parse_Time:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HandCount;
        break;
      }

      // optional int32 HandCount = 5;
      case 5: {
        if (tag == 40) {
         parse_HandCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PlayerScores;
        break;
      }

      // optional .msg.PlayerScores PlayerScores = 6;
      case 6: {
        if (tag == 50) {
         parse_PlayerScores:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerscores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RoomType;
        break;
      }

      // optional .msg.RoomType RoomType = 7;
      case 7: {
        if (tag == 56) {
         parse_RoomType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 8;
      case 8: {
        if (tag == 64) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_420_PokerGetScore_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_420_PokerGetScore_DOWN)
  return false;
#undef DO_
}

void Processor_420_PokerGetScore_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_420_PokerGetScore_DOWN)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string RoomName = 2;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // optional string RoomNote = 3;
  if (has_roomnote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnote().data(), this->roomnote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomnote");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomnote(), output);
  }

  // optional string Time = 4;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  // optional int32 HandCount = 5;
  if (has_handcount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->handcount(), output);
  }

  // optional .msg.PlayerScores PlayerScores = 6;
  if (has_playerscores()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerscores(), output);
  }

  // optional .msg.RoomType RoomType = 7;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->roomtype(), output);
  }

  // optional bool IsTournament = 8;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(8, this->istournament(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_420_PokerGetScore_DOWN)
}

::google_public::protobuf::uint8* Processor_420_PokerGetScore_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_420_PokerGetScore_DOWN)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string RoomName = 2;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // optional string RoomNote = 3;
  if (has_roomnote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnote().data(), this->roomnote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomnote");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomnote(), target);
  }

  // optional string Time = 4;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // optional int32 HandCount = 5;
  if (has_handcount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->handcount(), target);
  }

  // optional .msg.PlayerScores PlayerScores = 6;
  if (has_playerscores()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerscores(), target);
  }

  // optional .msg.RoomType RoomType = 7;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->roomtype(), target);
  }

  // optional bool IsTournament = 8;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->istournament(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_420_PokerGetScore_DOWN)
  return target;
}

int Processor_420_PokerGetScore_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string RoomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional string RoomNote = 3;
    if (has_roomnote()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomnote());
    }

    // optional string Time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional int32 HandCount = 5;
    if (has_handcount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

    // optional .msg.PlayerScores PlayerScores = 6;
    if (has_playerscores()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerscores());
    }

    // optional .msg.RoomType RoomType = 7;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional bool IsTournament = 8;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_420_PokerGetScore_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_420_PokerGetScore_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_420_PokerGetScore_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_420_PokerGetScore_DOWN::MergeFrom(const Processor_420_PokerGetScore_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomnote()) {
      set_roomnote(from.roomnote());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
    if (from.has_playerscores()) {
      mutable_playerscores()->::msg::PlayerScores::MergeFrom(from.playerscores());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_420_PokerGetScore_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_420_PokerGetScore_DOWN::CopyFrom(const Processor_420_PokerGetScore_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_420_PokerGetScore_DOWN::IsInitialized() const {

  return true;
}

void Processor_420_PokerGetScore_DOWN::Swap(Processor_420_PokerGetScore_DOWN* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomnote_, other->roomnote_);
    std::swap(time_, other->time_);
    std::swap(handcount_, other->handcount_);
    std::swap(playerscores_, other->playerscores_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(istournament_, other->istournament_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_420_PokerGetScore_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_420_PokerGetScore_DOWN_descriptor_;
  metadata.reflection = Processor_420_PokerGetScore_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_430_SendGameVoice::kRoomIdFieldNumber;
const int Processor_430_SendGameVoice::kVoiceFieldNumber;
const int Processor_430_SendGameVoice::kTimeFieldNumber;
#endif  // !_MSC_VER

Processor_430_SendGameVoice::Processor_430_SendGameVoice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_430_SendGameVoice)
}

void Processor_430_SendGameVoice::InitAsDefaultInstance() {
}

Processor_430_SendGameVoice::Processor_430_SendGameVoice(const Processor_430_SendGameVoice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_430_SendGameVoice)
}

void Processor_430_SendGameVoice::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  voice_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_430_SendGameVoice::~Processor_430_SendGameVoice() {
  // @@protoc_insertion_point(destructor:msg.Processor_430_SendGameVoice)
  SharedDtor();
}

void Processor_430_SendGameVoice::SharedDtor() {
  if (voice_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void Processor_430_SendGameVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_430_SendGameVoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_430_SendGameVoice_descriptor_;
}

const Processor_430_SendGameVoice& Processor_430_SendGameVoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_430_SendGameVoice* Processor_430_SendGameVoice::default_instance_ = NULL;

Processor_430_SendGameVoice* Processor_430_SendGameVoice::New() const {
  return new Processor_430_SendGameVoice;
}

void Processor_430_SendGameVoice::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    roomid_ = 0;
    if (has_voice()) {
      if (voice_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_430_SendGameVoice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_430_SendGameVoice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Voice;
        break;
      }

      // optional string Voice = 2;
      case 2: {
        if (tag == 18) {
         parse_Voice:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voice().data(), this->voice().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "voice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Time;
        break;
      }

      // optional string Time = 3;
      case 3: {
        if (tag == 26) {
         parse_Time:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_430_SendGameVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_430_SendGameVoice)
  return false;
#undef DO_
}

void Processor_430_SendGameVoice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_430_SendGameVoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string Voice = 2;
  if (has_voice()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->voice(), output);
  }

  // optional string Time = 3;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_430_SendGameVoice)
}

::google_public::protobuf::uint8* Processor_430_SendGameVoice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_430_SendGameVoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string Voice = 2;
  if (has_voice()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->voice(), target);
  }

  // optional string Time = 3;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_430_SendGameVoice)
  return target;
}

int Processor_430_SendGameVoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string Voice = 2;
    if (has_voice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->voice());
    }

    // optional string Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_430_SendGameVoice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_430_SendGameVoice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_430_SendGameVoice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_430_SendGameVoice::MergeFrom(const Processor_430_SendGameVoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_430_SendGameVoice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_430_SendGameVoice::CopyFrom(const Processor_430_SendGameVoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_430_SendGameVoice::IsInitialized() const {

  return true;
}

void Processor_430_SendGameVoice::Swap(Processor_430_SendGameVoice* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(voice_, other->voice_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_430_SendGameVoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_430_SendGameVoice_descriptor_;
  metadata.reflection = Processor_430_SendGameVoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_431_ReceiveGameVoice::kRoomIdFieldNumber;
const int Processor_431_ReceiveGameVoice::kUserIDFieldNumber;
const int Processor_431_ReceiveGameVoice::kVoiceFieldNumber;
const int Processor_431_ReceiveGameVoice::kTimeFieldNumber;
#endif  // !_MSC_VER

Processor_431_ReceiveGameVoice::Processor_431_ReceiveGameVoice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_431_ReceiveGameVoice)
}

void Processor_431_ReceiveGameVoice::InitAsDefaultInstance() {
}

Processor_431_ReceiveGameVoice::Processor_431_ReceiveGameVoice(const Processor_431_ReceiveGameVoice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_431_ReceiveGameVoice)
}

void Processor_431_ReceiveGameVoice::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  userid_ = 0;
  voice_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_431_ReceiveGameVoice::~Processor_431_ReceiveGameVoice() {
  // @@protoc_insertion_point(destructor:msg.Processor_431_ReceiveGameVoice)
  SharedDtor();
}

void Processor_431_ReceiveGameVoice::SharedDtor() {
  if (voice_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void Processor_431_ReceiveGameVoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_431_ReceiveGameVoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_431_ReceiveGameVoice_descriptor_;
}

const Processor_431_ReceiveGameVoice& Processor_431_ReceiveGameVoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_431_ReceiveGameVoice* Processor_431_ReceiveGameVoice::default_instance_ = NULL;

Processor_431_ReceiveGameVoice* Processor_431_ReceiveGameVoice::New() const {
  return new Processor_431_ReceiveGameVoice;
}

void Processor_431_ReceiveGameVoice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_431_ReceiveGameVoice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, userid_);
    if (has_voice()) {
      if (voice_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_431_ReceiveGameVoice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_431_ReceiveGameVoice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Voice;
        break;
      }

      // optional string Voice = 3;
      case 3: {
        if (tag == 26) {
         parse_Voice:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voice()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voice().data(), this->voice().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "voice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Time;
        break;
      }

      // optional string Time = 4;
      case 4: {
        if (tag == 34) {
         parse_Time:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_431_ReceiveGameVoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_431_ReceiveGameVoice)
  return false;
#undef DO_
}

void Processor_431_ReceiveGameVoice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_431_ReceiveGameVoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string Voice = 3;
  if (has_voice()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->voice(), output);
  }

  // optional string Time = 4;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_431_ReceiveGameVoice)
}

::google_public::protobuf::uint8* Processor_431_ReceiveGameVoice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_431_ReceiveGameVoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string Voice = 3;
  if (has_voice()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voice().data(), this->voice().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "voice");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voice(), target);
  }

  // optional string Time = 4;
  if (has_time()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_431_ReceiveGameVoice)
  return target;
}

int Processor_431_ReceiveGameVoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string Voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->voice());
    }

    // optional string Time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_431_ReceiveGameVoice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_431_ReceiveGameVoice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_431_ReceiveGameVoice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_431_ReceiveGameVoice::MergeFrom(const Processor_431_ReceiveGameVoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_431_ReceiveGameVoice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_431_ReceiveGameVoice::CopyFrom(const Processor_431_ReceiveGameVoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_431_ReceiveGameVoice::IsInitialized() const {

  return true;
}

void Processor_431_ReceiveGameVoice::Swap(Processor_431_ReceiveGameVoice* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(userid_, other->userid_);
    std::swap(voice_, other->voice_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_431_ReceiveGameVoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_431_ReceiveGameVoice_descriptor_;
  metadata.reflection = Processor_431_ReceiveGameVoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_440_SetGameStatus::kRoomIdFieldNumber;
const int Processor_440_SetGameStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Processor_440_SetGameStatus::Processor_440_SetGameStatus()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_440_SetGameStatus)
}

void Processor_440_SetGameStatus::InitAsDefaultInstance() {
}

Processor_440_SetGameStatus::Processor_440_SetGameStatus(const Processor_440_SetGameStatus& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_440_SetGameStatus)
}

void Processor_440_SetGameStatus::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_440_SetGameStatus::~Processor_440_SetGameStatus() {
  // @@protoc_insertion_point(destructor:msg.Processor_440_SetGameStatus)
  SharedDtor();
}

void Processor_440_SetGameStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_440_SetGameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_440_SetGameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_440_SetGameStatus_descriptor_;
}

const Processor_440_SetGameStatus& Processor_440_SetGameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_440_SetGameStatus* Processor_440_SetGameStatus::default_instance_ = NULL;

Processor_440_SetGameStatus* Processor_440_SetGameStatus::New() const {
  return new Processor_440_SetGameStatus;
}

void Processor_440_SetGameStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_440_SetGameStatus::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_440_SetGameStatus)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .msg.GameStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GameStatus_IsValid(value)) {
            set_status(static_cast< ::msg::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_440_SetGameStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_440_SetGameStatus)
  return false;
#undef DO_
}

void Processor_440_SetGameStatus::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_440_SetGameStatus)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.GameStatus status = 2;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_440_SetGameStatus)
}

::google_public::protobuf::uint8* Processor_440_SetGameStatus::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_440_SetGameStatus)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.GameStatus status = 2;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_440_SetGameStatus)
  return target;
}

int Processor_440_SetGameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.GameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_440_SetGameStatus::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_440_SetGameStatus* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_440_SetGameStatus*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_440_SetGameStatus::MergeFrom(const Processor_440_SetGameStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_440_SetGameStatus::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_440_SetGameStatus::CopyFrom(const Processor_440_SetGameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_440_SetGameStatus::IsInitialized() const {

  return true;
}

void Processor_440_SetGameStatus::Swap(Processor_440_SetGameStatus* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_440_SetGameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_440_SetGameStatus_descriptor_;
  metadata.reflection = Processor_440_SetGameStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_441_KickPlayer::kRoomIdFieldNumber;
const int Processor_441_KickPlayer::kKickUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_441_KickPlayer::Processor_441_KickPlayer()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_441_KickPlayer)
}

void Processor_441_KickPlayer::InitAsDefaultInstance() {
}

Processor_441_KickPlayer::Processor_441_KickPlayer(const Processor_441_KickPlayer& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_441_KickPlayer)
}

void Processor_441_KickPlayer::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  kickuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_441_KickPlayer::~Processor_441_KickPlayer() {
  // @@protoc_insertion_point(destructor:msg.Processor_441_KickPlayer)
  SharedDtor();
}

void Processor_441_KickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_441_KickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_441_KickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_441_KickPlayer_descriptor_;
}

const Processor_441_KickPlayer& Processor_441_KickPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_441_KickPlayer* Processor_441_KickPlayer::default_instance_ = NULL;

Processor_441_KickPlayer* Processor_441_KickPlayer::New() const {
  return new Processor_441_KickPlayer;
}

void Processor_441_KickPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_441_KickPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, kickuserid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_441_KickPlayer::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_441_KickPlayer)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_KickUserID;
        break;
      }

      // optional int32 KickUserID = 2;
      case 2: {
        if (tag == 16) {
         parse_KickUserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickuserid_)));
          set_has_kickuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_441_KickPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_441_KickPlayer)
  return false;
#undef DO_
}

void Processor_441_KickPlayer::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_441_KickPlayer)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 KickUserID = 2;
  if (has_kickuserid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->kickuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_441_KickPlayer)
}

::google_public::protobuf::uint8* Processor_441_KickPlayer::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_441_KickPlayer)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 KickUserID = 2;
  if (has_kickuserid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kickuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_441_KickPlayer)
  return target;
}

int Processor_441_KickPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 KickUserID = 2;
    if (has_kickuserid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->kickuserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_441_KickPlayer::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_441_KickPlayer* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_441_KickPlayer*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_441_KickPlayer::MergeFrom(const Processor_441_KickPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_kickuserid()) {
      set_kickuserid(from.kickuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_441_KickPlayer::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_441_KickPlayer::CopyFrom(const Processor_441_KickPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_441_KickPlayer::IsInitialized() const {

  return true;
}

void Processor_441_KickPlayer::Swap(Processor_441_KickPlayer* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(kickuserid_, other->kickuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_441_KickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_441_KickPlayer_descriptor_;
  metadata.reflection = Processor_441_KickPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_442_ReceiveGameStatus::kRoomIdFieldNumber;
const int Processor_442_ReceiveGameStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Processor_442_ReceiveGameStatus::Processor_442_ReceiveGameStatus()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_442_ReceiveGameStatus)
}

void Processor_442_ReceiveGameStatus::InitAsDefaultInstance() {
}

Processor_442_ReceiveGameStatus::Processor_442_ReceiveGameStatus(const Processor_442_ReceiveGameStatus& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_442_ReceiveGameStatus)
}

void Processor_442_ReceiveGameStatus::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_442_ReceiveGameStatus::~Processor_442_ReceiveGameStatus() {
  // @@protoc_insertion_point(destructor:msg.Processor_442_ReceiveGameStatus)
  SharedDtor();
}

void Processor_442_ReceiveGameStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_442_ReceiveGameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_442_ReceiveGameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_442_ReceiveGameStatus_descriptor_;
}

const Processor_442_ReceiveGameStatus& Processor_442_ReceiveGameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_442_ReceiveGameStatus* Processor_442_ReceiveGameStatus::default_instance_ = NULL;

Processor_442_ReceiveGameStatus* Processor_442_ReceiveGameStatus::New() const {
  return new Processor_442_ReceiveGameStatus;
}

void Processor_442_ReceiveGameStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_442_ReceiveGameStatus::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_442_ReceiveGameStatus)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .msg.GameStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GameStatus_IsValid(value)) {
            set_status(static_cast< ::msg::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_442_ReceiveGameStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_442_ReceiveGameStatus)
  return false;
#undef DO_
}

void Processor_442_ReceiveGameStatus::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_442_ReceiveGameStatus)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.GameStatus status = 2;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_442_ReceiveGameStatus)
}

::google_public::protobuf::uint8* Processor_442_ReceiveGameStatus::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_442_ReceiveGameStatus)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.GameStatus status = 2;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_442_ReceiveGameStatus)
  return target;
}

int Processor_442_ReceiveGameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.GameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_442_ReceiveGameStatus::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_442_ReceiveGameStatus* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_442_ReceiveGameStatus*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_442_ReceiveGameStatus::MergeFrom(const Processor_442_ReceiveGameStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_442_ReceiveGameStatus::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_442_ReceiveGameStatus::CopyFrom(const Processor_442_ReceiveGameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_442_ReceiveGameStatus::IsInitialized() const {

  return true;
}

void Processor_442_ReceiveGameStatus::Swap(Processor_442_ReceiveGameStatus* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_442_ReceiveGameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_442_ReceiveGameStatus_descriptor_;
  metadata.reflection = Processor_442_ReceiveGameStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_490_ReceiveRoomClose::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_490_ReceiveRoomClose::Processor_490_ReceiveRoomClose()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_490_ReceiveRoomClose)
}

void Processor_490_ReceiveRoomClose::InitAsDefaultInstance() {
}

Processor_490_ReceiveRoomClose::Processor_490_ReceiveRoomClose(const Processor_490_ReceiveRoomClose& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_490_ReceiveRoomClose)
}

void Processor_490_ReceiveRoomClose::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_490_ReceiveRoomClose::~Processor_490_ReceiveRoomClose() {
  // @@protoc_insertion_point(destructor:msg.Processor_490_ReceiveRoomClose)
  SharedDtor();
}

void Processor_490_ReceiveRoomClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_490_ReceiveRoomClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_490_ReceiveRoomClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_490_ReceiveRoomClose_descriptor_;
}

const Processor_490_ReceiveRoomClose& Processor_490_ReceiveRoomClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_490_ReceiveRoomClose* Processor_490_ReceiveRoomClose::default_instance_ = NULL;

Processor_490_ReceiveRoomClose* Processor_490_ReceiveRoomClose::New() const {
  return new Processor_490_ReceiveRoomClose;
}

void Processor_490_ReceiveRoomClose::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_490_ReceiveRoomClose::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_490_ReceiveRoomClose)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_490_ReceiveRoomClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_490_ReceiveRoomClose)
  return false;
#undef DO_
}

void Processor_490_ReceiveRoomClose::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_490_ReceiveRoomClose)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_490_ReceiveRoomClose)
}

::google_public::protobuf::uint8* Processor_490_ReceiveRoomClose::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_490_ReceiveRoomClose)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_490_ReceiveRoomClose)
  return target;
}

int Processor_490_ReceiveRoomClose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_490_ReceiveRoomClose::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_490_ReceiveRoomClose* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_490_ReceiveRoomClose*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_490_ReceiveRoomClose::MergeFrom(const Processor_490_ReceiveRoomClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_490_ReceiveRoomClose::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_490_ReceiveRoomClose::CopyFrom(const Processor_490_ReceiveRoomClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_490_ReceiveRoomClose::IsInitialized() const {

  return true;
}

void Processor_490_ReceiveRoomClose::Swap(Processor_490_ReceiveRoomClose* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_490_ReceiveRoomClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_490_ReceiveRoomClose_descriptor_;
  metadata.reflection = Processor_490_ReceiveRoomClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_491_ReceiveRoomMessage::kRoomIdFieldNumber;
const int Processor_491_ReceiveRoomMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

Processor_491_ReceiveRoomMessage::Processor_491_ReceiveRoomMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_491_ReceiveRoomMessage)
}

void Processor_491_ReceiveRoomMessage::InitAsDefaultInstance() {
}

Processor_491_ReceiveRoomMessage::Processor_491_ReceiveRoomMessage(const Processor_491_ReceiveRoomMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_491_ReceiveRoomMessage)
}

void Processor_491_ReceiveRoomMessage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  message_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_491_ReceiveRoomMessage::~Processor_491_ReceiveRoomMessage() {
  // @@protoc_insertion_point(destructor:msg.Processor_491_ReceiveRoomMessage)
  SharedDtor();
}

void Processor_491_ReceiveRoomMessage::SharedDtor() {
  if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Processor_491_ReceiveRoomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_491_ReceiveRoomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_491_ReceiveRoomMessage_descriptor_;
}

const Processor_491_ReceiveRoomMessage& Processor_491_ReceiveRoomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_491_ReceiveRoomMessage* Processor_491_ReceiveRoomMessage::default_instance_ = NULL;

Processor_491_ReceiveRoomMessage* Processor_491_ReceiveRoomMessage::New() const {
  return new Processor_491_ReceiveRoomMessage;
}

void Processor_491_ReceiveRoomMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_message()) {
      if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_491_ReceiveRoomMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_491_ReceiveRoomMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_491_ReceiveRoomMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_491_ReceiveRoomMessage)
  return false;
#undef DO_
}

void Processor_491_ReceiveRoomMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_491_ReceiveRoomMessage)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_491_ReceiveRoomMessage)
}

::google_public::protobuf::uint8* Processor_491_ReceiveRoomMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_491_ReceiveRoomMessage)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_491_ReceiveRoomMessage)
  return target;
}

int Processor_491_ReceiveRoomMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_491_ReceiveRoomMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_491_ReceiveRoomMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_491_ReceiveRoomMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_491_ReceiveRoomMessage::MergeFrom(const Processor_491_ReceiveRoomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_491_ReceiveRoomMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_491_ReceiveRoomMessage::CopyFrom(const Processor_491_ReceiveRoomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_491_ReceiveRoomMessage::IsInitialized() const {

  return true;
}

void Processor_491_ReceiveRoomMessage::Swap(Processor_491_ReceiveRoomMessage* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_491_ReceiveRoomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_491_ReceiveRoomMessage_descriptor_;
  metadata.reflection = Processor_491_ReceiveRoomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_495_ReceiveRequest::kMessageFieldNumber;
const int Processor_495_ReceiveRequest::kIdFieldNumber;
#endif  // !_MSC_VER

Processor_495_ReceiveRequest::Processor_495_ReceiveRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_495_ReceiveRequest)
}

void Processor_495_ReceiveRequest::InitAsDefaultInstance() {
}

Processor_495_ReceiveRequest::Processor_495_ReceiveRequest(const Processor_495_ReceiveRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_495_ReceiveRequest)
}

void Processor_495_ReceiveRequest::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_495_ReceiveRequest::~Processor_495_ReceiveRequest() {
  // @@protoc_insertion_point(destructor:msg.Processor_495_ReceiveRequest)
  SharedDtor();
}

void Processor_495_ReceiveRequest::SharedDtor() {
  if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Processor_495_ReceiveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_495_ReceiveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_495_ReceiveRequest_descriptor_;
}

const Processor_495_ReceiveRequest& Processor_495_ReceiveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_495_ReceiveRequest* Processor_495_ReceiveRequest::default_instance_ = NULL;

Processor_495_ReceiveRequest* Processor_495_ReceiveRequest::New() const {
  return new Processor_495_ReceiveRequest;
}

void Processor_495_ReceiveRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_495_ReceiveRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_495_ReceiveRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_495_ReceiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_495_ReceiveRequest)
  return false;
#undef DO_
}

void Processor_495_ReceiveRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_495_ReceiveRequest)
  // optional string message = 1;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_495_ReceiveRequest)
}

::google_public::protobuf::uint8* Processor_495_ReceiveRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_495_ReceiveRequest)
  // optional string message = 1;
  if (has_message()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_495_ReceiveRequest)
  return target;
}

int Processor_495_ReceiveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_495_ReceiveRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_495_ReceiveRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_495_ReceiveRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_495_ReceiveRequest::MergeFrom(const Processor_495_ReceiveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_495_ReceiveRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_495_ReceiveRequest::CopyFrom(const Processor_495_ReceiveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_495_ReceiveRequest::IsInitialized() const {

  return true;
}

void Processor_495_ReceiveRequest::Swap(Processor_495_ReceiveRequest* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_495_ReceiveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_495_ReceiveRequest_descriptor_;
  metadata.reflection = Processor_495_ReceiveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_496_ReplyRequest::kChoiceFieldNumber;
const int Processor_496_ReplyRequest::kIdFieldNumber;
#endif  // !_MSC_VER

Processor_496_ReplyRequest::Processor_496_ReplyRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_496_ReplyRequest)
}

void Processor_496_ReplyRequest::InitAsDefaultInstance() {
}

Processor_496_ReplyRequest::Processor_496_ReplyRequest(const Processor_496_ReplyRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_496_ReplyRequest)
}

void Processor_496_ReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  choice_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_496_ReplyRequest::~Processor_496_ReplyRequest() {
  // @@protoc_insertion_point(destructor:msg.Processor_496_ReplyRequest)
  SharedDtor();
}

void Processor_496_ReplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_496_ReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_496_ReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_496_ReplyRequest_descriptor_;
}

const Processor_496_ReplyRequest& Processor_496_ReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_496_ReplyRequest* Processor_496_ReplyRequest::default_instance_ = NULL;

Processor_496_ReplyRequest* Processor_496_ReplyRequest::New() const {
  return new Processor_496_ReplyRequest;
}

void Processor_496_ReplyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_496_ReplyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(choice_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_496_ReplyRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_496_ReplyRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool choice = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &choice_)));
          set_has_choice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_496_ReplyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_496_ReplyRequest)
  return false;
#undef DO_
}

void Processor_496_ReplyRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_496_ReplyRequest)
  // optional bool choice = 1;
  if (has_choice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->choice(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_496_ReplyRequest)
}

::google_public::protobuf::uint8* Processor_496_ReplyRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_496_ReplyRequest)
  // optional bool choice = 1;
  if (has_choice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->choice(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_496_ReplyRequest)
  return target;
}

int Processor_496_ReplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool choice = 1;
    if (has_choice()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_496_ReplyRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_496_ReplyRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_496_ReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_496_ReplyRequest::MergeFrom(const Processor_496_ReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choice()) {
      set_choice(from.choice());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_496_ReplyRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_496_ReplyRequest::CopyFrom(const Processor_496_ReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_496_ReplyRequest::IsInitialized() const {

  return true;
}

void Processor_496_ReplyRequest::Swap(Processor_496_ReplyRequest* other) {
  if (other != this) {
    std::swap(choice_, other->choice_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_496_ReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_496_ReplyRequest_descriptor_;
  metadata.reflection = Processor_496_ReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonRoomInfo::kOwnerIDFieldNumber;
const int CommonRoomInfo::kStatusFieldNumber;
const int CommonRoomInfo::kMaxSeatNumFieldNumber;
const int CommonRoomInfo::kHandIDFieldNumber;
const int CommonRoomInfo::kTableNoteFieldNumber;
const int CommonRoomInfo::kRoomTypeFieldNumber;
const int CommonRoomInfo::kRoomIdFieldNumber;
const int CommonRoomInfo::kGroupIdFieldNumber;
const int CommonRoomInfo::kDealerPosFieldNumber;
const int CommonRoomInfo::kIsManagerFieldNumber;
const int CommonRoomInfo::kIsPlayingFieldNumber;
#endif  // !_MSC_VER

CommonRoomInfo::CommonRoomInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CommonRoomInfo)
}

void CommonRoomInfo::InitAsDefaultInstance() {
}

CommonRoomInfo::CommonRoomInfo(const CommonRoomInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CommonRoomInfo)
}

void CommonRoomInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownerid_ = 0;
  status_ = 1;
  maxseatnum_ = 0;
  handid_ = 0;
  tablenote_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_ = 0;
  roomid_ = 0;
  groupid_ = 0;
  dealerpos_ = 0;
  ismanager_ = false;
  isplaying_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRoomInfo::~CommonRoomInfo() {
  // @@protoc_insertion_point(destructor:msg.CommonRoomInfo)
  SharedDtor();
}

void CommonRoomInfo::SharedDtor() {
  if (tablenote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablenote_;
  }
  if (this != default_instance_) {
  }
}

void CommonRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CommonRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRoomInfo_descriptor_;
}

const CommonRoomInfo& CommonRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CommonRoomInfo* CommonRoomInfo::default_instance_ = NULL;

CommonRoomInfo* CommonRoomInfo::New() const {
  return new CommonRoomInfo;
}

void CommonRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(maxseatnum_, handid_);
    ZR_(roomtype_, groupid_);
    ownerid_ = 0;
    status_ = 1;
    if (has_tablenote()) {
      if (tablenote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablenote_->clear();
      }
    }
  }
  ZR_(dealerpos_, isplaying_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonRoomInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CommonRoomInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OwnerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .msg.GameStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::GameStatus_IsValid(value)) {
            set_status(static_cast< ::msg::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxSeatNum;
        break;
      }

      // optional int32 MaxSeatNum = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxSeatNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxseatnum_)));
          set_has_maxseatnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HandID;
        break;
      }

      // optional int32 HandID = 4;
      case 4: {
        if (tag == 32) {
         parse_HandID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TableNote;
        break;
      }

      // optional string TableNote = 5;
      case 5: {
        if (tag == 42) {
         parse_TableNote:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablenote()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablenote().data(), this->tablenote().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "tablenote");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RoomType;
        break;
      }

      // optional .msg.RoomType RoomType = 6;
      case 6: {
        if (tag == 48) {
         parse_RoomType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RoomId;
        break;
      }

      // optional int32 RoomId = 7;
      case 7: {
        if (tag == 56) {
         parse_RoomId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_GroupId;
        break;
      }

      // optional int32 GroupId = 8;
      case 8: {
        if (tag == 64) {
         parse_GroupId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DealerPos;
        break;
      }

      // optional int32 DealerPos = 9;
      case 9: {
        if (tag == 72) {
         parse_DealerPos:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerpos_)));
          set_has_dealerpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_IsManager;
        break;
      }

      // optional bool IsManager = 10;
      case 10: {
        if (tag == 80) {
         parse_IsManager:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismanager_)));
          set_has_ismanager();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsPlaying;
        break;
      }

      // optional bool IsPlaying = 11;
      case 11: {
        if (tag == 88) {
         parse_IsPlaying:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplaying_)));
          set_has_isplaying();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CommonRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CommonRoomInfo)
  return false;
#undef DO_
}

void CommonRoomInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CommonRoomInfo)
  // optional int32 OwnerID = 1;
  if (has_ownerid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->ownerid(), output);
  }

  // optional .msg.GameStatus Status = 2;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional int32 MaxSeatNum = 3;
  if (has_maxseatnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxseatnum(), output);
  }

  // optional int32 HandID = 4;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->handid(), output);
  }

  // optional string TableNote = 5;
  if (has_tablenote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablenote().data(), this->tablenote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tablenote");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tablenote(), output);
  }

  // optional .msg.RoomType RoomType = 6;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->roomtype(), output);
  }

  // optional int32 RoomId = 7;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomid(), output);
  }

  // optional int32 GroupId = 8;
  if (has_groupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->groupid(), output);
  }

  // optional int32 DealerPos = 9;
  if (has_dealerpos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->dealerpos(), output);
  }

  // optional bool IsManager = 10;
  if (has_ismanager()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(10, this->ismanager(), output);
  }

  // optional bool IsPlaying = 11;
  if (has_isplaying()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(11, this->isplaying(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CommonRoomInfo)
}

::google_public::protobuf::uint8* CommonRoomInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CommonRoomInfo)
  // optional int32 OwnerID = 1;
  if (has_ownerid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ownerid(), target);
  }

  // optional .msg.GameStatus Status = 2;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional int32 MaxSeatNum = 3;
  if (has_maxseatnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxseatnum(), target);
  }

  // optional int32 HandID = 4;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->handid(), target);
  }

  // optional string TableNote = 5;
  if (has_tablenote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablenote().data(), this->tablenote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tablenote");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tablenote(), target);
  }

  // optional .msg.RoomType RoomType = 6;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->roomtype(), target);
  }

  // optional int32 RoomId = 7;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomid(), target);
  }

  // optional int32 GroupId = 8;
  if (has_groupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->groupid(), target);
  }

  // optional int32 DealerPos = 9;
  if (has_dealerpos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dealerpos(), target);
  }

  // optional bool IsManager = 10;
  if (has_ismanager()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ismanager(), target);
  }

  // optional bool IsPlaying = 11;
  if (has_isplaying()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isplaying(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CommonRoomInfo)
  return target;
}

int CommonRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OwnerID = 1;
    if (has_ownerid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional .msg.GameStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 MaxSeatNum = 3;
    if (has_maxseatnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxseatnum());
    }

    // optional int32 HandID = 4;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional string TableNote = 5;
    if (has_tablenote()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->tablenote());
    }

    // optional .msg.RoomType RoomType = 6;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional int32 RoomId = 7;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 GroupId = 8;
    if (has_groupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 DealerPos = 9;
    if (has_dealerpos()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerpos());
    }

    // optional bool IsManager = 10;
    if (has_ismanager()) {
      total_size += 1 + 1;
    }

    // optional bool IsPlaying = 11;
    if (has_isplaying()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRoomInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRoomInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CommonRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonRoomInfo::MergeFrom(const CommonRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_maxseatnum()) {
      set_maxseatnum(from.maxseatnum());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_tablenote()) {
      set_tablenote(from.tablenote());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dealerpos()) {
      set_dealerpos(from.dealerpos());
    }
    if (from.has_ismanager()) {
      set_ismanager(from.ismanager());
    }
    if (from.has_isplaying()) {
      set_isplaying(from.isplaying());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonRoomInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRoomInfo::CopyFrom(const CommonRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRoomInfo::IsInitialized() const {

  return true;
}

void CommonRoomInfo::Swap(CommonRoomInfo* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(status_, other->status_);
    std::swap(maxseatnum_, other->maxseatnum_);
    std::swap(handid_, other->handid_);
    std::swap(tablenote_, other->tablenote_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomid_, other->roomid_);
    std::swap(groupid_, other->groupid_);
    std::swap(dealerpos_, other->dealerpos_);
    std::swap(ismanager_, other->ismanager_);
    std::swap(isplaying_, other->isplaying_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CommonRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CommonRoomInfo_descriptor_;
  metadata.reflection = CommonRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonPlayerInfo::kUserInfoFieldNumber;
const int CommonPlayerInfo::kSittingStatusFieldNumber;
const int CommonPlayerInfo::kSitNumFieldNumber;
const int CommonPlayerInfo::kAutoActionFieldNumber;
#endif  // !_MSC_VER

CommonPlayerInfo::CommonPlayerInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CommonPlayerInfo)
}

void CommonPlayerInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

CommonPlayerInfo::CommonPlayerInfo(const CommonPlayerInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CommonPlayerInfo)
}

void CommonPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  sittingstatus_ = 0;
  sitnum_ = 0;
  autoaction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonPlayerInfo::~CommonPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.CommonPlayerInfo)
  SharedDtor();
}

void CommonPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CommonPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CommonPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonPlayerInfo_descriptor_;
}

const CommonPlayerInfo& CommonPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CommonPlayerInfo* CommonPlayerInfo::default_instance_ = NULL;

CommonPlayerInfo* CommonPlayerInfo::New() const {
  return new CommonPlayerInfo;
}

void CommonPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sittingstatus_, autoaction_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::msg::UserDetailInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonPlayerInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CommonPlayerInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SittingStatus;
        break;
      }

      // optional .msg.SittingStatus SittingStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_SittingStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SittingStatus_IsValid(value)) {
            set_sittingstatus(static_cast< ::msg::SittingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SitNum;
        break;
      }

      // optional int32 SitNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SitNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitnum_)));
          set_has_sitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AutoAction;
        break;
      }

      // optional bool AutoAction = 4;
      case 4: {
        if (tag == 32) {
         parse_AutoAction:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoaction_)));
          set_has_autoaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CommonPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CommonPlayerInfo)
  return false;
#undef DO_
}

void CommonPlayerInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CommonPlayerInfo)
  // optional .msg.UserDetailInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .msg.SittingStatus SittingStatus = 2;
  if (has_sittingstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sittingstatus(), output);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->sitnum(), output);
  }

  // optional bool AutoAction = 4;
  if (has_autoaction()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->autoaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CommonPlayerInfo)
}

::google_public::protobuf::uint8* CommonPlayerInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CommonPlayerInfo)
  // optional .msg.UserDetailInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .msg.SittingStatus SittingStatus = 2;
  if (has_sittingstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sittingstatus(), target);
  }

  // optional int32 SitNum = 3;
  if (has_sitnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sitnum(), target);
  }

  // optional bool AutoAction = 4;
  if (has_autoaction()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autoaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CommonPlayerInfo)
  return target;
}

int CommonPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .msg.SittingStatus SittingStatus = 2;
    if (has_sittingstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->sittingstatus());
    }

    // optional int32 SitNum = 3;
    if (has_sitnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sitnum());
    }

    // optional bool AutoAction = 4;
    if (has_autoaction()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonPlayerInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonPlayerInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CommonPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonPlayerInfo::MergeFrom(const CommonPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::msg::UserDetailInfo::MergeFrom(from.userinfo());
    }
    if (from.has_sittingstatus()) {
      set_sittingstatus(from.sittingstatus());
    }
    if (from.has_sitnum()) {
      set_sitnum(from.sitnum());
    }
    if (from.has_autoaction()) {
      set_autoaction(from.autoaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonPlayerInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPlayerInfo::CopyFrom(const CommonPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPlayerInfo::IsInitialized() const {

  return true;
}

void CommonPlayerInfo::Swap(CommonPlayerInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(sittingstatus_, other->sittingstatus_);
    std::swap(sitnum_, other->sitnum_);
    std::swap(autoaction_, other->autoaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CommonPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CommonPlayerInfo_descriptor_;
  metadata.reflection = CommonPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_500_PokerRefreshAll::kCommonRoomInfoFieldNumber;
const int Processor_500_PokerRefreshAll::kMinBuyFieldNumber;
const int Processor_500_PokerRefreshAll::kMaxBuyFieldNumber;
const int Processor_500_PokerRefreshAll::kBuyUnitFieldNumber;
const int Processor_500_PokerRefreshAll::kPropUpdateFieldNumber;
const int Processor_500_PokerRefreshAll::kSettingsFieldNumber;
const int Processor_500_PokerRefreshAll::kActionRequestFieldNumber;
const int Processor_500_PokerRefreshAll::kIsTournamentFieldNumber;
const int Processor_500_PokerRefreshAll::kShowCardFieldNumber;
#endif  // !_MSC_VER

Processor_500_PokerRefreshAll::Processor_500_PokerRefreshAll()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_500_PokerRefreshAll)
}

void Processor_500_PokerRefreshAll::InitAsDefaultInstance() {
  commonroominfo_ = const_cast< ::msg::CommonRoomInfo*>(&::msg::CommonRoomInfo::default_instance());
  propupdate_ = const_cast< ::msg::TableAndUserUpdate*>(&::msg::TableAndUserUpdate::default_instance());
  settings_ = const_cast< ::msg::PokerPlayerSetting*>(&::msg::PokerPlayerSetting::default_instance());
  actionrequest_ = const_cast< ::msg::PokerActionRequest*>(&::msg::PokerActionRequest::default_instance());
}

Processor_500_PokerRefreshAll::Processor_500_PokerRefreshAll(const Processor_500_PokerRefreshAll& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_500_PokerRefreshAll)
}

void Processor_500_PokerRefreshAll::SharedCtor() {
  _cached_size_ = 0;
  commonroominfo_ = NULL;
  minbuy_ = 0;
  maxbuy_ = 0;
  buyunit_ = 0;
  propupdate_ = NULL;
  settings_ = NULL;
  actionrequest_ = NULL;
  istournament_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_500_PokerRefreshAll::~Processor_500_PokerRefreshAll() {
  // @@protoc_insertion_point(destructor:msg.Processor_500_PokerRefreshAll)
  SharedDtor();
}

void Processor_500_PokerRefreshAll::SharedDtor() {
  if (this != default_instance_) {
    delete commonroominfo_;
    delete propupdate_;
    delete settings_;
    delete actionrequest_;
  }
}

void Processor_500_PokerRefreshAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_500_PokerRefreshAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_500_PokerRefreshAll_descriptor_;
}

const Processor_500_PokerRefreshAll& Processor_500_PokerRefreshAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_500_PokerRefreshAll* Processor_500_PokerRefreshAll::default_instance_ = NULL;

Processor_500_PokerRefreshAll* Processor_500_PokerRefreshAll::New() const {
  return new Processor_500_PokerRefreshAll;
}

void Processor_500_PokerRefreshAll::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_500_PokerRefreshAll*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(minbuy_, maxbuy_);
    ZR_(buyunit_, istournament_);
    if (has_commonroominfo()) {
      if (commonroominfo_ != NULL) commonroominfo_->::msg::CommonRoomInfo::Clear();
    }
    if (has_propupdate()) {
      if (propupdate_ != NULL) propupdate_->::msg::TableAndUserUpdate::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::PokerPlayerSetting::Clear();
    }
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::PokerActionRequest::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  showcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_500_PokerRefreshAll::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_500_PokerRefreshAll)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commonroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MinBuy;
        break;
      }

      // optional int32 MinBuy = 2;
      case 2: {
        if (tag == 16) {
         parse_MinBuy:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbuy_)));
          set_has_minbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxBuy;
        break;
      }

      // optional int32 MaxBuy = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxBuy:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbuy_)));
          set_has_maxbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuyUnit;
        break;
      }

      // optional int32 BuyUnit = 4;
      case 4: {
        if (tag == 32) {
         parse_BuyUnit:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyunit_)));
          set_has_buyunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PropUpdate;
        break;
      }

      // optional .msg.TableAndUserUpdate PropUpdate = 5;
      case 5: {
        if (tag == 42) {
         parse_PropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Settings;
        break;
      }

      // optional .msg.PokerPlayerSetting Settings = 6;
      case 6: {
        if (tag == 50) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ActionRequest;
        break;
      }

      // optional .msg.PokerActionRequest ActionRequest = 7;
      case 7: {
        if (tag == 58) {
         parse_ActionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 8;
      case 8: {
        if (tag == 64) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ShowCard;
        break;
      }

      // repeated bool ShowCard = 9;
      case 9: {
        if (tag == 72) {
         parse_ShowCard:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 72, input, this->mutable_showcard())));
        } else if (tag == 74) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_showcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ShowCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_500_PokerRefreshAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_500_PokerRefreshAll)
  return false;
#undef DO_
}

void Processor_500_PokerRefreshAll::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_500_PokerRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commonroominfo(), output);
  }

  // optional int32 MinBuy = 2;
  if (has_minbuy()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->minbuy(), output);
  }

  // optional int32 MaxBuy = 3;
  if (has_maxbuy()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxbuy(), output);
  }

  // optional int32 BuyUnit = 4;
  if (has_buyunit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->buyunit(), output);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 5;
  if (has_propupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->propupdate(), output);
  }

  // optional .msg.PokerPlayerSetting Settings = 6;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->settings(), output);
  }

  // optional .msg.PokerActionRequest ActionRequest = 7;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->actionrequest(), output);
  }

  // optional bool IsTournament = 8;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(8, this->istournament(), output);
  }

  // repeated bool ShowCard = 9;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(
      9, this->showcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_500_PokerRefreshAll)
}

::google_public::protobuf::uint8* Processor_500_PokerRefreshAll::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_500_PokerRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commonroominfo(), target);
  }

  // optional int32 MinBuy = 2;
  if (has_minbuy()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minbuy(), target);
  }

  // optional int32 MaxBuy = 3;
  if (has_maxbuy()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxbuy(), target);
  }

  // optional int32 BuyUnit = 4;
  if (has_buyunit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buyunit(), target);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 5;
  if (has_propupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->propupdate(), target);
  }

  // optional .msg.PokerPlayerSetting Settings = 6;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->settings(), target);
  }

  // optional .msg.PokerActionRequest ActionRequest = 7;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->actionrequest(), target);
  }

  // optional bool IsTournament = 8;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->istournament(), target);
  }

  // repeated bool ShowCard = 9;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteBoolToArray(9, this->showcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_500_PokerRefreshAll)
  return target;
}

int Processor_500_PokerRefreshAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
    if (has_commonroominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commonroominfo());
    }

    // optional int32 MinBuy = 2;
    if (has_minbuy()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->minbuy());
    }

    // optional int32 MaxBuy = 3;
    if (has_maxbuy()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbuy());
    }

    // optional int32 BuyUnit = 4;
    if (has_buyunit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->buyunit());
    }

    // optional .msg.TableAndUserUpdate PropUpdate = 5;
    if (has_propupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propupdate());
    }

    // optional .msg.PokerPlayerSetting Settings = 6;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional .msg.PokerActionRequest ActionRequest = 7;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

    // optional bool IsTournament = 8;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

  }
  // repeated bool ShowCard = 9;
  {
    int data_size = 0;
    data_size = 1 * this->showcard_size();
    total_size += 1 * this->showcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_500_PokerRefreshAll::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_500_PokerRefreshAll* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_500_PokerRefreshAll*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_500_PokerRefreshAll::MergeFrom(const Processor_500_PokerRefreshAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcard_.MergeFrom(from.showcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commonroominfo()) {
      mutable_commonroominfo()->::msg::CommonRoomInfo::MergeFrom(from.commonroominfo());
    }
    if (from.has_minbuy()) {
      set_minbuy(from.minbuy());
    }
    if (from.has_maxbuy()) {
      set_maxbuy(from.maxbuy());
    }
    if (from.has_buyunit()) {
      set_buyunit(from.buyunit());
    }
    if (from.has_propupdate()) {
      mutable_propupdate()->::msg::TableAndUserUpdate::MergeFrom(from.propupdate());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::PokerPlayerSetting::MergeFrom(from.settings());
    }
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::PokerActionRequest::MergeFrom(from.actionrequest());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_500_PokerRefreshAll::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_500_PokerRefreshAll::CopyFrom(const Processor_500_PokerRefreshAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_500_PokerRefreshAll::IsInitialized() const {

  return true;
}

void Processor_500_PokerRefreshAll::Swap(Processor_500_PokerRefreshAll* other) {
  if (other != this) {
    std::swap(commonroominfo_, other->commonroominfo_);
    std::swap(minbuy_, other->minbuy_);
    std::swap(maxbuy_, other->maxbuy_);
    std::swap(buyunit_, other->buyunit_);
    std::swap(propupdate_, other->propupdate_);
    std::swap(settings_, other->settings_);
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(istournament_, other->istournament_);
    showcard_.Swap(&other->showcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_500_PokerRefreshAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_500_PokerRefreshAll_descriptor_;
  metadata.reflection = Processor_500_PokerRefreshAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerPlayerSetting::kAutoCallFieldNumber;
const int PokerPlayerSetting::kCallOrFoldFieldNumber;
const int PokerPlayerSetting::kStraddleFieldNumber;
const int PokerPlayerSetting::kSitoutNextHandFieldNumber;
#endif  // !_MSC_VER

PokerPlayerSetting::PokerPlayerSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerPlayerSetting)
}

void PokerPlayerSetting::InitAsDefaultInstance() {
}

PokerPlayerSetting::PokerPlayerSetting(const PokerPlayerSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerPlayerSetting)
}

void PokerPlayerSetting::SharedCtor() {
  _cached_size_ = 0;
  autocall_ = false;
  callorfold_ = false;
  straddle_ = false;
  sitoutnexthand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerPlayerSetting::~PokerPlayerSetting() {
  // @@protoc_insertion_point(destructor:msg.PokerPlayerSetting)
  SharedDtor();
}

void PokerPlayerSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerPlayerSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerPlayerSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerPlayerSetting_descriptor_;
}

const PokerPlayerSetting& PokerPlayerSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerPlayerSetting* PokerPlayerSetting::default_instance_ = NULL;

PokerPlayerSetting* PokerPlayerSetting::New() const {
  return new PokerPlayerSetting;
}

void PokerPlayerSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PokerPlayerSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(autocall_, sitoutnexthand_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerPlayerSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerPlayerSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool AutoCall = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autocall_)));
          set_has_autocall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CallOrFold;
        break;
      }

      // optional bool CallOrFold = 2;
      case 2: {
        if (tag == 16) {
         parse_CallOrFold:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &callorfold_)));
          set_has_callorfold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Straddle;
        break;
      }

      // optional bool Straddle = 3;
      case 3: {
        if (tag == 24) {
         parse_Straddle:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &straddle_)));
          set_has_straddle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SitoutNextHand;
        break;
      }

      // optional bool SitoutNextHand = 4;
      case 4: {
        if (tag == 32) {
         parse_SitoutNextHand:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sitoutnexthand_)));
          set_has_sitoutnexthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerPlayerSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerPlayerSetting)
  return false;
#undef DO_
}

void PokerPlayerSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerPlayerSetting)
  // optional bool AutoCall = 1;
  if (has_autocall()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->autocall(), output);
  }

  // optional bool CallOrFold = 2;
  if (has_callorfold()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->callorfold(), output);
  }

  // optional bool Straddle = 3;
  if (has_straddle()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->straddle(), output);
  }

  // optional bool SitoutNextHand = 4;
  if (has_sitoutnexthand()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->sitoutnexthand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerPlayerSetting)
}

::google_public::protobuf::uint8* PokerPlayerSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerPlayerSetting)
  // optional bool AutoCall = 1;
  if (has_autocall()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->autocall(), target);
  }

  // optional bool CallOrFold = 2;
  if (has_callorfold()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->callorfold(), target);
  }

  // optional bool Straddle = 3;
  if (has_straddle()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->straddle(), target);
  }

  // optional bool SitoutNextHand = 4;
  if (has_sitoutnexthand()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sitoutnexthand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerPlayerSetting)
  return target;
}

int PokerPlayerSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool AutoCall = 1;
    if (has_autocall()) {
      total_size += 1 + 1;
    }

    // optional bool CallOrFold = 2;
    if (has_callorfold()) {
      total_size += 1 + 1;
    }

    // optional bool Straddle = 3;
    if (has_straddle()) {
      total_size += 1 + 1;
    }

    // optional bool SitoutNextHand = 4;
    if (has_sitoutnexthand()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerPlayerSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerPlayerSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerPlayerSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerPlayerSetting::MergeFrom(const PokerPlayerSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autocall()) {
      set_autocall(from.autocall());
    }
    if (from.has_callorfold()) {
      set_callorfold(from.callorfold());
    }
    if (from.has_straddle()) {
      set_straddle(from.straddle());
    }
    if (from.has_sitoutnexthand()) {
      set_sitoutnexthand(from.sitoutnexthand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerPlayerSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerPlayerSetting::CopyFrom(const PokerPlayerSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerPlayerSetting::IsInitialized() const {

  return true;
}

void PokerPlayerSetting::Swap(PokerPlayerSetting* other) {
  if (other != this) {
    std::swap(autocall_, other->autocall_);
    std::swap(callorfold_, other->callorfold_);
    std::swap(straddle_, other->straddle_);
    std::swap(sitoutnexthand_, other->sitoutnexthand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerPlayerSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerPlayerSetting_descriptor_;
  metadata.reflection = PokerPlayerSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerPlayerInfo::kPlayerInfoFieldNumber;
const int PokerPlayerInfo::kHoleCardsFieldNumber;
const int PokerPlayerInfo::kBetChipsFieldNumber;
const int PokerPlayerInfo::kChipsFieldNumber;
const int PokerPlayerInfo::kActionStatusFieldNumber;
const int PokerPlayerInfo::kHiHandTypeFieldNumber;
const int PokerPlayerInfo::kLoHandTypeFieldNumber;
const int PokerPlayerInfo::kHiCardsFieldNumber;
const int PokerPlayerInfo::kLoCardsFieldNumber;
const int PokerPlayerInfo::kSecondHiHandTypeFieldNumber;
const int PokerPlayerInfo::kSecondLoHandTypeFieldNumber;
const int PokerPlayerInfo::kSecondHiCardsFieldNumber;
const int PokerPlayerInfo::kSecondLoCardsFieldNumber;
#endif  // !_MSC_VER

PokerPlayerInfo::PokerPlayerInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerPlayerInfo)
}

void PokerPlayerInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::msg::CommonPlayerInfo*>(&::msg::CommonPlayerInfo::default_instance());
}

PokerPlayerInfo::PokerPlayerInfo(const PokerPlayerInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerPlayerInfo)
}

void PokerPlayerInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerinfo_ = NULL;
  betchips_ = 0;
  chips_ = 0;
  actionstatus_ = 0;
  hihandtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  lohandtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  secondhihandtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  secondlohandtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerPlayerInfo::~PokerPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.PokerPlayerInfo)
  SharedDtor();
}

void PokerPlayerInfo::SharedDtor() {
  if (hihandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hihandtype_;
  }
  if (lohandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lohandtype_;
  }
  if (secondhihandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondhihandtype_;
  }
  if (secondlohandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondlohandtype_;
  }
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void PokerPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerPlayerInfo_descriptor_;
}

const PokerPlayerInfo& PokerPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerPlayerInfo* PokerPlayerInfo::default_instance_ = NULL;

PokerPlayerInfo* PokerPlayerInfo::New() const {
  return new PokerPlayerInfo;
}

void PokerPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PokerPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(betchips_, chips_);
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::msg::CommonPlayerInfo::Clear();
    }
    actionstatus_ = 0;
    if (has_hihandtype()) {
      if (hihandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hihandtype_->clear();
      }
    }
    if (has_lohandtype()) {
      if (lohandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lohandtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1536) {
    if (has_secondhihandtype()) {
      if (secondhihandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondhihandtype_->clear();
      }
    }
    if (has_secondlohandtype()) {
      if (secondlohandtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondlohandtype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  holecards_.Clear();
  hicards_.Clear();
  locards_.Clear();
  secondhicards_.Clear();
  secondlocards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerPlayerInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerPlayerInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 HoleCards = 4;
      case 4: {
        if (tag == 32) {
         parse_HoleCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_holecards())));
        } else if (tag == 34) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_holecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HoleCards;
        if (input->ExpectTag(40)) goto parse_BetChips;
        break;
      }

      // optional int32 BetChips = 5;
      case 5: {
        if (tag == 40) {
         parse_BetChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betchips_)));
          set_has_betchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Chips;
        break;
      }

      // optional int32 Chips = 6;
      case 6: {
        if (tag == 48) {
         parse_Chips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ActionStatus;
        break;
      }

      // optional .msg.ActionStatus ActionStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_ActionStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ActionStatus_IsValid(value)) {
            set_actionstatus(static_cast< ::msg::ActionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_HiHandType;
        break;
      }

      // optional string HiHandType = 8;
      case 8: {
        if (tag == 66) {
         parse_HiHandType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hihandtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hihandtype().data(), this->hihandtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "hihandtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_LoHandType;
        break;
      }

      // optional string LoHandType = 9;
      case 9: {
        if (tag == 74) {
         parse_LoHandType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lohandtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lohandtype().data(), this->lohandtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "lohandtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HiCards;
        break;
      }

      // repeated int32 HiCards = 10;
      case 10: {
        if (tag == 80) {
         parse_HiCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_hicards())));
        } else if (tag == 82) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hicards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HiCards;
        if (input->ExpectTag(88)) goto parse_LoCards;
        break;
      }

      // repeated int32 LoCards = 11;
      case 11: {
        if (tag == 88) {
         parse_LoCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_locards())));
        } else if (tag == 90) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_locards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LoCards;
        if (input->ExpectTag(98)) goto parse_SecondHiHandType;
        break;
      }

      // optional string SecondHiHandType = 12;
      case 12: {
        if (tag == 98) {
         parse_SecondHiHandType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondhihandtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondhihandtype().data(), this->secondhihandtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "secondhihandtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SecondLoHandType;
        break;
      }

      // optional string SecondLoHandType = 13;
      case 13: {
        if (tag == 106) {
         parse_SecondLoHandType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondlohandtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondlohandtype().data(), this->secondlohandtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "secondlohandtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_SecondHiCards;
        break;
      }

      // repeated int32 SecondHiCards = 14;
      case 14: {
        if (tag == 112) {
         parse_SecondHiCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_secondhicards())));
        } else if (tag == 114) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secondhicards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_SecondHiCards;
        if (input->ExpectTag(120)) goto parse_SecondLoCards;
        break;
      }

      // repeated int32 SecondLoCards = 15;
      case 15: {
        if (tag == 120) {
         parse_SecondLoCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_secondlocards())));
        } else if (tag == 122) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secondlocards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_SecondLoCards;
        if (input->ExpectTag(130)) goto parse_PlayerInfo;
        break;
      }

      // optional .msg.CommonPlayerInfo PlayerInfo = 16;
      case 16: {
        if (tag == 130) {
         parse_PlayerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerPlayerInfo)
  return false;
#undef DO_
}

void PokerPlayerInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerPlayerInfo)
  // repeated int32 HoleCards = 4;
  for (int i = 0; i < this->holecards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->holecards(i), output);
  }

  // optional int32 BetChips = 5;
  if (has_betchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->betchips(), output);
  }

  // optional int32 Chips = 6;
  if (has_chips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->chips(), output);
  }

  // optional .msg.ActionStatus ActionStatus = 7;
  if (has_actionstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->actionstatus(), output);
  }

  // optional string HiHandType = 8;
  if (has_hihandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hihandtype().data(), this->hihandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "hihandtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hihandtype(), output);
  }

  // optional string LoHandType = 9;
  if (has_lohandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lohandtype().data(), this->lohandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "lohandtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lohandtype(), output);
  }

  // repeated int32 HiCards = 10;
  for (int i = 0; i < this->hicards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->hicards(i), output);
  }

  // repeated int32 LoCards = 11;
  for (int i = 0; i < this->locards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->locards(i), output);
  }

  // optional string SecondHiHandType = 12;
  if (has_secondhihandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondhihandtype().data(), this->secondhihandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "secondhihandtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->secondhihandtype(), output);
  }

  // optional string SecondLoHandType = 13;
  if (has_secondlohandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondlohandtype().data(), this->secondlohandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "secondlohandtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->secondlohandtype(), output);
  }

  // repeated int32 SecondHiCards = 14;
  for (int i = 0; i < this->secondhicards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->secondhicards(i), output);
  }

  // repeated int32 SecondLoCards = 15;
  for (int i = 0; i < this->secondlocards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->secondlocards(i), output);
  }

  // optional .msg.CommonPlayerInfo PlayerInfo = 16;
  if (has_playerinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->playerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerPlayerInfo)
}

::google_public::protobuf::uint8* PokerPlayerInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerPlayerInfo)
  // repeated int32 HoleCards = 4;
  for (int i = 0; i < this->holecards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->holecards(i), target);
  }

  // optional int32 BetChips = 5;
  if (has_betchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->betchips(), target);
  }

  // optional int32 Chips = 6;
  if (has_chips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->chips(), target);
  }

  // optional .msg.ActionStatus ActionStatus = 7;
  if (has_actionstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->actionstatus(), target);
  }

  // optional string HiHandType = 8;
  if (has_hihandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hihandtype().data(), this->hihandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "hihandtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->hihandtype(), target);
  }

  // optional string LoHandType = 9;
  if (has_lohandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lohandtype().data(), this->lohandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "lohandtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lohandtype(), target);
  }

  // repeated int32 HiCards = 10;
  for (int i = 0; i < this->hicards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->hicards(i), target);
  }

  // repeated int32 LoCards = 11;
  for (int i = 0; i < this->locards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->locards(i), target);
  }

  // optional string SecondHiHandType = 12;
  if (has_secondhihandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondhihandtype().data(), this->secondhihandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "secondhihandtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->secondhihandtype(), target);
  }

  // optional string SecondLoHandType = 13;
  if (has_secondlohandtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondlohandtype().data(), this->secondlohandtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "secondlohandtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->secondlohandtype(), target);
  }

  // repeated int32 SecondHiCards = 14;
  for (int i = 0; i < this->secondhicards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->secondhicards(i), target);
  }

  // repeated int32 SecondLoCards = 15;
  for (int i = 0; i < this->secondlocards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->secondlocards(i), target);
  }

  // optional .msg.CommonPlayerInfo PlayerInfo = 16;
  if (has_playerinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->playerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerPlayerInfo)
  return target;
}

int PokerPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonPlayerInfo PlayerInfo = 16;
    if (has_playerinfo()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional int32 BetChips = 5;
    if (has_betchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->betchips());
    }

    // optional int32 Chips = 6;
    if (has_chips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

    // optional .msg.ActionStatus ActionStatus = 7;
    if (has_actionstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->actionstatus());
    }

    // optional string HiHandType = 8;
    if (has_hihandtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->hihandtype());
    }

    // optional string LoHandType = 9;
    if (has_lohandtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->lohandtype());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string SecondHiHandType = 12;
    if (has_secondhihandtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->secondhihandtype());
    }

    // optional string SecondLoHandType = 13;
    if (has_secondlohandtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->secondlohandtype());
    }

  }
  // repeated int32 HoleCards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->holecards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->holecards(i));
    }
    total_size += 1 * this->holecards_size() + data_size;
  }

  // repeated int32 HiCards = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hicards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->hicards(i));
    }
    total_size += 1 * this->hicards_size() + data_size;
  }

  // repeated int32 LoCards = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->locards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->locards(i));
    }
    total_size += 1 * this->locards_size() + data_size;
  }

  // repeated int32 SecondHiCards = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->secondhicards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->secondhicards(i));
    }
    total_size += 1 * this->secondhicards_size() + data_size;
  }

  // repeated int32 SecondLoCards = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->secondlocards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->secondlocards(i));
    }
    total_size += 1 * this->secondlocards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerPlayerInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerPlayerInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerPlayerInfo::MergeFrom(const PokerPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  holecards_.MergeFrom(from.holecards_);
  hicards_.MergeFrom(from.hicards_);
  locards_.MergeFrom(from.locards_);
  secondhicards_.MergeFrom(from.secondhicards_);
  secondlocards_.MergeFrom(from.secondlocards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::msg::CommonPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_betchips()) {
      set_betchips(from.betchips());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_actionstatus()) {
      set_actionstatus(from.actionstatus());
    }
    if (from.has_hihandtype()) {
      set_hihandtype(from.hihandtype());
    }
    if (from.has_lohandtype()) {
      set_lohandtype(from.lohandtype());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_secondhihandtype()) {
      set_secondhihandtype(from.secondhihandtype());
    }
    if (from.has_secondlohandtype()) {
      set_secondlohandtype(from.secondlohandtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerPlayerInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerPlayerInfo::CopyFrom(const PokerPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerPlayerInfo::IsInitialized() const {

  return true;
}

void PokerPlayerInfo::Swap(PokerPlayerInfo* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    holecards_.Swap(&other->holecards_);
    std::swap(betchips_, other->betchips_);
    std::swap(chips_, other->chips_);
    std::swap(actionstatus_, other->actionstatus_);
    std::swap(hihandtype_, other->hihandtype_);
    std::swap(lohandtype_, other->lohandtype_);
    hicards_.Swap(&other->hicards_);
    locards_.Swap(&other->locards_);
    std::swap(secondhihandtype_, other->secondhihandtype_);
    std::swap(secondlohandtype_, other->secondlohandtype_);
    secondhicards_.Swap(&other->secondhicards_);
    secondlocards_.Swap(&other->secondlocards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerPlayerInfo_descriptor_;
  metadata.reflection = PokerPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfo::kHoleCardsFieldNumber;
const int TableInfo::kSecondHoleCardsFieldNumber;
const int TableInfo::kChipsFieldNumber;
const int TableInfo::kBigBlindFieldNumber;
#endif  // !_MSC_VER

TableInfo::TableInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TableInfo)
}

void TableInfo::InitAsDefaultInstance() {
}

TableInfo::TableInfo(const TableInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TableInfo)
}

void TableInfo::SharedCtor() {
  _cached_size_ = 0;
  chips_ = 0;
  bigblind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:msg.TableInfo)
  SharedDtor();
}

void TableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfo_descriptor_;
}

const TableInfo& TableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TableInfo* TableInfo::default_instance_ = NULL;

TableInfo* TableInfo::New() const {
  return new TableInfo;
}

void TableInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TableInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chips_, bigblind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  holecards_.Clear();
  secondholecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TableInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 HoleCards = 1;
      case 1: {
        if (tag == 8) {
         parse_HoleCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_holecards())));
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_holecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_HoleCards;
        if (input->ExpectTag(16)) goto parse_SecondHoleCards;
        break;
      }

      // repeated int32 SecondHoleCards = 2;
      case 2: {
        if (tag == 16) {
         parse_SecondHoleCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_secondholecards())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secondholecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SecondHoleCards;
        if (input->ExpectTag(24)) goto parse_Chips;
        break;
      }

      // optional int32 Chips = 3;
      case 3: {
        if (tag == 24) {
         parse_Chips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BigBlind;
        break;
      }

      // optional int32 BigBlind = 4;
      case 4: {
        if (tag == 32) {
         parse_BigBlind:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigblind_)));
          set_has_bigblind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TableInfo)
  return false;
#undef DO_
}

void TableInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TableInfo)
  // repeated int32 HoleCards = 1;
  for (int i = 0; i < this->holecards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->holecards(i), output);
  }

  // repeated int32 SecondHoleCards = 2;
  for (int i = 0; i < this->secondholecards_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->secondholecards(i), output);
  }

  // optional int32 Chips = 3;
  if (has_chips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->chips(), output);
  }

  // optional int32 BigBlind = 4;
  if (has_bigblind()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->bigblind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TableInfo)
}

::google_public::protobuf::uint8* TableInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TableInfo)
  // repeated int32 HoleCards = 1;
  for (int i = 0; i < this->holecards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->holecards(i), target);
  }

  // repeated int32 SecondHoleCards = 2;
  for (int i = 0; i < this->secondholecards_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->secondholecards(i), target);
  }

  // optional int32 Chips = 3;
  if (has_chips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chips(), target);
  }

  // optional int32 BigBlind = 4;
  if (has_bigblind()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bigblind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TableInfo)
  return target;
}

int TableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 Chips = 3;
    if (has_chips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

    // optional int32 BigBlind = 4;
    if (has_bigblind()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bigblind());
    }

  }
  // repeated int32 HoleCards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->holecards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->holecards(i));
    }
    total_size += 1 * this->holecards_size() + data_size;
  }

  // repeated int32 SecondHoleCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->secondholecards_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->secondholecards(i));
    }
    total_size += 1 * this->secondholecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TableInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  holecards_.MergeFrom(from.holecards_);
  secondholecards_.MergeFrom(from.secondholecards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_bigblind()) {
      set_bigblind(from.bigblind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {

  return true;
}

void TableInfo::Swap(TableInfo* other) {
  if (other != this) {
    holecards_.Swap(&other->holecards_);
    secondholecards_.Swap(&other->secondholecards_);
    std::swap(chips_, other->chips_);
    std::swap(bigblind_, other->bigblind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TableInfo_descriptor_;
  metadata.reflection = TableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableAndUserUpdate::kPokerPlayerInfoFieldNumber;
const int TableAndUserUpdate::kTableInfoFieldNumber;
#endif  // !_MSC_VER

TableAndUserUpdate::TableAndUserUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TableAndUserUpdate)
}

void TableAndUserUpdate::InitAsDefaultInstance() {
  tableinfo_ = const_cast< ::msg::TableInfo*>(&::msg::TableInfo::default_instance());
}

TableAndUserUpdate::TableAndUserUpdate(const TableAndUserUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TableAndUserUpdate)
}

void TableAndUserUpdate::SharedCtor() {
  _cached_size_ = 0;
  tableinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableAndUserUpdate::~TableAndUserUpdate() {
  // @@protoc_insertion_point(destructor:msg.TableAndUserUpdate)
  SharedDtor();
}

void TableAndUserUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete tableinfo_;
  }
}

void TableAndUserUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TableAndUserUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableAndUserUpdate_descriptor_;
}

const TableAndUserUpdate& TableAndUserUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TableAndUserUpdate* TableAndUserUpdate::default_instance_ = NULL;

TableAndUserUpdate* TableAndUserUpdate::New() const {
  return new TableAndUserUpdate;
}

void TableAndUserUpdate::Clear() {
  if (has_tableinfo()) {
    if (tableinfo_ != NULL) tableinfo_->::msg::TableInfo::Clear();
  }
  pokerplayerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableAndUserUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TableAndUserUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.PokerPlayerInfo PokerPlayerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_PokerPlayerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokerplayerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PokerPlayerInfo;
        if (input->ExpectTag(18)) goto parse_TableInfo;
        break;
      }

      // optional .msg.TableInfo TableInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TableInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tableinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TableAndUserUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TableAndUserUpdate)
  return false;
#undef DO_
}

void TableAndUserUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TableAndUserUpdate)
  // repeated .msg.PokerPlayerInfo PokerPlayerInfo = 1;
  for (int i = 0; i < this->pokerplayerinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pokerplayerinfo(i), output);
  }

  // optional .msg.TableInfo TableInfo = 2;
  if (has_tableinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tableinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TableAndUserUpdate)
}

::google_public::protobuf::uint8* TableAndUserUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TableAndUserUpdate)
  // repeated .msg.PokerPlayerInfo PokerPlayerInfo = 1;
  for (int i = 0; i < this->pokerplayerinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pokerplayerinfo(i), target);
  }

  // optional .msg.TableInfo TableInfo = 2;
  if (has_tableinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tableinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TableAndUserUpdate)
  return target;
}

int TableAndUserUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .msg.TableInfo TableInfo = 2;
    if (has_tableinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tableinfo());
    }

  }
  // repeated .msg.PokerPlayerInfo PokerPlayerInfo = 1;
  total_size += 1 * this->pokerplayerinfo_size();
  for (int i = 0; i < this->pokerplayerinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerplayerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableAndUserUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableAndUserUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TableAndUserUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableAndUserUpdate::MergeFrom(const TableAndUserUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokerplayerinfo_.MergeFrom(from.pokerplayerinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tableinfo()) {
      mutable_tableinfo()->::msg::TableInfo::MergeFrom(from.tableinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableAndUserUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableAndUserUpdate::CopyFrom(const TableAndUserUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableAndUserUpdate::IsInitialized() const {

  return true;
}

void TableAndUserUpdate::Swap(TableAndUserUpdate* other) {
  if (other != this) {
    pokerplayerinfo_.Swap(&other->pokerplayerinfo_);
    std::swap(tableinfo_, other->tableinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TableAndUserUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TableAndUserUpdate_descriptor_;
  metadata.reflection = TableAndUserUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerActionRequest::kActionRequestFieldNumber;
const int PokerActionRequest::kActionChoiceFieldNumber;
const int PokerActionRequest::kBetMaxFieldNumber;
const int PokerActionRequest::kBetMinFieldNumber;
const int PokerActionRequest::kUnitFieldNumber;
const int PokerActionRequest::kBetPotFieldNumber;
const int PokerActionRequest::kNeedCallChipsFieldNumber;
#endif  // !_MSC_VER

PokerActionRequest::PokerActionRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerActionRequest)
}

void PokerActionRequest::InitAsDefaultInstance() {
  actionrequest_ = const_cast< ::msg::ActionRequest*>(&::msg::ActionRequest::default_instance());
}

PokerActionRequest::PokerActionRequest(const PokerActionRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerActionRequest)
}

void PokerActionRequest::SharedCtor() {
  _cached_size_ = 0;
  actionrequest_ = NULL;
  actionchoice_ = 1;
  betmax_ = 0;
  betmin_ = 0;
  unit_ = 0;
  betpot_ = 0;
  needcallchips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerActionRequest::~PokerActionRequest() {
  // @@protoc_insertion_point(destructor:msg.PokerActionRequest)
  SharedDtor();
}

void PokerActionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete actionrequest_;
  }
}

void PokerActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerActionRequest_descriptor_;
}

const PokerActionRequest& PokerActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerActionRequest* PokerActionRequest::default_instance_ = NULL;

PokerActionRequest* PokerActionRequest::New() const {
  return new PokerActionRequest;
}

void PokerActionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PokerActionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(betmax_, needcallchips_);
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::ActionRequest::Clear();
    }
    actionchoice_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerActionRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerActionRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.ActionRequest ActionRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActionChoice;
        break;
      }

      // optional .msg.ActionChoice ActionChoice = 2;
      case 2: {
        if (tag == 16) {
         parse_ActionChoice:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ActionChoice_IsValid(value)) {
            set_actionchoice(static_cast< ::msg::ActionChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BetMax;
        break;
      }

      // optional int32 BetMax = 3;
      case 3: {
        if (tag == 24) {
         parse_BetMax:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmax_)));
          set_has_betmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BetMin;
        break;
      }

      // optional int32 BetMin = 4;
      case 4: {
        if (tag == 32) {
         parse_BetMin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmin_)));
          set_has_betmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Unit;
        break;
      }

      // optional int32 Unit = 5;
      case 5: {
        if (tag == 40) {
         parse_Unit:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_)));
          set_has_unit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BetPot;
        break;
      }

      // optional int32 BetPot = 6;
      case 6: {
        if (tag == 48) {
         parse_BetPot:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betpot_)));
          set_has_betpot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_NeedCallChips;
        break;
      }

      // optional int32 NeedCallChips = 7;
      case 7: {
        if (tag == 56) {
         parse_NeedCallChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcallchips_)));
          set_has_needcallchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerActionRequest)
  return false;
#undef DO_
}

void PokerActionRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerActionRequest)
  // optional .msg.ActionRequest ActionRequest = 1;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actionrequest(), output);
  }

  // optional .msg.ActionChoice ActionChoice = 2;
  if (has_actionchoice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actionchoice(), output);
  }

  // optional int32 BetMax = 3;
  if (has_betmax()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->betmax(), output);
  }

  // optional int32 BetMin = 4;
  if (has_betmin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->betmin(), output);
  }

  // optional int32 Unit = 5;
  if (has_unit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->unit(), output);
  }

  // optional int32 BetPot = 6;
  if (has_betpot()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->betpot(), output);
  }

  // optional int32 NeedCallChips = 7;
  if (has_needcallchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->needcallchips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerActionRequest)
}

::google_public::protobuf::uint8* PokerActionRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerActionRequest)
  // optional .msg.ActionRequest ActionRequest = 1;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actionrequest(), target);
  }

  // optional .msg.ActionChoice ActionChoice = 2;
  if (has_actionchoice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->actionchoice(), target);
  }

  // optional int32 BetMax = 3;
  if (has_betmax()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->betmax(), target);
  }

  // optional int32 BetMin = 4;
  if (has_betmin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betmin(), target);
  }

  // optional int32 Unit = 5;
  if (has_unit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unit(), target);
  }

  // optional int32 BetPot = 6;
  if (has_betpot()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->betpot(), target);
  }

  // optional int32 NeedCallChips = 7;
  if (has_needcallchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->needcallchips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerActionRequest)
  return target;
}

int PokerActionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.ActionRequest ActionRequest = 1;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

    // optional .msg.ActionChoice ActionChoice = 2;
    if (has_actionchoice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->actionchoice());
    }

    // optional int32 BetMax = 3;
    if (has_betmax()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->betmax());
    }

    // optional int32 BetMin = 4;
    if (has_betmin()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->betmin());
    }

    // optional int32 Unit = 5;
    if (has_unit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unit());
    }

    // optional int32 BetPot = 6;
    if (has_betpot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->betpot());
    }

    // optional int32 NeedCallChips = 7;
    if (has_needcallchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->needcallchips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerActionRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerActionRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerActionRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerActionRequest::MergeFrom(const PokerActionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::ActionRequest::MergeFrom(from.actionrequest());
    }
    if (from.has_actionchoice()) {
      set_actionchoice(from.actionchoice());
    }
    if (from.has_betmax()) {
      set_betmax(from.betmax());
    }
    if (from.has_betmin()) {
      set_betmin(from.betmin());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_betpot()) {
      set_betpot(from.betpot());
    }
    if (from.has_needcallchips()) {
      set_needcallchips(from.needcallchips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerActionRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerActionRequest::CopyFrom(const PokerActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerActionRequest::IsInitialized() const {

  return true;
}

void PokerActionRequest::Swap(PokerActionRequest* other) {
  if (other != this) {
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(actionchoice_, other->actionchoice_);
    std::swap(betmax_, other->betmax_);
    std::swap(betmin_, other->betmin_);
    std::swap(unit_, other->unit_);
    std::swap(betpot_, other->betpot_);
    std::swap(needcallchips_, other->needcallchips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerActionRequest_descriptor_;
  metadata.reflection = PokerActionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_501_PokerRequestAction::kRoomIdFieldNumber;
const int Processor_501_PokerRequestAction::kActionRequestFieldNumber;
#endif  // !_MSC_VER

Processor_501_PokerRequestAction::Processor_501_PokerRequestAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_501_PokerRequestAction)
}

void Processor_501_PokerRequestAction::InitAsDefaultInstance() {
  actionrequest_ = const_cast< ::msg::PokerActionRequest*>(&::msg::PokerActionRequest::default_instance());
}

Processor_501_PokerRequestAction::Processor_501_PokerRequestAction(const Processor_501_PokerRequestAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_501_PokerRequestAction)
}

void Processor_501_PokerRequestAction::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  actionrequest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_501_PokerRequestAction::~Processor_501_PokerRequestAction() {
  // @@protoc_insertion_point(destructor:msg.Processor_501_PokerRequestAction)
  SharedDtor();
}

void Processor_501_PokerRequestAction::SharedDtor() {
  if (this != default_instance_) {
    delete actionrequest_;
  }
}

void Processor_501_PokerRequestAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_501_PokerRequestAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_501_PokerRequestAction_descriptor_;
}

const Processor_501_PokerRequestAction& Processor_501_PokerRequestAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_501_PokerRequestAction* Processor_501_PokerRequestAction::default_instance_ = NULL;

Processor_501_PokerRequestAction* Processor_501_PokerRequestAction::New() const {
  return new Processor_501_PokerRequestAction;
}

void Processor_501_PokerRequestAction::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::PokerActionRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_501_PokerRequestAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_501_PokerRequestAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ActionRequest;
        break;
      }

      // optional .msg.PokerActionRequest ActionRequest = 2;
      case 2: {
        if (tag == 18) {
         parse_ActionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_501_PokerRequestAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_501_PokerRequestAction)
  return false;
#undef DO_
}

void Processor_501_PokerRequestAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_501_PokerRequestAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.PokerActionRequest ActionRequest = 2;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actionrequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_501_PokerRequestAction)
}

::google_public::protobuf::uint8* Processor_501_PokerRequestAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_501_PokerRequestAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.PokerActionRequest ActionRequest = 2;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actionrequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_501_PokerRequestAction)
  return target;
}

int Processor_501_PokerRequestAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.PokerActionRequest ActionRequest = 2;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_501_PokerRequestAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_501_PokerRequestAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_501_PokerRequestAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_501_PokerRequestAction::MergeFrom(const Processor_501_PokerRequestAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::PokerActionRequest::MergeFrom(from.actionrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_501_PokerRequestAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_501_PokerRequestAction::CopyFrom(const Processor_501_PokerRequestAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_501_PokerRequestAction::IsInitialized() const {

  return true;
}

void Processor_501_PokerRequestAction::Swap(Processor_501_PokerRequestAction* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_501_PokerRequestAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_501_PokerRequestAction_descriptor_;
  metadata.reflection = Processor_501_PokerRequestAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_502_PokerSendAction::kRoomIdFieldNumber;
const int Processor_502_PokerSendAction::kActionStatusFieldNumber;
const int Processor_502_PokerSendAction::kAmountFieldNumber;
#endif  // !_MSC_VER

Processor_502_PokerSendAction::Processor_502_PokerSendAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_502_PokerSendAction)
}

void Processor_502_PokerSendAction::InitAsDefaultInstance() {
}

Processor_502_PokerSendAction::Processor_502_PokerSendAction(const Processor_502_PokerSendAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_502_PokerSendAction)
}

void Processor_502_PokerSendAction::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  actionstatus_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_502_PokerSendAction::~Processor_502_PokerSendAction() {
  // @@protoc_insertion_point(destructor:msg.Processor_502_PokerSendAction)
  SharedDtor();
}

void Processor_502_PokerSendAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_502_PokerSendAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_502_PokerSendAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_502_PokerSendAction_descriptor_;
}

const Processor_502_PokerSendAction& Processor_502_PokerSendAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_502_PokerSendAction* Processor_502_PokerSendAction::default_instance_ = NULL;

Processor_502_PokerSendAction* Processor_502_PokerSendAction::New() const {
  return new Processor_502_PokerSendAction;
}

void Processor_502_PokerSendAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_502_PokerSendAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_502_PokerSendAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_502_PokerSendAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActionStatus;
        break;
      }

      // optional .msg.ActionStatus ActionStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_ActionStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ActionStatus_IsValid(value)) {
            set_actionstatus(static_cast< ::msg::ActionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Amount;
        break;
      }

      // optional int32 Amount = 3;
      case 3: {
        if (tag == 24) {
         parse_Amount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_502_PokerSendAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_502_PokerSendAction)
  return false;
#undef DO_
}

void Processor_502_PokerSendAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_502_PokerSendAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.ActionStatus ActionStatus = 2;
  if (has_actionstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actionstatus(), output);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_502_PokerSendAction)
}

::google_public::protobuf::uint8* Processor_502_PokerSendAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_502_PokerSendAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.ActionStatus ActionStatus = 2;
  if (has_actionstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->actionstatus(), target);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_502_PokerSendAction)
  return target;
}

int Processor_502_PokerSendAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.ActionStatus ActionStatus = 2;
    if (has_actionstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->actionstatus());
    }

    // optional int32 Amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_502_PokerSendAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_502_PokerSendAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_502_PokerSendAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_502_PokerSendAction::MergeFrom(const Processor_502_PokerSendAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_actionstatus()) {
      set_actionstatus(from.actionstatus());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_502_PokerSendAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_502_PokerSendAction::CopyFrom(const Processor_502_PokerSendAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_502_PokerSendAction::IsInitialized() const {

  return true;
}

void Processor_502_PokerSendAction::Swap(Processor_502_PokerSendAction* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(actionstatus_, other->actionstatus_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_502_PokerSendAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_502_PokerSendAction_descriptor_;
  metadata.reflection = Processor_502_PokerSendAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_503_PokerReceivePropUpdate::kRoomIdFieldNumber;
const int Processor_503_PokerReceivePropUpdate::kPropUpdateFieldNumber;
#endif  // !_MSC_VER

Processor_503_PokerReceivePropUpdate::Processor_503_PokerReceivePropUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_503_PokerReceivePropUpdate)
}

void Processor_503_PokerReceivePropUpdate::InitAsDefaultInstance() {
  propupdate_ = const_cast< ::msg::TableAndUserUpdate*>(&::msg::TableAndUserUpdate::default_instance());
}

Processor_503_PokerReceivePropUpdate::Processor_503_PokerReceivePropUpdate(const Processor_503_PokerReceivePropUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_503_PokerReceivePropUpdate)
}

void Processor_503_PokerReceivePropUpdate::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  propupdate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_503_PokerReceivePropUpdate::~Processor_503_PokerReceivePropUpdate() {
  // @@protoc_insertion_point(destructor:msg.Processor_503_PokerReceivePropUpdate)
  SharedDtor();
}

void Processor_503_PokerReceivePropUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete propupdate_;
  }
}

void Processor_503_PokerReceivePropUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_503_PokerReceivePropUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_503_PokerReceivePropUpdate_descriptor_;
}

const Processor_503_PokerReceivePropUpdate& Processor_503_PokerReceivePropUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_503_PokerReceivePropUpdate* Processor_503_PokerReceivePropUpdate::default_instance_ = NULL;

Processor_503_PokerReceivePropUpdate* Processor_503_PokerReceivePropUpdate::New() const {
  return new Processor_503_PokerReceivePropUpdate;
}

void Processor_503_PokerReceivePropUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_propupdate()) {
      if (propupdate_ != NULL) propupdate_->::msg::TableAndUserUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_503_PokerReceivePropUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_503_PokerReceivePropUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PropUpdate;
        break;
      }

      // optional .msg.TableAndUserUpdate PropUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_PropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_503_PokerReceivePropUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_503_PokerReceivePropUpdate)
  return false;
#undef DO_
}

void Processor_503_PokerReceivePropUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_503_PokerReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 2;
  if (has_propupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_503_PokerReceivePropUpdate)
}

::google_public::protobuf::uint8* Processor_503_PokerReceivePropUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_503_PokerReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 2;
  if (has_propupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_503_PokerReceivePropUpdate)
  return target;
}

int Processor_503_PokerReceivePropUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.TableAndUserUpdate PropUpdate = 2;
    if (has_propupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propupdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_503_PokerReceivePropUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_503_PokerReceivePropUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_503_PokerReceivePropUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_503_PokerReceivePropUpdate::MergeFrom(const Processor_503_PokerReceivePropUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_propupdate()) {
      mutable_propupdate()->::msg::TableAndUserUpdate::MergeFrom(from.propupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_503_PokerReceivePropUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_503_PokerReceivePropUpdate::CopyFrom(const Processor_503_PokerReceivePropUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_503_PokerReceivePropUpdate::IsInitialized() const {

  return true;
}

void Processor_503_PokerReceivePropUpdate::Swap(Processor_503_PokerReceivePropUpdate* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(propupdate_, other->propupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_503_PokerReceivePropUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_503_PokerReceivePropUpdate_descriptor_;
  metadata.reflection = Processor_503_PokerReceivePropUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_510_PokerAddChips::kRoomIdFieldNumber;
const int Processor_510_PokerAddChips::kAmountFieldNumber;
#endif  // !_MSC_VER

Processor_510_PokerAddChips::Processor_510_PokerAddChips()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_510_PokerAddChips)
}

void Processor_510_PokerAddChips::InitAsDefaultInstance() {
}

Processor_510_PokerAddChips::Processor_510_PokerAddChips(const Processor_510_PokerAddChips& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_510_PokerAddChips)
}

void Processor_510_PokerAddChips::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_510_PokerAddChips::~Processor_510_PokerAddChips() {
  // @@protoc_insertion_point(destructor:msg.Processor_510_PokerAddChips)
  SharedDtor();
}

void Processor_510_PokerAddChips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_510_PokerAddChips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_510_PokerAddChips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_510_PokerAddChips_descriptor_;
}

const Processor_510_PokerAddChips& Processor_510_PokerAddChips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_510_PokerAddChips* Processor_510_PokerAddChips::default_instance_ = NULL;

Processor_510_PokerAddChips* Processor_510_PokerAddChips::New() const {
  return new Processor_510_PokerAddChips;
}

void Processor_510_PokerAddChips::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_510_PokerAddChips*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_510_PokerAddChips::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_510_PokerAddChips)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Amount;
        break;
      }

      // optional int32 Amount = 2;
      case 2: {
        if (tag == 16) {
         parse_Amount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_510_PokerAddChips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_510_PokerAddChips)
  return false;
#undef DO_
}

void Processor_510_PokerAddChips::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_510_PokerAddChips)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 Amount = 2;
  if (has_amount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_510_PokerAddChips)
}

::google_public::protobuf::uint8* Processor_510_PokerAddChips::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_510_PokerAddChips)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 Amount = 2;
  if (has_amount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_510_PokerAddChips)
  return target;
}

int Processor_510_PokerAddChips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 Amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_510_PokerAddChips::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_510_PokerAddChips* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_510_PokerAddChips*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_510_PokerAddChips::MergeFrom(const Processor_510_PokerAddChips& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_510_PokerAddChips::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_510_PokerAddChips::CopyFrom(const Processor_510_PokerAddChips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_510_PokerAddChips::IsInitialized() const {

  return true;
}

void Processor_510_PokerAddChips::Swap(Processor_510_PokerAddChips* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_510_PokerAddChips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_510_PokerAddChips_descriptor_;
  metadata.reflection = Processor_510_PokerAddChips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_511_PokerReceiveNeedChip::kRoomIdFieldNumber;
#endif  // !_MSC_VER

Processor_511_PokerReceiveNeedChip::Processor_511_PokerReceiveNeedChip()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_511_PokerReceiveNeedChip)
}

void Processor_511_PokerReceiveNeedChip::InitAsDefaultInstance() {
}

Processor_511_PokerReceiveNeedChip::Processor_511_PokerReceiveNeedChip(const Processor_511_PokerReceiveNeedChip& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_511_PokerReceiveNeedChip)
}

void Processor_511_PokerReceiveNeedChip::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_511_PokerReceiveNeedChip::~Processor_511_PokerReceiveNeedChip() {
  // @@protoc_insertion_point(destructor:msg.Processor_511_PokerReceiveNeedChip)
  SharedDtor();
}

void Processor_511_PokerReceiveNeedChip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_511_PokerReceiveNeedChip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_511_PokerReceiveNeedChip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_511_PokerReceiveNeedChip_descriptor_;
}

const Processor_511_PokerReceiveNeedChip& Processor_511_PokerReceiveNeedChip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_511_PokerReceiveNeedChip* Processor_511_PokerReceiveNeedChip::default_instance_ = NULL;

Processor_511_PokerReceiveNeedChip* Processor_511_PokerReceiveNeedChip::New() const {
  return new Processor_511_PokerReceiveNeedChip;
}

void Processor_511_PokerReceiveNeedChip::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_511_PokerReceiveNeedChip::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_511_PokerReceiveNeedChip)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_511_PokerReceiveNeedChip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_511_PokerReceiveNeedChip)
  return false;
#undef DO_
}

void Processor_511_PokerReceiveNeedChip::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_511_PokerReceiveNeedChip)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_511_PokerReceiveNeedChip)
}

::google_public::protobuf::uint8* Processor_511_PokerReceiveNeedChip::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_511_PokerReceiveNeedChip)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_511_PokerReceiveNeedChip)
  return target;
}

int Processor_511_PokerReceiveNeedChip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_511_PokerReceiveNeedChip::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_511_PokerReceiveNeedChip* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_511_PokerReceiveNeedChip*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_511_PokerReceiveNeedChip::MergeFrom(const Processor_511_PokerReceiveNeedChip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_511_PokerReceiveNeedChip::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_511_PokerReceiveNeedChip::CopyFrom(const Processor_511_PokerReceiveNeedChip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_511_PokerReceiveNeedChip::IsInitialized() const {

  return true;
}

void Processor_511_PokerReceiveNeedChip::Swap(Processor_511_PokerReceiveNeedChip* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_511_PokerReceiveNeedChip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_511_PokerReceiveNeedChip_descriptor_;
  metadata.reflection = Processor_511_PokerReceiveNeedChip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_512_PokerRequestChoice::kRoomIdFieldNumber;
const int Processor_512_PokerRequestChoice::kChoiceTypeFieldNumber;
#endif  // !_MSC_VER

Processor_512_PokerRequestChoice::Processor_512_PokerRequestChoice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_512_PokerRequestChoice)
}

void Processor_512_PokerRequestChoice::InitAsDefaultInstance() {
}

Processor_512_PokerRequestChoice::Processor_512_PokerRequestChoice(const Processor_512_PokerRequestChoice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_512_PokerRequestChoice)
}

void Processor_512_PokerRequestChoice::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  choicetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_512_PokerRequestChoice::~Processor_512_PokerRequestChoice() {
  // @@protoc_insertion_point(destructor:msg.Processor_512_PokerRequestChoice)
  SharedDtor();
}

void Processor_512_PokerRequestChoice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_512_PokerRequestChoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_512_PokerRequestChoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_512_PokerRequestChoice_descriptor_;
}

const Processor_512_PokerRequestChoice& Processor_512_PokerRequestChoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_512_PokerRequestChoice* Processor_512_PokerRequestChoice::default_instance_ = NULL;

Processor_512_PokerRequestChoice* Processor_512_PokerRequestChoice::New() const {
  return new Processor_512_PokerRequestChoice;
}

void Processor_512_PokerRequestChoice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_512_PokerRequestChoice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, choicetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_512_PokerRequestChoice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_512_PokerRequestChoice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChoiceType;
        break;
      }

      // optional .msg.ChoiceType ChoiceType = 2;
      case 2: {
        if (tag == 16) {
         parse_ChoiceType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ChoiceType_IsValid(value)) {
            set_choicetype(static_cast< ::msg::ChoiceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_512_PokerRequestChoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_512_PokerRequestChoice)
  return false;
#undef DO_
}

void Processor_512_PokerRequestChoice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_512_PokerRequestChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.ChoiceType ChoiceType = 2;
  if (has_choicetype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->choicetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_512_PokerRequestChoice)
}

::google_public::protobuf::uint8* Processor_512_PokerRequestChoice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_512_PokerRequestChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.ChoiceType ChoiceType = 2;
  if (has_choicetype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->choicetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_512_PokerRequestChoice)
  return target;
}

int Processor_512_PokerRequestChoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.ChoiceType ChoiceType = 2;
    if (has_choicetype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->choicetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_512_PokerRequestChoice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_512_PokerRequestChoice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_512_PokerRequestChoice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_512_PokerRequestChoice::MergeFrom(const Processor_512_PokerRequestChoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_choicetype()) {
      set_choicetype(from.choicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_512_PokerRequestChoice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_512_PokerRequestChoice::CopyFrom(const Processor_512_PokerRequestChoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_512_PokerRequestChoice::IsInitialized() const {

  return true;
}

void Processor_512_PokerRequestChoice::Swap(Processor_512_PokerRequestChoice* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(choicetype_, other->choicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_512_PokerRequestChoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_512_PokerRequestChoice_descriptor_;
  metadata.reflection = Processor_512_PokerRequestChoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_513_PokerReplyChoice::kRoomIdFieldNumber;
const int Processor_513_PokerReplyChoice::kChoiceTypeFieldNumber;
const int Processor_513_PokerReplyChoice::kResultFieldNumber;
#endif  // !_MSC_VER

Processor_513_PokerReplyChoice::Processor_513_PokerReplyChoice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_513_PokerReplyChoice)
}

void Processor_513_PokerReplyChoice::InitAsDefaultInstance() {
}

Processor_513_PokerReplyChoice::Processor_513_PokerReplyChoice(const Processor_513_PokerReplyChoice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_513_PokerReplyChoice)
}

void Processor_513_PokerReplyChoice::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  choicetype_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_513_PokerReplyChoice::~Processor_513_PokerReplyChoice() {
  // @@protoc_insertion_point(destructor:msg.Processor_513_PokerReplyChoice)
  SharedDtor();
}

void Processor_513_PokerReplyChoice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_513_PokerReplyChoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_513_PokerReplyChoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_513_PokerReplyChoice_descriptor_;
}

const Processor_513_PokerReplyChoice& Processor_513_PokerReplyChoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_513_PokerReplyChoice* Processor_513_PokerReplyChoice::default_instance_ = NULL;

Processor_513_PokerReplyChoice* Processor_513_PokerReplyChoice::New() const {
  return new Processor_513_PokerReplyChoice;
}

void Processor_513_PokerReplyChoice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_513_PokerReplyChoice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_513_PokerReplyChoice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_513_PokerReplyChoice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChoiceType;
        break;
      }

      // optional .msg.ChoiceType ChoiceType = 2;
      case 2: {
        if (tag == 16) {
         parse_ChoiceType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ChoiceType_IsValid(value)) {
            set_choicetype(static_cast< ::msg::ChoiceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_513_PokerReplyChoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_513_PokerReplyChoice)
  return false;
#undef DO_
}

void Processor_513_PokerReplyChoice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_513_PokerReplyChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.ChoiceType ChoiceType = 2;
  if (has_choicetype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->choicetype(), output);
  }

  // optional bool result = 3;
  if (has_result()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_513_PokerReplyChoice)
}

::google_public::protobuf::uint8* Processor_513_PokerReplyChoice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_513_PokerReplyChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.ChoiceType ChoiceType = 2;
  if (has_choicetype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->choicetype(), target);
  }

  // optional bool result = 3;
  if (has_result()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_513_PokerReplyChoice)
  return target;
}

int Processor_513_PokerReplyChoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.ChoiceType ChoiceType = 2;
    if (has_choicetype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->choicetype());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_513_PokerReplyChoice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_513_PokerReplyChoice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_513_PokerReplyChoice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_513_PokerReplyChoice::MergeFrom(const Processor_513_PokerReplyChoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_choicetype()) {
      set_choicetype(from.choicetype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_513_PokerReplyChoice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_513_PokerReplyChoice::CopyFrom(const Processor_513_PokerReplyChoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_513_PokerReplyChoice::IsInitialized() const {

  return true;
}

void Processor_513_PokerReplyChoice::Swap(Processor_513_PokerReplyChoice* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(choicetype_, other->choicetype_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_513_PokerReplyChoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_513_PokerReplyChoice_descriptor_;
  metadata.reflection = Processor_513_PokerReplyChoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_514_PokerReceiveTableNote::kRoomIdFieldNumber;
const int Processor_514_PokerReceiveTableNote::kTableNoteFieldNumber;
#endif  // !_MSC_VER

Processor_514_PokerReceiveTableNote::Processor_514_PokerReceiveTableNote()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_514_PokerReceiveTableNote)
}

void Processor_514_PokerReceiveTableNote::InitAsDefaultInstance() {
}

Processor_514_PokerReceiveTableNote::Processor_514_PokerReceiveTableNote(const Processor_514_PokerReceiveTableNote& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_514_PokerReceiveTableNote)
}

void Processor_514_PokerReceiveTableNote::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  tablenote_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_514_PokerReceiveTableNote::~Processor_514_PokerReceiveTableNote() {
  // @@protoc_insertion_point(destructor:msg.Processor_514_PokerReceiveTableNote)
  SharedDtor();
}

void Processor_514_PokerReceiveTableNote::SharedDtor() {
  if (tablenote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablenote_;
  }
  if (this != default_instance_) {
  }
}

void Processor_514_PokerReceiveTableNote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_514_PokerReceiveTableNote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_514_PokerReceiveTableNote_descriptor_;
}

const Processor_514_PokerReceiveTableNote& Processor_514_PokerReceiveTableNote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_514_PokerReceiveTableNote* Processor_514_PokerReceiveTableNote::default_instance_ = NULL;

Processor_514_PokerReceiveTableNote* Processor_514_PokerReceiveTableNote::New() const {
  return new Processor_514_PokerReceiveTableNote;
}

void Processor_514_PokerReceiveTableNote::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_tablenote()) {
      if (tablenote_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablenote_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_514_PokerReceiveTableNote::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_514_PokerReceiveTableNote)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TableNote;
        break;
      }

      // optional string TableNote = 2;
      case 2: {
        if (tag == 18) {
         parse_TableNote:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablenote()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablenote().data(), this->tablenote().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "tablenote");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_514_PokerReceiveTableNote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_514_PokerReceiveTableNote)
  return false;
#undef DO_
}

void Processor_514_PokerReceiveTableNote::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_514_PokerReceiveTableNote)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional string TableNote = 2;
  if (has_tablenote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablenote().data(), this->tablenote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tablenote");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tablenote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_514_PokerReceiveTableNote)
}

::google_public::protobuf::uint8* Processor_514_PokerReceiveTableNote::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_514_PokerReceiveTableNote)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional string TableNote = 2;
  if (has_tablenote()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablenote().data(), this->tablenote().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tablenote");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablenote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_514_PokerReceiveTableNote)
  return target;
}

int Processor_514_PokerReceiveTableNote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string TableNote = 2;
    if (has_tablenote()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->tablenote());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_514_PokerReceiveTableNote::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_514_PokerReceiveTableNote* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_514_PokerReceiveTableNote*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_514_PokerReceiveTableNote::MergeFrom(const Processor_514_PokerReceiveTableNote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tablenote()) {
      set_tablenote(from.tablenote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_514_PokerReceiveTableNote::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_514_PokerReceiveTableNote::CopyFrom(const Processor_514_PokerReceiveTableNote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_514_PokerReceiveTableNote::IsInitialized() const {

  return true;
}

void Processor_514_PokerReceiveTableNote::Swap(Processor_514_PokerReceiveTableNote* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(tablenote_, other->tablenote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_514_PokerReceiveTableNote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_514_PokerReceiveTableNote_descriptor_;
  metadata.reflection = Processor_514_PokerReceiveTableNote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_515_PokerSendSetting::kRoomIdFieldNumber;
const int Processor_515_PokerSendSetting::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_515_PokerSendSetting::Processor_515_PokerSendSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_515_PokerSendSetting)
}

void Processor_515_PokerSendSetting::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::PokerPlayerSetting*>(&::msg::PokerPlayerSetting::default_instance());
}

Processor_515_PokerSendSetting::Processor_515_PokerSendSetting(const Processor_515_PokerSendSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_515_PokerSendSetting)
}

void Processor_515_PokerSendSetting::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_515_PokerSendSetting::~Processor_515_PokerSendSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_515_PokerSendSetting)
  SharedDtor();
}

void Processor_515_PokerSendSetting::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_515_PokerSendSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_515_PokerSendSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_515_PokerSendSetting_descriptor_;
}

const Processor_515_PokerSendSetting& Processor_515_PokerSendSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_515_PokerSendSetting* Processor_515_PokerSendSetting::default_instance_ = NULL;

Processor_515_PokerSendSetting* Processor_515_PokerSendSetting::New() const {
  return new Processor_515_PokerSendSetting;
}

void Processor_515_PokerSendSetting::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::PokerPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_515_PokerSendSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_515_PokerSendSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.PokerPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_515_PokerSendSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_515_PokerSendSetting)
  return false;
#undef DO_
}

void Processor_515_PokerSendSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_515_PokerSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.PokerPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_515_PokerSendSetting)
}

::google_public::protobuf::uint8* Processor_515_PokerSendSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_515_PokerSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.PokerPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_515_PokerSendSetting)
  return target;
}

int Processor_515_PokerSendSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.PokerPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_515_PokerSendSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_515_PokerSendSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_515_PokerSendSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_515_PokerSendSetting::MergeFrom(const Processor_515_PokerSendSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::PokerPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_515_PokerSendSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_515_PokerSendSetting::CopyFrom(const Processor_515_PokerSendSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_515_PokerSendSetting::IsInitialized() const {

  return true;
}

void Processor_515_PokerSendSetting::Swap(Processor_515_PokerSendSetting* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_515_PokerSendSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_515_PokerSendSetting_descriptor_;
  metadata.reflection = Processor_515_PokerSendSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_516_PokerReceiveSettingChange::kRoomIdFieldNumber;
const int Processor_516_PokerReceiveSettingChange::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_516_PokerReceiveSettingChange::Processor_516_PokerReceiveSettingChange()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_516_PokerReceiveSettingChange)
}

void Processor_516_PokerReceiveSettingChange::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::PokerPlayerSetting*>(&::msg::PokerPlayerSetting::default_instance());
}

Processor_516_PokerReceiveSettingChange::Processor_516_PokerReceiveSettingChange(const Processor_516_PokerReceiveSettingChange& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_516_PokerReceiveSettingChange)
}

void Processor_516_PokerReceiveSettingChange::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_516_PokerReceiveSettingChange::~Processor_516_PokerReceiveSettingChange() {
  // @@protoc_insertion_point(destructor:msg.Processor_516_PokerReceiveSettingChange)
  SharedDtor();
}

void Processor_516_PokerReceiveSettingChange::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_516_PokerReceiveSettingChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_516_PokerReceiveSettingChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_516_PokerReceiveSettingChange_descriptor_;
}

const Processor_516_PokerReceiveSettingChange& Processor_516_PokerReceiveSettingChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_516_PokerReceiveSettingChange* Processor_516_PokerReceiveSettingChange::default_instance_ = NULL;

Processor_516_PokerReceiveSettingChange* Processor_516_PokerReceiveSettingChange::New() const {
  return new Processor_516_PokerReceiveSettingChange;
}

void Processor_516_PokerReceiveSettingChange::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::PokerPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_516_PokerReceiveSettingChange::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_516_PokerReceiveSettingChange)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.PokerPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_516_PokerReceiveSettingChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_516_PokerReceiveSettingChange)
  return false;
#undef DO_
}

void Processor_516_PokerReceiveSettingChange::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_516_PokerReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.PokerPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_516_PokerReceiveSettingChange)
}

::google_public::protobuf::uint8* Processor_516_PokerReceiveSettingChange::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_516_PokerReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.PokerPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_516_PokerReceiveSettingChange)
  return target;
}

int Processor_516_PokerReceiveSettingChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.PokerPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_516_PokerReceiveSettingChange::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_516_PokerReceiveSettingChange* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_516_PokerReceiveSettingChange*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_516_PokerReceiveSettingChange::MergeFrom(const Processor_516_PokerReceiveSettingChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::PokerPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_516_PokerReceiveSettingChange::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_516_PokerReceiveSettingChange::CopyFrom(const Processor_516_PokerReceiveSettingChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_516_PokerReceiveSettingChange::IsInitialized() const {

  return true;
}

void Processor_516_PokerReceiveSettingChange::Swap(Processor_516_PokerReceiveSettingChange* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_516_PokerReceiveSettingChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_516_PokerReceiveSettingChange_descriptor_;
  metadata.reflection = Processor_516_PokerReceiveSettingChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_517_PokerSendShowCard::kRoomIdFieldNumber;
const int Processor_517_PokerSendShowCard::kShowCardFieldNumber;
#endif  // !_MSC_VER

Processor_517_PokerSendShowCard::Processor_517_PokerSendShowCard()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_517_PokerSendShowCard)
}

void Processor_517_PokerSendShowCard::InitAsDefaultInstance() {
}

Processor_517_PokerSendShowCard::Processor_517_PokerSendShowCard(const Processor_517_PokerSendShowCard& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_517_PokerSendShowCard)
}

void Processor_517_PokerSendShowCard::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_517_PokerSendShowCard::~Processor_517_PokerSendShowCard() {
  // @@protoc_insertion_point(destructor:msg.Processor_517_PokerSendShowCard)
  SharedDtor();
}

void Processor_517_PokerSendShowCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_517_PokerSendShowCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_517_PokerSendShowCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_517_PokerSendShowCard_descriptor_;
}

const Processor_517_PokerSendShowCard& Processor_517_PokerSendShowCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_517_PokerSendShowCard* Processor_517_PokerSendShowCard::default_instance_ = NULL;

Processor_517_PokerSendShowCard* Processor_517_PokerSendShowCard::New() const {
  return new Processor_517_PokerSendShowCard;
}

void Processor_517_PokerSendShowCard::Clear() {
  roomid_ = 0;
  showcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_517_PokerSendShowCard::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_517_PokerSendShowCard)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        break;
      }

      // repeated bool ShowCard = 2;
      case 2: {
        if (tag == 16) {
         parse_ShowCard:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_showcard())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_showcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_517_PokerSendShowCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_517_PokerSendShowCard)
  return false;
#undef DO_
}

void Processor_517_PokerSendShowCard::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_517_PokerSendShowCard)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated bool ShowCard = 2;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(
      2, this->showcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_517_PokerSendShowCard)
}

::google_public::protobuf::uint8* Processor_517_PokerSendShowCard::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_517_PokerSendShowCard)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated bool ShowCard = 2;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->showcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_517_PokerSendShowCard)
  return target;
}

int Processor_517_PokerSendShowCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated bool ShowCard = 2;
  {
    int data_size = 0;
    data_size = 1 * this->showcard_size();
    total_size += 1 * this->showcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_517_PokerSendShowCard::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_517_PokerSendShowCard* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_517_PokerSendShowCard*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_517_PokerSendShowCard::MergeFrom(const Processor_517_PokerSendShowCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcard_.MergeFrom(from.showcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_517_PokerSendShowCard::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_517_PokerSendShowCard::CopyFrom(const Processor_517_PokerSendShowCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_517_PokerSendShowCard::IsInitialized() const {

  return true;
}

void Processor_517_PokerSendShowCard::Swap(Processor_517_PokerSendShowCard* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    showcard_.Swap(&other->showcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_517_PokerSendShowCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_517_PokerSendShowCard_descriptor_;
  metadata.reflection = Processor_517_PokerSendShowCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerWin::kUserIDFieldNumber;
const int PlayerWin::kPlayerWinChipsFieldNumber;
#endif  // !_MSC_VER

PlayerWin::PlayerWin()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerWin)
}

void PlayerWin::InitAsDefaultInstance() {
}

PlayerWin::PlayerWin(const PlayerWin& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerWin)
}

void PlayerWin::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  playerwinchips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerWin::~PlayerWin() {
  // @@protoc_insertion_point(destructor:msg.PlayerWin)
  SharedDtor();
}

void PlayerWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PlayerWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerWin_descriptor_;
}

const PlayerWin& PlayerWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayerWin* PlayerWin::default_instance_ = NULL;

PlayerWin* PlayerWin::New() const {
  return new PlayerWin;
}

void PlayerWin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerWin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, playerwinchips_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerWin::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PlayerWin)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerWinChips;
        break;
      }

      // optional int32 PlayerWinChips = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerWinChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerwinchips_)));
          set_has_playerwinchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PlayerWin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PlayerWin)
  return false;
#undef DO_
}

void PlayerWin::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PlayerWin)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 PlayerWinChips = 2;
  if (has_playerwinchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerwinchips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PlayerWin)
}

::google_public::protobuf::uint8* PlayerWin::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerWin)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 PlayerWinChips = 2;
  if (has_playerwinchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerwinchips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerWin)
  return target;
}

int PlayerWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 PlayerWinChips = 2;
    if (has_playerwinchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerwinchips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerWin::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerWin* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PlayerWin*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerWin::MergeFrom(const PlayerWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_playerwinchips()) {
      set_playerwinchips(from.playerwinchips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerWin::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerWin::CopyFrom(const PlayerWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerWin::IsInitialized() const {

  return true;
}

void PlayerWin::Swap(PlayerWin* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(playerwinchips_, other->playerwinchips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PlayerWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PlayerWin_descriptor_;
  metadata.reflection = PlayerWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHandResult::kUserDetailInfoFieldNumber;
const int PlayerHandResult::kPlayerWinChipsFieldNumber;
const int PlayerHandResult::kPlayerBetChipsFieldNumber;
#endif  // !_MSC_VER

PlayerHandResult::PlayerHandResult()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerHandResult)
}

void PlayerHandResult::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

PlayerHandResult::PlayerHandResult(const PlayerHandResult& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerHandResult)
}

void PlayerHandResult::SharedCtor() {
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  playerwinchips_ = 0;
  playerbetchips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHandResult::~PlayerHandResult() {
  // @@protoc_insertion_point(destructor:msg.PlayerHandResult)
  SharedDtor();
}

void PlayerHandResult::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
  }
}

void PlayerHandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PlayerHandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHandResult_descriptor_;
}

const PlayerHandResult& PlayerHandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayerHandResult* PlayerHandResult::default_instance_ = NULL;

PlayerHandResult* PlayerHandResult::New() const {
  return new PlayerHandResult;
}

void PlayerHandResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerHandResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(playerwinchips_, playerbetchips_);
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHandResult::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PlayerHandResult)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerWinChips;
        break;
      }

      // optional int32 PlayerWinChips = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerWinChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerwinchips_)));
          set_has_playerwinchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PlayerBetChips;
        break;
      }

      // optional int32 PlayerBetChips = 3;
      case 3: {
        if (tag == 24) {
         parse_PlayerBetChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerbetchips_)));
          set_has_playerbetchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PlayerHandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PlayerHandResult)
  return false;
#undef DO_
}

void PlayerHandResult::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PlayerHandResult)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional int32 PlayerWinChips = 2;
  if (has_playerwinchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerwinchips(), output);
  }

  // optional int32 PlayerBetChips = 3;
  if (has_playerbetchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerbetchips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PlayerHandResult)
}

::google_public::protobuf::uint8* PlayerHandResult::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerHandResult)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional int32 PlayerWinChips = 2;
  if (has_playerwinchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerwinchips(), target);
  }

  // optional int32 PlayerBetChips = 3;
  if (has_playerbetchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerbetchips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerHandResult)
  return target;
}

int PlayerHandResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional int32 PlayerWinChips = 2;
    if (has_playerwinchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerwinchips());
    }

    // optional int32 PlayerBetChips = 3;
    if (has_playerbetchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerbetchips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHandResult::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHandResult* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PlayerHandResult*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHandResult::MergeFrom(const PlayerHandResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_playerwinchips()) {
      set_playerwinchips(from.playerwinchips());
    }
    if (from.has_playerbetchips()) {
      set_playerbetchips(from.playerbetchips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHandResult::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHandResult::CopyFrom(const PlayerHandResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHandResult::IsInitialized() const {

  return true;
}

void PlayerHandResult::Swap(PlayerHandResult* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(playerwinchips_, other->playerwinchips_);
    std::swap(playerbetchips_, other->playerbetchips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PlayerHandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHandResult_descriptor_;
  metadata.reflection = PlayerHandResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pot::kPotAmountFieldNumber;
const int Pot::kPlayerWinFieldNumber;
#endif  // !_MSC_VER

Pot::Pot()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Pot)
}

void Pot::InitAsDefaultInstance() {
}

Pot::Pot(const Pot& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Pot)
}

void Pot::SharedCtor() {
  _cached_size_ = 0;
  potamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pot::~Pot() {
  // @@protoc_insertion_point(destructor:msg.Pot)
  SharedDtor();
}

void Pot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Pot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pot_descriptor_;
}

const Pot& Pot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Pot* Pot::default_instance_ = NULL;

Pot* Pot::New() const {
  return new Pot;
}

void Pot::Clear() {
  potamount_ = 0;
  playerwin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pot::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Pot)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PotAmount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &potamount_)));
          set_has_potamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerWin;
        break;
      }

      // repeated .msg.PlayerWin PlayerWin = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerWin:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerwin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerWin;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Pot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Pot)
  return false;
#undef DO_
}

void Pot::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Pot)
  // optional int32 PotAmount = 1;
  if (has_potamount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->potamount(), output);
  }

  // repeated .msg.PlayerWin PlayerWin = 2;
  for (int i = 0; i < this->playerwin_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerwin(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Pot)
}

::google_public::protobuf::uint8* Pot::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Pot)
  // optional int32 PotAmount = 1;
  if (has_potamount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->potamount(), target);
  }

  // repeated .msg.PlayerWin PlayerWin = 2;
  for (int i = 0; i < this->playerwin_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerwin(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Pot)
  return target;
}

int Pot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PotAmount = 1;
    if (has_potamount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->potamount());
    }

  }
  // repeated .msg.PlayerWin PlayerWin = 2;
  total_size += 1 * this->playerwin_size();
  for (int i = 0; i < this->playerwin_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerwin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pot::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pot* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Pot*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pot::MergeFrom(const Pot& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerwin_.MergeFrom(from.playerwin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_potamount()) {
      set_potamount(from.potamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pot::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pot::CopyFrom(const Pot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pot::IsInitialized() const {

  return true;
}

void Pot::Swap(Pot* other) {
  if (other != this) {
    std::swap(potamount_, other->potamount_);
    playerwin_.Swap(&other->playerwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Pot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Pot_descriptor_;
  metadata.reflection = Pot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandResultInfo::kHasLowFieldNumber;
const int HandResultInfo::kPotFieldNumber;
const int HandResultInfo::kPlayerResultFieldNumber;
const int HandResultInfo::kHasSecondCardsFieldNumber;
const int HandResultInfo::kSecondHasLowFieldNumber;
#endif  // !_MSC_VER

HandResultInfo::HandResultInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.HandResultInfo)
}

void HandResultInfo::InitAsDefaultInstance() {
}

HandResultInfo::HandResultInfo(const HandResultInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.HandResultInfo)
}

void HandResultInfo::SharedCtor() {
  _cached_size_ = 0;
  haslow_ = false;
  hassecondcards_ = false;
  secondhaslow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandResultInfo::~HandResultInfo() {
  // @@protoc_insertion_point(destructor:msg.HandResultInfo)
  SharedDtor();
}

void HandResultInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* HandResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandResultInfo_descriptor_;
}

const HandResultInfo& HandResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

HandResultInfo* HandResultInfo::default_instance_ = NULL;

HandResultInfo* HandResultInfo::New() const {
  return new HandResultInfo;
}

void HandResultInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandResultInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(haslow_, secondhaslow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pot_.Clear();
  playerresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandResultInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.HandResultInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool HasLow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haslow_)));
          set_has_haslow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pot;
        break;
      }

      // repeated .msg.Pot Pot = 2;
      case 2: {
        if (tag == 18) {
         parse_Pot:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pot;
        if (input->ExpectTag(26)) goto parse_PlayerResult;
        break;
      }

      // repeated .msg.PlayerHandResult PlayerResult = 3;
      case 3: {
        if (tag == 26) {
         parse_PlayerResult:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PlayerResult;
        if (input->ExpectTag(32)) goto parse_HasSecondCards;
        break;
      }

      // optional bool HasSecondCards = 4;
      case 4: {
        if (tag == 32) {
         parse_HasSecondCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hassecondcards_)));
          set_has_hassecondcards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SecondHasLow;
        break;
      }

      // optional bool SecondHasLow = 5;
      case 5: {
        if (tag == 40) {
         parse_SecondHasLow:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secondhaslow_)));
          set_has_secondhaslow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.HandResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.HandResultInfo)
  return false;
#undef DO_
}

void HandResultInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.HandResultInfo)
  // optional bool HasLow = 1;
  if (has_haslow()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->haslow(), output);
  }

  // repeated .msg.Pot Pot = 2;
  for (int i = 0; i < this->pot_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pot(i), output);
  }

  // repeated .msg.PlayerHandResult PlayerResult = 3;
  for (int i = 0; i < this->playerresult_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerresult(i), output);
  }

  // optional bool HasSecondCards = 4;
  if (has_hassecondcards()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->hassecondcards(), output);
  }

  // optional bool SecondHasLow = 5;
  if (has_secondhaslow()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(5, this->secondhaslow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.HandResultInfo)
}

::google_public::protobuf::uint8* HandResultInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HandResultInfo)
  // optional bool HasLow = 1;
  if (has_haslow()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->haslow(), target);
  }

  // repeated .msg.Pot Pot = 2;
  for (int i = 0; i < this->pot_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pot(i), target);
  }

  // repeated .msg.PlayerHandResult PlayerResult = 3;
  for (int i = 0; i < this->playerresult_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerresult(i), target);
  }

  // optional bool HasSecondCards = 4;
  if (has_hassecondcards()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hassecondcards(), target);
  }

  // optional bool SecondHasLow = 5;
  if (has_secondhaslow()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->secondhaslow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HandResultInfo)
  return target;
}

int HandResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool HasLow = 1;
    if (has_haslow()) {
      total_size += 1 + 1;
    }

    // optional bool HasSecondCards = 4;
    if (has_hassecondcards()) {
      total_size += 1 + 1;
    }

    // optional bool SecondHasLow = 5;
    if (has_secondhaslow()) {
      total_size += 1 + 1;
    }

  }
  // repeated .msg.Pot Pot = 2;
  total_size += 1 * this->pot_size();
  for (int i = 0; i < this->pot_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pot(i));
  }

  // repeated .msg.PlayerHandResult PlayerResult = 3;
  total_size += 1 * this->playerresult_size();
  for (int i = 0; i < this->playerresult_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandResultInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandResultInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const HandResultInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandResultInfo::MergeFrom(const HandResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pot_.MergeFrom(from.pot_);
  playerresult_.MergeFrom(from.playerresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_haslow()) {
      set_haslow(from.haslow());
    }
    if (from.has_hassecondcards()) {
      set_hassecondcards(from.hassecondcards());
    }
    if (from.has_secondhaslow()) {
      set_secondhaslow(from.secondhaslow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandResultInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandResultInfo::CopyFrom(const HandResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandResultInfo::IsInitialized() const {

  return true;
}

void HandResultInfo::Swap(HandResultInfo* other) {
  if (other != this) {
    std::swap(haslow_, other->haslow_);
    pot_.Swap(&other->pot_);
    playerresult_.Swap(&other->playerresult_);
    std::swap(hassecondcards_, other->hassecondcards_);
    std::swap(secondhaslow_, other->secondhaslow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata HandResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = HandResultInfo_descriptor_;
  metadata.reflection = HandResultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_520_PokerReceiveHandResult::kRoomIDFieldNumber;
const int Processor_520_PokerReceiveHandResult::kHandIdFieldNumber;
const int Processor_520_PokerReceiveHandResult::kHandResultInfoFieldNumber;
#endif  // !_MSC_VER

Processor_520_PokerReceiveHandResult::Processor_520_PokerReceiveHandResult()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_520_PokerReceiveHandResult)
}

void Processor_520_PokerReceiveHandResult::InitAsDefaultInstance() {
  handresultinfo_ = const_cast< ::msg::HandResultInfo*>(&::msg::HandResultInfo::default_instance());
}

Processor_520_PokerReceiveHandResult::Processor_520_PokerReceiveHandResult(const Processor_520_PokerReceiveHandResult& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_520_PokerReceiveHandResult)
}

void Processor_520_PokerReceiveHandResult::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  handid_ = 0;
  handresultinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_520_PokerReceiveHandResult::~Processor_520_PokerReceiveHandResult() {
  // @@protoc_insertion_point(destructor:msg.Processor_520_PokerReceiveHandResult)
  SharedDtor();
}

void Processor_520_PokerReceiveHandResult::SharedDtor() {
  if (this != default_instance_) {
    delete handresultinfo_;
  }
}

void Processor_520_PokerReceiveHandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_520_PokerReceiveHandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_520_PokerReceiveHandResult_descriptor_;
}

const Processor_520_PokerReceiveHandResult& Processor_520_PokerReceiveHandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_520_PokerReceiveHandResult* Processor_520_PokerReceiveHandResult::default_instance_ = NULL;

Processor_520_PokerReceiveHandResult* Processor_520_PokerReceiveHandResult::New() const {
  return new Processor_520_PokerReceiveHandResult;
}

void Processor_520_PokerReceiveHandResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_520_PokerReceiveHandResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, handid_);
    if (has_handresultinfo()) {
      if (handresultinfo_ != NULL) handresultinfo_->::msg::HandResultInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_520_PokerReceiveHandResult::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_520_PokerReceiveHandResult)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandId;
        break;
      }

      // optional int32 HandId = 2;
      case 2: {
        if (tag == 16) {
         parse_HandId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HandResultInfo;
        break;
      }

      // optional .msg.HandResultInfo HandResultInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_HandResultInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handresultinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_520_PokerReceiveHandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_520_PokerReceiveHandResult)
  return false;
#undef DO_
}

void Processor_520_PokerReceiveHandResult::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_520_PokerReceiveHandResult)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->handid(), output);
  }

  // optional .msg.HandResultInfo HandResultInfo = 3;
  if (has_handresultinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->handresultinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_520_PokerReceiveHandResult)
}

::google_public::protobuf::uint8* Processor_520_PokerReceiveHandResult::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_520_PokerReceiveHandResult)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handid(), target);
  }

  // optional .msg.HandResultInfo HandResultInfo = 3;
  if (has_handresultinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->handresultinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_520_PokerReceiveHandResult)
  return target;
}

int Processor_520_PokerReceiveHandResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 HandId = 2;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional .msg.HandResultInfo HandResultInfo = 3;
    if (has_handresultinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handresultinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_520_PokerReceiveHandResult::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_520_PokerReceiveHandResult* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_520_PokerReceiveHandResult*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_520_PokerReceiveHandResult::MergeFrom(const Processor_520_PokerReceiveHandResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_handresultinfo()) {
      mutable_handresultinfo()->::msg::HandResultInfo::MergeFrom(from.handresultinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_520_PokerReceiveHandResult::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_520_PokerReceiveHandResult::CopyFrom(const Processor_520_PokerReceiveHandResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_520_PokerReceiveHandResult::IsInitialized() const {

  return true;
}

void Processor_520_PokerReceiveHandResult::Swap(Processor_520_PokerReceiveHandResult* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(handid_, other->handid_);
    std::swap(handresultinfo_, other->handresultinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_520_PokerReceiveHandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_520_PokerReceiveHandResult_descriptor_;
  metadata.reflection = Processor_520_PokerReceiveHandResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_530_PokerGetTourmentStatus_UP::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_530_PokerGetTourmentStatus_UP::Processor_530_PokerGetTourmentStatus_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_530_PokerGetTourmentStatus_UP)
}

void Processor_530_PokerGetTourmentStatus_UP::InitAsDefaultInstance() {
}

Processor_530_PokerGetTourmentStatus_UP::Processor_530_PokerGetTourmentStatus_UP(const Processor_530_PokerGetTourmentStatus_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_530_PokerGetTourmentStatus_UP)
}

void Processor_530_PokerGetTourmentStatus_UP::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_530_PokerGetTourmentStatus_UP::~Processor_530_PokerGetTourmentStatus_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_530_PokerGetTourmentStatus_UP)
  SharedDtor();
}

void Processor_530_PokerGetTourmentStatus_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_530_PokerGetTourmentStatus_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_530_PokerGetTourmentStatus_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_530_PokerGetTourmentStatus_UP_descriptor_;
}

const Processor_530_PokerGetTourmentStatus_UP& Processor_530_PokerGetTourmentStatus_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_530_PokerGetTourmentStatus_UP* Processor_530_PokerGetTourmentStatus_UP::default_instance_ = NULL;

Processor_530_PokerGetTourmentStatus_UP* Processor_530_PokerGetTourmentStatus_UP::New() const {
  return new Processor_530_PokerGetTourmentStatus_UP;
}

void Processor_530_PokerGetTourmentStatus_UP::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_530_PokerGetTourmentStatus_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_530_PokerGetTourmentStatus_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_530_PokerGetTourmentStatus_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_530_PokerGetTourmentStatus_UP)
  return false;
#undef DO_
}

void Processor_530_PokerGetTourmentStatus_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_530_PokerGetTourmentStatus_UP)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_530_PokerGetTourmentStatus_UP)
}

::google_public::protobuf::uint8* Processor_530_PokerGetTourmentStatus_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_530_PokerGetTourmentStatus_UP)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_530_PokerGetTourmentStatus_UP)
  return target;
}

int Processor_530_PokerGetTourmentStatus_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_530_PokerGetTourmentStatus_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_530_PokerGetTourmentStatus_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_530_PokerGetTourmentStatus_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_530_PokerGetTourmentStatus_UP::MergeFrom(const Processor_530_PokerGetTourmentStatus_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_530_PokerGetTourmentStatus_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_530_PokerGetTourmentStatus_UP::CopyFrom(const Processor_530_PokerGetTourmentStatus_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_530_PokerGetTourmentStatus_UP::IsInitialized() const {

  return true;
}

void Processor_530_PokerGetTourmentStatus_UP::Swap(Processor_530_PokerGetTourmentStatus_UP* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_530_PokerGetTourmentStatus_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_530_PokerGetTourmentStatus_UP_descriptor_;
  metadata.reflection = Processor_530_PokerGetTourmentStatus_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_530_PokerGetTourmentStatus_DOWN::kRoomIDFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kTournamentInfoFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kCurrentLevelFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kLastTimeFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kTotalPlayerNumFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kTotalChipsFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kTableInfoFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kStatusFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kPrizePoolFieldNumber;
const int Processor_530_PokerGetTourmentStatus_DOWN::kLosePlayersFieldNumber;
#endif  // !_MSC_VER

Processor_530_PokerGetTourmentStatus_DOWN::Processor_530_PokerGetTourmentStatus_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_530_PokerGetTourmentStatus_DOWN)
}

void Processor_530_PokerGetTourmentStatus_DOWN::InitAsDefaultInstance() {
  tournamentinfo_ = const_cast< ::msg::TournamentInfo*>(&::msg::TournamentInfo::default_instance());
}

Processor_530_PokerGetTourmentStatus_DOWN::Processor_530_PokerGetTourmentStatus_DOWN(const Processor_530_PokerGetTourmentStatus_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_530_PokerGetTourmentStatus_DOWN)
}

void Processor_530_PokerGetTourmentStatus_DOWN::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  tournamentinfo_ = NULL;
  currentlevel_ = 0;
  lasttime_ = 0;
  totalplayernum_ = 0;
  totalchips_ = 0;
  status_ = 1;
  prizepool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_530_PokerGetTourmentStatus_DOWN::~Processor_530_PokerGetTourmentStatus_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  SharedDtor();
}

void Processor_530_PokerGetTourmentStatus_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete tournamentinfo_;
  }
}

void Processor_530_PokerGetTourmentStatus_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_530_PokerGetTourmentStatus_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_530_PokerGetTourmentStatus_DOWN_descriptor_;
}

const Processor_530_PokerGetTourmentStatus_DOWN& Processor_530_PokerGetTourmentStatus_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_530_PokerGetTourmentStatus_DOWN* Processor_530_PokerGetTourmentStatus_DOWN::default_instance_ = NULL;

Processor_530_PokerGetTourmentStatus_DOWN* Processor_530_PokerGetTourmentStatus_DOWN::New() const {
  return new Processor_530_PokerGetTourmentStatus_DOWN;
}

void Processor_530_PokerGetTourmentStatus_DOWN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_530_PokerGetTourmentStatus_DOWN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(roomid_, totalplayernum_);
    if (has_tournamentinfo()) {
      if (tournamentinfo_ != NULL) tournamentinfo_->::msg::TournamentInfo::Clear();
    }
    totalchips_ = 0;
    status_ = 1;
  }
  prizepool_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  tableinfo_.Clear();
  loseplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_530_PokerGetTourmentStatus_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TournamentInfo;
        break;
      }

      // optional .msg.TournamentInfo TournamentInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TournamentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrentLevel;
        break;
      }

      // optional int32 CurrentLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrentLevel:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentlevel_)));
          set_has_currentlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 4;
      case 4: {
        if (tag == 32) {
         parse_LastTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TotalPlayerNum;
        break;
      }

      // optional int32 TotalPlayerNum = 5;
      case 5: {
        if (tag == 40) {
         parse_TotalPlayerNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalplayernum_)));
          set_has_totalplayernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TotalChips;
        break;
      }

      // optional int32 TotalChips = 6;
      case 6: {
        if (tag == 48) {
         parse_TotalChips:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalchips_)));
          set_has_totalchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_TableInfo;
        break;
      }

      // repeated .msg.TourmentTableInfo TableInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_TableInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_TableInfo;
        if (input->ExpectTag(64)) goto parse_Status;
        break;
      }

      // optional .msg.TournamentStatus Status = 8;
      case 8: {
        if (tag == 64) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::TournamentStatus_IsValid(value)) {
            set_status(static_cast< ::msg::TournamentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PrizePool;
        break;
      }

      // optional int32 PrizePool = 9;
      case 9: {
        if (tag == 72) {
         parse_PrizePool:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizepool_)));
          set_has_prizepool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_LosePlayers;
        break;
      }

      // repeated .msg.PlayerScore LosePlayers = 10;
      case 10: {
        if (tag == 82) {
         parse_LosePlayers:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loseplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_LosePlayers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  return false;
#undef DO_
}

void Processor_530_PokerGetTourmentStatus_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.TournamentInfo TournamentInfo = 2;
  if (has_tournamentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tournamentinfo(), output);
  }

  // optional int32 CurrentLevel = 3;
  if (has_currentlevel()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentlevel(), output);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasttime(), output);
  }

  // optional int32 TotalPlayerNum = 5;
  if (has_totalplayernum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalplayernum(), output);
  }

  // optional int32 TotalChips = 6;
  if (has_totalchips()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalchips(), output);
  }

  // repeated .msg.TourmentTableInfo TableInfo = 7;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tableinfo(i), output);
  }

  // optional .msg.TournamentStatus Status = 8;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  // optional int32 PrizePool = 9;
  if (has_prizepool()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->prizepool(), output);
  }

  // repeated .msg.PlayerScore LosePlayers = 10;
  for (int i = 0; i < this->loseplayers_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->loseplayers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_530_PokerGetTourmentStatus_DOWN)
}

::google_public::protobuf::uint8* Processor_530_PokerGetTourmentStatus_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.TournamentInfo TournamentInfo = 2;
  if (has_tournamentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tournamentinfo(), target);
  }

  // optional int32 CurrentLevel = 3;
  if (has_currentlevel()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentlevel(), target);
  }

  // optional int32 LastTime = 4;
  if (has_lasttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasttime(), target);
  }

  // optional int32 TotalPlayerNum = 5;
  if (has_totalplayernum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalplayernum(), target);
  }

  // optional int32 TotalChips = 6;
  if (has_totalchips()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalchips(), target);
  }

  // repeated .msg.TourmentTableInfo TableInfo = 7;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tableinfo(i), target);
  }

  // optional .msg.TournamentStatus Status = 8;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  // optional int32 PrizePool = 9;
  if (has_prizepool()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->prizepool(), target);
  }

  // repeated .msg.PlayerScore LosePlayers = 10;
  for (int i = 0; i < this->loseplayers_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->loseplayers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_530_PokerGetTourmentStatus_DOWN)
  return target;
}

int Processor_530_PokerGetTourmentStatus_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.TournamentInfo TournamentInfo = 2;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentinfo());
    }

    // optional int32 CurrentLevel = 3;
    if (has_currentlevel()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->currentlevel());
    }

    // optional int32 LastTime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 TotalPlayerNum = 5;
    if (has_totalplayernum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalplayernum());
    }

    // optional int32 TotalChips = 6;
    if (has_totalchips()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalchips());
    }

    // optional .msg.TournamentStatus Status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 PrizePool = 9;
    if (has_prizepool()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->prizepool());
    }

  }
  // repeated .msg.TourmentTableInfo TableInfo = 7;
  total_size += 1 * this->tableinfo_size();
  for (int i = 0; i < this->tableinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableinfo(i));
  }

  // repeated .msg.PlayerScore LosePlayers = 10;
  total_size += 1 * this->loseplayers_size();
  for (int i = 0; i < this->loseplayers_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loseplayers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_530_PokerGetTourmentStatus_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_530_PokerGetTourmentStatus_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_530_PokerGetTourmentStatus_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_530_PokerGetTourmentStatus_DOWN::MergeFrom(const Processor_530_PokerGetTourmentStatus_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableinfo_.MergeFrom(from.tableinfo_);
  loseplayers_.MergeFrom(from.loseplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tournamentinfo()) {
      mutable_tournamentinfo()->::msg::TournamentInfo::MergeFrom(from.tournamentinfo());
    }
    if (from.has_currentlevel()) {
      set_currentlevel(from.currentlevel());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_totalplayernum()) {
      set_totalplayernum(from.totalplayernum());
    }
    if (from.has_totalchips()) {
      set_totalchips(from.totalchips());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prizepool()) {
      set_prizepool(from.prizepool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_530_PokerGetTourmentStatus_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_530_PokerGetTourmentStatus_DOWN::CopyFrom(const Processor_530_PokerGetTourmentStatus_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_530_PokerGetTourmentStatus_DOWN::IsInitialized() const {

  return true;
}

void Processor_530_PokerGetTourmentStatus_DOWN::Swap(Processor_530_PokerGetTourmentStatus_DOWN* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(tournamentinfo_, other->tournamentinfo_);
    std::swap(currentlevel_, other->currentlevel_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(totalplayernum_, other->totalplayernum_);
    std::swap(totalchips_, other->totalchips_);
    tableinfo_.Swap(&other->tableinfo_);
    std::swap(status_, other->status_);
    std::swap(prizepool_, other->prizepool_);
    loseplayers_.Swap(&other->loseplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_530_PokerGetTourmentStatus_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_530_PokerGetTourmentStatus_DOWN_descriptor_;
  metadata.reflection = Processor_530_PokerGetTourmentStatus_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TourmentTableInfo::kTableIDFieldNumber;
const int TourmentTableInfo::kPlayerFieldNumber;
#endif  // !_MSC_VER

TourmentTableInfo::TourmentTableInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TourmentTableInfo)
}

void TourmentTableInfo::InitAsDefaultInstance() {
}

TourmentTableInfo::TourmentTableInfo(const TourmentTableInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.TourmentTableInfo)
}

void TourmentTableInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TourmentTableInfo::~TourmentTableInfo() {
  // @@protoc_insertion_point(destructor:msg.TourmentTableInfo)
  SharedDtor();
}

void TourmentTableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TourmentTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TourmentTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TourmentTableInfo_descriptor_;
}

const TourmentTableInfo& TourmentTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

TourmentTableInfo* TourmentTableInfo::default_instance_ = NULL;

TourmentTableInfo* TourmentTableInfo::New() const {
  return new TourmentTableInfo;
}

void TourmentTableInfo::Clear() {
  tableid_ = 0;
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TourmentTableInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.TourmentTableInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TableID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Player;
        break;
      }

      // repeated .msg.PokerPlayerInfo Player = 2;
      case 2: {
        if (tag == 18) {
         parse_Player:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Player;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.TourmentTableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.TourmentTableInfo)
  return false;
#undef DO_
}

void TourmentTableInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.TourmentTableInfo)
  // optional int32 TableID = 1;
  if (has_tableid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // repeated .msg.PokerPlayerInfo Player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.TourmentTableInfo)
}

::google_public::protobuf::uint8* TourmentTableInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TourmentTableInfo)
  // optional int32 TableID = 1;
  if (has_tableid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // repeated .msg.PokerPlayerInfo Player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TourmentTableInfo)
  return target;
}

int TourmentTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TableID = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  // repeated .msg.PokerPlayerInfo Player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TourmentTableInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TourmentTableInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TourmentTableInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TourmentTableInfo::MergeFrom(const TourmentTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TourmentTableInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TourmentTableInfo::CopyFrom(const TourmentTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TourmentTableInfo::IsInitialized() const {

  return true;
}

void TourmentTableInfo::Swap(TourmentTableInfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TourmentTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TourmentTableInfo_descriptor_;
  metadata.reflection = TourmentTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_531_PokerTourmentChangeTable::kTableIDFieldNumber;
const int Processor_531_PokerTourmentChangeTable::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_531_PokerTourmentChangeTable::Processor_531_PokerTourmentChangeTable()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_531_PokerTourmentChangeTable)
}

void Processor_531_PokerTourmentChangeTable::InitAsDefaultInstance() {
}

Processor_531_PokerTourmentChangeTable::Processor_531_PokerTourmentChangeTable(const Processor_531_PokerTourmentChangeTable& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_531_PokerTourmentChangeTable)
}

void Processor_531_PokerTourmentChangeTable::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_531_PokerTourmentChangeTable::~Processor_531_PokerTourmentChangeTable() {
  // @@protoc_insertion_point(destructor:msg.Processor_531_PokerTourmentChangeTable)
  SharedDtor();
}

void Processor_531_PokerTourmentChangeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_531_PokerTourmentChangeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_531_PokerTourmentChangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_531_PokerTourmentChangeTable_descriptor_;
}

const Processor_531_PokerTourmentChangeTable& Processor_531_PokerTourmentChangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_531_PokerTourmentChangeTable* Processor_531_PokerTourmentChangeTable::default_instance_ = NULL;

Processor_531_PokerTourmentChangeTable* Processor_531_PokerTourmentChangeTable::New() const {
  return new Processor_531_PokerTourmentChangeTable;
}

void Processor_531_PokerTourmentChangeTable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_531_PokerTourmentChangeTable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_531_PokerTourmentChangeTable::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_531_PokerTourmentChangeTable)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TableID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_531_PokerTourmentChangeTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_531_PokerTourmentChangeTable)
  return false;
#undef DO_
}

void Processor_531_PokerTourmentChangeTable::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_531_PokerTourmentChangeTable)
  // optional int32 TableID = 1;
  if (has_tableid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_531_PokerTourmentChangeTable)
}

::google_public::protobuf::uint8* Processor_531_PokerTourmentChangeTable::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_531_PokerTourmentChangeTable)
  // optional int32 TableID = 1;
  if (has_tableid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_531_PokerTourmentChangeTable)
  return target;
}

int Processor_531_PokerTourmentChangeTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TableID = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_531_PokerTourmentChangeTable::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_531_PokerTourmentChangeTable* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_531_PokerTourmentChangeTable*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_531_PokerTourmentChangeTable::MergeFrom(const Processor_531_PokerTourmentChangeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_531_PokerTourmentChangeTable::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_531_PokerTourmentChangeTable::CopyFrom(const Processor_531_PokerTourmentChangeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_531_PokerTourmentChangeTable::IsInitialized() const {

  return true;
}

void Processor_531_PokerTourmentChangeTable::Swap(Processor_531_PokerTourmentChangeTable* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_531_PokerTourmentChangeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_531_PokerTourmentChangeTable_descriptor_;
  metadata.reflection = Processor_531_PokerTourmentChangeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_532_PokerTournamentRequestAddon::kRoomIdFieldNumber;
const int Processor_532_PokerTournamentRequestAddon::kBuyinFieldNumber;
#endif  // !_MSC_VER

Processor_532_PokerTournamentRequestAddon::Processor_532_PokerTournamentRequestAddon()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_532_PokerTournamentRequestAddon)
}

void Processor_532_PokerTournamentRequestAddon::InitAsDefaultInstance() {
}

Processor_532_PokerTournamentRequestAddon::Processor_532_PokerTournamentRequestAddon(const Processor_532_PokerTournamentRequestAddon& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_532_PokerTournamentRequestAddon)
}

void Processor_532_PokerTournamentRequestAddon::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  buyin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_532_PokerTournamentRequestAddon::~Processor_532_PokerTournamentRequestAddon() {
  // @@protoc_insertion_point(destructor:msg.Processor_532_PokerTournamentRequestAddon)
  SharedDtor();
}

void Processor_532_PokerTournamentRequestAddon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_532_PokerTournamentRequestAddon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_532_PokerTournamentRequestAddon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_532_PokerTournamentRequestAddon_descriptor_;
}

const Processor_532_PokerTournamentRequestAddon& Processor_532_PokerTournamentRequestAddon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_532_PokerTournamentRequestAddon* Processor_532_PokerTournamentRequestAddon::default_instance_ = NULL;

Processor_532_PokerTournamentRequestAddon* Processor_532_PokerTournamentRequestAddon::New() const {
  return new Processor_532_PokerTournamentRequestAddon;
}

void Processor_532_PokerTournamentRequestAddon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_532_PokerTournamentRequestAddon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, buyin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_532_PokerTournamentRequestAddon::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_532_PokerTournamentRequestAddon)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Buyin;
        break;
      }

      // optional int32 Buyin = 2;
      case 2: {
        if (tag == 16) {
         parse_Buyin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyin_)));
          set_has_buyin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_532_PokerTournamentRequestAddon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_532_PokerTournamentRequestAddon)
  return false;
#undef DO_
}

void Processor_532_PokerTournamentRequestAddon::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_532_PokerTournamentRequestAddon)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 Buyin = 2;
  if (has_buyin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->buyin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_532_PokerTournamentRequestAddon)
}

::google_public::protobuf::uint8* Processor_532_PokerTournamentRequestAddon::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_532_PokerTournamentRequestAddon)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 Buyin = 2;
  if (has_buyin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buyin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_532_PokerTournamentRequestAddon)
  return target;
}

int Processor_532_PokerTournamentRequestAddon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 Buyin = 2;
    if (has_buyin()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->buyin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_532_PokerTournamentRequestAddon::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_532_PokerTournamentRequestAddon* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_532_PokerTournamentRequestAddon*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_532_PokerTournamentRequestAddon::MergeFrom(const Processor_532_PokerTournamentRequestAddon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_buyin()) {
      set_buyin(from.buyin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_532_PokerTournamentRequestAddon::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_532_PokerTournamentRequestAddon::CopyFrom(const Processor_532_PokerTournamentRequestAddon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_532_PokerTournamentRequestAddon::IsInitialized() const {

  return true;
}

void Processor_532_PokerTournamentRequestAddon::Swap(Processor_532_PokerTournamentRequestAddon* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(buyin_, other->buyin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_532_PokerTournamentRequestAddon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_532_PokerTournamentRequestAddon_descriptor_;
  metadata.reflection = Processor_532_PokerTournamentRequestAddon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_533_PokerTournamentAddon::kRoomIdFieldNumber;
const int Processor_533_PokerTournamentAddon::kAddonFieldNumber;
#endif  // !_MSC_VER

Processor_533_PokerTournamentAddon::Processor_533_PokerTournamentAddon()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_533_PokerTournamentAddon)
}

void Processor_533_PokerTournamentAddon::InitAsDefaultInstance() {
}

Processor_533_PokerTournamentAddon::Processor_533_PokerTournamentAddon(const Processor_533_PokerTournamentAddon& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_533_PokerTournamentAddon)
}

void Processor_533_PokerTournamentAddon::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  addon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_533_PokerTournamentAddon::~Processor_533_PokerTournamentAddon() {
  // @@protoc_insertion_point(destructor:msg.Processor_533_PokerTournamentAddon)
  SharedDtor();
}

void Processor_533_PokerTournamentAddon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_533_PokerTournamentAddon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_533_PokerTournamentAddon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_533_PokerTournamentAddon_descriptor_;
}

const Processor_533_PokerTournamentAddon& Processor_533_PokerTournamentAddon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_533_PokerTournamentAddon* Processor_533_PokerTournamentAddon::default_instance_ = NULL;

Processor_533_PokerTournamentAddon* Processor_533_PokerTournamentAddon::New() const {
  return new Processor_533_PokerTournamentAddon;
}

void Processor_533_PokerTournamentAddon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_533_PokerTournamentAddon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, addon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_533_PokerTournamentAddon::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_533_PokerTournamentAddon)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Addon;
        break;
      }

      // optional bool Addon = 2;
      case 2: {
        if (tag == 16) {
         parse_Addon:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addon_)));
          set_has_addon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_533_PokerTournamentAddon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_533_PokerTournamentAddon)
  return false;
#undef DO_
}

void Processor_533_PokerTournamentAddon::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_533_PokerTournamentAddon)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional bool Addon = 2;
  if (has_addon()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->addon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_533_PokerTournamentAddon)
}

::google_public::protobuf::uint8* Processor_533_PokerTournamentAddon::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_533_PokerTournamentAddon)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional bool Addon = 2;
  if (has_addon()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->addon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_533_PokerTournamentAddon)
  return target;
}

int Processor_533_PokerTournamentAddon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional bool Addon = 2;
    if (has_addon()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_533_PokerTournamentAddon::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_533_PokerTournamentAddon* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_533_PokerTournamentAddon*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_533_PokerTournamentAddon::MergeFrom(const Processor_533_PokerTournamentAddon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_addon()) {
      set_addon(from.addon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_533_PokerTournamentAddon::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_533_PokerTournamentAddon::CopyFrom(const Processor_533_PokerTournamentAddon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_533_PokerTournamentAddon::IsInitialized() const {

  return true;
}

void Processor_533_PokerTournamentAddon::Swap(Processor_533_PokerTournamentAddon* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(addon_, other->addon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_533_PokerTournamentAddon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_533_PokerTournamentAddon_descriptor_;
  metadata.reflection = Processor_533_PokerTournamentAddon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPlayerInfo::kPlayerInfoFieldNumber;
const int OFCPlayerInfo::kPlayerScoreFieldNumber;
const int OFCPlayerInfo::kCardFieldNumber;
const int OFCPlayerInfo::kHoleCardFieldNumber;
const int OFCPlayerInfo::kFirstRowTypeFieldNumber;
const int OFCPlayerInfo::kMiddleRowTypeFieldNumber;
const int OFCPlayerInfo::kLastRowTypeFieldNumber;
const int OFCPlayerInfo::kFirstRowScoreFieldNumber;
const int OFCPlayerInfo::kMiddleRowScoreFieldNumber;
const int OFCPlayerInfo::kLastRowScoreFieldNumber;
const int OFCPlayerInfo::kFantasyCardsFieldNumber;
const int OFCPlayerInfo::kActionStatusFieldNumber;
const int OFCPlayerInfo::kActionRequestFieldNumber;
const int OFCPlayerInfo::kFirstCardTypeFieldNumber;
const int OFCPlayerInfo::kMiddleCardTypeFieldNumber;
const int OFCPlayerInfo::kLastCardTypeFieldNumber;
const int OFCPlayerInfo::kRefantasyFieldNumber;
#endif  // !_MSC_VER

OFCPlayerInfo::OFCPlayerInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPlayerInfo)
}

void OFCPlayerInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::msg::CommonPlayerInfo*>(&::msg::CommonPlayerInfo::default_instance());
  actionrequest_ = const_cast< ::msg::ActionRequest*>(&::msg::ActionRequest::default_instance());
}

OFCPlayerInfo::OFCPlayerInfo(const OFCPlayerInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPlayerInfo)
}

void OFCPlayerInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerinfo_ = NULL;
  playerscore_ = 0;
  firstrowtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  middlerowtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  lastrowtype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  firstrowscore_ = 0;
  middlerowscore_ = 0;
  lastrowscore_ = 0;
  fantasycards_ = 0;
  actionstatus_ = 0;
  actionrequest_ = NULL;
  firstcardtype_ = 0;
  middlecardtype_ = 0;
  lastcardtype_ = 0;
  refantasy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPlayerInfo::~OFCPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.OFCPlayerInfo)
  SharedDtor();
}

void OFCPlayerInfo::SharedDtor() {
  if (firstrowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstrowtype_;
  }
  if (middlerowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete middlerowtype_;
  }
  if (lastrowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastrowtype_;
  }
  if (this != default_instance_) {
    delete playerinfo_;
    delete actionrequest_;
  }
}

void OFCPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPlayerInfo_descriptor_;
}

const OFCPlayerInfo& OFCPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPlayerInfo* OFCPlayerInfo::default_instance_ = NULL;

OFCPlayerInfo* OFCPlayerInfo::New() const {
  return new OFCPlayerInfo;
}

void OFCPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OFCPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(playerscore_, firstrowscore_);
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::msg::CommonPlayerInfo::Clear();
    }
    if (has_firstrowtype()) {
      if (firstrowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstrowtype_->clear();
      }
    }
    if (has_middlerowtype()) {
      if (middlerowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        middlerowtype_->clear();
      }
    }
    if (has_lastrowtype()) {
      if (lastrowtype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastrowtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(middlerowscore_, actionstatus_);
    ZR_(firstcardtype_, lastcardtype_);
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::ActionRequest::Clear();
    }
  }
  refantasy_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_.Clear();
  holecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPlayerInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPlayerInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommonPlayerInfo PlayerInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerScore;
        break;
      }

      // optional int32 PlayerScore = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerscore_)));
          set_has_playerscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Card;
        break;
      }

      // repeated .msg.OFCPlayerCard Card = 3;
      case 3: {
        if (tag == 26) {
         parse_Card:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Card;
        if (input->ExpectTag(32)) goto parse_HoleCard;
        break;
      }

      // repeated int32 HoleCard = 4;
      case 4: {
        if (tag == 32) {
         parse_HoleCard:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_holecard())));
        } else if (tag == 34) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_holecard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HoleCard;
        if (input->ExpectTag(42)) goto parse_FirstRowType;
        break;
      }

      // optional string FirstRowType = 5;
      case 5: {
        if (tag == 42) {
         parse_FirstRowType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstrowtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstrowtype().data(), this->firstrowtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "firstrowtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MiddleRowType;
        break;
      }

      // optional string MiddleRowType = 6;
      case 6: {
        if (tag == 50) {
         parse_MiddleRowType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_middlerowtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->middlerowtype().data(), this->middlerowtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "middlerowtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_LastRowType;
        break;
      }

      // optional string LastRowType = 7;
      case 7: {
        if (tag == 58) {
         parse_LastRowType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastrowtype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastrowtype().data(), this->lastrowtype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "lastrowtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FirstRowScore;
        break;
      }

      // optional int32 FirstRowScore = 8;
      case 8: {
        if (tag == 64) {
         parse_FirstRowScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstrowscore_)));
          set_has_firstrowscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MiddleRowScore;
        break;
      }

      // optional int32 MiddleRowScore = 9;
      case 9: {
        if (tag == 72) {
         parse_MiddleRowScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &middlerowscore_)));
          set_has_middlerowscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LastRowScore;
        break;
      }

      // optional int32 LastRowScore = 10;
      case 10: {
        if (tag == 80) {
         parse_LastRowScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrowscore_)));
          set_has_lastrowscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_FantasyCards;
        break;
      }

      // optional int32 FantasyCards = 11;
      case 11: {
        if (tag == 88) {
         parse_FantasyCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantasycards_)));
          set_has_fantasycards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ActionStatus;
        break;
      }

      // optional .msg.OFCActionStatus ActionStatus = 12;
      case 12: {
        if (tag == 96) {
         parse_ActionStatus:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCActionStatus_IsValid(value)) {
            set_actionstatus(static_cast< ::msg::OFCActionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ActionRequest;
        break;
      }

      // optional .msg.ActionRequest ActionRequest = 13;
      case 13: {
        if (tag == 106) {
         parse_ActionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_FirstCardType;
        break;
      }

      // optional .msg.OFCCardType FirstCardType = 14;
      case 14: {
        if (tag == 112) {
         parse_FirstCardType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCCardType_IsValid(value)) {
            set_firstcardtype(static_cast< ::msg::OFCCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_MiddleCardType;
        break;
      }

      // optional .msg.OFCCardType MiddleCardType = 15;
      case 15: {
        if (tag == 120) {
         parse_MiddleCardType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCCardType_IsValid(value)) {
            set_middlecardtype(static_cast< ::msg::OFCCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_LastCardType;
        break;
      }

      // optional .msg.OFCCardType LastCardType = 16;
      case 16: {
        if (tag == 128) {
         parse_LastCardType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCCardType_IsValid(value)) {
            set_lastcardtype(static_cast< ::msg::OFCCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Refantasy;
        break;
      }

      // optional bool Refantasy = 17;
      case 17: {
        if (tag == 136) {
         parse_Refantasy:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refantasy_)));
          set_has_refantasy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPlayerInfo)
  return false;
#undef DO_
}

void OFCPlayerInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPlayerInfo)
  // optional .msg.CommonPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  // optional int32 PlayerScore = 2;
  if (has_playerscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerscore(), output);
  }

  // repeated .msg.OFCPlayerCard Card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(i), output);
  }

  // repeated int32 HoleCard = 4;
  for (int i = 0; i < this->holecard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->holecard(i), output);
  }

  // optional string FirstRowType = 5;
  if (has_firstrowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstrowtype().data(), this->firstrowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "firstrowtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->firstrowtype(), output);
  }

  // optional string MiddleRowType = 6;
  if (has_middlerowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->middlerowtype().data(), this->middlerowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "middlerowtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->middlerowtype(), output);
  }

  // optional string LastRowType = 7;
  if (has_lastrowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastrowtype().data(), this->lastrowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "lastrowtype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->lastrowtype(), output);
  }

  // optional int32 FirstRowScore = 8;
  if (has_firstrowscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->firstrowscore(), output);
  }

  // optional int32 MiddleRowScore = 9;
  if (has_middlerowscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->middlerowscore(), output);
  }

  // optional int32 LastRowScore = 10;
  if (has_lastrowscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->lastrowscore(), output);
  }

  // optional int32 FantasyCards = 11;
  if (has_fantasycards()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->fantasycards(), output);
  }

  // optional .msg.OFCActionStatus ActionStatus = 12;
  if (has_actionstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->actionstatus(), output);
  }

  // optional .msg.ActionRequest ActionRequest = 13;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->actionrequest(), output);
  }

  // optional .msg.OFCCardType FirstCardType = 14;
  if (has_firstcardtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->firstcardtype(), output);
  }

  // optional .msg.OFCCardType MiddleCardType = 15;
  if (has_middlecardtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->middlecardtype(), output);
  }

  // optional .msg.OFCCardType LastCardType = 16;
  if (has_lastcardtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->lastcardtype(), output);
  }

  // optional bool Refantasy = 17;
  if (has_refantasy()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(17, this->refantasy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPlayerInfo)
}

::google_public::protobuf::uint8* OFCPlayerInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPlayerInfo)
  // optional .msg.CommonPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  // optional int32 PlayerScore = 2;
  if (has_playerscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerscore(), target);
  }

  // repeated .msg.OFCPlayerCard Card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(i), target);
  }

  // repeated int32 HoleCard = 4;
  for (int i = 0; i < this->holecard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->holecard(i), target);
  }

  // optional string FirstRowType = 5;
  if (has_firstrowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstrowtype().data(), this->firstrowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "firstrowtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->firstrowtype(), target);
  }

  // optional string MiddleRowType = 6;
  if (has_middlerowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->middlerowtype().data(), this->middlerowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "middlerowtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->middlerowtype(), target);
  }

  // optional string LastRowType = 7;
  if (has_lastrowtype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastrowtype().data(), this->lastrowtype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "lastrowtype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lastrowtype(), target);
  }

  // optional int32 FirstRowScore = 8;
  if (has_firstrowscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->firstrowscore(), target);
  }

  // optional int32 MiddleRowScore = 9;
  if (has_middlerowscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->middlerowscore(), target);
  }

  // optional int32 LastRowScore = 10;
  if (has_lastrowscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lastrowscore(), target);
  }

  // optional int32 FantasyCards = 11;
  if (has_fantasycards()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fantasycards(), target);
  }

  // optional .msg.OFCActionStatus ActionStatus = 12;
  if (has_actionstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->actionstatus(), target);
  }

  // optional .msg.ActionRequest ActionRequest = 13;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->actionrequest(), target);
  }

  // optional .msg.OFCCardType FirstCardType = 14;
  if (has_firstcardtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->firstcardtype(), target);
  }

  // optional .msg.OFCCardType MiddleCardType = 15;
  if (has_middlecardtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->middlecardtype(), target);
  }

  // optional .msg.OFCCardType LastCardType = 16;
  if (has_lastcardtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->lastcardtype(), target);
  }

  // optional bool Refantasy = 17;
  if (has_refantasy()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->refantasy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPlayerInfo)
  return target;
}

int OFCPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonPlayerInfo PlayerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional int32 PlayerScore = 2;
    if (has_playerscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerscore());
    }

    // optional string FirstRowType = 5;
    if (has_firstrowtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->firstrowtype());
    }

    // optional string MiddleRowType = 6;
    if (has_middlerowtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->middlerowtype());
    }

    // optional string LastRowType = 7;
    if (has_lastrowtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->lastrowtype());
    }

    // optional int32 FirstRowScore = 8;
    if (has_firstrowscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->firstrowscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MiddleRowScore = 9;
    if (has_middlerowscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->middlerowscore());
    }

    // optional int32 LastRowScore = 10;
    if (has_lastrowscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrowscore());
    }

    // optional int32 FantasyCards = 11;
    if (has_fantasycards()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->fantasycards());
    }

    // optional .msg.OFCActionStatus ActionStatus = 12;
    if (has_actionstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->actionstatus());
    }

    // optional .msg.ActionRequest ActionRequest = 13;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

    // optional .msg.OFCCardType FirstCardType = 14;
    if (has_firstcardtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->firstcardtype());
    }

    // optional .msg.OFCCardType MiddleCardType = 15;
    if (has_middlecardtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->middlecardtype());
    }

    // optional .msg.OFCCardType LastCardType = 16;
    if (has_lastcardtype()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->lastcardtype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool Refantasy = 17;
    if (has_refantasy()) {
      total_size += 2 + 1;
    }

  }
  // repeated .msg.OFCPlayerCard Card = 3;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  // repeated int32 HoleCard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->holecard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->holecard(i));
    }
    total_size += 1 * this->holecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPlayerInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPlayerInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPlayerInfo::MergeFrom(const OFCPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  holecard_.MergeFrom(from.holecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::msg::CommonPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_playerscore()) {
      set_playerscore(from.playerscore());
    }
    if (from.has_firstrowtype()) {
      set_firstrowtype(from.firstrowtype());
    }
    if (from.has_middlerowtype()) {
      set_middlerowtype(from.middlerowtype());
    }
    if (from.has_lastrowtype()) {
      set_lastrowtype(from.lastrowtype());
    }
    if (from.has_firstrowscore()) {
      set_firstrowscore(from.firstrowscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_middlerowscore()) {
      set_middlerowscore(from.middlerowscore());
    }
    if (from.has_lastrowscore()) {
      set_lastrowscore(from.lastrowscore());
    }
    if (from.has_fantasycards()) {
      set_fantasycards(from.fantasycards());
    }
    if (from.has_actionstatus()) {
      set_actionstatus(from.actionstatus());
    }
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::ActionRequest::MergeFrom(from.actionrequest());
    }
    if (from.has_firstcardtype()) {
      set_firstcardtype(from.firstcardtype());
    }
    if (from.has_middlecardtype()) {
      set_middlecardtype(from.middlecardtype());
    }
    if (from.has_lastcardtype()) {
      set_lastcardtype(from.lastcardtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_refantasy()) {
      set_refantasy(from.refantasy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPlayerInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPlayerInfo::CopyFrom(const OFCPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPlayerInfo::IsInitialized() const {

  return true;
}

void OFCPlayerInfo::Swap(OFCPlayerInfo* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(playerscore_, other->playerscore_);
    card_.Swap(&other->card_);
    holecard_.Swap(&other->holecard_);
    std::swap(firstrowtype_, other->firstrowtype_);
    std::swap(middlerowtype_, other->middlerowtype_);
    std::swap(lastrowtype_, other->lastrowtype_);
    std::swap(firstrowscore_, other->firstrowscore_);
    std::swap(middlerowscore_, other->middlerowscore_);
    std::swap(lastrowscore_, other->lastrowscore_);
    std::swap(fantasycards_, other->fantasycards_);
    std::swap(actionstatus_, other->actionstatus_);
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(firstcardtype_, other->firstcardtype_);
    std::swap(middlecardtype_, other->middlecardtype_);
    std::swap(lastcardtype_, other->lastcardtype_);
    std::swap(refantasy_, other->refantasy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPlayerInfo_descriptor_;
  metadata.reflection = OFCPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPlayerSetting::kSitoutNextHandFieldNumber;
#endif  // !_MSC_VER

OFCPlayerSetting::OFCPlayerSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPlayerSetting)
}

void OFCPlayerSetting::InitAsDefaultInstance() {
}

OFCPlayerSetting::OFCPlayerSetting(const OFCPlayerSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPlayerSetting)
}

void OFCPlayerSetting::SharedCtor() {
  _cached_size_ = 0;
  sitoutnexthand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPlayerSetting::~OFCPlayerSetting() {
  // @@protoc_insertion_point(destructor:msg.OFCPlayerSetting)
  SharedDtor();
}

void OFCPlayerSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCPlayerSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPlayerSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPlayerSetting_descriptor_;
}

const OFCPlayerSetting& OFCPlayerSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPlayerSetting* OFCPlayerSetting::default_instance_ = NULL;

OFCPlayerSetting* OFCPlayerSetting::New() const {
  return new OFCPlayerSetting;
}

void OFCPlayerSetting::Clear() {
  sitoutnexthand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPlayerSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPlayerSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool SitoutNextHand = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sitoutnexthand_)));
          set_has_sitoutnexthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPlayerSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPlayerSetting)
  return false;
#undef DO_
}

void OFCPlayerSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPlayerSetting)
  // optional bool SitoutNextHand = 1;
  if (has_sitoutnexthand()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->sitoutnexthand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPlayerSetting)
}

::google_public::protobuf::uint8* OFCPlayerSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPlayerSetting)
  // optional bool SitoutNextHand = 1;
  if (has_sitoutnexthand()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sitoutnexthand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPlayerSetting)
  return target;
}

int OFCPlayerSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool SitoutNextHand = 1;
    if (has_sitoutnexthand()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPlayerSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPlayerSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPlayerSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPlayerSetting::MergeFrom(const OFCPlayerSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitoutnexthand()) {
      set_sitoutnexthand(from.sitoutnexthand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPlayerSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPlayerSetting::CopyFrom(const OFCPlayerSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPlayerSetting::IsInitialized() const {

  return true;
}

void OFCPlayerSetting::Swap(OFCPlayerSetting* other) {
  if (other != this) {
    std::swap(sitoutnexthand_, other->sitoutnexthand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPlayerSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPlayerSetting_descriptor_;
  metadata.reflection = OFCPlayerSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPropUpdate::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

OFCPropUpdate::OFCPropUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPropUpdate)
}

void OFCPropUpdate::InitAsDefaultInstance() {
}

OFCPropUpdate::OFCPropUpdate(const OFCPropUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPropUpdate)
}

void OFCPropUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPropUpdate::~OFCPropUpdate() {
  // @@protoc_insertion_point(destructor:msg.OFCPropUpdate)
  SharedDtor();
}

void OFCPropUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCPropUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPropUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPropUpdate_descriptor_;
}

const OFCPropUpdate& OFCPropUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPropUpdate* OFCPropUpdate::default_instance_ = NULL;

OFCPropUpdate* OFCPropUpdate::New() const {
  return new OFCPropUpdate;
}

void OFCPropUpdate::Clear() {
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPropUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPropUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.OFCPlayerInfo PlayerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_PlayerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PlayerInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPropUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPropUpdate)
  return false;
#undef DO_
}

void OFCPropUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPropUpdate)
  // repeated .msg.OFCPlayerInfo PlayerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPropUpdate)
}

::google_public::protobuf::uint8* OFCPropUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPropUpdate)
  // repeated .msg.OFCPlayerInfo PlayerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPropUpdate)
  return target;
}

int OFCPropUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .msg.OFCPlayerInfo PlayerInfo = 1;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPropUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPropUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPropUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPropUpdate::MergeFrom(const OFCPropUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPropUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPropUpdate::CopyFrom(const OFCPropUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPropUpdate::IsInitialized() const {

  return true;
}

void OFCPropUpdate::Swap(OFCPropUpdate* other) {
  if (other != this) {
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPropUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPropUpdate_descriptor_;
  metadata.reflection = OFCPropUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCResult::kOFCPlayerHandResultFieldNumber;
const int OFCResult::kUserCompareFieldNumber;
#endif  // !_MSC_VER

OFCResult::OFCResult()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCResult)
}

void OFCResult::InitAsDefaultInstance() {
}

OFCResult::OFCResult(const OFCResult& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCResult)
}

void OFCResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCResult::~OFCResult() {
  // @@protoc_insertion_point(destructor:msg.OFCResult)
  SharedDtor();
}

void OFCResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCResult_descriptor_;
}

const OFCResult& OFCResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCResult* OFCResult::default_instance_ = NULL;

OFCResult* OFCResult::New() const {
  return new OFCResult;
}

void OFCResult::Clear() {
  ofcplayerhandresult_.Clear();
  usercompare_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCResult::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCResult)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.OFCPlayerHandResult OFCPlayerHandResult = 1;
      case 1: {
        if (tag == 10) {
         parse_OFCPlayerHandResult:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ofcplayerhandresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_OFCPlayerHandResult;
        if (input->ExpectTag(18)) goto parse_UserCompare;
        break;
      }

      // repeated .msg.UserCompare UserCompare = 2;
      case 2: {
        if (tag == 18) {
         parse_UserCompare:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercompare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserCompare;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCResult)
  return false;
#undef DO_
}

void OFCResult::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCResult)
  // repeated .msg.OFCPlayerHandResult OFCPlayerHandResult = 1;
  for (int i = 0; i < this->ofcplayerhandresult_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ofcplayerhandresult(i), output);
  }

  // repeated .msg.UserCompare UserCompare = 2;
  for (int i = 0; i < this->usercompare_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usercompare(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCResult)
}

::google_public::protobuf::uint8* OFCResult::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCResult)
  // repeated .msg.OFCPlayerHandResult OFCPlayerHandResult = 1;
  for (int i = 0; i < this->ofcplayerhandresult_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ofcplayerhandresult(i), target);
  }

  // repeated .msg.UserCompare UserCompare = 2;
  for (int i = 0; i < this->usercompare_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usercompare(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCResult)
  return target;
}

int OFCResult::ByteSize() const {
  int total_size = 0;

  // repeated .msg.OFCPlayerHandResult OFCPlayerHandResult = 1;
  total_size += 1 * this->ofcplayerhandresult_size();
  for (int i = 0; i < this->ofcplayerhandresult_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ofcplayerhandresult(i));
  }

  // repeated .msg.UserCompare UserCompare = 2;
  total_size += 1 * this->usercompare_size();
  for (int i = 0; i < this->usercompare_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercompare(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCResult::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCResult* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCResult*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCResult::MergeFrom(const OFCResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ofcplayerhandresult_.MergeFrom(from.ofcplayerhandresult_);
  usercompare_.MergeFrom(from.usercompare_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCResult::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCResult::CopyFrom(const OFCResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCResult::IsInitialized() const {

  return true;
}

void OFCResult::Swap(OFCResult* other) {
  if (other != this) {
    ofcplayerhandresult_.Swap(&other->ofcplayerhandresult_);
    usercompare_.Swap(&other->usercompare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCResult_descriptor_;
  metadata.reflection = OFCResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_600_OFCRefreshAll::kCommonRoomInfoFieldNumber;
const int Processor_600_OFCRefreshAll::kPropUpdateFieldNumber;
const int Processor_600_OFCRefreshAll::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_600_OFCRefreshAll::Processor_600_OFCRefreshAll()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_600_OFCRefreshAll)
}

void Processor_600_OFCRefreshAll::InitAsDefaultInstance() {
  commonroominfo_ = const_cast< ::msg::CommonRoomInfo*>(&::msg::CommonRoomInfo::default_instance());
  propupdate_ = const_cast< ::msg::OFCPropUpdate*>(&::msg::OFCPropUpdate::default_instance());
  settings_ = const_cast< ::msg::OFCPlayerSetting*>(&::msg::OFCPlayerSetting::default_instance());
}

Processor_600_OFCRefreshAll::Processor_600_OFCRefreshAll(const Processor_600_OFCRefreshAll& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_600_OFCRefreshAll)
}

void Processor_600_OFCRefreshAll::SharedCtor() {
  _cached_size_ = 0;
  commonroominfo_ = NULL;
  propupdate_ = NULL;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_600_OFCRefreshAll::~Processor_600_OFCRefreshAll() {
  // @@protoc_insertion_point(destructor:msg.Processor_600_OFCRefreshAll)
  SharedDtor();
}

void Processor_600_OFCRefreshAll::SharedDtor() {
  if (this != default_instance_) {
    delete commonroominfo_;
    delete propupdate_;
    delete settings_;
  }
}

void Processor_600_OFCRefreshAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_600_OFCRefreshAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_600_OFCRefreshAll_descriptor_;
}

const Processor_600_OFCRefreshAll& Processor_600_OFCRefreshAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_600_OFCRefreshAll* Processor_600_OFCRefreshAll::default_instance_ = NULL;

Processor_600_OFCRefreshAll* Processor_600_OFCRefreshAll::New() const {
  return new Processor_600_OFCRefreshAll;
}

void Processor_600_OFCRefreshAll::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_commonroominfo()) {
      if (commonroominfo_ != NULL) commonroominfo_->::msg::CommonRoomInfo::Clear();
    }
    if (has_propupdate()) {
      if (propupdate_ != NULL) propupdate_->::msg::OFCPropUpdate::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::OFCPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_600_OFCRefreshAll::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_600_OFCRefreshAll)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commonroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PropUpdate;
        break;
      }

      // optional .msg.OFCPropUpdate PropUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_PropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Settings;
        break;
      }

      // optional .msg.OFCPlayerSetting Settings = 3;
      case 3: {
        if (tag == 26) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_600_OFCRefreshAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_600_OFCRefreshAll)
  return false;
#undef DO_
}

void Processor_600_OFCRefreshAll::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_600_OFCRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commonroominfo(), output);
  }

  // optional .msg.OFCPropUpdate PropUpdate = 2;
  if (has_propupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propupdate(), output);
  }

  // optional .msg.OFCPlayerSetting Settings = 3;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_600_OFCRefreshAll)
}

::google_public::protobuf::uint8* Processor_600_OFCRefreshAll::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_600_OFCRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commonroominfo(), target);
  }

  // optional .msg.OFCPropUpdate PropUpdate = 2;
  if (has_propupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propupdate(), target);
  }

  // optional .msg.OFCPlayerSetting Settings = 3;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_600_OFCRefreshAll)
  return target;
}

int Processor_600_OFCRefreshAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
    if (has_commonroominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commonroominfo());
    }

    // optional .msg.OFCPropUpdate PropUpdate = 2;
    if (has_propupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propupdate());
    }

    // optional .msg.OFCPlayerSetting Settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_600_OFCRefreshAll::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_600_OFCRefreshAll* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_600_OFCRefreshAll*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_600_OFCRefreshAll::MergeFrom(const Processor_600_OFCRefreshAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commonroominfo()) {
      mutable_commonroominfo()->::msg::CommonRoomInfo::MergeFrom(from.commonroominfo());
    }
    if (from.has_propupdate()) {
      mutable_propupdate()->::msg::OFCPropUpdate::MergeFrom(from.propupdate());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::OFCPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_600_OFCRefreshAll::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_600_OFCRefreshAll::CopyFrom(const Processor_600_OFCRefreshAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_600_OFCRefreshAll::IsInitialized() const {

  return true;
}

void Processor_600_OFCRefreshAll::Swap(Processor_600_OFCRefreshAll* other) {
  if (other != this) {
    std::swap(commonroominfo_, other->commonroominfo_);
    std::swap(propupdate_, other->propupdate_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_600_OFCRefreshAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_600_OFCRefreshAll_descriptor_;
  metadata.reflection = Processor_600_OFCRefreshAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_601_OFCReceivePropUpdate::kRoomIdFieldNumber;
const int Processor_601_OFCReceivePropUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

Processor_601_OFCReceivePropUpdate::Processor_601_OFCReceivePropUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_601_OFCReceivePropUpdate)
}

void Processor_601_OFCReceivePropUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::msg::OFCPropUpdate*>(&::msg::OFCPropUpdate::default_instance());
}

Processor_601_OFCReceivePropUpdate::Processor_601_OFCReceivePropUpdate(const Processor_601_OFCReceivePropUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_601_OFCReceivePropUpdate)
}

void Processor_601_OFCReceivePropUpdate::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_601_OFCReceivePropUpdate::~Processor_601_OFCReceivePropUpdate() {
  // @@protoc_insertion_point(destructor:msg.Processor_601_OFCReceivePropUpdate)
  SharedDtor();
}

void Processor_601_OFCReceivePropUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void Processor_601_OFCReceivePropUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_601_OFCReceivePropUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_601_OFCReceivePropUpdate_descriptor_;
}

const Processor_601_OFCReceivePropUpdate& Processor_601_OFCReceivePropUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_601_OFCReceivePropUpdate* Processor_601_OFCReceivePropUpdate::default_instance_ = NULL;

Processor_601_OFCReceivePropUpdate* Processor_601_OFCReceivePropUpdate::New() const {
  return new Processor_601_OFCReceivePropUpdate;
}

void Processor_601_OFCReceivePropUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_update()) {
      if (update_ != NULL) update_->::msg::OFCPropUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_601_OFCReceivePropUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_601_OFCReceivePropUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Update;
        break;
      }

      // optional .msg.OFCPropUpdate Update = 2;
      case 2: {
        if (tag == 18) {
         parse_Update:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_601_OFCReceivePropUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_601_OFCReceivePropUpdate)
  return false;
#undef DO_
}

void Processor_601_OFCReceivePropUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_601_OFCReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.OFCPropUpdate Update = 2;
  if (has_update()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_601_OFCReceivePropUpdate)
}

::google_public::protobuf::uint8* Processor_601_OFCReceivePropUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_601_OFCReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.OFCPropUpdate Update = 2;
  if (has_update()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_601_OFCReceivePropUpdate)
  return target;
}

int Processor_601_OFCReceivePropUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.OFCPropUpdate Update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_601_OFCReceivePropUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_601_OFCReceivePropUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_601_OFCReceivePropUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_601_OFCReceivePropUpdate::MergeFrom(const Processor_601_OFCReceivePropUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_update()) {
      mutable_update()->::msg::OFCPropUpdate::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_601_OFCReceivePropUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_601_OFCReceivePropUpdate::CopyFrom(const Processor_601_OFCReceivePropUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_601_OFCReceivePropUpdate::IsInitialized() const {

  return true;
}

void Processor_601_OFCReceivePropUpdate::Swap(Processor_601_OFCReceivePropUpdate* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_601_OFCReceivePropUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_601_OFCReceivePropUpdate_descriptor_;
  metadata.reflection = Processor_601_OFCReceivePropUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPlayerCard::kCardLocationFieldNumber;
const int OFCPlayerCard::kCardFieldNumber;
#endif  // !_MSC_VER

OFCPlayerCard::OFCPlayerCard()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPlayerCard)
}

void OFCPlayerCard::InitAsDefaultInstance() {
}

OFCPlayerCard::OFCPlayerCard(const OFCPlayerCard& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPlayerCard)
}

void OFCPlayerCard::SharedCtor() {
  _cached_size_ = 0;
  cardlocation_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPlayerCard::~OFCPlayerCard() {
  // @@protoc_insertion_point(destructor:msg.OFCPlayerCard)
  SharedDtor();
}

void OFCPlayerCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCPlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPlayerCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPlayerCard_descriptor_;
}

const OFCPlayerCard& OFCPlayerCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPlayerCard* OFCPlayerCard::default_instance_ = NULL;

OFCPlayerCard* OFCPlayerCard::New() const {
  return new OFCPlayerCard;
}

void OFCPlayerCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OFCPlayerCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cardlocation_, card_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPlayerCard::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPlayerCard)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.OFCCardLocation CardLocation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCCardLocation_IsValid(value)) {
            set_cardlocation(static_cast< ::msg::OFCCardLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (tag == 16) {
         parse_Card:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPlayerCard)
  return false;
#undef DO_
}

void OFCPlayerCard::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPlayerCard)
  // optional .msg.OFCCardLocation CardLocation = 1;
  if (has_cardlocation()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cardlocation(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPlayerCard)
}

::google_public::protobuf::uint8* OFCPlayerCard::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPlayerCard)
  // optional .msg.OFCCardLocation CardLocation = 1;
  if (has_cardlocation()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cardlocation(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPlayerCard)
  return target;
}

int OFCPlayerCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.OFCCardLocation CardLocation = 1;
    if (has_cardlocation()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->cardlocation());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPlayerCard::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPlayerCard* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPlayerCard*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPlayerCard::MergeFrom(const OFCPlayerCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardlocation()) {
      set_cardlocation(from.cardlocation());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPlayerCard::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPlayerCard::CopyFrom(const OFCPlayerCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPlayerCard::IsInitialized() const {

  return true;
}

void OFCPlayerCard::Swap(OFCPlayerCard* other) {
  if (other != this) {
    std::swap(cardlocation_, other->cardlocation_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPlayerCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPlayerCard_descriptor_;
  metadata.reflection = OFCPlayerCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_602_OFCSendPlayerCard::kRoomIdFieldNumber;
const int Processor_602_OFCSendPlayerCard::kCardLocationFieldNumber;
#endif  // !_MSC_VER

Processor_602_OFCSendPlayerCard::Processor_602_OFCSendPlayerCard()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_602_OFCSendPlayerCard)
}

void Processor_602_OFCSendPlayerCard::InitAsDefaultInstance() {
}

Processor_602_OFCSendPlayerCard::Processor_602_OFCSendPlayerCard(const Processor_602_OFCSendPlayerCard& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_602_OFCSendPlayerCard)
}

void Processor_602_OFCSendPlayerCard::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_602_OFCSendPlayerCard::~Processor_602_OFCSendPlayerCard() {
  // @@protoc_insertion_point(destructor:msg.Processor_602_OFCSendPlayerCard)
  SharedDtor();
}

void Processor_602_OFCSendPlayerCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_602_OFCSendPlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_602_OFCSendPlayerCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_602_OFCSendPlayerCard_descriptor_;
}

const Processor_602_OFCSendPlayerCard& Processor_602_OFCSendPlayerCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_602_OFCSendPlayerCard* Processor_602_OFCSendPlayerCard::default_instance_ = NULL;

Processor_602_OFCSendPlayerCard* Processor_602_OFCSendPlayerCard::New() const {
  return new Processor_602_OFCSendPlayerCard;
}

void Processor_602_OFCSendPlayerCard::Clear() {
  roomid_ = 0;
  cardlocation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_602_OFCSendPlayerCard::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_602_OFCSendPlayerCard)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CardLocation;
        break;
      }

      // repeated .msg.OFCCardLocation CardLocation = 2;
      case 2: {
        if (tag == 16) {
         parse_CardLocation:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCCardLocation_IsValid(value)) {
            add_cardlocation(static_cast< ::msg::OFCCardLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::OFCCardLocation_IsValid,
                 this->mutable_cardlocation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CardLocation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_602_OFCSendPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_602_OFCSendPlayerCard)
  return false;
#undef DO_
}

void Processor_602_OFCSendPlayerCard::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_602_OFCSendPlayerCard)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated .msg.OFCCardLocation CardLocation = 2;
  for (int i = 0; i < this->cardlocation_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cardlocation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_602_OFCSendPlayerCard)
}

::google_public::protobuf::uint8* Processor_602_OFCSendPlayerCard::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_602_OFCSendPlayerCard)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated .msg.OFCCardLocation CardLocation = 2;
  for (int i = 0; i < this->cardlocation_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cardlocation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_602_OFCSendPlayerCard)
  return target;
}

int Processor_602_OFCSendPlayerCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .msg.OFCCardLocation CardLocation = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardlocation_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->cardlocation(i));
    }
    total_size += 1 * this->cardlocation_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_602_OFCSendPlayerCard::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_602_OFCSendPlayerCard* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_602_OFCSendPlayerCard*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_602_OFCSendPlayerCard::MergeFrom(const Processor_602_OFCSendPlayerCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlocation_.MergeFrom(from.cardlocation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_602_OFCSendPlayerCard::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_602_OFCSendPlayerCard::CopyFrom(const Processor_602_OFCSendPlayerCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_602_OFCSendPlayerCard::IsInitialized() const {

  return true;
}

void Processor_602_OFCSendPlayerCard::Swap(Processor_602_OFCSendPlayerCard* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    cardlocation_.Swap(&other->cardlocation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_602_OFCSendPlayerCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_602_OFCSendPlayerCard_descriptor_;
  metadata.reflection = Processor_602_OFCSendPlayerCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCompare::kUserIDFieldNumber;
const int UserCompare::kFirstRowComparScoreFieldNumber;
const int UserCompare::kMiddleRowCompareScoreFieldNumber;
const int UserCompare::kLastRowCompareScoreFieldNumber;
const int UserCompare::kCompareScoreFieldNumber;
#endif  // !_MSC_VER

UserCompare::UserCompare()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserCompare)
}

void UserCompare::InitAsDefaultInstance() {
}

UserCompare::UserCompare(const UserCompare& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserCompare)
}

void UserCompare::SharedCtor() {
  _cached_size_ = 0;
  firstrowcomparscore_ = 0;
  middlerowcomparescore_ = 0;
  lastrowcomparescore_ = 0;
  comparescore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCompare::~UserCompare() {
  // @@protoc_insertion_point(destructor:msg.UserCompare)
  SharedDtor();
}

void UserCompare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCompare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserCompare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCompare_descriptor_;
}

const UserCompare& UserCompare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserCompare* UserCompare::default_instance_ = NULL;

UserCompare* UserCompare::New() const {
  return new UserCompare;
}

void UserCompare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCompare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(firstrowcomparscore_, comparescore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  userid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCompare::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserCompare)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 UserID = 1;
      case 1: {
        if (tag == 8) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_userid())));
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UserID;
        if (input->ExpectTag(16)) goto parse_FirstRowComparScore;
        break;
      }

      // optional int32 FirstRowComparScore = 2;
      case 2: {
        if (tag == 16) {
         parse_FirstRowComparScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstrowcomparscore_)));
          set_has_firstrowcomparscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MiddleRowCompareScore;
        break;
      }

      // optional int32 MiddleRowCompareScore = 3;
      case 3: {
        if (tag == 24) {
         parse_MiddleRowCompareScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &middlerowcomparescore_)));
          set_has_middlerowcomparescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LastRowCompareScore;
        break;
      }

      // optional int32 LastRowCompareScore = 4;
      case 4: {
        if (tag == 32) {
         parse_LastRowCompareScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrowcomparescore_)));
          set_has_lastrowcomparescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CompareScore;
        break;
      }

      // optional int32 CompareScore = 5;
      case 5: {
        if (tag == 40) {
         parse_CompareScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comparescore_)));
          set_has_comparescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserCompare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserCompare)
  return false;
#undef DO_
}

void UserCompare::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserCompare)
  // repeated int32 UserID = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->userid(i), output);
  }

  // optional int32 FirstRowComparScore = 2;
  if (has_firstrowcomparscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->firstrowcomparscore(), output);
  }

  // optional int32 MiddleRowCompareScore = 3;
  if (has_middlerowcomparescore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->middlerowcomparescore(), output);
  }

  // optional int32 LastRowCompareScore = 4;
  if (has_lastrowcomparescore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastrowcomparescore(), output);
  }

  // optional int32 CompareScore = 5;
  if (has_comparescore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->comparescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserCompare)
}

::google_public::protobuf::uint8* UserCompare::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserCompare)
  // repeated int32 UserID = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->userid(i), target);
  }

  // optional int32 FirstRowComparScore = 2;
  if (has_firstrowcomparscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->firstrowcomparscore(), target);
  }

  // optional int32 MiddleRowCompareScore = 3;
  if (has_middlerowcomparescore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->middlerowcomparescore(), target);
  }

  // optional int32 LastRowCompareScore = 4;
  if (has_lastrowcomparescore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastrowcomparescore(), target);
  }

  // optional int32 CompareScore = 5;
  if (has_comparescore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->comparescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserCompare)
  return target;
}

int UserCompare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 FirstRowComparScore = 2;
    if (has_firstrowcomparscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->firstrowcomparscore());
    }

    // optional int32 MiddleRowCompareScore = 3;
    if (has_middlerowcomparescore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->middlerowcomparescore());
    }

    // optional int32 LastRowCompareScore = 4;
    if (has_lastrowcomparescore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrowcomparescore());
    }

    // optional int32 CompareScore = 5;
    if (has_comparescore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->comparescore());
    }

  }
  // repeated int32 UserID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCompare::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCompare* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserCompare*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCompare::MergeFrom(const UserCompare& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_firstrowcomparscore()) {
      set_firstrowcomparscore(from.firstrowcomparscore());
    }
    if (from.has_middlerowcomparescore()) {
      set_middlerowcomparescore(from.middlerowcomparescore());
    }
    if (from.has_lastrowcomparescore()) {
      set_lastrowcomparescore(from.lastrowcomparescore());
    }
    if (from.has_comparescore()) {
      set_comparescore(from.comparescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCompare::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCompare::CopyFrom(const UserCompare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCompare::IsInitialized() const {

  return true;
}

void UserCompare::Swap(UserCompare* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    std::swap(firstrowcomparscore_, other->firstrowcomparscore_);
    std::swap(middlerowcomparescore_, other->middlerowcomparescore_);
    std::swap(lastrowcomparescore_, other->lastrowcomparescore_);
    std::swap(comparescore_, other->comparescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserCompare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserCompare_descriptor_;
  metadata.reflection = UserCompare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPlayerHandResult::kPlayerIdFieldNumber;
const int OFCPlayerHandResult::kScoreFieldNumber;
#endif  // !_MSC_VER

OFCPlayerHandResult::OFCPlayerHandResult()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPlayerHandResult)
}

void OFCPlayerHandResult::InitAsDefaultInstance() {
}

OFCPlayerHandResult::OFCPlayerHandResult(const OFCPlayerHandResult& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPlayerHandResult)
}

void OFCPlayerHandResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPlayerHandResult::~OFCPlayerHandResult() {
  // @@protoc_insertion_point(destructor:msg.OFCPlayerHandResult)
  SharedDtor();
}

void OFCPlayerHandResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCPlayerHandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPlayerHandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPlayerHandResult_descriptor_;
}

const OFCPlayerHandResult& OFCPlayerHandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPlayerHandResult* OFCPlayerHandResult::default_instance_ = NULL;

OFCPlayerHandResult* OFCPlayerHandResult::New() const {
  return new OFCPlayerHandResult;
}

void OFCPlayerHandResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OFCPlayerHandResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPlayerHandResult::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPlayerHandResult)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional int32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPlayerHandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPlayerHandResult)
  return false;
#undef DO_
}

void OFCPlayerHandResult::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPlayerHandResult)
  // optional int32 PlayerId = 1;
  if (has_playerid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional int32 Score = 2;
  if (has_score()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPlayerHandResult)
}

::google_public::protobuf::uint8* OFCPlayerHandResult::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPlayerHandResult)
  // optional int32 PlayerId = 1;
  if (has_playerid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional int32 Score = 2;
  if (has_score()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPlayerHandResult)
  return target;
}

int OFCPlayerHandResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PlayerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPlayerHandResult::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPlayerHandResult* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPlayerHandResult*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPlayerHandResult::MergeFrom(const OFCPlayerHandResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPlayerHandResult::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPlayerHandResult::CopyFrom(const OFCPlayerHandResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPlayerHandResult::IsInitialized() const {

  return true;
}

void OFCPlayerHandResult::Swap(OFCPlayerHandResult* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPlayerHandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPlayerHandResult_descriptor_;
  metadata.reflection = OFCPlayerHandResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_610_OFCReceiveResult::kRoomIdFieldNumber;
const int Processor_610_OFCReceiveResult::kHandIdFieldNumber;
const int Processor_610_OFCReceiveResult::kResultFieldNumber;
#endif  // !_MSC_VER

Processor_610_OFCReceiveResult::Processor_610_OFCReceiveResult()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_610_OFCReceiveResult)
}

void Processor_610_OFCReceiveResult::InitAsDefaultInstance() {
  result_ = const_cast< ::msg::OFCResult*>(&::msg::OFCResult::default_instance());
}

Processor_610_OFCReceiveResult::Processor_610_OFCReceiveResult(const Processor_610_OFCReceiveResult& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_610_OFCReceiveResult)
}

void Processor_610_OFCReceiveResult::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  handid_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_610_OFCReceiveResult::~Processor_610_OFCReceiveResult() {
  // @@protoc_insertion_point(destructor:msg.Processor_610_OFCReceiveResult)
  SharedDtor();
}

void Processor_610_OFCReceiveResult::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void Processor_610_OFCReceiveResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_610_OFCReceiveResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_610_OFCReceiveResult_descriptor_;
}

const Processor_610_OFCReceiveResult& Processor_610_OFCReceiveResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_610_OFCReceiveResult* Processor_610_OFCReceiveResult::default_instance_ = NULL;

Processor_610_OFCReceiveResult* Processor_610_OFCReceiveResult::New() const {
  return new Processor_610_OFCReceiveResult;
}

void Processor_610_OFCReceiveResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_610_OFCReceiveResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, handid_);
    if (has_result()) {
      if (result_ != NULL) result_->::msg::OFCResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_610_OFCReceiveResult::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_610_OFCReceiveResult)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandId;
        break;
      }

      // optional int32 HandId = 2;
      case 2: {
        if (tag == 16) {
         parse_HandId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Result;
        break;
      }

      // optional .msg.OFCResult Result = 3;
      case 3: {
        if (tag == 26) {
         parse_Result:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_610_OFCReceiveResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_610_OFCReceiveResult)
  return false;
#undef DO_
}

void Processor_610_OFCReceiveResult::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_610_OFCReceiveResult)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->handid(), output);
  }

  // optional .msg.OFCResult Result = 3;
  if (has_result()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_610_OFCReceiveResult)
}

::google_public::protobuf::uint8* Processor_610_OFCReceiveResult::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_610_OFCReceiveResult)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handid(), target);
  }

  // optional .msg.OFCResult Result = 3;
  if (has_result()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_610_OFCReceiveResult)
  return target;
}

int Processor_610_OFCReceiveResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 HandId = 2;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional .msg.OFCResult Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_610_OFCReceiveResult::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_610_OFCReceiveResult* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_610_OFCReceiveResult*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_610_OFCReceiveResult::MergeFrom(const Processor_610_OFCReceiveResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_result()) {
      mutable_result()->::msg::OFCResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_610_OFCReceiveResult::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_610_OFCReceiveResult::CopyFrom(const Processor_610_OFCReceiveResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_610_OFCReceiveResult::IsInitialized() const {

  return true;
}

void Processor_610_OFCReceiveResult::Swap(Processor_610_OFCReceiveResult* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(handid_, other->handid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_610_OFCReceiveResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_610_OFCReceiveResult_descriptor_;
  metadata.reflection = Processor_610_OFCReceiveResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_615_OFCSendSetting::kRoomIdFieldNumber;
const int Processor_615_OFCSendSetting::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_615_OFCSendSetting::Processor_615_OFCSendSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_615_OFCSendSetting)
}

void Processor_615_OFCSendSetting::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::OFCPlayerSetting*>(&::msg::OFCPlayerSetting::default_instance());
}

Processor_615_OFCSendSetting::Processor_615_OFCSendSetting(const Processor_615_OFCSendSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_615_OFCSendSetting)
}

void Processor_615_OFCSendSetting::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_615_OFCSendSetting::~Processor_615_OFCSendSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_615_OFCSendSetting)
  SharedDtor();
}

void Processor_615_OFCSendSetting::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_615_OFCSendSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_615_OFCSendSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_615_OFCSendSetting_descriptor_;
}

const Processor_615_OFCSendSetting& Processor_615_OFCSendSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_615_OFCSendSetting* Processor_615_OFCSendSetting::default_instance_ = NULL;

Processor_615_OFCSendSetting* Processor_615_OFCSendSetting::New() const {
  return new Processor_615_OFCSendSetting;
}

void Processor_615_OFCSendSetting::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::OFCPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_615_OFCSendSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_615_OFCSendSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.OFCPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_615_OFCSendSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_615_OFCSendSetting)
  return false;
#undef DO_
}

void Processor_615_OFCSendSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_615_OFCSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.OFCPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_615_OFCSendSetting)
}

::google_public::protobuf::uint8* Processor_615_OFCSendSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_615_OFCSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.OFCPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_615_OFCSendSetting)
  return target;
}

int Processor_615_OFCSendSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.OFCPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_615_OFCSendSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_615_OFCSendSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_615_OFCSendSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_615_OFCSendSetting::MergeFrom(const Processor_615_OFCSendSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::OFCPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_615_OFCSendSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_615_OFCSendSetting::CopyFrom(const Processor_615_OFCSendSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_615_OFCSendSetting::IsInitialized() const {

  return true;
}

void Processor_615_OFCSendSetting::Swap(Processor_615_OFCSendSetting* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_615_OFCSendSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_615_OFCSendSetting_descriptor_;
  metadata.reflection = Processor_615_OFCSendSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_616_OFCReceiveSettingChange::kRoomIdFieldNumber;
const int Processor_616_OFCReceiveSettingChange::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_616_OFCReceiveSettingChange::Processor_616_OFCReceiveSettingChange()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_616_OFCReceiveSettingChange)
}

void Processor_616_OFCReceiveSettingChange::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::OFCPlayerSetting*>(&::msg::OFCPlayerSetting::default_instance());
}

Processor_616_OFCReceiveSettingChange::Processor_616_OFCReceiveSettingChange(const Processor_616_OFCReceiveSettingChange& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_616_OFCReceiveSettingChange)
}

void Processor_616_OFCReceiveSettingChange::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_616_OFCReceiveSettingChange::~Processor_616_OFCReceiveSettingChange() {
  // @@protoc_insertion_point(destructor:msg.Processor_616_OFCReceiveSettingChange)
  SharedDtor();
}

void Processor_616_OFCReceiveSettingChange::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_616_OFCReceiveSettingChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_616_OFCReceiveSettingChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_616_OFCReceiveSettingChange_descriptor_;
}

const Processor_616_OFCReceiveSettingChange& Processor_616_OFCReceiveSettingChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_616_OFCReceiveSettingChange* Processor_616_OFCReceiveSettingChange::default_instance_ = NULL;

Processor_616_OFCReceiveSettingChange* Processor_616_OFCReceiveSettingChange::New() const {
  return new Processor_616_OFCReceiveSettingChange;
}

void Processor_616_OFCReceiveSettingChange::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::OFCPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_616_OFCReceiveSettingChange::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_616_OFCReceiveSettingChange)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.OFCPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_616_OFCReceiveSettingChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_616_OFCReceiveSettingChange)
  return false;
#undef DO_
}

void Processor_616_OFCReceiveSettingChange::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_616_OFCReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.OFCPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_616_OFCReceiveSettingChange)
}

::google_public::protobuf::uint8* Processor_616_OFCReceiveSettingChange::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_616_OFCReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.OFCPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_616_OFCReceiveSettingChange)
  return target;
}

int Processor_616_OFCReceiveSettingChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.OFCPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_616_OFCReceiveSettingChange::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_616_OFCReceiveSettingChange* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_616_OFCReceiveSettingChange*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_616_OFCReceiveSettingChange::MergeFrom(const Processor_616_OFCReceiveSettingChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::OFCPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_616_OFCReceiveSettingChange::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_616_OFCReceiveSettingChange::CopyFrom(const Processor_616_OFCReceiveSettingChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_616_OFCReceiveSettingChange::IsInitialized() const {

  return true;
}

void Processor_616_OFCReceiveSettingChange::Swap(Processor_616_OFCReceiveSettingChange* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_616_OFCReceiveSettingChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_616_OFCReceiveSettingChange_descriptor_;
  metadata.reflection = Processor_616_OFCReceiveSettingChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongPlayerInfo::kPlayerInfoFieldNumber;
const int MahjongPlayerInfo::kPlayerScoreFieldNumber;
const int MahjongPlayerInfo::kCardFieldNumber;
const int MahjongPlayerInfo::kDiscardFieldNumber;
const int MahjongPlayerInfo::kFuFieldNumber;
const int MahjongPlayerInfo::kActionRequestFieldNumber;
const int MahjongPlayerInfo::kScoreChangeFieldNumber;
const int MahjongPlayerInfo::kDrawCardFieldNumber;
const int MahjongPlayerInfo::kCanWinByOtherFieldNumber;
const int MahjongPlayerInfo::kSuitFieldNumber;
const int MahjongPlayerInfo::kTingFieldNumber;
#endif  // !_MSC_VER

MahjongPlayerInfo::MahjongPlayerInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongPlayerInfo)
}

void MahjongPlayerInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::msg::CommonPlayerInfo*>(&::msg::CommonPlayerInfo::default_instance());
  actionrequest_ = const_cast< ::msg::MahjongActionRequest*>(&::msg::MahjongActionRequest::default_instance());
}

MahjongPlayerInfo::MahjongPlayerInfo(const MahjongPlayerInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongPlayerInfo)
}

void MahjongPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  playerscore_ = 0;
  actionrequest_ = NULL;
  drawcard_ = 0;
  canwinbyother_ = false;
  suit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongPlayerInfo::~MahjongPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.MahjongPlayerInfo)
  SharedDtor();
}

void MahjongPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
    delete actionrequest_;
  }
}

void MahjongPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongPlayerInfo_descriptor_;
}

const MahjongPlayerInfo& MahjongPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongPlayerInfo* MahjongPlayerInfo::default_instance_ = NULL;

MahjongPlayerInfo* MahjongPlayerInfo::New() const {
  return new MahjongPlayerInfo;
}

void MahjongPlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongPlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 163) {
    ZR_(playerscore_, drawcard_);
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::msg::CommonPlayerInfo::Clear();
    }
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::MahjongActionRequest::Clear();
    }
  }
  ZR_(canwinbyother_, suit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_.Clear();
  discard_.Clear();
  fu_.Clear();
  scorechange_.Clear();
  ting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongPlayerInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongPlayerInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommonPlayerInfo PlayerInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerScore;
        break;
      }

      // optional int32 PlayerScore = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerscore_)));
          set_has_playerscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // repeated .msg.MahjongCard Card = 3;
      case 3: {
        if (tag == 24) {
         parse_Card:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        if (input->ExpectTag(32)) goto parse_Discard;
        break;
      }

      // repeated .msg.MahjongCard Discard = 4;
      case 4: {
        if (tag == 32) {
         parse_Discard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_discard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_discard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Discard;
        if (input->ExpectTag(42)) goto parse_Fu;
        break;
      }

      // repeated .msg.MahjongFu Fu = 5;
      case 5: {
        if (tag == 42) {
         parse_Fu:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Fu;
        if (input->ExpectTag(50)) goto parse_ActionRequest;
        break;
      }

      // optional .msg.MahjongActionRequest ActionRequest = 6;
      case 6: {
        if (tag == 50) {
         parse_ActionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ScoreChange;
        break;
      }

      // repeated .msg.MahjongScoreChange ScoreChange = 7;
      case 7: {
        if (tag == 58) {
         parse_ScoreChange:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scorechange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ScoreChange;
        if (input->ExpectTag(64)) goto parse_DrawCard;
        break;
      }

      // optional .msg.MahjongCard DrawCard = 8;
      case 8: {
        if (tag == 64) {
         parse_DrawCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_drawcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CanWinByOther;
        break;
      }

      // optional bool CanWinByOther = 9;
      case 9: {
        if (tag == 72) {
         parse_CanWinByOther:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canwinbyother_)));
          set_has_canwinbyother();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Suit;
        break;
      }

      // optional .msg.MahjongSuit Suit = 10;
      case 10: {
        if (tag == 80) {
         parse_Suit:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongSuit_IsValid(value)) {
            set_suit(static_cast< ::msg::MahjongSuit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Ting;
        break;
      }

      // repeated .msg.MahjongTing Ting = 11;
      case 11: {
        if (tag == 90) {
         parse_Ting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Ting;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongPlayerInfo)
  return false;
#undef DO_
}

void MahjongPlayerInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongPlayerInfo)
  // optional .msg.CommonPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  // optional int32 PlayerScore = 2;
  if (has_playerscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerscore(), output);
  }

  // repeated .msg.MahjongCard Card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->card(i), output);
  }

  // repeated .msg.MahjongCard Discard = 4;
  for (int i = 0; i < this->discard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->discard(i), output);
  }

  // repeated .msg.MahjongFu Fu = 5;
  for (int i = 0; i < this->fu_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fu(i), output);
  }

  // optional .msg.MahjongActionRequest ActionRequest = 6;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->actionrequest(), output);
  }

  // repeated .msg.MahjongScoreChange ScoreChange = 7;
  for (int i = 0; i < this->scorechange_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scorechange(i), output);
  }

  // optional .msg.MahjongCard DrawCard = 8;
  if (has_drawcard()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->drawcard(), output);
  }

  // optional bool CanWinByOther = 9;
  if (has_canwinbyother()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(9, this->canwinbyother(), output);
  }

  // optional .msg.MahjongSuit Suit = 10;
  if (has_suit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->suit(), output);
  }

  // repeated .msg.MahjongTing Ting = 11;
  for (int i = 0; i < this->ting_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongPlayerInfo)
}

::google_public::protobuf::uint8* MahjongPlayerInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongPlayerInfo)
  // optional .msg.CommonPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  // optional int32 PlayerScore = 2;
  if (has_playerscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerscore(), target);
  }

  // repeated .msg.MahjongCard Card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->card(i), target);
  }

  // repeated .msg.MahjongCard Discard = 4;
  for (int i = 0; i < this->discard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->discard(i), target);
  }

  // repeated .msg.MahjongFu Fu = 5;
  for (int i = 0; i < this->fu_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fu(i), target);
  }

  // optional .msg.MahjongActionRequest ActionRequest = 6;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->actionrequest(), target);
  }

  // repeated .msg.MahjongScoreChange ScoreChange = 7;
  for (int i = 0; i < this->scorechange_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scorechange(i), target);
  }

  // optional .msg.MahjongCard DrawCard = 8;
  if (has_drawcard()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->drawcard(), target);
  }

  // optional bool CanWinByOther = 9;
  if (has_canwinbyother()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->canwinbyother(), target);
  }

  // optional .msg.MahjongSuit Suit = 10;
  if (has_suit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->suit(), target);
  }

  // repeated .msg.MahjongTing Ting = 11;
  for (int i = 0; i < this->ting_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongPlayerInfo)
  return target;
}

int MahjongPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonPlayerInfo PlayerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional int32 PlayerScore = 2;
    if (has_playerscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playerscore());
    }

    // optional .msg.MahjongActionRequest ActionRequest = 6;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

    // optional .msg.MahjongCard DrawCard = 8;
    if (has_drawcard()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->drawcard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool CanWinByOther = 9;
    if (has_canwinbyother()) {
      total_size += 1 + 1;
    }

    // optional .msg.MahjongSuit Suit = 10;
    if (has_suit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

  }
  // repeated .msg.MahjongCard Card = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated .msg.MahjongCard Discard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->discard(i));
    }
    total_size += 1 * this->discard_size() + data_size;
  }

  // repeated .msg.MahjongFu Fu = 5;
  total_size += 1 * this->fu_size();
  for (int i = 0; i < this->fu_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fu(i));
  }

  // repeated .msg.MahjongScoreChange ScoreChange = 7;
  total_size += 1 * this->scorechange_size();
  for (int i = 0; i < this->scorechange_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scorechange(i));
  }

  // repeated .msg.MahjongTing Ting = 11;
  total_size += 1 * this->ting_size();
  for (int i = 0; i < this->ting_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongPlayerInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongPlayerInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongPlayerInfo::MergeFrom(const MahjongPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  discard_.MergeFrom(from.discard_);
  fu_.MergeFrom(from.fu_);
  scorechange_.MergeFrom(from.scorechange_);
  ting_.MergeFrom(from.ting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::msg::CommonPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_playerscore()) {
      set_playerscore(from.playerscore());
    }
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::MahjongActionRequest::MergeFrom(from.actionrequest());
    }
    if (from.has_drawcard()) {
      set_drawcard(from.drawcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_canwinbyother()) {
      set_canwinbyother(from.canwinbyother());
    }
    if (from.has_suit()) {
      set_suit(from.suit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongPlayerInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongPlayerInfo::CopyFrom(const MahjongPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongPlayerInfo::IsInitialized() const {

  return true;
}

void MahjongPlayerInfo::Swap(MahjongPlayerInfo* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(playerscore_, other->playerscore_);
    card_.Swap(&other->card_);
    discard_.Swap(&other->discard_);
    fu_.Swap(&other->fu_);
    std::swap(actionrequest_, other->actionrequest_);
    scorechange_.Swap(&other->scorechange_);
    std::swap(drawcard_, other->drawcard_);
    std::swap(canwinbyother_, other->canwinbyother_);
    std::swap(suit_, other->suit_);
    ting_.Swap(&other->ting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongPlayerInfo_descriptor_;
  metadata.reflection = MahjongPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongFu::kCardFieldNumber;
const int MahjongFu::kSourceFieldNumber;
const int MahjongFu::kTypeFieldNumber;
const int MahjongFu::kGetCardFieldNumber;
#endif  // !_MSC_VER

MahjongFu::MahjongFu()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongFu)
}

void MahjongFu::InitAsDefaultInstance() {
}

MahjongFu::MahjongFu(const MahjongFu& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongFu)
}

void MahjongFu::SharedCtor() {
  _cached_size_ = 0;
  source_ = 1;
  type_ = 0;
  getcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongFu::~MahjongFu() {
  // @@protoc_insertion_point(destructor:msg.MahjongFu)
  SharedDtor();
}

void MahjongFu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongFu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongFu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongFu_descriptor_;
}

const MahjongFu& MahjongFu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongFu* MahjongFu::default_instance_ = NULL;

MahjongFu* MahjongFu::New() const {
  return new MahjongFu;
}

void MahjongFu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongFu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(type_, getcard_);
    source_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongFu::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongFu)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.MahjongCard Card = 1;
      case 1: {
        if (tag == 8) {
         parse_Card:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Card;
        if (input->ExpectTag(16)) goto parse_Source;
        break;
      }

      // optional .msg.MahjongPosition Source = 2;
      case 2: {
        if (tag == 16) {
         parse_Source:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongPosition_IsValid(value)) {
            set_source(static_cast< ::msg::MahjongPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional .msg.MahjongFuType Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongFuType_IsValid(value)) {
            set_type(static_cast< ::msg::MahjongFuType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GetCard;
        break;
      }

      // optional .msg.MahjongCard GetCard = 4;
      case 4: {
        if (tag == 32) {
         parse_GetCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_getcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongFu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongFu)
  return false;
#undef DO_
}

void MahjongFu::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongFu)
  // repeated .msg.MahjongCard Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card(i), output);
  }

  // optional .msg.MahjongPosition Source = 2;
  if (has_source()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // optional .msg.MahjongFuType Type = 3;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .msg.MahjongCard GetCard = 4;
  if (has_getcard()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->getcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongFu)
}

::google_public::protobuf::uint8* MahjongFu::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongFu)
  // repeated .msg.MahjongCard Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card(i), target);
  }

  // optional .msg.MahjongPosition Source = 2;
  if (has_source()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // optional .msg.MahjongFuType Type = 3;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .msg.MahjongCard GetCard = 4;
  if (has_getcard()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->getcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongFu)
  return target;
}

int MahjongFu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .msg.MahjongPosition Source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .msg.MahjongFuType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.MahjongCard GetCard = 4;
    if (has_getcard()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->getcard());
    }

  }
  // repeated .msg.MahjongCard Card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongFu::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongFu* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongFu*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongFu::MergeFrom(const MahjongFu& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_getcard()) {
      set_getcard(from.getcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongFu::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongFu::CopyFrom(const MahjongFu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongFu::IsInitialized() const {

  return true;
}

void MahjongFu::Swap(MahjongFu* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(source_, other->source_);
    std::swap(type_, other->type_);
    std::swap(getcard_, other->getcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongFu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongFu_descriptor_;
  metadata.reflection = MahjongFu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongScoreChange::kCardFieldNumber;
const int MahjongScoreChange::kFuFieldNumber;
const int MahjongScoreChange::kSourceFieldNumber;
const int MahjongScoreChange::kHuCardFieldNumber;
const int MahjongScoreChange::kTypeFieldNumber;
const int MahjongScoreChange::kScoreFieldNumber;
const int MahjongScoreChange::kMultiWinFieldNumber;
#endif  // !_MSC_VER

MahjongScoreChange::MahjongScoreChange()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongScoreChange)
}

void MahjongScoreChange::InitAsDefaultInstance() {
}

MahjongScoreChange::MahjongScoreChange(const MahjongScoreChange& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongScoreChange)
}

void MahjongScoreChange::SharedCtor() {
  _cached_size_ = 0;
  source_ = 1;
  hucard_ = 0;
  score_ = 0;
  multiwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongScoreChange::~MahjongScoreChange() {
  // @@protoc_insertion_point(destructor:msg.MahjongScoreChange)
  SharedDtor();
}

void MahjongScoreChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongScoreChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongScoreChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongScoreChange_descriptor_;
}

const MahjongScoreChange& MahjongScoreChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongScoreChange* MahjongScoreChange::default_instance_ = NULL;

MahjongScoreChange* MahjongScoreChange::New() const {
  return new MahjongScoreChange;
}

void MahjongScoreChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongScoreChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 108) {
    ZR_(score_, multiwin_);
    source_ = 1;
    hucard_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_.Clear();
  fu_.Clear();
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongScoreChange::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongScoreChange)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.MahjongCard Card = 1;
      case 1: {
        if (tag == 8) {
         parse_Card:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Card;
        if (input->ExpectTag(18)) goto parse_Fu;
        break;
      }

      // repeated .msg.MahjongFu Fu = 2;
      case 2: {
        if (tag == 18) {
         parse_Fu:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Fu;
        if (input->ExpectTag(24)) goto parse_Source;
        break;
      }

      // optional .msg.MahjongPosition Source = 3;
      case 3: {
        if (tag == 24) {
         parse_Source:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongPosition_IsValid(value)) {
            set_source(static_cast< ::msg::MahjongPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HuCard;
        break;
      }

      // optional .msg.MahjongCard HuCard = 4;
      case 4: {
        if (tag == 32) {
         parse_HuCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_hucard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // repeated .msg.SiChuanMahjongWinType Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SiChuanMahjongWinType_IsValid(value)) {
            add_type(static_cast< ::msg::SiChuanMahjongWinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::SiChuanMahjongWinType_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        if (input->ExpectTag(48)) goto parse_Score;
        break;
      }

      // optional int32 Score = 6;
      case 6: {
        if (tag == 48) {
         parse_Score:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MultiWin;
        break;
      }

      // optional bool MultiWin = 7;
      case 7: {
        if (tag == 56) {
         parse_MultiWin:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiwin_)));
          set_has_multiwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongScoreChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongScoreChange)
  return false;
#undef DO_
}

void MahjongScoreChange::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongScoreChange)
  // repeated .msg.MahjongCard Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card(i), output);
  }

  // repeated .msg.MahjongFu Fu = 2;
  for (int i = 0; i < this->fu_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fu(i), output);
  }

  // optional .msg.MahjongPosition Source = 3;
  if (has_source()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional .msg.MahjongCard HuCard = 4;
  if (has_hucard()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->hucard(), output);
  }

  // repeated .msg.SiChuanMahjongWinType Type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(i), output);
  }

  // optional int32 Score = 6;
  if (has_score()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // optional bool MultiWin = 7;
  if (has_multiwin()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(7, this->multiwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongScoreChange)
}

::google_public::protobuf::uint8* MahjongScoreChange::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongScoreChange)
  // repeated .msg.MahjongCard Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card(i), target);
  }

  // repeated .msg.MahjongFu Fu = 2;
  for (int i = 0; i < this->fu_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fu(i), target);
  }

  // optional .msg.MahjongPosition Source = 3;
  if (has_source()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // optional .msg.MahjongCard HuCard = 4;
  if (has_hucard()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->hucard(), target);
  }

  // repeated .msg.SiChuanMahjongWinType Type = 5;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(i), target);
  }

  // optional int32 Score = 6;
  if (has_score()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // optional bool MultiWin = 7;
  if (has_multiwin()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->multiwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongScoreChange)
  return target;
}

int MahjongScoreChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .msg.MahjongPosition Source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .msg.MahjongCard HuCard = 4;
    if (has_hucard()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->hucard());
    }

    // optional int32 Score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bool MultiWin = 7;
    if (has_multiwin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .msg.MahjongCard Card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated .msg.MahjongFu Fu = 2;
  total_size += 1 * this->fu_size();
  for (int i = 0; i < this->fu_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fu(i));
  }

  // repeated .msg.SiChuanMahjongWinType Type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongScoreChange::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongScoreChange* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongScoreChange*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongScoreChange::MergeFrom(const MahjongScoreChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  fu_.MergeFrom(from.fu_);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_multiwin()) {
      set_multiwin(from.multiwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongScoreChange::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongScoreChange::CopyFrom(const MahjongScoreChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongScoreChange::IsInitialized() const {

  return true;
}

void MahjongScoreChange::Swap(MahjongScoreChange* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    fu_.Swap(&other->fu_);
    std::swap(source_, other->source_);
    std::swap(hucard_, other->hucard_);
    type_.Swap(&other->type_);
    std::swap(score_, other->score_);
    std::swap(multiwin_, other->multiwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongScoreChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongScoreChange_descriptor_;
  metadata.reflection = MahjongScoreChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongPlayerSetting::kLeaveNextHandFieldNumber;
const int MahjongPlayerSetting::kAutoHuFieldNumber;
const int MahjongPlayerSetting::kDiscardAllFieldNumber;
#endif  // !_MSC_VER

MahjongPlayerSetting::MahjongPlayerSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongPlayerSetting)
}

void MahjongPlayerSetting::InitAsDefaultInstance() {
}

MahjongPlayerSetting::MahjongPlayerSetting(const MahjongPlayerSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongPlayerSetting)
}

void MahjongPlayerSetting::SharedCtor() {
  _cached_size_ = 0;
  leavenexthand_ = false;
  autohu_ = false;
  discardall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongPlayerSetting::~MahjongPlayerSetting() {
  // @@protoc_insertion_point(destructor:msg.MahjongPlayerSetting)
  SharedDtor();
}

void MahjongPlayerSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongPlayerSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongPlayerSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongPlayerSetting_descriptor_;
}

const MahjongPlayerSetting& MahjongPlayerSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongPlayerSetting* MahjongPlayerSetting::default_instance_ = NULL;

MahjongPlayerSetting* MahjongPlayerSetting::New() const {
  return new MahjongPlayerSetting;
}

void MahjongPlayerSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongPlayerSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leavenexthand_, discardall_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongPlayerSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongPlayerSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool LeaveNextHand = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leavenexthand_)));
          set_has_leavenexthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AutoHu;
        break;
      }

      // optional bool AutoHu = 2;
      case 2: {
        if (tag == 16) {
         parse_AutoHu:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autohu_)));
          set_has_autohu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DiscardAll;
        break;
      }

      // optional bool DiscardAll = 3;
      case 3: {
        if (tag == 24) {
         parse_DiscardAll:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discardall_)));
          set_has_discardall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongPlayerSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongPlayerSetting)
  return false;
#undef DO_
}

void MahjongPlayerSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongPlayerSetting)
  // optional bool LeaveNextHand = 1;
  if (has_leavenexthand()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->leavenexthand(), output);
  }

  // optional bool AutoHu = 2;
  if (has_autohu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->autohu(), output);
  }

  // optional bool DiscardAll = 3;
  if (has_discardall()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->discardall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongPlayerSetting)
}

::google_public::protobuf::uint8* MahjongPlayerSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongPlayerSetting)
  // optional bool LeaveNextHand = 1;
  if (has_leavenexthand()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->leavenexthand(), target);
  }

  // optional bool AutoHu = 2;
  if (has_autohu()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autohu(), target);
  }

  // optional bool DiscardAll = 3;
  if (has_discardall()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->discardall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongPlayerSetting)
  return target;
}

int MahjongPlayerSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool LeaveNextHand = 1;
    if (has_leavenexthand()) {
      total_size += 1 + 1;
    }

    // optional bool AutoHu = 2;
    if (has_autohu()) {
      total_size += 1 + 1;
    }

    // optional bool DiscardAll = 3;
    if (has_discardall()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongPlayerSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongPlayerSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongPlayerSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongPlayerSetting::MergeFrom(const MahjongPlayerSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leavenexthand()) {
      set_leavenexthand(from.leavenexthand());
    }
    if (from.has_autohu()) {
      set_autohu(from.autohu());
    }
    if (from.has_discardall()) {
      set_discardall(from.discardall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongPlayerSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongPlayerSetting::CopyFrom(const MahjongPlayerSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongPlayerSetting::IsInitialized() const {

  return true;
}

void MahjongPlayerSetting::Swap(MahjongPlayerSetting* other) {
  if (other != this) {
    std::swap(leavenexthand_, other->leavenexthand_);
    std::swap(autohu_, other->autohu_);
    std::swap(discardall_, other->discardall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongPlayerSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongPlayerSetting_descriptor_;
  metadata.reflection = MahjongPlayerSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongPropUpdate::kPlayerInfoFieldNumber;
const int MahjongPropUpdate::kLastCardsFieldNumber;
const int MahjongPropUpdate::kStartPositionFieldNumber;
const int MahjongPropUpdate::kCurrentDiscardFieldNumber;
const int MahjongPropUpdate::kCurrentDiscardUserIDFieldNumber;
const int MahjongPropUpdate::kCurrentDiscardZoneFieldNumber;
const int MahjongPropUpdate::kEastSeatNoFieldNumber;
#endif  // !_MSC_VER

MahjongPropUpdate::MahjongPropUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongPropUpdate)
}

void MahjongPropUpdate::InitAsDefaultInstance() {
}

MahjongPropUpdate::MahjongPropUpdate(const MahjongPropUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongPropUpdate)
}

void MahjongPropUpdate::SharedCtor() {
  _cached_size_ = 0;
  lastcards_ = 0;
  startposition_ = 0;
  currentdiscard_ = 0;
  currentdiscarduserid_ = 0;
  currentdiscardzone_ = 1;
  eastseatno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongPropUpdate::~MahjongPropUpdate() {
  // @@protoc_insertion_point(destructor:msg.MahjongPropUpdate)
  SharedDtor();
}

void MahjongPropUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongPropUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongPropUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongPropUpdate_descriptor_;
}

const MahjongPropUpdate& MahjongPropUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongPropUpdate* MahjongPropUpdate::default_instance_ = NULL;

MahjongPropUpdate* MahjongPropUpdate::New() const {
  return new MahjongPropUpdate;
}

void MahjongPropUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongPropUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(lastcards_, currentdiscarduserid_);
    currentdiscardzone_ = 1;
    eastseatno_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongPropUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongPropUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.MahjongPlayerInfo PlayerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_PlayerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PlayerInfo;
        if (input->ExpectTag(16)) goto parse_LastCards;
        break;
      }

      // optional int32 LastCards = 2;
      case 2: {
        if (tag == 16) {
         parse_LastCards:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcards_)));
          set_has_lastcards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StartPosition;
        break;
      }

      // optional int32 StartPosition = 3;
      case 3: {
        if (tag == 24) {
         parse_StartPosition:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startposition_)));
          set_has_startposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CurrentDiscard;
        break;
      }

      // optional .msg.MahjongCard CurrentDiscard = 4;
      case 4: {
        if (tag == 32) {
         parse_CurrentDiscard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_currentdiscard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurrentDiscardUserID;
        break;
      }

      // optional int32 CurrentDiscardUserID = 5;
      case 5: {
        if (tag == 40) {
         parse_CurrentDiscardUserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdiscarduserid_)));
          set_has_currentdiscarduserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CurrentDiscardZone;
        break;
      }

      // optional .msg.MahjongCardZone CurrentDiscardZone = 6;
      case 6: {
        if (tag == 48) {
         parse_CurrentDiscardZone:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCardZone_IsValid(value)) {
            set_currentdiscardzone(static_cast< ::msg::MahjongCardZone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EastSeatNo;
        break;
      }

      // optional int32 EastSeatNo = 7;
      case 7: {
        if (tag == 56) {
         parse_EastSeatNo:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eastseatno_)));
          set_has_eastseatno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongPropUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongPropUpdate)
  return false;
#undef DO_
}

void MahjongPropUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongPropUpdate)
  // repeated .msg.MahjongPlayerInfo PlayerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(i), output);
  }

  // optional int32 LastCards = 2;
  if (has_lastcards()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->lastcards(), output);
  }

  // optional int32 StartPosition = 3;
  if (has_startposition()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->startposition(), output);
  }

  // optional .msg.MahjongCard CurrentDiscard = 4;
  if (has_currentdiscard()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->currentdiscard(), output);
  }

  // optional int32 CurrentDiscardUserID = 5;
  if (has_currentdiscarduserid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentdiscarduserid(), output);
  }

  // optional .msg.MahjongCardZone CurrentDiscardZone = 6;
  if (has_currentdiscardzone()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->currentdiscardzone(), output);
  }

  // optional int32 EastSeatNo = 7;
  if (has_eastseatno()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->eastseatno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongPropUpdate)
}

::google_public::protobuf::uint8* MahjongPropUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongPropUpdate)
  // repeated .msg.MahjongPlayerInfo PlayerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(i), target);
  }

  // optional int32 LastCards = 2;
  if (has_lastcards()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lastcards(), target);
  }

  // optional int32 StartPosition = 3;
  if (has_startposition()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startposition(), target);
  }

  // optional .msg.MahjongCard CurrentDiscard = 4;
  if (has_currentdiscard()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->currentdiscard(), target);
  }

  // optional int32 CurrentDiscardUserID = 5;
  if (has_currentdiscarduserid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentdiscarduserid(), target);
  }

  // optional .msg.MahjongCardZone CurrentDiscardZone = 6;
  if (has_currentdiscardzone()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->currentdiscardzone(), target);
  }

  // optional int32 EastSeatNo = 7;
  if (has_eastseatno()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->eastseatno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongPropUpdate)
  return target;
}

int MahjongPropUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 LastCards = 2;
    if (has_lastcards()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcards());
    }

    // optional int32 StartPosition = 3;
    if (has_startposition()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->startposition());
    }

    // optional .msg.MahjongCard CurrentDiscard = 4;
    if (has_currentdiscard()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->currentdiscard());
    }

    // optional int32 CurrentDiscardUserID = 5;
    if (has_currentdiscarduserid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdiscarduserid());
    }

    // optional .msg.MahjongCardZone CurrentDiscardZone = 6;
    if (has_currentdiscardzone()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->currentdiscardzone());
    }

    // optional int32 EastSeatNo = 7;
    if (has_eastseatno()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->eastseatno());
    }

  }
  // repeated .msg.MahjongPlayerInfo PlayerInfo = 1;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongPropUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongPropUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongPropUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongPropUpdate::MergeFrom(const MahjongPropUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastcards()) {
      set_lastcards(from.lastcards());
    }
    if (from.has_startposition()) {
      set_startposition(from.startposition());
    }
    if (from.has_currentdiscard()) {
      set_currentdiscard(from.currentdiscard());
    }
    if (from.has_currentdiscarduserid()) {
      set_currentdiscarduserid(from.currentdiscarduserid());
    }
    if (from.has_currentdiscardzone()) {
      set_currentdiscardzone(from.currentdiscardzone());
    }
    if (from.has_eastseatno()) {
      set_eastseatno(from.eastseatno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongPropUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongPropUpdate::CopyFrom(const MahjongPropUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongPropUpdate::IsInitialized() const {

  return true;
}

void MahjongPropUpdate::Swap(MahjongPropUpdate* other) {
  if (other != this) {
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(lastcards_, other->lastcards_);
    std::swap(startposition_, other->startposition_);
    std::swap(currentdiscard_, other->currentdiscard_);
    std::swap(currentdiscarduserid_, other->currentdiscarduserid_);
    std::swap(currentdiscardzone_, other->currentdiscardzone_);
    std::swap(eastseatno_, other->eastseatno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongPropUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongPropUpdate_descriptor_;
  metadata.reflection = MahjongPropUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongTing::kCardFieldNumber;
const int MahjongTing::kNumberFieldNumber;
const int MahjongTing::kScoreFieldNumber;
#endif  // !_MSC_VER

MahjongTing::MahjongTing()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongTing)
}

void MahjongTing::InitAsDefaultInstance() {
}

MahjongTing::MahjongTing(const MahjongTing& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongTing)
}

void MahjongTing::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  number_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongTing::~MahjongTing() {
  // @@protoc_insertion_point(destructor:msg.MahjongTing)
  SharedDtor();
}

void MahjongTing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongTing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongTing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongTing_descriptor_;
}

const MahjongTing& MahjongTing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongTing* MahjongTing::default_instance_ = NULL;

MahjongTing* MahjongTing::New() const {
  return new MahjongTing;
}

void MahjongTing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongTing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongTing::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongTing)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.MahjongCard Card = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Number;
        break;
      }

      // optional int32 Number = 2;
      case 2: {
        if (tag == 16) {
         parse_Number:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional int32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongTing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongTing)
  return false;
#undef DO_
}

void MahjongTing::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongTing)
  // optional .msg.MahjongCard Card = 1;
  if (has_card()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card(), output);
  }

  // optional int32 Number = 2;
  if (has_number()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // optional int32 Score = 3;
  if (has_score()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongTing)
}

::google_public::protobuf::uint8* MahjongTing::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongTing)
  // optional .msg.MahjongCard Card = 1;
  if (has_card()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card(), target);
  }

  // optional int32 Number = 2;
  if (has_number()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // optional int32 Score = 3;
  if (has_score()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongTing)
  return target;
}

int MahjongTing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.MahjongCard Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->card());
    }

    // optional int32 Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongTing::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongTing* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongTing*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongTing::MergeFrom(const MahjongTing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongTing::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongTing::CopyFrom(const MahjongTing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongTing::IsInitialized() const {

  return true;
}

void MahjongTing::Swap(MahjongTing* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(number_, other->number_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongTing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongTing_descriptor_;
  metadata.reflection = MahjongTing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongPossibleTing::kCardFieldNumber;
const int MahjongPossibleTing::kTingFieldNumber;
#endif  // !_MSC_VER

MahjongPossibleTing::MahjongPossibleTing()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongPossibleTing)
}

void MahjongPossibleTing::InitAsDefaultInstance() {
}

MahjongPossibleTing::MahjongPossibleTing(const MahjongPossibleTing& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongPossibleTing)
}

void MahjongPossibleTing::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongPossibleTing::~MahjongPossibleTing() {
  // @@protoc_insertion_point(destructor:msg.MahjongPossibleTing)
  SharedDtor();
}

void MahjongPossibleTing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongPossibleTing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongPossibleTing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongPossibleTing_descriptor_;
}

const MahjongPossibleTing& MahjongPossibleTing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongPossibleTing* MahjongPossibleTing::default_instance_ = NULL;

MahjongPossibleTing* MahjongPossibleTing::New() const {
  return new MahjongPossibleTing;
}

void MahjongPossibleTing::Clear() {
  card_ = 0;
  ting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongPossibleTing::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongPossibleTing)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.MahjongCard Card = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Ting;
        break;
      }

      // repeated .msg.MahjongTing Ting = 2;
      case 2: {
        if (tag == 18) {
         parse_Ting:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Ting;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongPossibleTing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongPossibleTing)
  return false;
#undef DO_
}

void MahjongPossibleTing::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongPossibleTing)
  // optional .msg.MahjongCard Card = 1;
  if (has_card()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card(), output);
  }

  // repeated .msg.MahjongTing Ting = 2;
  for (int i = 0; i < this->ting_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongPossibleTing)
}

::google_public::protobuf::uint8* MahjongPossibleTing::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongPossibleTing)
  // optional .msg.MahjongCard Card = 1;
  if (has_card()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card(), target);
  }

  // repeated .msg.MahjongTing Ting = 2;
  for (int i = 0; i < this->ting_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongPossibleTing)
  return target;
}

int MahjongPossibleTing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.MahjongCard Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->card());
    }

  }
  // repeated .msg.MahjongTing Ting = 2;
  total_size += 1 * this->ting_size();
  for (int i = 0; i < this->ting_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongPossibleTing::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongPossibleTing* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongPossibleTing*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongPossibleTing::MergeFrom(const MahjongPossibleTing& from) {
  GOOGLE_CHECK_NE(&from, this);
  ting_.MergeFrom(from.ting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongPossibleTing::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongPossibleTing::CopyFrom(const MahjongPossibleTing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongPossibleTing::IsInitialized() const {

  return true;
}

void MahjongPossibleTing::Swap(MahjongPossibleTing* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    ting_.Swap(&other->ting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongPossibleTing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongPossibleTing_descriptor_;
  metadata.reflection = MahjongPossibleTing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongActionRequest::kActionRequestFieldNumber;
const int MahjongActionRequest::kTypeFieldNumber;
const int MahjongActionRequest::kCanHuFieldNumber;
const int MahjongActionRequest::kCanGangFieldNumber;
const int MahjongActionRequest::kCanPengFieldNumber;
const int MahjongActionRequest::kCanChiFieldNumber;
const int MahjongActionRequest::kPossibleTingFieldNumber;
const int MahjongActionRequest::kWinTypeFieldNumber;
const int MahjongActionRequest::kWinScoreFieldNumber;
const int MahjongActionRequest::kDefaultSwitchCardFieldNumber;
const int MahjongActionRequest::kDefaultBlankSuitFieldNumber;
const int MahjongActionRequest::kGangCardFieldNumber;
#endif  // !_MSC_VER

MahjongActionRequest::MahjongActionRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongActionRequest)
}

void MahjongActionRequest::InitAsDefaultInstance() {
  actionrequest_ = const_cast< ::msg::ActionRequest*>(&::msg::ActionRequest::default_instance());
}

MahjongActionRequest::MahjongActionRequest(const MahjongActionRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongActionRequest)
}

void MahjongActionRequest::SharedCtor() {
  _cached_size_ = 0;
  actionrequest_ = NULL;
  type_ = 1;
  canhu_ = false;
  cangang_ = false;
  canpeng_ = false;
  canchi_ = false;
  wintype_ = 0;
  winscore_ = 0;
  defaultblanksuit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongActionRequest::~MahjongActionRequest() {
  // @@protoc_insertion_point(destructor:msg.MahjongActionRequest)
  SharedDtor();
}

void MahjongActionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete actionrequest_;
  }
}

void MahjongActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongActionRequest_descriptor_;
}

const MahjongActionRequest& MahjongActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongActionRequest* MahjongActionRequest::default_instance_ = NULL;

MahjongActionRequest* MahjongActionRequest::New() const {
  return new MahjongActionRequest;
}

void MahjongActionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongActionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(canhu_, canchi_);
    if (has_actionrequest()) {
      if (actionrequest_ != NULL) actionrequest_->::msg::ActionRequest::Clear();
    }
    type_ = 1;
    wintype_ = 0;
  }
  if (_has_bits_[8 / 32] & 1280) {
    winscore_ = 0;
    defaultblanksuit_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  possibleting_.Clear();
  defaultswitchcard_.Clear();
  gangcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongActionRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongActionRequest)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.ActionRequest ActionRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .msg.MahjongRequestType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongRequestType_IsValid(value)) {
            set_type(static_cast< ::msg::MahjongRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanHu;
        break;
      }

      // optional bool CanHu = 3;
      case 3: {
        if (tag == 24) {
         parse_CanHu:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canhu_)));
          set_has_canhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CanGang;
        break;
      }

      // optional bool CanGang = 4;
      case 4: {
        if (tag == 32) {
         parse_CanGang:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cangang_)));
          set_has_cangang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CanPeng;
        break;
      }

      // optional bool CanPeng = 5;
      case 5: {
        if (tag == 40) {
         parse_CanPeng:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canpeng_)));
          set_has_canpeng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CanChi;
        break;
      }

      // optional bool CanChi = 6;
      case 6: {
        if (tag == 48) {
         parse_CanChi:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canchi_)));
          set_has_canchi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PossibleTing;
        break;
      }

      // repeated .msg.MahjongPossibleTing PossibleTing = 7;
      case 7: {
        if (tag == 58) {
         parse_PossibleTing:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_possibleting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PossibleTing;
        if (input->ExpectTag(64)) goto parse_WinType;
        break;
      }

      // optional .msg.SiChuanMahjongWinType WinType = 8;
      case 8: {
        if (tag == 64) {
         parse_WinType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SiChuanMahjongWinType_IsValid(value)) {
            set_wintype(static_cast< ::msg::SiChuanMahjongWinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_WinScore;
        break;
      }

      // optional int32 WinScore = 9;
      case 9: {
        if (tag == 72) {
         parse_WinScore:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winscore_)));
          set_has_winscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DefaultSwitchCard;
        break;
      }

      // repeated .msg.MahjongCard DefaultSwitchCard = 10;
      case 10: {
        if (tag == 80) {
         parse_DefaultSwitchCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_defaultswitchcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else if (tag == 82) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_defaultswitchcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DefaultSwitchCard;
        if (input->ExpectTag(88)) goto parse_DefaultBlankSuit;
        break;
      }

      // optional .msg.MahjongSuit DefaultBlankSuit = 11;
      case 11: {
        if (tag == 88) {
         parse_DefaultBlankSuit:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongSuit_IsValid(value)) {
            set_defaultblanksuit(static_cast< ::msg::MahjongSuit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_GangCard;
        break;
      }

      // repeated .msg.MahjongCard GangCard = 12;
      case 12: {
        if (tag == 96) {
         parse_GangCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_gangcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else if (tag == 98) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_gangcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_GangCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongActionRequest)
  return false;
#undef DO_
}

void MahjongActionRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongActionRequest)
  // optional .msg.ActionRequest ActionRequest = 1;
  if (has_actionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actionrequest(), output);
  }

  // optional .msg.MahjongRequestType Type = 2;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool CanHu = 3;
  if (has_canhu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->canhu(), output);
  }

  // optional bool CanGang = 4;
  if (has_cangang()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->cangang(), output);
  }

  // optional bool CanPeng = 5;
  if (has_canpeng()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(5, this->canpeng(), output);
  }

  // optional bool CanChi = 6;
  if (has_canchi()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(6, this->canchi(), output);
  }

  // repeated .msg.MahjongPossibleTing PossibleTing = 7;
  for (int i = 0; i < this->possibleting_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->possibleting(i), output);
  }

  // optional .msg.SiChuanMahjongWinType WinType = 8;
  if (has_wintype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wintype(), output);
  }

  // optional int32 WinScore = 9;
  if (has_winscore()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->winscore(), output);
  }

  // repeated .msg.MahjongCard DefaultSwitchCard = 10;
  for (int i = 0; i < this->defaultswitchcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->defaultswitchcard(i), output);
  }

  // optional .msg.MahjongSuit DefaultBlankSuit = 11;
  if (has_defaultblanksuit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->defaultblanksuit(), output);
  }

  // repeated .msg.MahjongCard GangCard = 12;
  for (int i = 0; i < this->gangcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->gangcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongActionRequest)
}

::google_public::protobuf::uint8* MahjongActionRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongActionRequest)
  // optional .msg.ActionRequest ActionRequest = 1;
  if (has_actionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actionrequest(), target);
  }

  // optional .msg.MahjongRequestType Type = 2;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool CanHu = 3;
  if (has_canhu()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canhu(), target);
  }

  // optional bool CanGang = 4;
  if (has_cangang()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cangang(), target);
  }

  // optional bool CanPeng = 5;
  if (has_canpeng()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canpeng(), target);
  }

  // optional bool CanChi = 6;
  if (has_canchi()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->canchi(), target);
  }

  // repeated .msg.MahjongPossibleTing PossibleTing = 7;
  for (int i = 0; i < this->possibleting_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->possibleting(i), target);
  }

  // optional .msg.SiChuanMahjongWinType WinType = 8;
  if (has_wintype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wintype(), target);
  }

  // optional int32 WinScore = 9;
  if (has_winscore()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->winscore(), target);
  }

  // repeated .msg.MahjongCard DefaultSwitchCard = 10;
  for (int i = 0; i < this->defaultswitchcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->defaultswitchcard(i), target);
  }

  // optional .msg.MahjongSuit DefaultBlankSuit = 11;
  if (has_defaultblanksuit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->defaultblanksuit(), target);
  }

  // repeated .msg.MahjongCard GangCard = 12;
  for (int i = 0; i < this->gangcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->gangcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongActionRequest)
  return target;
}

int MahjongActionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.ActionRequest ActionRequest = 1;
    if (has_actionrequest()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionrequest());
    }

    // optional .msg.MahjongRequestType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool CanHu = 3;
    if (has_canhu()) {
      total_size += 1 + 1;
    }

    // optional bool CanGang = 4;
    if (has_cangang()) {
      total_size += 1 + 1;
    }

    // optional bool CanPeng = 5;
    if (has_canpeng()) {
      total_size += 1 + 1;
    }

    // optional bool CanChi = 6;
    if (has_canchi()) {
      total_size += 1 + 1;
    }

    // optional .msg.SiChuanMahjongWinType WinType = 8;
    if (has_wintype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->wintype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 WinScore = 9;
    if (has_winscore()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->winscore());
    }

    // optional .msg.MahjongSuit DefaultBlankSuit = 11;
    if (has_defaultblanksuit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->defaultblanksuit());
    }

  }
  // repeated .msg.MahjongPossibleTing PossibleTing = 7;
  total_size += 1 * this->possibleting_size();
  for (int i = 0; i < this->possibleting_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->possibleting(i));
  }

  // repeated .msg.MahjongCard DefaultSwitchCard = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->defaultswitchcard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->defaultswitchcard(i));
    }
    total_size += 1 * this->defaultswitchcard_size() + data_size;
  }

  // repeated .msg.MahjongCard GangCard = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangcard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->gangcard(i));
    }
    total_size += 1 * this->gangcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongActionRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongActionRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongActionRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongActionRequest::MergeFrom(const MahjongActionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  possibleting_.MergeFrom(from.possibleting_);
  defaultswitchcard_.MergeFrom(from.defaultswitchcard_);
  gangcard_.MergeFrom(from.gangcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionrequest()) {
      mutable_actionrequest()->::msg::ActionRequest::MergeFrom(from.actionrequest());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_canhu()) {
      set_canhu(from.canhu());
    }
    if (from.has_cangang()) {
      set_cangang(from.cangang());
    }
    if (from.has_canpeng()) {
      set_canpeng(from.canpeng());
    }
    if (from.has_canchi()) {
      set_canchi(from.canchi());
    }
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winscore()) {
      set_winscore(from.winscore());
    }
    if (from.has_defaultblanksuit()) {
      set_defaultblanksuit(from.defaultblanksuit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongActionRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongActionRequest::CopyFrom(const MahjongActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongActionRequest::IsInitialized() const {

  return true;
}

void MahjongActionRequest::Swap(MahjongActionRequest* other) {
  if (other != this) {
    std::swap(actionrequest_, other->actionrequest_);
    std::swap(type_, other->type_);
    std::swap(canhu_, other->canhu_);
    std::swap(cangang_, other->cangang_);
    std::swap(canpeng_, other->canpeng_);
    std::swap(canchi_, other->canchi_);
    possibleting_.Swap(&other->possibleting_);
    std::swap(wintype_, other->wintype_);
    std::swap(winscore_, other->winscore_);
    defaultswitchcard_.Swap(&other->defaultswitchcard_);
    std::swap(defaultblanksuit_, other->defaultblanksuit_);
    gangcard_.Swap(&other->gangcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongActionRequest_descriptor_;
  metadata.reflection = MahjongActionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_700_MahjongRefreshAll::kCommonRoomInfoFieldNumber;
const int Processor_700_MahjongRefreshAll::kPropUpdateFieldNumber;
const int Processor_700_MahjongRefreshAll::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_700_MahjongRefreshAll::Processor_700_MahjongRefreshAll()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_700_MahjongRefreshAll)
}

void Processor_700_MahjongRefreshAll::InitAsDefaultInstance() {
  commonroominfo_ = const_cast< ::msg::CommonRoomInfo*>(&::msg::CommonRoomInfo::default_instance());
  propupdate_ = const_cast< ::msg::MahjongPropUpdate*>(&::msg::MahjongPropUpdate::default_instance());
  settings_ = const_cast< ::msg::MahjongPlayerSetting*>(&::msg::MahjongPlayerSetting::default_instance());
}

Processor_700_MahjongRefreshAll::Processor_700_MahjongRefreshAll(const Processor_700_MahjongRefreshAll& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_700_MahjongRefreshAll)
}

void Processor_700_MahjongRefreshAll::SharedCtor() {
  _cached_size_ = 0;
  commonroominfo_ = NULL;
  propupdate_ = NULL;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_700_MahjongRefreshAll::~Processor_700_MahjongRefreshAll() {
  // @@protoc_insertion_point(destructor:msg.Processor_700_MahjongRefreshAll)
  SharedDtor();
}

void Processor_700_MahjongRefreshAll::SharedDtor() {
  if (this != default_instance_) {
    delete commonroominfo_;
    delete propupdate_;
    delete settings_;
  }
}

void Processor_700_MahjongRefreshAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_700_MahjongRefreshAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_700_MahjongRefreshAll_descriptor_;
}

const Processor_700_MahjongRefreshAll& Processor_700_MahjongRefreshAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_700_MahjongRefreshAll* Processor_700_MahjongRefreshAll::default_instance_ = NULL;

Processor_700_MahjongRefreshAll* Processor_700_MahjongRefreshAll::New() const {
  return new Processor_700_MahjongRefreshAll;
}

void Processor_700_MahjongRefreshAll::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_commonroominfo()) {
      if (commonroominfo_ != NULL) commonroominfo_->::msg::CommonRoomInfo::Clear();
    }
    if (has_propupdate()) {
      if (propupdate_ != NULL) propupdate_->::msg::MahjongPropUpdate::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::MahjongPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_700_MahjongRefreshAll::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_700_MahjongRefreshAll)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commonroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PropUpdate;
        break;
      }

      // optional .msg.MahjongPropUpdate PropUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_PropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Settings;
        break;
      }

      // optional .msg.MahjongPlayerSetting Settings = 3;
      case 3: {
        if (tag == 26) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_700_MahjongRefreshAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_700_MahjongRefreshAll)
  return false;
#undef DO_
}

void Processor_700_MahjongRefreshAll::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_700_MahjongRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commonroominfo(), output);
  }

  // optional .msg.MahjongPropUpdate PropUpdate = 2;
  if (has_propupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propupdate(), output);
  }

  // optional .msg.MahjongPlayerSetting Settings = 3;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_700_MahjongRefreshAll)
}

::google_public::protobuf::uint8* Processor_700_MahjongRefreshAll::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_700_MahjongRefreshAll)
  // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
  if (has_commonroominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commonroominfo(), target);
  }

  // optional .msg.MahjongPropUpdate PropUpdate = 2;
  if (has_propupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propupdate(), target);
  }

  // optional .msg.MahjongPlayerSetting Settings = 3;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_700_MahjongRefreshAll)
  return target;
}

int Processor_700_MahjongRefreshAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.CommonRoomInfo CommonRoomInfo = 1;
    if (has_commonroominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commonroominfo());
    }

    // optional .msg.MahjongPropUpdate PropUpdate = 2;
    if (has_propupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propupdate());
    }

    // optional .msg.MahjongPlayerSetting Settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_700_MahjongRefreshAll::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_700_MahjongRefreshAll* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_700_MahjongRefreshAll*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_700_MahjongRefreshAll::MergeFrom(const Processor_700_MahjongRefreshAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commonroominfo()) {
      mutable_commonroominfo()->::msg::CommonRoomInfo::MergeFrom(from.commonroominfo());
    }
    if (from.has_propupdate()) {
      mutable_propupdate()->::msg::MahjongPropUpdate::MergeFrom(from.propupdate());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::MahjongPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_700_MahjongRefreshAll::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_700_MahjongRefreshAll::CopyFrom(const Processor_700_MahjongRefreshAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_700_MahjongRefreshAll::IsInitialized() const {

  return true;
}

void Processor_700_MahjongRefreshAll::Swap(Processor_700_MahjongRefreshAll* other) {
  if (other != this) {
    std::swap(commonroominfo_, other->commonroominfo_);
    std::swap(propupdate_, other->propupdate_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_700_MahjongRefreshAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_700_MahjongRefreshAll_descriptor_;
  metadata.reflection = Processor_700_MahjongRefreshAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_701_MahjongReceivePropUpdate::kRoomIdFieldNumber;
const int Processor_701_MahjongReceivePropUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

Processor_701_MahjongReceivePropUpdate::Processor_701_MahjongReceivePropUpdate()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_701_MahjongReceivePropUpdate)
}

void Processor_701_MahjongReceivePropUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::msg::MahjongPropUpdate*>(&::msg::MahjongPropUpdate::default_instance());
}

Processor_701_MahjongReceivePropUpdate::Processor_701_MahjongReceivePropUpdate(const Processor_701_MahjongReceivePropUpdate& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_701_MahjongReceivePropUpdate)
}

void Processor_701_MahjongReceivePropUpdate::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_701_MahjongReceivePropUpdate::~Processor_701_MahjongReceivePropUpdate() {
  // @@protoc_insertion_point(destructor:msg.Processor_701_MahjongReceivePropUpdate)
  SharedDtor();
}

void Processor_701_MahjongReceivePropUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void Processor_701_MahjongReceivePropUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_701_MahjongReceivePropUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_701_MahjongReceivePropUpdate_descriptor_;
}

const Processor_701_MahjongReceivePropUpdate& Processor_701_MahjongReceivePropUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_701_MahjongReceivePropUpdate* Processor_701_MahjongReceivePropUpdate::default_instance_ = NULL;

Processor_701_MahjongReceivePropUpdate* Processor_701_MahjongReceivePropUpdate::New() const {
  return new Processor_701_MahjongReceivePropUpdate;
}

void Processor_701_MahjongReceivePropUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_update()) {
      if (update_ != NULL) update_->::msg::MahjongPropUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_701_MahjongReceivePropUpdate::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_701_MahjongReceivePropUpdate)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Update;
        break;
      }

      // optional .msg.MahjongPropUpdate Update = 2;
      case 2: {
        if (tag == 18) {
         parse_Update:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_701_MahjongReceivePropUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_701_MahjongReceivePropUpdate)
  return false;
#undef DO_
}

void Processor_701_MahjongReceivePropUpdate::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_701_MahjongReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.MahjongPropUpdate Update = 2;
  if (has_update()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_701_MahjongReceivePropUpdate)
}

::google_public::protobuf::uint8* Processor_701_MahjongReceivePropUpdate::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_701_MahjongReceivePropUpdate)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.MahjongPropUpdate Update = 2;
  if (has_update()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_701_MahjongReceivePropUpdate)
  return target;
}

int Processor_701_MahjongReceivePropUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.MahjongPropUpdate Update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_701_MahjongReceivePropUpdate::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_701_MahjongReceivePropUpdate* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_701_MahjongReceivePropUpdate*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_701_MahjongReceivePropUpdate::MergeFrom(const Processor_701_MahjongReceivePropUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_update()) {
      mutable_update()->::msg::MahjongPropUpdate::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_701_MahjongReceivePropUpdate::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_701_MahjongReceivePropUpdate::CopyFrom(const Processor_701_MahjongReceivePropUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_701_MahjongReceivePropUpdate::IsInitialized() const {

  return true;
}

void Processor_701_MahjongReceivePropUpdate::Swap(Processor_701_MahjongReceivePropUpdate* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_701_MahjongReceivePropUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_701_MahjongReceivePropUpdate_descriptor_;
  metadata.reflection = Processor_701_MahjongReceivePropUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_702_MahjongSendPlayerChoice::kRoomIdFieldNumber;
const int Processor_702_MahjongSendPlayerChoice::kCardFieldNumber;
const int Processor_702_MahjongSendPlayerChoice::kChoiceFieldNumber;
const int Processor_702_MahjongSendPlayerChoice::kSwitchCardFieldNumber;
const int Processor_702_MahjongSendPlayerChoice::kSuitFieldNumber;
const int Processor_702_MahjongSendPlayerChoice::kGangCardFieldNumber;
#endif  // !_MSC_VER

Processor_702_MahjongSendPlayerChoice::Processor_702_MahjongSendPlayerChoice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_702_MahjongSendPlayerChoice)
}

void Processor_702_MahjongSendPlayerChoice::InitAsDefaultInstance() {
}

Processor_702_MahjongSendPlayerChoice::Processor_702_MahjongSendPlayerChoice(const Processor_702_MahjongSendPlayerChoice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_702_MahjongSendPlayerChoice)
}

void Processor_702_MahjongSendPlayerChoice::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  card_ = 0;
  choice_ = 1;
  suit_ = 0;
  gangcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_702_MahjongSendPlayerChoice::~Processor_702_MahjongSendPlayerChoice() {
  // @@protoc_insertion_point(destructor:msg.Processor_702_MahjongSendPlayerChoice)
  SharedDtor();
}

void Processor_702_MahjongSendPlayerChoice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_702_MahjongSendPlayerChoice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_702_MahjongSendPlayerChoice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_702_MahjongSendPlayerChoice_descriptor_;
}

const Processor_702_MahjongSendPlayerChoice& Processor_702_MahjongSendPlayerChoice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_702_MahjongSendPlayerChoice* Processor_702_MahjongSendPlayerChoice::default_instance_ = NULL;

Processor_702_MahjongSendPlayerChoice* Processor_702_MahjongSendPlayerChoice::New() const {
  return new Processor_702_MahjongSendPlayerChoice;
}

void Processor_702_MahjongSendPlayerChoice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_702_MahjongSendPlayerChoice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(roomid_, card_);
    ZR_(suit_, gangcard_);
    choice_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  switchcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_702_MahjongSendPlayerChoice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_702_MahjongSendPlayerChoice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional .msg.MahjongCard Card = 2;
      case 2: {
        if (tag == 16) {
         parse_Card:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Choice;
        break;
      }

      // optional .msg.MahjongActionChoice Choice = 3;
      case 3: {
        if (tag == 24) {
         parse_Choice:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongActionChoice_IsValid(value)) {
            set_choice(static_cast< ::msg::MahjongActionChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SwitchCard;
        break;
      }

      // repeated .msg.MahjongCard SwitchCard = 4;
      case 4: {
        if (tag == 32) {
         parse_SwitchCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_switchcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_switchcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SwitchCard;
        if (input->ExpectTag(40)) goto parse_Suit;
        break;
      }

      // optional .msg.MahjongSuit Suit = 5;
      case 5: {
        if (tag == 40) {
         parse_Suit:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongSuit_IsValid(value)) {
            set_suit(static_cast< ::msg::MahjongSuit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GangCard;
        break;
      }

      // optional .msg.MahjongCard GangCard = 6;
      case 6: {
        if (tag == 48) {
         parse_GangCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_gangcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_702_MahjongSendPlayerChoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_702_MahjongSendPlayerChoice)
  return false;
#undef DO_
}

void Processor_702_MahjongSendPlayerChoice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_702_MahjongSendPlayerChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.MahjongCard Card = 2;
  if (has_card()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->card(), output);
  }

  // optional .msg.MahjongActionChoice Choice = 3;
  if (has_choice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->choice(), output);
  }

  // repeated .msg.MahjongCard SwitchCard = 4;
  for (int i = 0; i < this->switchcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->switchcard(i), output);
  }

  // optional .msg.MahjongSuit Suit = 5;
  if (has_suit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->suit(), output);
  }

  // optional .msg.MahjongCard GangCard = 6;
  if (has_gangcard()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gangcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_702_MahjongSendPlayerChoice)
}

::google_public::protobuf::uint8* Processor_702_MahjongSendPlayerChoice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_702_MahjongSendPlayerChoice)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.MahjongCard Card = 2;
  if (has_card()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->card(), target);
  }

  // optional .msg.MahjongActionChoice Choice = 3;
  if (has_choice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->choice(), target);
  }

  // repeated .msg.MahjongCard SwitchCard = 4;
  for (int i = 0; i < this->switchcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->switchcard(i), target);
  }

  // optional .msg.MahjongSuit Suit = 5;
  if (has_suit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->suit(), target);
  }

  // optional .msg.MahjongCard GangCard = 6;
  if (has_gangcard()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gangcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_702_MahjongSendPlayerChoice)
  return target;
}

int Processor_702_MahjongSendPlayerChoice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.MahjongCard Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->card());
    }

    // optional .msg.MahjongActionChoice Choice = 3;
    if (has_choice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->choice());
    }

    // optional .msg.MahjongSuit Suit = 5;
    if (has_suit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

    // optional .msg.MahjongCard GangCard = 6;
    if (has_gangcard()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->gangcard());
    }

  }
  // repeated .msg.MahjongCard SwitchCard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->switchcard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->switchcard(i));
    }
    total_size += 1 * this->switchcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_702_MahjongSendPlayerChoice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_702_MahjongSendPlayerChoice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_702_MahjongSendPlayerChoice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_702_MahjongSendPlayerChoice::MergeFrom(const Processor_702_MahjongSendPlayerChoice& from) {
  GOOGLE_CHECK_NE(&from, this);
  switchcard_.MergeFrom(from.switchcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_choice()) {
      set_choice(from.choice());
    }
    if (from.has_suit()) {
      set_suit(from.suit());
    }
    if (from.has_gangcard()) {
      set_gangcard(from.gangcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_702_MahjongSendPlayerChoice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_702_MahjongSendPlayerChoice::CopyFrom(const Processor_702_MahjongSendPlayerChoice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_702_MahjongSendPlayerChoice::IsInitialized() const {

  return true;
}

void Processor_702_MahjongSendPlayerChoice::Swap(Processor_702_MahjongSendPlayerChoice* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(card_, other->card_);
    std::swap(choice_, other->choice_);
    switchcard_.Swap(&other->switchcard_);
    std::swap(suit_, other->suit_);
    std::swap(gangcard_, other->gangcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_702_MahjongSendPlayerChoice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_702_MahjongSendPlayerChoice_descriptor_;
  metadata.reflection = Processor_702_MahjongSendPlayerChoice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongAction::kUserIdFieldNumber;
const int MahjongAction::kChoiceFieldNumber;
const int MahjongAction::kScoreChangeFieldNumber;
#endif  // !_MSC_VER

MahjongAction::MahjongAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongAction)
}

void MahjongAction::InitAsDefaultInstance() {
}

MahjongAction::MahjongAction(const MahjongAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongAction)
}

void MahjongAction::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  choice_ = 1;
  scorechange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongAction::~MahjongAction() {
  // @@protoc_insertion_point(destructor:msg.MahjongAction)
  SharedDtor();
}

void MahjongAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongAction_descriptor_;
}

const MahjongAction& MahjongAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongAction* MahjongAction::default_instance_ = NULL;

MahjongAction* MahjongAction::New() const {
  return new MahjongAction;
}

void MahjongAction::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    userid_ = 0;
    choice_ = 1;
    scorechange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Choice;
        break;
      }

      // optional .msg.MahjongActionChoice Choice = 2;
      case 2: {
        if (tag == 16) {
         parse_Choice:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongActionChoice_IsValid(value)) {
            set_choice(static_cast< ::msg::MahjongActionChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ScoreChange;
        break;
      }

      // optional int32 ScoreChange = 3;
      case 3: {
        if (tag == 24) {
         parse_ScoreChange:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorechange_)));
          set_has_scorechange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongAction)
  return false;
#undef DO_
}

void MahjongAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongAction)
  // optional int32 UserId = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .msg.MahjongActionChoice Choice = 2;
  if (has_choice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->choice(), output);
  }

  // optional int32 ScoreChange = 3;
  if (has_scorechange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->scorechange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongAction)
}

::google_public::protobuf::uint8* MahjongAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongAction)
  // optional int32 UserId = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .msg.MahjongActionChoice Choice = 2;
  if (has_choice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->choice(), target);
  }

  // optional int32 ScoreChange = 3;
  if (has_scorechange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scorechange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongAction)
  return target;
}

int MahjongAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.MahjongActionChoice Choice = 2;
    if (has_choice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->choice());
    }

    // optional int32 ScoreChange = 3;
    if (has_scorechange()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->scorechange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongAction::MergeFrom(const MahjongAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_choice()) {
      set_choice(from.choice());
    }
    if (from.has_scorechange()) {
      set_scorechange(from.scorechange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongAction::CopyFrom(const MahjongAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongAction::IsInitialized() const {

  return true;
}

void MahjongAction::Swap(MahjongAction* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(choice_, other->choice_);
    std::swap(scorechange_, other->scorechange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongAction_descriptor_;
  metadata.reflection = MahjongAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongTestAllWinCardAndType::kQuemenFieldNumber;
const int MahjongTestAllWinCardAndType::kCardAndTypeFieldNumber;
#endif  // !_MSC_VER

MahjongTestAllWinCardAndType::MahjongTestAllWinCardAndType()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongTestAllWinCardAndType)
}

void MahjongTestAllWinCardAndType::InitAsDefaultInstance() {
}

MahjongTestAllWinCardAndType::MahjongTestAllWinCardAndType(const MahjongTestAllWinCardAndType& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongTestAllWinCardAndType)
}

void MahjongTestAllWinCardAndType::SharedCtor() {
  _cached_size_ = 0;
  quemen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongTestAllWinCardAndType::~MahjongTestAllWinCardAndType() {
  // @@protoc_insertion_point(destructor:msg.MahjongTestAllWinCardAndType)
  SharedDtor();
}

void MahjongTestAllWinCardAndType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongTestAllWinCardAndType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongTestAllWinCardAndType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongTestAllWinCardAndType_descriptor_;
}

const MahjongTestAllWinCardAndType& MahjongTestAllWinCardAndType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongTestAllWinCardAndType* MahjongTestAllWinCardAndType::default_instance_ = NULL;

MahjongTestAllWinCardAndType* MahjongTestAllWinCardAndType::New() const {
  return new MahjongTestAllWinCardAndType;
}

void MahjongTestAllWinCardAndType::Clear() {
  quemen_ = 0;
  cardandtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongTestAllWinCardAndType::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongTestAllWinCardAndType)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.MahjongSuit quemen = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongSuit_IsValid(value)) {
            set_quemen(static_cast< ::msg::MahjongSuit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CardAndType;
        break;
      }

      // repeated .msg.MahjongWinCardAndType CardAndType = 2;
      case 2: {
        if (tag == 18) {
         parse_CardAndType:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardandtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CardAndType;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongTestAllWinCardAndType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongTestAllWinCardAndType)
  return false;
#undef DO_
}

void MahjongTestAllWinCardAndType::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongTestAllWinCardAndType)
  // optional .msg.MahjongSuit quemen = 1;
  if (has_quemen()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->quemen(), output);
  }

  // repeated .msg.MahjongWinCardAndType CardAndType = 2;
  for (int i = 0; i < this->cardandtype_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cardandtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongTestAllWinCardAndType)
}

::google_public::protobuf::uint8* MahjongTestAllWinCardAndType::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongTestAllWinCardAndType)
  // optional .msg.MahjongSuit quemen = 1;
  if (has_quemen()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->quemen(), target);
  }

  // repeated .msg.MahjongWinCardAndType CardAndType = 2;
  for (int i = 0; i < this->cardandtype_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cardandtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongTestAllWinCardAndType)
  return target;
}

int MahjongTestAllWinCardAndType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.MahjongSuit quemen = 1;
    if (has_quemen()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->quemen());
    }

  }
  // repeated .msg.MahjongWinCardAndType CardAndType = 2;
  total_size += 1 * this->cardandtype_size();
  for (int i = 0; i < this->cardandtype_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardandtype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongTestAllWinCardAndType::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongTestAllWinCardAndType* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongTestAllWinCardAndType*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongTestAllWinCardAndType::MergeFrom(const MahjongTestAllWinCardAndType& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardandtype_.MergeFrom(from.cardandtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quemen()) {
      set_quemen(from.quemen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongTestAllWinCardAndType::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongTestAllWinCardAndType::CopyFrom(const MahjongTestAllWinCardAndType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongTestAllWinCardAndType::IsInitialized() const {

  return true;
}

void MahjongTestAllWinCardAndType::Swap(MahjongTestAllWinCardAndType* other) {
  if (other != this) {
    std::swap(quemen_, other->quemen_);
    cardandtype_.Swap(&other->cardandtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongTestAllWinCardAndType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongTestAllWinCardAndType_descriptor_;
  metadata.reflection = MahjongTestAllWinCardAndType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongWinCardAndType::kWintypeFieldNumber;
const int MahjongWinCardAndType::kHandCardFieldNumber;
const int MahjongWinCardAndType::kFuPaiFieldNumber;
const int MahjongWinCardAndType::kZiMoPaiFieldNumber;
const int MahjongWinCardAndType::kDianPaoPaiFieldNumber;
#endif  // !_MSC_VER

MahjongWinCardAndType::MahjongWinCardAndType()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongWinCardAndType)
}

void MahjongWinCardAndType::InitAsDefaultInstance() {
}

MahjongWinCardAndType::MahjongWinCardAndType(const MahjongWinCardAndType& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongWinCardAndType)
}

void MahjongWinCardAndType::SharedCtor() {
  _cached_size_ = 0;
  zimopai_ = 0;
  dianpaopai_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongWinCardAndType::~MahjongWinCardAndType() {
  // @@protoc_insertion_point(destructor:msg.MahjongWinCardAndType)
  SharedDtor();
}

void MahjongWinCardAndType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongWinCardAndType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongWinCardAndType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongWinCardAndType_descriptor_;
}

const MahjongWinCardAndType& MahjongWinCardAndType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongWinCardAndType* MahjongWinCardAndType::default_instance_ = NULL;

MahjongWinCardAndType* MahjongWinCardAndType::New() const {
  return new MahjongWinCardAndType;
}

void MahjongWinCardAndType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongWinCardAndType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zimopai_, dianpaopai_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  wintype_.Clear();
  handcard_.Clear();
  fupai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongWinCardAndType::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongWinCardAndType)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.SiChuanMahjongWinType wintype = 1;
      case 1: {
        if (tag == 8) {
         parse_wintype:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::SiChuanMahjongWinType_IsValid(value)) {
            add_wintype(static_cast< ::msg::SiChuanMahjongWinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::SiChuanMahjongWinType_IsValid,
                 this->mutable_wintype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_wintype;
        if (input->ExpectTag(16)) goto parse_handCard;
        break;
      }

      // repeated .msg.MahjongCard handCard = 2;
      case 2: {
        if (tag == 16) {
         parse_handCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_handcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_handcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handCard;
        if (input->ExpectTag(26)) goto parse_fuPai;
        break;
      }

      // repeated .msg.MahjongFu fuPai = 3;
      case 3: {
        if (tag == 26) {
         parse_fuPai:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fupai()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fuPai;
        if (input->ExpectTag(32)) goto parse_ziMoPai;
        break;
      }

      // optional .msg.MahjongCard ziMoPai = 4;
      case 4: {
        if (tag == 32) {
         parse_ziMoPai:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_zimopai(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dianPaoPai;
        break;
      }

      // optional .msg.MahjongCard dianPaoPai = 5;
      case 5: {
        if (tag == 40) {
         parse_dianPaoPai:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_dianpaopai(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongWinCardAndType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongWinCardAndType)
  return false;
#undef DO_
}

void MahjongWinCardAndType::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongWinCardAndType)
  // repeated .msg.SiChuanMahjongWinType wintype = 1;
  for (int i = 0; i < this->wintype_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->wintype(i), output);
  }

  // repeated .msg.MahjongCard handCard = 2;
  for (int i = 0; i < this->handcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->handcard(i), output);
  }

  // repeated .msg.MahjongFu fuPai = 3;
  for (int i = 0; i < this->fupai_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fupai(i), output);
  }

  // optional .msg.MahjongCard ziMoPai = 4;
  if (has_zimopai()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->zimopai(), output);
  }

  // optional .msg.MahjongCard dianPaoPai = 5;
  if (has_dianpaopai()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dianpaopai(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongWinCardAndType)
}

::google_public::protobuf::uint8* MahjongWinCardAndType::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongWinCardAndType)
  // repeated .msg.SiChuanMahjongWinType wintype = 1;
  for (int i = 0; i < this->wintype_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->wintype(i), target);
  }

  // repeated .msg.MahjongCard handCard = 2;
  for (int i = 0; i < this->handcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->handcard(i), target);
  }

  // repeated .msg.MahjongFu fuPai = 3;
  for (int i = 0; i < this->fupai_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fupai(i), target);
  }

  // optional .msg.MahjongCard ziMoPai = 4;
  if (has_zimopai()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->zimopai(), target);
  }

  // optional .msg.MahjongCard dianPaoPai = 5;
  if (has_dianpaopai()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dianpaopai(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongWinCardAndType)
  return target;
}

int MahjongWinCardAndType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .msg.MahjongCard ziMoPai = 4;
    if (has_zimopai()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->zimopai());
    }

    // optional .msg.MahjongCard dianPaoPai = 5;
    if (has_dianpaopai()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->dianpaopai());
    }

  }
  // repeated .msg.SiChuanMahjongWinType wintype = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->wintype_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->wintype(i));
    }
    total_size += 1 * this->wintype_size() + data_size;
  }

  // repeated .msg.MahjongCard handCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->handcard(i));
    }
    total_size += 1 * this->handcard_size() + data_size;
  }

  // repeated .msg.MahjongFu fuPai = 3;
  total_size += 1 * this->fupai_size();
  for (int i = 0; i < this->fupai_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fupai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongWinCardAndType::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongWinCardAndType* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongWinCardAndType*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongWinCardAndType::MergeFrom(const MahjongWinCardAndType& from) {
  GOOGLE_CHECK_NE(&from, this);
  wintype_.MergeFrom(from.wintype_);
  handcard_.MergeFrom(from.handcard_);
  fupai_.MergeFrom(from.fupai_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_zimopai()) {
      set_zimopai(from.zimopai());
    }
    if (from.has_dianpaopai()) {
      set_dianpaopai(from.dianpaopai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongWinCardAndType::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongWinCardAndType::CopyFrom(const MahjongWinCardAndType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongWinCardAndType::IsInitialized() const {

  return true;
}

void MahjongWinCardAndType::Swap(MahjongWinCardAndType* other) {
  if (other != this) {
    wintype_.Swap(&other->wintype_);
    handcard_.Swap(&other->handcard_);
    fupai_.Swap(&other->fupai_);
    std::swap(zimopai_, other->zimopai_);
    std::swap(dianpaopai_, other->dianpaopai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongWinCardAndType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongWinCardAndType_descriptor_;
  metadata.reflection = MahjongWinCardAndType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_703_MahjongReceivePlayerAction::kRoomIdFieldNumber;
const int Processor_703_MahjongReceivePlayerAction::kActionFieldNumber;
const int Processor_703_MahjongReceivePlayerAction::kSwitchTypeFieldNumber;
#endif  // !_MSC_VER

Processor_703_MahjongReceivePlayerAction::Processor_703_MahjongReceivePlayerAction()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_703_MahjongReceivePlayerAction)
}

void Processor_703_MahjongReceivePlayerAction::InitAsDefaultInstance() {
}

Processor_703_MahjongReceivePlayerAction::Processor_703_MahjongReceivePlayerAction(const Processor_703_MahjongReceivePlayerAction& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_703_MahjongReceivePlayerAction)
}

void Processor_703_MahjongReceivePlayerAction::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  switchtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_703_MahjongReceivePlayerAction::~Processor_703_MahjongReceivePlayerAction() {
  // @@protoc_insertion_point(destructor:msg.Processor_703_MahjongReceivePlayerAction)
  SharedDtor();
}

void Processor_703_MahjongReceivePlayerAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_703_MahjongReceivePlayerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_703_MahjongReceivePlayerAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_703_MahjongReceivePlayerAction_descriptor_;
}

const Processor_703_MahjongReceivePlayerAction& Processor_703_MahjongReceivePlayerAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_703_MahjongReceivePlayerAction* Processor_703_MahjongReceivePlayerAction::default_instance_ = NULL;

Processor_703_MahjongReceivePlayerAction* Processor_703_MahjongReceivePlayerAction::New() const {
  return new Processor_703_MahjongReceivePlayerAction;
}

void Processor_703_MahjongReceivePlayerAction::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    roomid_ = 0;
    switchtype_ = 1;
  }
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_703_MahjongReceivePlayerAction::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_703_MahjongReceivePlayerAction)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Action;
        break;
      }

      // repeated .msg.MahjongAction Action = 2;
      case 2: {
        if (tag == 18) {
         parse_Action:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Action;
        if (input->ExpectTag(24)) goto parse_SwitchType;
        break;
      }

      // optional .msg.MahjongCardSwitchType SwitchType = 3;
      case 3: {
        if (tag == 24) {
         parse_SwitchType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCardSwitchType_IsValid(value)) {
            set_switchtype(static_cast< ::msg::MahjongCardSwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_703_MahjongReceivePlayerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_703_MahjongReceivePlayerAction)
  return false;
#undef DO_
}

void Processor_703_MahjongReceivePlayerAction::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_703_MahjongReceivePlayerAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated .msg.MahjongAction Action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(i), output);
  }

  // optional .msg.MahjongCardSwitchType SwitchType = 3;
  if (has_switchtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->switchtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_703_MahjongReceivePlayerAction)
}

::google_public::protobuf::uint8* Processor_703_MahjongReceivePlayerAction::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_703_MahjongReceivePlayerAction)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated .msg.MahjongAction Action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(i), target);
  }

  // optional .msg.MahjongCardSwitchType SwitchType = 3;
  if (has_switchtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->switchtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_703_MahjongReceivePlayerAction)
  return target;
}

int Processor_703_MahjongReceivePlayerAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.MahjongCardSwitchType SwitchType = 3;
    if (has_switchtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->switchtype());
    }

  }
  // repeated .msg.MahjongAction Action = 2;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_703_MahjongReceivePlayerAction::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_703_MahjongReceivePlayerAction* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_703_MahjongReceivePlayerAction*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_703_MahjongReceivePlayerAction::MergeFrom(const Processor_703_MahjongReceivePlayerAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_switchtype()) {
      set_switchtype(from.switchtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_703_MahjongReceivePlayerAction::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_703_MahjongReceivePlayerAction::CopyFrom(const Processor_703_MahjongReceivePlayerAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_703_MahjongReceivePlayerAction::IsInitialized() const {

  return true;
}

void Processor_703_MahjongReceivePlayerAction::Swap(Processor_703_MahjongReceivePlayerAction* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    action_.Swap(&other->action_);
    std::swap(switchtype_, other->switchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_703_MahjongReceivePlayerAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_703_MahjongReceivePlayerAction_descriptor_;
  metadata.reflection = Processor_703_MahjongReceivePlayerAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_715_MahjongSendSetting::kRoomIdFieldNumber;
const int Processor_715_MahjongSendSetting::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_715_MahjongSendSetting::Processor_715_MahjongSendSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_715_MahjongSendSetting)
}

void Processor_715_MahjongSendSetting::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::MahjongPlayerSetting*>(&::msg::MahjongPlayerSetting::default_instance());
}

Processor_715_MahjongSendSetting::Processor_715_MahjongSendSetting(const Processor_715_MahjongSendSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_715_MahjongSendSetting)
}

void Processor_715_MahjongSendSetting::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_715_MahjongSendSetting::~Processor_715_MahjongSendSetting() {
  // @@protoc_insertion_point(destructor:msg.Processor_715_MahjongSendSetting)
  SharedDtor();
}

void Processor_715_MahjongSendSetting::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_715_MahjongSendSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_715_MahjongSendSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_715_MahjongSendSetting_descriptor_;
}

const Processor_715_MahjongSendSetting& Processor_715_MahjongSendSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_715_MahjongSendSetting* Processor_715_MahjongSendSetting::default_instance_ = NULL;

Processor_715_MahjongSendSetting* Processor_715_MahjongSendSetting::New() const {
  return new Processor_715_MahjongSendSetting;
}

void Processor_715_MahjongSendSetting::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::MahjongPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_715_MahjongSendSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_715_MahjongSendSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.MahjongPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_715_MahjongSendSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_715_MahjongSendSetting)
  return false;
#undef DO_
}

void Processor_715_MahjongSendSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_715_MahjongSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.MahjongPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_715_MahjongSendSetting)
}

::google_public::protobuf::uint8* Processor_715_MahjongSendSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_715_MahjongSendSetting)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.MahjongPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_715_MahjongSendSetting)
  return target;
}

int Processor_715_MahjongSendSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.MahjongPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_715_MahjongSendSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_715_MahjongSendSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_715_MahjongSendSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_715_MahjongSendSetting::MergeFrom(const Processor_715_MahjongSendSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::MahjongPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_715_MahjongSendSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_715_MahjongSendSetting::CopyFrom(const Processor_715_MahjongSendSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_715_MahjongSendSetting::IsInitialized() const {

  return true;
}

void Processor_715_MahjongSendSetting::Swap(Processor_715_MahjongSendSetting* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_715_MahjongSendSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_715_MahjongSendSetting_descriptor_;
  metadata.reflection = Processor_715_MahjongSendSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_716_MahjongReceiveSettingChange::kRoomIdFieldNumber;
const int Processor_716_MahjongReceiveSettingChange::kSettingsFieldNumber;
#endif  // !_MSC_VER

Processor_716_MahjongReceiveSettingChange::Processor_716_MahjongReceiveSettingChange()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_716_MahjongReceiveSettingChange)
}

void Processor_716_MahjongReceiveSettingChange::InitAsDefaultInstance() {
  settings_ = const_cast< ::msg::MahjongPlayerSetting*>(&::msg::MahjongPlayerSetting::default_instance());
}

Processor_716_MahjongReceiveSettingChange::Processor_716_MahjongReceiveSettingChange(const Processor_716_MahjongReceiveSettingChange& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_716_MahjongReceiveSettingChange)
}

void Processor_716_MahjongReceiveSettingChange::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_716_MahjongReceiveSettingChange::~Processor_716_MahjongReceiveSettingChange() {
  // @@protoc_insertion_point(destructor:msg.Processor_716_MahjongReceiveSettingChange)
  SharedDtor();
}

void Processor_716_MahjongReceiveSettingChange::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void Processor_716_MahjongReceiveSettingChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_716_MahjongReceiveSettingChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_716_MahjongReceiveSettingChange_descriptor_;
}

const Processor_716_MahjongReceiveSettingChange& Processor_716_MahjongReceiveSettingChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_716_MahjongReceiveSettingChange* Processor_716_MahjongReceiveSettingChange::default_instance_ = NULL;

Processor_716_MahjongReceiveSettingChange* Processor_716_MahjongReceiveSettingChange::New() const {
  return new Processor_716_MahjongReceiveSettingChange;
}

void Processor_716_MahjongReceiveSettingChange::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roomid_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::msg::MahjongPlayerSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_716_MahjongReceiveSettingChange::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_716_MahjongReceiveSettingChange)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Settings;
        break;
      }

      // optional .msg.MahjongPlayerSetting Settings = 2;
      case 2: {
        if (tag == 18) {
         parse_Settings:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_716_MahjongReceiveSettingChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_716_MahjongReceiveSettingChange)
  return false;
#undef DO_
}

void Processor_716_MahjongReceiveSettingChange::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_716_MahjongReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional .msg.MahjongPlayerSetting Settings = 2;
  if (has_settings()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_716_MahjongReceiveSettingChange)
}

::google_public::protobuf::uint8* Processor_716_MahjongReceiveSettingChange::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_716_MahjongReceiveSettingChange)
  // optional int32 RoomId = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional .msg.MahjongPlayerSetting Settings = 2;
  if (has_settings()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_716_MahjongReceiveSettingChange)
  return target;
}

int Processor_716_MahjongReceiveSettingChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional .msg.MahjongPlayerSetting Settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_716_MahjongReceiveSettingChange::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_716_MahjongReceiveSettingChange* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_716_MahjongReceiveSettingChange*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_716_MahjongReceiveSettingChange::MergeFrom(const Processor_716_MahjongReceiveSettingChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_settings()) {
      mutable_settings()->::msg::MahjongPlayerSetting::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_716_MahjongReceiveSettingChange::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_716_MahjongReceiveSettingChange::CopyFrom(const Processor_716_MahjongReceiveSettingChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_716_MahjongReceiveSettingChange::IsInitialized() const {

  return true;
}

void Processor_716_MahjongReceiveSettingChange::Swap(Processor_716_MahjongReceiveSettingChange* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_716_MahjongReceiveSettingChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_716_MahjongReceiveSettingChange_descriptor_;
  metadata.reflection = Processor_716_MahjongReceiveSettingChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_300_PokerGetHandHistory_UP::kHandIdFieldNumber;
const int Processor_300_PokerGetHandHistory_UP::kIsPokerFieldNumber;
#endif  // !_MSC_VER

Processor_300_PokerGetHandHistory_UP::Processor_300_PokerGetHandHistory_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_300_PokerGetHandHistory_UP)
}

void Processor_300_PokerGetHandHistory_UP::InitAsDefaultInstance() {
}

Processor_300_PokerGetHandHistory_UP::Processor_300_PokerGetHandHistory_UP(const Processor_300_PokerGetHandHistory_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_300_PokerGetHandHistory_UP)
}

void Processor_300_PokerGetHandHistory_UP::SharedCtor() {
  _cached_size_ = 0;
  handid_ = 0;
  ispoker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_300_PokerGetHandHistory_UP::~Processor_300_PokerGetHandHistory_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_300_PokerGetHandHistory_UP)
  SharedDtor();
}

void Processor_300_PokerGetHandHistory_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_300_PokerGetHandHistory_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_300_PokerGetHandHistory_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_300_PokerGetHandHistory_UP_descriptor_;
}

const Processor_300_PokerGetHandHistory_UP& Processor_300_PokerGetHandHistory_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_300_PokerGetHandHistory_UP* Processor_300_PokerGetHandHistory_UP::default_instance_ = NULL;

Processor_300_PokerGetHandHistory_UP* Processor_300_PokerGetHandHistory_UP::New() const {
  return new Processor_300_PokerGetHandHistory_UP;
}

void Processor_300_PokerGetHandHistory_UP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_300_PokerGetHandHistory_UP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(handid_, ispoker_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_300_PokerGetHandHistory_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_300_PokerGetHandHistory_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HandId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isPoker;
        break;
      }

      // optional bool isPoker = 2;
      case 2: {
        if (tag == 16) {
         parse_isPoker:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispoker_)));
          set_has_ispoker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_300_PokerGetHandHistory_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_300_PokerGetHandHistory_UP)
  return false;
#undef DO_
}

void Processor_300_PokerGetHandHistory_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_300_PokerGetHandHistory_UP)
  // optional int32 HandId = 1;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->handid(), output);
  }

  // optional bool isPoker = 2;
  if (has_ispoker()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->ispoker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_300_PokerGetHandHistory_UP)
}

::google_public::protobuf::uint8* Processor_300_PokerGetHandHistory_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_300_PokerGetHandHistory_UP)
  // optional int32 HandId = 1;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handid(), target);
  }

  // optional bool isPoker = 2;
  if (has_ispoker()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispoker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_300_PokerGetHandHistory_UP)
  return target;
}

int Processor_300_PokerGetHandHistory_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HandId = 1;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional bool isPoker = 2;
    if (has_ispoker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_300_PokerGetHandHistory_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_300_PokerGetHandHistory_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_300_PokerGetHandHistory_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_300_PokerGetHandHistory_UP::MergeFrom(const Processor_300_PokerGetHandHistory_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_ispoker()) {
      set_ispoker(from.ispoker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_300_PokerGetHandHistory_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_300_PokerGetHandHistory_UP::CopyFrom(const Processor_300_PokerGetHandHistory_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_300_PokerGetHandHistory_UP::IsInitialized() const {

  return true;
}

void Processor_300_PokerGetHandHistory_UP::Swap(Processor_300_PokerGetHandHistory_UP* other) {
  if (other != this) {
    std::swap(handid_, other->handid_);
    std::swap(ispoker_, other->ispoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_300_PokerGetHandHistory_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_300_PokerGetHandHistory_UP_descriptor_;
  metadata.reflection = Processor_300_PokerGetHandHistory_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerStep::kTypeFieldNumber;
const int PokerStep::kTextFieldNumber;
const int PokerStep::kRoundFieldNumber;
const int PokerStep::kPlayerActionFieldNumber;
const int PokerStep::kCommunityChangeFieldNumber;
const int PokerStep::kBlindsFieldNumber;
#endif  // !_MSC_VER

PokerStep::PokerStep()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerStep)
}

void PokerStep::InitAsDefaultInstance() {
  playeraction_ = const_cast< ::msg::PokerPlayerActionInfo*>(&::msg::PokerPlayerActionInfo::default_instance());
  communitychange_ = const_cast< ::msg::TableInfo*>(&::msg::TableInfo::default_instance());
  blinds_ = const_cast< ::msg::PokerBlinds*>(&::msg::PokerBlinds::default_instance());
}

PokerStep::PokerStep(const PokerStep& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerStep)
}

void PokerStep::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  text_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  round_ = 0;
  playeraction_ = NULL;
  communitychange_ = NULL;
  blinds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerStep::~PokerStep() {
  // @@protoc_insertion_point(destructor:msg.PokerStep)
  SharedDtor();
}

void PokerStep::SharedDtor() {
  if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
    delete playeraction_;
    delete communitychange_;
    delete blinds_;
  }
}

void PokerStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerStep_descriptor_;
}

const PokerStep& PokerStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerStep* PokerStep::default_instance_ = NULL;

PokerStep* PokerStep::New() const {
  return new PokerStep;
}

void PokerStep::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 1;
    if (has_text()) {
      if (text_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    round_ = 0;
    if (has_playeraction()) {
      if (playeraction_ != NULL) playeraction_->::msg::PokerPlayerActionInfo::Clear();
    }
    if (has_communitychange()) {
      if (communitychange_ != NULL) communitychange_->::msg::TableInfo::Clear();
    }
    if (has_blinds()) {
      if (blinds_ != NULL) blinds_->::msg::PokerBlinds::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerStep::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerStep)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.PokerStepType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::PokerStepType_IsValid(value)) {
            set_type(static_cast< ::msg::PokerStepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Text;
        break;
      }

      // optional string Text = 2;
      case 2: {
        if (tag == 18) {
         parse_Text:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Round;
        break;
      }

      // optional .msg.PokerRoundType Round = 3;
      case 3: {
        if (tag == 24) {
         parse_Round:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::PokerRoundType_IsValid(value)) {
            set_round(static_cast< ::msg::PokerRoundType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PlayerAction;
        break;
      }

      // optional .msg.PokerPlayerActionInfo PlayerAction = 4;
      case 4: {
        if (tag == 34) {
         parse_PlayerAction:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeraction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CommunityChange;
        break;
      }

      // optional .msg.TableInfo CommunityChange = 5;
      case 5: {
        if (tag == 42) {
         parse_CommunityChange:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_communitychange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Blinds;
        break;
      }

      // optional .msg.PokerBlinds Blinds = 6;
      case 6: {
        if (tag == 50) {
         parse_Blinds:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blinds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerStep)
  return false;
#undef DO_
}

void PokerStep::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerStep)
  // optional .msg.PokerStepType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string Text = 2;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional .msg.PokerRoundType Round = 3;
  if (has_round()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->round(), output);
  }

  // optional .msg.PokerPlayerActionInfo PlayerAction = 4;
  if (has_playeraction()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playeraction(), output);
  }

  // optional .msg.TableInfo CommunityChange = 5;
  if (has_communitychange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->communitychange(), output);
  }

  // optional .msg.PokerBlinds Blinds = 6;
  if (has_blinds()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blinds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerStep)
}

::google_public::protobuf::uint8* PokerStep::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerStep)
  // optional .msg.PokerStepType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string Text = 2;
  if (has_text()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional .msg.PokerRoundType Round = 3;
  if (has_round()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->round(), target);
  }

  // optional .msg.PokerPlayerActionInfo PlayerAction = 4;
  if (has_playeraction()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playeraction(), target);
  }

  // optional .msg.TableInfo CommunityChange = 5;
  if (has_communitychange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->communitychange(), target);
  }

  // optional .msg.PokerBlinds Blinds = 6;
  if (has_blinds()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->blinds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerStep)
  return target;
}

int PokerStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.PokerStepType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string Text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .msg.PokerRoundType Round = 3;
    if (has_round()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->round());
    }

    // optional .msg.PokerPlayerActionInfo PlayerAction = 4;
    if (has_playeraction()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeraction());
    }

    // optional .msg.TableInfo CommunityChange = 5;
    if (has_communitychange()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->communitychange());
    }

    // optional .msg.PokerBlinds Blinds = 6;
    if (has_blinds()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blinds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerStep::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerStep* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerStep*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerStep::MergeFrom(const PokerStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_playeraction()) {
      mutable_playeraction()->::msg::PokerPlayerActionInfo::MergeFrom(from.playeraction());
    }
    if (from.has_communitychange()) {
      mutable_communitychange()->::msg::TableInfo::MergeFrom(from.communitychange());
    }
    if (from.has_blinds()) {
      mutable_blinds()->::msg::PokerBlinds::MergeFrom(from.blinds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerStep::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerStep::CopyFrom(const PokerStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerStep::IsInitialized() const {

  return true;
}

void PokerStep::Swap(PokerStep* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(round_, other->round_);
    std::swap(playeraction_, other->playeraction_);
    std::swap(communitychange_, other->communitychange_);
    std::swap(blinds_, other->blinds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerStep_descriptor_;
  metadata.reflection = PokerStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerBlinds::kBlindFieldNumber;
#endif  // !_MSC_VER

PokerBlinds::PokerBlinds()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerBlinds)
}

void PokerBlinds::InitAsDefaultInstance() {
}

PokerBlinds::PokerBlinds(const PokerBlinds& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerBlinds)
}

void PokerBlinds::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerBlinds::~PokerBlinds() {
  // @@protoc_insertion_point(destructor:msg.PokerBlinds)
  SharedDtor();
}

void PokerBlinds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerBlinds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerBlinds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerBlinds_descriptor_;
}

const PokerBlinds& PokerBlinds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerBlinds* PokerBlinds::default_instance_ = NULL;

PokerBlinds* PokerBlinds::New() const {
  return new PokerBlinds;
}

void PokerBlinds::Clear() {
  blind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerBlinds::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerBlinds)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.PokerBlind Blind = 1;
      case 1: {
        if (tag == 10) {
         parse_Blind:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blind()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Blind;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerBlinds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerBlinds)
  return false;
#undef DO_
}

void PokerBlinds::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerBlinds)
  // repeated .msg.PokerBlind Blind = 1;
  for (int i = 0; i < this->blind_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blind(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerBlinds)
}

::google_public::protobuf::uint8* PokerBlinds::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerBlinds)
  // repeated .msg.PokerBlind Blind = 1;
  for (int i = 0; i < this->blind_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blind(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerBlinds)
  return target;
}

int PokerBlinds::ByteSize() const {
  int total_size = 0;

  // repeated .msg.PokerBlind Blind = 1;
  total_size += 1 * this->blind_size();
  for (int i = 0; i < this->blind_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blind(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerBlinds::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerBlinds* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerBlinds*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerBlinds::MergeFrom(const PokerBlinds& from) {
  GOOGLE_CHECK_NE(&from, this);
  blind_.MergeFrom(from.blind_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerBlinds::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerBlinds::CopyFrom(const PokerBlinds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerBlinds::IsInitialized() const {

  return true;
}

void PokerBlinds::Swap(PokerBlinds* other) {
  if (other != this) {
    blind_.Swap(&other->blind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerBlinds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerBlinds_descriptor_;
  metadata.reflection = PokerBlinds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerBlind::kUserIDFieldNumber;
const int PokerBlind::kTypeFieldNumber;
const int PokerBlind::kAmountFieldNumber;
#endif  // !_MSC_VER

PokerBlind::PokerBlind()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerBlind)
}

void PokerBlind::InitAsDefaultInstance() {
}

PokerBlind::PokerBlind(const PokerBlind& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerBlind)
}

void PokerBlind::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  type_ = 1;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerBlind::~PokerBlind() {
  // @@protoc_insertion_point(destructor:msg.PokerBlind)
  SharedDtor();
}

void PokerBlind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerBlind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerBlind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerBlind_descriptor_;
}

const PokerBlind& PokerBlind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerBlind* PokerBlind::default_instance_ = NULL;

PokerBlind* PokerBlind::New() const {
  return new PokerBlind;
}

void PokerBlind::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    userid_ = 0;
    type_ = 1;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerBlind::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerBlind)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .msg.BlindType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::BlindType_IsValid(value)) {
            set_type(static_cast< ::msg::BlindType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Amount;
        break;
      }

      // optional int32 Amount = 3;
      case 3: {
        if (tag == 24) {
         parse_Amount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerBlind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerBlind)
  return false;
#undef DO_
}

void PokerBlind::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerBlind)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .msg.BlindType Type = 2;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerBlind)
}

::google_public::protobuf::uint8* PokerBlind::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerBlind)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .msg.BlindType Type = 2;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerBlind)
  return target;
}

int PokerBlind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.BlindType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 Amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerBlind::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerBlind* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerBlind*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerBlind::MergeFrom(const PokerBlind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerBlind::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerBlind::CopyFrom(const PokerBlind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerBlind::IsInitialized() const {

  return true;
}

void PokerBlind::Swap(PokerBlind* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerBlind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerBlind_descriptor_;
  metadata.reflection = PokerBlind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerPlayerActionInfo::kUserIDFieldNumber;
const int PokerPlayerActionInfo::kActionFieldNumber;
const int PokerPlayerActionInfo::kAmountFieldNumber;
#endif  // !_MSC_VER

PokerPlayerActionInfo::PokerPlayerActionInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PokerPlayerActionInfo)
}

void PokerPlayerActionInfo::InitAsDefaultInstance() {
}

PokerPlayerActionInfo::PokerPlayerActionInfo(const PokerPlayerActionInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.PokerPlayerActionInfo)
}

void PokerPlayerActionInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  action_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerPlayerActionInfo::~PokerPlayerActionInfo() {
  // @@protoc_insertion_point(destructor:msg.PokerPlayerActionInfo)
  SharedDtor();
}

void PokerPlayerActionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerPlayerActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* PokerPlayerActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerPlayerActionInfo_descriptor_;
}

const PokerPlayerActionInfo& PokerPlayerActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PokerPlayerActionInfo* PokerPlayerActionInfo::default_instance_ = NULL;

PokerPlayerActionInfo* PokerPlayerActionInfo::New() const {
  return new PokerPlayerActionInfo;
}

void PokerPlayerActionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PokerPlayerActionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerPlayerActionInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.PokerPlayerActionInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Action;
        break;
      }

      // optional .msg.ActionStatus Action = 2;
      case 2: {
        if (tag == 16) {
         parse_Action:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ActionStatus_IsValid(value)) {
            set_action(static_cast< ::msg::ActionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Amount;
        break;
      }

      // optional int32 Amount = 3;
      case 3: {
        if (tag == 24) {
         parse_Amount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.PokerPlayerActionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.PokerPlayerActionInfo)
  return false;
#undef DO_
}

void PokerPlayerActionInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.PokerPlayerActionInfo)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional .msg.ActionStatus Action = 2;
  if (has_action()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.PokerPlayerActionInfo)
}

::google_public::protobuf::uint8* PokerPlayerActionInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PokerPlayerActionInfo)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional .msg.ActionStatus Action = 2;
  if (has_action()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional int32 Amount = 3;
  if (has_amount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PokerPlayerActionInfo)
  return target;
}

int PokerPlayerActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.ActionStatus Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int32 Amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerPlayerActionInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerPlayerActionInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const PokerPlayerActionInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerPlayerActionInfo::MergeFrom(const PokerPlayerActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerPlayerActionInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerPlayerActionInfo::CopyFrom(const PokerPlayerActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerPlayerActionInfo::IsInitialized() const {

  return true;
}

void PokerPlayerActionInfo::Swap(PokerPlayerActionInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(action_, other->action_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata PokerPlayerActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = PokerPlayerActionInfo_descriptor_;
  metadata.reflection = PokerPlayerActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCStep::kTypeFieldNumber;
const int OFCStep::kActionFieldNumber;
#endif  // !_MSC_VER

OFCStep::OFCStep()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCStep)
}

void OFCStep::InitAsDefaultInstance() {
  action_ = const_cast< ::msg::OFCPlayerActionInfo*>(&::msg::OFCPlayerActionInfo::default_instance());
}

OFCStep::OFCStep(const OFCStep& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCStep)
}

void OFCStep::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCStep::~OFCStep() {
  // @@protoc_insertion_point(destructor:msg.OFCStep)
  SharedDtor();
}

void OFCStep::SharedDtor() {
  if (this != default_instance_) {
    delete action_;
  }
}

void OFCStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCStep_descriptor_;
}

const OFCStep& OFCStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCStep* OFCStep::default_instance_ = NULL;

OFCStep* OFCStep::New() const {
  return new OFCStep;
}

void OFCStep::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_action()) {
      if (action_ != NULL) action_->::msg::OFCPlayerActionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCStep::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCStep)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.OFCStepType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::OFCStepType_IsValid(value)) {
            set_type(static_cast< ::msg::OFCStepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Action;
        break;
      }

      // optional .msg.OFCPlayerActionInfo Action = 2;
      case 2: {
        if (tag == 18) {
         parse_Action:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCStep)
  return false;
#undef DO_
}

void OFCStep::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCStep)
  // optional .msg.OFCStepType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .msg.OFCPlayerActionInfo Action = 2;
  if (has_action()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCStep)
}

::google_public::protobuf::uint8* OFCStep::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCStep)
  // optional .msg.OFCStepType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .msg.OFCPlayerActionInfo Action = 2;
  if (has_action()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCStep)
  return target;
}

int OFCStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.OFCStepType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.OFCPlayerActionInfo Action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCStep::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCStep* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCStep*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCStep::MergeFrom(const OFCStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_action()) {
      mutable_action()->::msg::OFCPlayerActionInfo::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCStep::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCStep::CopyFrom(const OFCStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCStep::IsInitialized() const {

  return true;
}

void OFCStep::Swap(OFCStep* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCStep_descriptor_;
  metadata.reflection = OFCStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OFCPlayerActionInfo::kUserIDFieldNumber;
const int OFCPlayerActionInfo::kPlayerCardFieldNumber;
#endif  // !_MSC_VER

OFCPlayerActionInfo::OFCPlayerActionInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OFCPlayerActionInfo)
}

void OFCPlayerActionInfo::InitAsDefaultInstance() {
}

OFCPlayerActionInfo::OFCPlayerActionInfo(const OFCPlayerActionInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OFCPlayerActionInfo)
}

void OFCPlayerActionInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OFCPlayerActionInfo::~OFCPlayerActionInfo() {
  // @@protoc_insertion_point(destructor:msg.OFCPlayerActionInfo)
  SharedDtor();
}

void OFCPlayerActionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OFCPlayerActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OFCPlayerActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OFCPlayerActionInfo_descriptor_;
}

const OFCPlayerActionInfo& OFCPlayerActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OFCPlayerActionInfo* OFCPlayerActionInfo::default_instance_ = NULL;

OFCPlayerActionInfo* OFCPlayerActionInfo::New() const {
  return new OFCPlayerActionInfo;
}

void OFCPlayerActionInfo::Clear() {
  userid_ = 0;
  playercard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OFCPlayerActionInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OFCPlayerActionInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerCard;
        break;
      }

      // repeated .msg.OFCPlayerCard PlayerCard = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerCard:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OFCPlayerActionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OFCPlayerActionInfo)
  return false;
#undef DO_
}

void OFCPlayerActionInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OFCPlayerActionInfo)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated .msg.OFCPlayerCard PlayerCard = 2;
  for (int i = 0; i < this->playercard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playercard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OFCPlayerActionInfo)
}

::google_public::protobuf::uint8* OFCPlayerActionInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OFCPlayerActionInfo)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated .msg.OFCPlayerCard PlayerCard = 2;
  for (int i = 0; i < this->playercard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playercard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OFCPlayerActionInfo)
  return target;
}

int OFCPlayerActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated .msg.OFCPlayerCard PlayerCard = 2;
  total_size += 1 * this->playercard_size();
  for (int i = 0; i < this->playercard_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playercard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OFCPlayerActionInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OFCPlayerActionInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OFCPlayerActionInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OFCPlayerActionInfo::MergeFrom(const OFCPlayerActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playercard_.MergeFrom(from.playercard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OFCPlayerActionInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OFCPlayerActionInfo::CopyFrom(const OFCPlayerActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OFCPlayerActionInfo::IsInitialized() const {

  return true;
}

void OFCPlayerActionInfo::Swap(OFCPlayerActionInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    playercard_.Swap(&other->playercard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OFCPlayerActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OFCPlayerActionInfo_descriptor_;
  metadata.reflection = OFCPlayerActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MahjongStep::kTypeFieldNumber;
const int MahjongStep::kActionTypeFieldNumber;
const int MahjongStep::kCardFieldNumber;
const int MahjongStep::kUserIDFieldNumber;
const int MahjongStep::kSwitchCardFieldNumber;
const int MahjongStep::kSuitFieldNumber;
#endif  // !_MSC_VER

MahjongStep::MahjongStep()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MahjongStep)
}

void MahjongStep::InitAsDefaultInstance() {
}

MahjongStep::MahjongStep(const MahjongStep& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.MahjongStep)
}

void MahjongStep::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  actiontype_ = 1;
  card_ = 0;
  userid_ = 0;
  suit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MahjongStep::~MahjongStep() {
  // @@protoc_insertion_point(destructor:msg.MahjongStep)
  SharedDtor();
}

void MahjongStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MahjongStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MahjongStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MahjongStep_descriptor_;
}

const MahjongStep& MahjongStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MahjongStep* MahjongStep::default_instance_ = NULL;

MahjongStep* MahjongStep::New() const {
  return new MahjongStep;
}

void MahjongStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MahjongStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(card_, userid_);
    type_ = 1;
    actiontype_ = 1;
    suit_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  switchcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MahjongStep::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.MahjongStep)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.MahjongRequestType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongRequestType_IsValid(value)) {
            set_type(static_cast< ::msg::MahjongRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }

      // optional .msg.MahjongActionChoice ActionType = 2;
      case 2: {
        if (tag == 16) {
         parse_ActionType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongActionChoice_IsValid(value)) {
            set_actiontype(static_cast< ::msg::MahjongActionChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional .msg.MahjongCard Card = 3;
      case 3: {
        if (tag == 24) {
         parse_Card:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            set_card(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 4;
      case 4: {
        if (tag == 32) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SwitchCard;
        break;
      }

      // repeated .msg.MahjongCard SwitchCard = 5;
      case 5: {
        if (tag == 40) {
         parse_SwitchCard:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongCard_IsValid(value)) {
            add_switchcard(static_cast< ::msg::MahjongCard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::msg::MahjongCard_IsValid,
                 this->mutable_switchcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SwitchCard;
        if (input->ExpectTag(48)) goto parse_Suit;
        break;
      }

      // optional .msg.MahjongSuit Suit = 6;
      case 6: {
        if (tag == 48) {
         parse_Suit:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::MahjongSuit_IsValid(value)) {
            set_suit(static_cast< ::msg::MahjongSuit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.MahjongStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.MahjongStep)
  return false;
#undef DO_
}

void MahjongStep::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.MahjongStep)
  // optional .msg.MahjongRequestType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .msg.MahjongActionChoice ActionType = 2;
  if (has_actiontype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actiontype(), output);
  }

  // optional .msg.MahjongCard Card = 3;
  if (has_card()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->card(), output);
  }

  // optional int32 UserID = 4;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->userid(), output);
  }

  // repeated .msg.MahjongCard SwitchCard = 5;
  for (int i = 0; i < this->switchcard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->switchcard(i), output);
  }

  // optional .msg.MahjongSuit Suit = 6;
  if (has_suit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->suit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.MahjongStep)
}

::google_public::protobuf::uint8* MahjongStep::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MahjongStep)
  // optional .msg.MahjongRequestType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .msg.MahjongActionChoice ActionType = 2;
  if (has_actiontype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->actiontype(), target);
  }

  // optional .msg.MahjongCard Card = 3;
  if (has_card()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->card(), target);
  }

  // optional int32 UserID = 4;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userid(), target);
  }

  // repeated .msg.MahjongCard SwitchCard = 5;
  for (int i = 0; i < this->switchcard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->switchcard(i), target);
  }

  // optional .msg.MahjongSuit Suit = 6;
  if (has_suit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->suit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MahjongStep)
  return target;
}

int MahjongStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.MahjongRequestType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .msg.MahjongActionChoice ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }

    // optional .msg.MahjongCard Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->card());
    }

    // optional int32 UserID = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .msg.MahjongSuit Suit = 6;
    if (has_suit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

  }
  // repeated .msg.MahjongCard SwitchCard = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->switchcard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::EnumSize(
        this->switchcard(i));
    }
    total_size += 1 * this->switchcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MahjongStep::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MahjongStep* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MahjongStep*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MahjongStep::MergeFrom(const MahjongStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  switchcard_.MergeFrom(from.switchcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_suit()) {
      set_suit(from.suit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MahjongStep::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MahjongStep::CopyFrom(const MahjongStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MahjongStep::IsInitialized() const {

  return true;
}

void MahjongStep::Swap(MahjongStep* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(card_, other->card_);
    std::swap(userid_, other->userid_);
    switchcard_.Swap(&other->switchcard_);
    std::swap(suit_, other->suit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MahjongStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MahjongStep_descriptor_;
  metadata.reflection = MahjongStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayStep::kStepIdFieldNumber;
const int ReplayStep::kPropUpdateFieldNumber;
const int ReplayStep::kOFCPropUpdateFieldNumber;
const int ReplayStep::kPokerStepFieldNumber;
const int ReplayStep::kOFCStepFieldNumber;
const int ReplayStep::kMahjongUpdateFieldNumber;
const int ReplayStep::kMahjongStepFieldNumber;
#endif  // !_MSC_VER

ReplayStep::ReplayStep()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ReplayStep)
}

void ReplayStep::InitAsDefaultInstance() {
  propupdate_ = const_cast< ::msg::TableAndUserUpdate*>(&::msg::TableAndUserUpdate::default_instance());
  ofcpropupdate_ = const_cast< ::msg::OFCPropUpdate*>(&::msg::OFCPropUpdate::default_instance());
  pokerstep_ = const_cast< ::msg::PokerStep*>(&::msg::PokerStep::default_instance());
  ofcstep_ = const_cast< ::msg::OFCStep*>(&::msg::OFCStep::default_instance());
  mahjongupdate_ = const_cast< ::msg::MahjongPropUpdate*>(&::msg::MahjongPropUpdate::default_instance());
  mahjongstep_ = const_cast< ::msg::MahjongStep*>(&::msg::MahjongStep::default_instance());
}

ReplayStep::ReplayStep(const ReplayStep& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ReplayStep)
}

void ReplayStep::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0;
  propupdate_ = NULL;
  ofcpropupdate_ = NULL;
  pokerstep_ = NULL;
  ofcstep_ = NULL;
  mahjongupdate_ = NULL;
  mahjongstep_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayStep::~ReplayStep() {
  // @@protoc_insertion_point(destructor:msg.ReplayStep)
  SharedDtor();
}

void ReplayStep::SharedDtor() {
  if (this != default_instance_) {
    delete propupdate_;
    delete ofcpropupdate_;
    delete pokerstep_;
    delete ofcstep_;
    delete mahjongupdate_;
    delete mahjongstep_;
  }
}

void ReplayStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ReplayStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayStep_descriptor_;
}

const ReplayStep& ReplayStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ReplayStep* ReplayStep::default_instance_ = NULL;

ReplayStep* ReplayStep::New() const {
  return new ReplayStep;
}

void ReplayStep::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    stepid_ = 0;
    if (has_propupdate()) {
      if (propupdate_ != NULL) propupdate_->::msg::TableAndUserUpdate::Clear();
    }
    if (has_ofcpropupdate()) {
      if (ofcpropupdate_ != NULL) ofcpropupdate_->::msg::OFCPropUpdate::Clear();
    }
    if (has_pokerstep()) {
      if (pokerstep_ != NULL) pokerstep_->::msg::PokerStep::Clear();
    }
    if (has_ofcstep()) {
      if (ofcstep_ != NULL) ofcstep_->::msg::OFCStep::Clear();
    }
    if (has_mahjongupdate()) {
      if (mahjongupdate_ != NULL) mahjongupdate_->::msg::MahjongPropUpdate::Clear();
    }
    if (has_mahjongstep()) {
      if (mahjongstep_ != NULL) mahjongstep_->::msg::MahjongStep::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayStep::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ReplayStep)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 StepId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PropUpdate;
        break;
      }

      // optional .msg.TableAndUserUpdate PropUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_PropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OFCPropUpdate;
        break;
      }

      // optional .msg.OFCPropUpdate OFCPropUpdate = 3;
      case 3: {
        if (tag == 26) {
         parse_OFCPropUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ofcpropupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PokerStep;
        break;
      }

      // optional .msg.PokerStep PokerStep = 4;
      case 4: {
        if (tag == 34) {
         parse_PokerStep:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokerstep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OFCStep;
        break;
      }

      // optional .msg.OFCStep OFCStep = 5;
      case 5: {
        if (tag == 42) {
         parse_OFCStep:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ofcstep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MahjongUpdate;
        break;
      }

      // optional .msg.MahjongPropUpdate MahjongUpdate = 6;
      case 6: {
        if (tag == 50) {
         parse_MahjongUpdate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mahjongupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MahjongStep;
        break;
      }

      // optional .msg.MahjongStep MahjongStep = 7;
      case 7: {
        if (tag == 58) {
         parse_MahjongStep:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mahjongstep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ReplayStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ReplayStep)
  return false;
#undef DO_
}

void ReplayStep::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ReplayStep)
  // optional int32 StepId = 1;
  if (has_stepid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->stepid(), output);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 2;
  if (has_propupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propupdate(), output);
  }

  // optional .msg.OFCPropUpdate OFCPropUpdate = 3;
  if (has_ofcpropupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ofcpropupdate(), output);
  }

  // optional .msg.PokerStep PokerStep = 4;
  if (has_pokerstep()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pokerstep(), output);
  }

  // optional .msg.OFCStep OFCStep = 5;
  if (has_ofcstep()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ofcstep(), output);
  }

  // optional .msg.MahjongPropUpdate MahjongUpdate = 6;
  if (has_mahjongupdate()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mahjongupdate(), output);
  }

  // optional .msg.MahjongStep MahjongStep = 7;
  if (has_mahjongstep()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mahjongstep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ReplayStep)
}

::google_public::protobuf::uint8* ReplayStep::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReplayStep)
  // optional int32 StepId = 1;
  if (has_stepid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stepid(), target);
  }

  // optional .msg.TableAndUserUpdate PropUpdate = 2;
  if (has_propupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propupdate(), target);
  }

  // optional .msg.OFCPropUpdate OFCPropUpdate = 3;
  if (has_ofcpropupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ofcpropupdate(), target);
  }

  // optional .msg.PokerStep PokerStep = 4;
  if (has_pokerstep()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pokerstep(), target);
  }

  // optional .msg.OFCStep OFCStep = 5;
  if (has_ofcstep()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ofcstep(), target);
  }

  // optional .msg.MahjongPropUpdate MahjongUpdate = 6;
  if (has_mahjongupdate()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mahjongupdate(), target);
  }

  // optional .msg.MahjongStep MahjongStep = 7;
  if (has_mahjongstep()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mahjongstep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReplayStep)
  return target;
}

int ReplayStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 StepId = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->stepid());
    }

    // optional .msg.TableAndUserUpdate PropUpdate = 2;
    if (has_propupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propupdate());
    }

    // optional .msg.OFCPropUpdate OFCPropUpdate = 3;
    if (has_ofcpropupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ofcpropupdate());
    }

    // optional .msg.PokerStep PokerStep = 4;
    if (has_pokerstep()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pokerstep());
    }

    // optional .msg.OFCStep OFCStep = 5;
    if (has_ofcstep()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ofcstep());
    }

    // optional .msg.MahjongPropUpdate MahjongUpdate = 6;
    if (has_mahjongupdate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mahjongupdate());
    }

    // optional .msg.MahjongStep MahjongStep = 7;
    if (has_mahjongstep()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mahjongstep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayStep::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayStep* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ReplayStep*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayStep::MergeFrom(const ReplayStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_propupdate()) {
      mutable_propupdate()->::msg::TableAndUserUpdate::MergeFrom(from.propupdate());
    }
    if (from.has_ofcpropupdate()) {
      mutable_ofcpropupdate()->::msg::OFCPropUpdate::MergeFrom(from.ofcpropupdate());
    }
    if (from.has_pokerstep()) {
      mutable_pokerstep()->::msg::PokerStep::MergeFrom(from.pokerstep());
    }
    if (from.has_ofcstep()) {
      mutable_ofcstep()->::msg::OFCStep::MergeFrom(from.ofcstep());
    }
    if (from.has_mahjongupdate()) {
      mutable_mahjongupdate()->::msg::MahjongPropUpdate::MergeFrom(from.mahjongupdate());
    }
    if (from.has_mahjongstep()) {
      mutable_mahjongstep()->::msg::MahjongStep::MergeFrom(from.mahjongstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayStep::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStep::CopyFrom(const ReplayStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStep::IsInitialized() const {

  return true;
}

void ReplayStep::Swap(ReplayStep* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(propupdate_, other->propupdate_);
    std::swap(ofcpropupdate_, other->ofcpropupdate_);
    std::swap(pokerstep_, other->pokerstep_);
    std::swap(ofcstep_, other->ofcstep_);
    std::swap(mahjongupdate_, other->mahjongupdate_);
    std::swap(mahjongstep_, other->mahjongstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ReplayStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ReplayStep_descriptor_;
  metadata.reflection = ReplayStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaySteps::kReplayStepFieldNumber;
#endif  // !_MSC_VER

ReplaySteps::ReplaySteps()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ReplaySteps)
}

void ReplaySteps::InitAsDefaultInstance() {
}

ReplaySteps::ReplaySteps(const ReplaySteps& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ReplaySteps)
}

void ReplaySteps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaySteps::~ReplaySteps() {
  // @@protoc_insertion_point(destructor:msg.ReplaySteps)
  SharedDtor();
}

void ReplaySteps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplaySteps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ReplaySteps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaySteps_descriptor_;
}

const ReplaySteps& ReplaySteps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ReplaySteps* ReplaySteps::default_instance_ = NULL;

ReplaySteps* ReplaySteps::New() const {
  return new ReplaySteps;
}

void ReplaySteps::Clear() {
  replaystep_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaySteps::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ReplaySteps)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ReplayStep ReplayStep = 1;
      case 1: {
        if (tag == 10) {
         parse_ReplayStep:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replaystep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReplayStep;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ReplaySteps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ReplaySteps)
  return false;
#undef DO_
}

void ReplaySteps::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ReplaySteps)
  // repeated .msg.ReplayStep ReplayStep = 1;
  for (int i = 0; i < this->replaystep_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->replaystep(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ReplaySteps)
}

::google_public::protobuf::uint8* ReplaySteps::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReplaySteps)
  // repeated .msg.ReplayStep ReplayStep = 1;
  for (int i = 0; i < this->replaystep_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->replaystep(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReplaySteps)
  return target;
}

int ReplaySteps::ByteSize() const {
  int total_size = 0;

  // repeated .msg.ReplayStep ReplayStep = 1;
  total_size += 1 * this->replaystep_size();
  for (int i = 0; i < this->replaystep_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replaystep(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaySteps::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaySteps* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ReplaySteps*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaySteps::MergeFrom(const ReplaySteps& from) {
  GOOGLE_CHECK_NE(&from, this);
  replaystep_.MergeFrom(from.replaystep_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaySteps::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaySteps::CopyFrom(const ReplaySteps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaySteps::IsInitialized() const {

  return true;
}

void ReplaySteps::Swap(ReplaySteps* other) {
  if (other != this) {
    replaystep_.Swap(&other->replaystep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ReplaySteps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ReplaySteps_descriptor_;
  metadata.reflection = ReplaySteps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayPlayers::kReplayPlayerFieldNumber;
#endif  // !_MSC_VER

ReplayPlayers::ReplayPlayers()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ReplayPlayers)
}

void ReplayPlayers::InitAsDefaultInstance() {
}

ReplayPlayers::ReplayPlayers(const ReplayPlayers& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ReplayPlayers)
}

void ReplayPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayPlayers::~ReplayPlayers() {
  // @@protoc_insertion_point(destructor:msg.ReplayPlayers)
  SharedDtor();
}

void ReplayPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplayPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ReplayPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayPlayers_descriptor_;
}

const ReplayPlayers& ReplayPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ReplayPlayers* ReplayPlayers::default_instance_ = NULL;

ReplayPlayers* ReplayPlayers::New() const {
  return new ReplayPlayers;
}

void ReplayPlayers::Clear() {
  replayplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayPlayers::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ReplayPlayers)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ReplayPlayer ReplayPlayer = 1;
      case 1: {
        if (tag == 10) {
         parse_ReplayPlayer:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replayplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReplayPlayer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ReplayPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ReplayPlayers)
  return false;
#undef DO_
}

void ReplayPlayers::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ReplayPlayers)
  // repeated .msg.ReplayPlayer ReplayPlayer = 1;
  for (int i = 0; i < this->replayplayer_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->replayplayer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ReplayPlayers)
}

::google_public::protobuf::uint8* ReplayPlayers::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReplayPlayers)
  // repeated .msg.ReplayPlayer ReplayPlayer = 1;
  for (int i = 0; i < this->replayplayer_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->replayplayer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReplayPlayers)
  return target;
}

int ReplayPlayers::ByteSize() const {
  int total_size = 0;

  // repeated .msg.ReplayPlayer ReplayPlayer = 1;
  total_size += 1 * this->replayplayer_size();
  for (int i = 0; i < this->replayplayer_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replayplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayPlayers::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayPlayers* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ReplayPlayers*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayPlayers::MergeFrom(const ReplayPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  replayplayer_.MergeFrom(from.replayplayer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayPlayers::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayPlayers::CopyFrom(const ReplayPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayPlayers::IsInitialized() const {

  return true;
}

void ReplayPlayers::Swap(ReplayPlayers* other) {
  if (other != this) {
    replayplayer_.Swap(&other->replayplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ReplayPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ReplayPlayers_descriptor_;
  metadata.reflection = ReplayPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayPlayer::kUserDetailInfoFieldNumber;
const int ReplayPlayer::kSitNumFieldNumber;
const int ReplayPlayer::kIsVisibleFieldNumber;
#endif  // !_MSC_VER

ReplayPlayer::ReplayPlayer()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ReplayPlayer)
}

void ReplayPlayer::InitAsDefaultInstance() {
  userdetailinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

ReplayPlayer::ReplayPlayer(const ReplayPlayer& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ReplayPlayer)
}

void ReplayPlayer::SharedCtor() {
  _cached_size_ = 0;
  userdetailinfo_ = NULL;
  sitnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayPlayer::~ReplayPlayer() {
  // @@protoc_insertion_point(destructor:msg.ReplayPlayer)
  SharedDtor();
}

void ReplayPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete userdetailinfo_;
  }
}

void ReplayPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ReplayPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayPlayer_descriptor_;
}

const ReplayPlayer& ReplayPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ReplayPlayer* ReplayPlayer::default_instance_ = NULL;

ReplayPlayer* ReplayPlayer::New() const {
  return new ReplayPlayer;
}

void ReplayPlayer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userdetailinfo()) {
      if (userdetailinfo_ != NULL) userdetailinfo_->::msg::UserDetailInfo::Clear();
    }
    sitnum_ = 0;
  }
  isvisible_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayPlayer::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ReplayPlayer)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo UserDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SitNum;
        break;
      }

      // optional int32 SitNum = 2;
      case 2: {
        if (tag == 16) {
         parse_SitNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitnum_)));
          set_has_sitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsVisible;
        break;
      }

      // repeated bool IsVisible = 3;
      case 3: {
        if (tag == 24) {
         parse_IsVisible:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_isvisible())));
        } else if (tag == 26) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isvisible())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsVisible;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ReplayPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ReplayPlayer)
  return false;
#undef DO_
}

void ReplayPlayer::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ReplayPlayer)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdetailinfo(), output);
  }

  // optional int32 SitNum = 2;
  if (has_sitnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->sitnum(), output);
  }

  // repeated bool IsVisible = 3;
  for (int i = 0; i < this->isvisible_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(
      3, this->isvisible(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ReplayPlayer)
}

::google_public::protobuf::uint8* ReplayPlayer::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReplayPlayer)
  // optional .msg.UserDetailInfo UserDetailInfo = 1;
  if (has_userdetailinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdetailinfo(), target);
  }

  // optional int32 SitNum = 2;
  if (has_sitnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sitnum(), target);
  }

  // repeated bool IsVisible = 3;
  for (int i = 0; i < this->isvisible_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->isvisible(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReplayPlayer)
  return target;
}

int ReplayPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo UserDetailInfo = 1;
    if (has_userdetailinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdetailinfo());
    }

    // optional int32 SitNum = 2;
    if (has_sitnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sitnum());
    }

  }
  // repeated bool IsVisible = 3;
  {
    int data_size = 0;
    data_size = 1 * this->isvisible_size();
    total_size += 1 * this->isvisible_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayPlayer::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayPlayer* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ReplayPlayer*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayPlayer::MergeFrom(const ReplayPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  isvisible_.MergeFrom(from.isvisible_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdetailinfo()) {
      mutable_userdetailinfo()->::msg::UserDetailInfo::MergeFrom(from.userdetailinfo());
    }
    if (from.has_sitnum()) {
      set_sitnum(from.sitnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayPlayer::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayPlayer::CopyFrom(const ReplayPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayPlayer::IsInitialized() const {

  return true;
}

void ReplayPlayer::Swap(ReplayPlayer* other) {
  if (other != this) {
    std::swap(userdetailinfo_, other->userdetailinfo_);
    std::swap(sitnum_, other->sitnum_);
    isvisible_.Swap(&other->isvisible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ReplayPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ReplayPlayer_descriptor_;
  metadata.reflection = ReplayPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandBaseInfo::kRoomNameFieldNumber;
const int HandBaseInfo::kTotalSeatNumFieldNumber;
const int HandBaseInfo::kTableRemarkFieldNumber;
const int HandBaseInfo::kHandTxtFieldNumber;
const int HandBaseInfo::kDealerPosFieldNumber;
#endif  // !_MSC_VER

HandBaseInfo::HandBaseInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.HandBaseInfo)
}

void HandBaseInfo::InitAsDefaultInstance() {
}

HandBaseInfo::HandBaseInfo(const HandBaseInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.HandBaseInfo)
}

void HandBaseInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  totalseatnum_ = 0;
  tableremark_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  handtxt_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  dealerpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandBaseInfo::~HandBaseInfo() {
  // @@protoc_insertion_point(destructor:msg.HandBaseInfo)
  SharedDtor();
}

void HandBaseInfo::SharedDtor() {
  if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (tableremark_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tableremark_;
  }
  if (handtxt_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete handtxt_;
  }
  if (this != default_instance_) {
  }
}

void HandBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* HandBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandBaseInfo_descriptor_;
}

const HandBaseInfo& HandBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

HandBaseInfo* HandBaseInfo::default_instance_ = NULL;

HandBaseInfo* HandBaseInfo::New() const {
  return new HandBaseInfo;
}

void HandBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(totalseatnum_, dealerpos_);
    if (has_roomname()) {
      if (roomname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_tableremark()) {
      if (tableremark_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tableremark_->clear();
      }
    }
    if (has_handtxt()) {
      if (handtxt_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        handtxt_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandBaseInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.HandBaseInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RoomName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalSeatNum;
        break;
      }

      // optional int32 TotalSeatNum = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalSeatNum:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalseatnum_)));
          set_has_totalseatnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TableRemark;
        break;
      }

      // optional string TableRemark = 3;
      case 3: {
        if (tag == 26) {
         parse_TableRemark:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tableremark()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tableremark().data(), this->tableremark().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "tableremark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HandTxt;
        break;
      }

      // optional string HandTxt = 4;
      case 4: {
        if (tag == 34) {
         parse_HandTxt:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handtxt()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->handtxt().data(), this->handtxt().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "handtxt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DealerPos;
        break;
      }

      // optional int32 DealerPos = 5;
      case 5: {
        if (tag == 40) {
         parse_DealerPos:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerpos_)));
          set_has_dealerpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.HandBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.HandBaseInfo)
  return false;
#undef DO_
}

void HandBaseInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.HandBaseInfo)
  // optional string RoomName = 1;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // optional int32 TotalSeatNum = 2;
  if (has_totalseatnum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalseatnum(), output);
  }

  // optional string TableRemark = 3;
  if (has_tableremark()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tableremark().data(), this->tableremark().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tableremark");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tableremark(), output);
  }

  // optional string HandTxt = 4;
  if (has_handtxt()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->handtxt().data(), this->handtxt().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "handtxt");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->handtxt(), output);
  }

  // optional int32 DealerPos = 5;
  if (has_dealerpos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealerpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.HandBaseInfo)
}

::google_public::protobuf::uint8* HandBaseInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HandBaseInfo)
  // optional string RoomName = 1;
  if (has_roomname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // optional int32 TotalSeatNum = 2;
  if (has_totalseatnum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalseatnum(), target);
  }

  // optional string TableRemark = 3;
  if (has_tableremark()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tableremark().data(), this->tableremark().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "tableremark");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tableremark(), target);
  }

  // optional string HandTxt = 4;
  if (has_handtxt()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->handtxt().data(), this->handtxt().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "handtxt");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->handtxt(), target);
  }

  // optional int32 DealerPos = 5;
  if (has_dealerpos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealerpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HandBaseInfo)
  return target;
}

int HandBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoomName = 1;
    if (has_roomname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 TotalSeatNum = 2;
    if (has_totalseatnum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalseatnum());
    }

    // optional string TableRemark = 3;
    if (has_tableremark()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->tableremark());
    }

    // optional string HandTxt = 4;
    if (has_handtxt()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->handtxt());
    }

    // optional int32 DealerPos = 5;
    if (has_dealerpos()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandBaseInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandBaseInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const HandBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandBaseInfo::MergeFrom(const HandBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_totalseatnum()) {
      set_totalseatnum(from.totalseatnum());
    }
    if (from.has_tableremark()) {
      set_tableremark(from.tableremark());
    }
    if (from.has_handtxt()) {
      set_handtxt(from.handtxt());
    }
    if (from.has_dealerpos()) {
      set_dealerpos(from.dealerpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandBaseInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandBaseInfo::CopyFrom(const HandBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandBaseInfo::IsInitialized() const {

  return true;
}

void HandBaseInfo::Swap(HandBaseInfo* other) {
  if (other != this) {
    std::swap(roomname_, other->roomname_);
    std::swap(totalseatnum_, other->totalseatnum_);
    std::swap(tableremark_, other->tableremark_);
    std::swap(handtxt_, other->handtxt_);
    std::swap(dealerpos_, other->dealerpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata HandBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = HandBaseInfo_descriptor_;
  metadata.reflection = HandBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_300_PokerGetHandHistory_DOWN::kResponseFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kHandIdFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kHandTypeFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kBaseInfoFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kPlayersFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kStepsFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kHandResultInfoFieldNumber;
const int Processor_300_PokerGetHandHistory_DOWN::kOFCResultFieldNumber;
#endif  // !_MSC_VER

Processor_300_PokerGetHandHistory_DOWN::Processor_300_PokerGetHandHistory_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_300_PokerGetHandHistory_DOWN)
}

void Processor_300_PokerGetHandHistory_DOWN::InitAsDefaultInstance() {
  response_ = const_cast< ::msg::Response*>(&::msg::Response::default_instance());
  baseinfo_ = const_cast< ::msg::HandBaseInfo*>(&::msg::HandBaseInfo::default_instance());
  players_ = const_cast< ::msg::ReplayPlayers*>(&::msg::ReplayPlayers::default_instance());
  steps_ = const_cast< ::msg::ReplaySteps*>(&::msg::ReplaySteps::default_instance());
  handresultinfo_ = const_cast< ::msg::HandResultInfo*>(&::msg::HandResultInfo::default_instance());
  ofcresult_ = const_cast< ::msg::OFCResult*>(&::msg::OFCResult::default_instance());
}

Processor_300_PokerGetHandHistory_DOWN::Processor_300_PokerGetHandHistory_DOWN(const Processor_300_PokerGetHandHistory_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_300_PokerGetHandHistory_DOWN)
}

void Processor_300_PokerGetHandHistory_DOWN::SharedCtor() {
  _cached_size_ = 0;
  response_ = NULL;
  handid_ = 0;
  handtype_ = 1;
  baseinfo_ = NULL;
  players_ = NULL;
  steps_ = NULL;
  handresultinfo_ = NULL;
  ofcresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_300_PokerGetHandHistory_DOWN::~Processor_300_PokerGetHandHistory_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_300_PokerGetHandHistory_DOWN)
  SharedDtor();
}

void Processor_300_PokerGetHandHistory_DOWN::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete baseinfo_;
    delete players_;
    delete steps_;
    delete handresultinfo_;
    delete ofcresult_;
  }
}

void Processor_300_PokerGetHandHistory_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_300_PokerGetHandHistory_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_300_PokerGetHandHistory_DOWN_descriptor_;
}

const Processor_300_PokerGetHandHistory_DOWN& Processor_300_PokerGetHandHistory_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_300_PokerGetHandHistory_DOWN* Processor_300_PokerGetHandHistory_DOWN::default_instance_ = NULL;

Processor_300_PokerGetHandHistory_DOWN* Processor_300_PokerGetHandHistory_DOWN::New() const {
  return new Processor_300_PokerGetHandHistory_DOWN;
}

void Processor_300_PokerGetHandHistory_DOWN::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_response()) {
      if (response_ != NULL) response_->::msg::Response::Clear();
    }
    handid_ = 0;
    handtype_ = 1;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::msg::HandBaseInfo::Clear();
    }
    if (has_players()) {
      if (players_ != NULL) players_->::msg::ReplayPlayers::Clear();
    }
    if (has_steps()) {
      if (steps_ != NULL) steps_->::msg::ReplaySteps::Clear();
    }
    if (has_handresultinfo()) {
      if (handresultinfo_ != NULL) handresultinfo_->::msg::HandResultInfo::Clear();
    }
    if (has_ofcresult()) {
      if (ofcresult_ != NULL) ofcresult_->::msg::OFCResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_300_PokerGetHandHistory_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_300_PokerGetHandHistory_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Response Response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandId;
        break;
      }

      // optional int32 HandId = 2;
      case 2: {
        if (tag == 16) {
         parse_HandId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HandType;
        break;
      }

      // optional .msg.HandType HandType = 3;
      case 3: {
        if (tag == 24) {
         parse_HandType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::HandType_IsValid(value)) {
            set_handtype(static_cast< ::msg::HandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BaseInfo;
        break;
      }

      // optional .msg.HandBaseInfo BaseInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_BaseInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Players;
        break;
      }

      // optional .msg.ReplayPlayers Players = 5;
      case 5: {
        if (tag == 42) {
         parse_Players:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Steps;
        break;
      }

      // optional .msg.ReplaySteps Steps = 6;
      case 6: {
        if (tag == 50) {
         parse_Steps:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_HandResultInfo;
        break;
      }

      // optional .msg.HandResultInfo HandResultInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_HandResultInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handresultinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OFCResult;
        break;
      }

      // optional .msg.OFCResult OFCResult = 8;
      case 8: {
        if (tag == 66) {
         parse_OFCResult:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ofcresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_300_PokerGetHandHistory_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_300_PokerGetHandHistory_DOWN)
  return false;
#undef DO_
}

void Processor_300_PokerGetHandHistory_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_300_PokerGetHandHistory_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(), output);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->handid(), output);
  }

  // optional .msg.HandType HandType = 3;
  if (has_handtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->handtype(), output);
  }

  // optional .msg.HandBaseInfo BaseInfo = 4;
  if (has_baseinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->baseinfo(), output);
  }

  // optional .msg.ReplayPlayers Players = 5;
  if (has_players()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(), output);
  }

  // optional .msg.ReplaySteps Steps = 6;
  if (has_steps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->steps(), output);
  }

  // optional .msg.HandResultInfo HandResultInfo = 7;
  if (has_handresultinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->handresultinfo(), output);
  }

  // optional .msg.OFCResult OFCResult = 8;
  if (has_ofcresult()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ofcresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_300_PokerGetHandHistory_DOWN)
}

::google_public::protobuf::uint8* Processor_300_PokerGetHandHistory_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_300_PokerGetHandHistory_DOWN)
  // optional .msg.Response Response = 1;
  if (has_response()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(), target);
  }

  // optional int32 HandId = 2;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handid(), target);
  }

  // optional .msg.HandType HandType = 3;
  if (has_handtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->handtype(), target);
  }

  // optional .msg.HandBaseInfo BaseInfo = 4;
  if (has_baseinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->baseinfo(), target);
  }

  // optional .msg.ReplayPlayers Players = 5;
  if (has_players()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(), target);
  }

  // optional .msg.ReplaySteps Steps = 6;
  if (has_steps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->steps(), target);
  }

  // optional .msg.HandResultInfo HandResultInfo = 7;
  if (has_handresultinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->handresultinfo(), target);
  }

  // optional .msg.OFCResult OFCResult = 8;
  if (has_ofcresult()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ofcresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_300_PokerGetHandHistory_DOWN)
  return target;
}

int Processor_300_PokerGetHandHistory_DOWN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Response Response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional int32 HandId = 2;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional .msg.HandType HandType = 3;
    if (has_handtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->handtype());
    }

    // optional .msg.HandBaseInfo BaseInfo = 4;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .msg.ReplayPlayers Players = 5;
    if (has_players()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players());
    }

    // optional .msg.ReplaySteps Steps = 6;
    if (has_steps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steps());
    }

    // optional .msg.HandResultInfo HandResultInfo = 7;
    if (has_handresultinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handresultinfo());
    }

    // optional .msg.OFCResult OFCResult = 8;
    if (has_ofcresult()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ofcresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_300_PokerGetHandHistory_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_300_PokerGetHandHistory_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_300_PokerGetHandHistory_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_300_PokerGetHandHistory_DOWN::MergeFrom(const Processor_300_PokerGetHandHistory_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      mutable_response()->::msg::Response::MergeFrom(from.response());
    }
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_handtype()) {
      set_handtype(from.handtype());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::msg::HandBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_players()) {
      mutable_players()->::msg::ReplayPlayers::MergeFrom(from.players());
    }
    if (from.has_steps()) {
      mutable_steps()->::msg::ReplaySteps::MergeFrom(from.steps());
    }
    if (from.has_handresultinfo()) {
      mutable_handresultinfo()->::msg::HandResultInfo::MergeFrom(from.handresultinfo());
    }
    if (from.has_ofcresult()) {
      mutable_ofcresult()->::msg::OFCResult::MergeFrom(from.ofcresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_300_PokerGetHandHistory_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_300_PokerGetHandHistory_DOWN::CopyFrom(const Processor_300_PokerGetHandHistory_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_300_PokerGetHandHistory_DOWN::IsInitialized() const {

  return true;
}

void Processor_300_PokerGetHandHistory_DOWN::Swap(Processor_300_PokerGetHandHistory_DOWN* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(handid_, other->handid_);
    std::swap(handtype_, other->handtype_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(players_, other->players_);
    std::swap(steps_, other->steps_);
    std::swap(handresultinfo_, other->handresultinfo_);
    std::swap(ofcresult_, other->ofcresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_300_PokerGetHandHistory_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_300_PokerGetHandHistory_DOWN_descriptor_;
  metadata.reflection = Processor_300_PokerGetHandHistory_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1000_RegisterServer_OtherToCore::kTypeFieldNumber;
const int Processor_1000_RegisterServer_OtherToCore::kIPFieldNumber;
const int Processor_1000_RegisterServer_OtherToCore::kServerPortFieldNumber;
const int Processor_1000_RegisterServer_OtherToCore::kClientPortFieldNumber;
#endif  // !_MSC_VER

Processor_1000_RegisterServer_OtherToCore::Processor_1000_RegisterServer_OtherToCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1000_RegisterServer_OtherToCore)
}

void Processor_1000_RegisterServer_OtherToCore::InitAsDefaultInstance() {
}

Processor_1000_RegisterServer_OtherToCore::Processor_1000_RegisterServer_OtherToCore(const Processor_1000_RegisterServer_OtherToCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1000_RegisterServer_OtherToCore)
}

void Processor_1000_RegisterServer_OtherToCore::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  serverport_ = 0;
  clientport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1000_RegisterServer_OtherToCore::~Processor_1000_RegisterServer_OtherToCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_1000_RegisterServer_OtherToCore)
  SharedDtor();
}

void Processor_1000_RegisterServer_OtherToCore::SharedDtor() {
  if (ip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Processor_1000_RegisterServer_OtherToCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1000_RegisterServer_OtherToCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1000_RegisterServer_OtherToCore_descriptor_;
}

const Processor_1000_RegisterServer_OtherToCore& Processor_1000_RegisterServer_OtherToCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1000_RegisterServer_OtherToCore* Processor_1000_RegisterServer_OtherToCore::default_instance_ = NULL;

Processor_1000_RegisterServer_OtherToCore* Processor_1000_RegisterServer_OtherToCore::New() const {
  return new Processor_1000_RegisterServer_OtherToCore;
}

void Processor_1000_RegisterServer_OtherToCore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_1000_RegisterServer_OtherToCore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, clientport_);
    if (has_ip()) {
      if (ip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1000_RegisterServer_OtherToCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1000_RegisterServer_OtherToCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.ServerType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::ServerType_IsValid(value)) {
            set_type(static_cast< ::msg::ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (tag == 18) {
         parse_IP:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerPort;
        break;
      }

      // optional int32 ServerPort = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerPort:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverport_)));
          set_has_serverport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ClientPort;
        break;
      }

      // optional int32 ClientPort = 4;
      case 4: {
        if (tag == 32) {
         parse_ClientPort:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientport_)));
          set_has_clientport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1000_RegisterServer_OtherToCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1000_RegisterServer_OtherToCore)
  return false;
#undef DO_
}

void Processor_1000_RegisterServer_OtherToCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1000_RegisterServer_OtherToCore)
  // optional .msg.ServerType Type = 1;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 ServerPort = 3;
  if (has_serverport()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverport(), output);
  }

  // optional int32 ClientPort = 4;
  if (has_clientport()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1000_RegisterServer_OtherToCore)
}

::google_public::protobuf::uint8* Processor_1000_RegisterServer_OtherToCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1000_RegisterServer_OtherToCore)
  // optional .msg.ServerType Type = 1;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 ServerPort = 3;
  if (has_serverport()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverport(), target);
  }

  // optional int32 ClientPort = 4;
  if (has_clientport()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1000_RegisterServer_OtherToCore)
  return target;
}

int Processor_1000_RegisterServer_OtherToCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.ServerType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 ServerPort = 3;
    if (has_serverport()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->serverport());
    }

    // optional int32 ClientPort = 4;
    if (has_clientport()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->clientport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1000_RegisterServer_OtherToCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1000_RegisterServer_OtherToCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1000_RegisterServer_OtherToCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1000_RegisterServer_OtherToCore::MergeFrom(const Processor_1000_RegisterServer_OtherToCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_serverport()) {
      set_serverport(from.serverport());
    }
    if (from.has_clientport()) {
      set_clientport(from.clientport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1000_RegisterServer_OtherToCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1000_RegisterServer_OtherToCore::CopyFrom(const Processor_1000_RegisterServer_OtherToCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1000_RegisterServer_OtherToCore::IsInitialized() const {

  return true;
}

void Processor_1000_RegisterServer_OtherToCore::Swap(Processor_1000_RegisterServer_OtherToCore* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ip_, other->ip_);
    std::swap(serverport_, other->serverport_);
    std::swap(clientport_, other->clientport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1000_RegisterServer_OtherToCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1000_RegisterServer_OtherToCore_descriptor_;
  metadata.reflection = Processor_1000_RegisterServer_OtherToCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1000_RegisterServer_CoreToOther::kNewServerIDFieldNumber;
#endif  // !_MSC_VER

Processor_1000_RegisterServer_CoreToOther::Processor_1000_RegisterServer_CoreToOther()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1000_RegisterServer_CoreToOther)
}

void Processor_1000_RegisterServer_CoreToOther::InitAsDefaultInstance() {
}

Processor_1000_RegisterServer_CoreToOther::Processor_1000_RegisterServer_CoreToOther(const Processor_1000_RegisterServer_CoreToOther& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1000_RegisterServer_CoreToOther)
}

void Processor_1000_RegisterServer_CoreToOther::SharedCtor() {
  _cached_size_ = 0;
  newserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1000_RegisterServer_CoreToOther::~Processor_1000_RegisterServer_CoreToOther() {
  // @@protoc_insertion_point(destructor:msg.Processor_1000_RegisterServer_CoreToOther)
  SharedDtor();
}

void Processor_1000_RegisterServer_CoreToOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1000_RegisterServer_CoreToOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1000_RegisterServer_CoreToOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1000_RegisterServer_CoreToOther_descriptor_;
}

const Processor_1000_RegisterServer_CoreToOther& Processor_1000_RegisterServer_CoreToOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1000_RegisterServer_CoreToOther* Processor_1000_RegisterServer_CoreToOther::default_instance_ = NULL;

Processor_1000_RegisterServer_CoreToOther* Processor_1000_RegisterServer_CoreToOther::New() const {
  return new Processor_1000_RegisterServer_CoreToOther;
}

void Processor_1000_RegisterServer_CoreToOther::Clear() {
  newserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1000_RegisterServer_CoreToOther::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1000_RegisterServer_CoreToOther)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NewServerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newserverid_)));
          set_has_newserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1000_RegisterServer_CoreToOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1000_RegisterServer_CoreToOther)
  return false;
#undef DO_
}

void Processor_1000_RegisterServer_CoreToOther::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1000_RegisterServer_CoreToOther)
  // optional int32 NewServerID = 1;
  if (has_newserverid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->newserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1000_RegisterServer_CoreToOther)
}

::google_public::protobuf::uint8* Processor_1000_RegisterServer_CoreToOther::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1000_RegisterServer_CoreToOther)
  // optional int32 NewServerID = 1;
  if (has_newserverid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1000_RegisterServer_CoreToOther)
  return target;
}

int Processor_1000_RegisterServer_CoreToOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NewServerID = 1;
    if (has_newserverid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->newserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1000_RegisterServer_CoreToOther::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1000_RegisterServer_CoreToOther* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1000_RegisterServer_CoreToOther*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1000_RegisterServer_CoreToOther::MergeFrom(const Processor_1000_RegisterServer_CoreToOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newserverid()) {
      set_newserverid(from.newserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1000_RegisterServer_CoreToOther::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1000_RegisterServer_CoreToOther::CopyFrom(const Processor_1000_RegisterServer_CoreToOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1000_RegisterServer_CoreToOther::IsInitialized() const {

  return true;
}

void Processor_1000_RegisterServer_CoreToOther::Swap(Processor_1000_RegisterServer_CoreToOther* other) {
  if (other != this) {
    std::swap(newserverid_, other->newserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1000_RegisterServer_CoreToOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1000_RegisterServer_CoreToOther_descriptor_;
  metadata.reflection = Processor_1000_RegisterServer_CoreToOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kIPFieldNumber;
const int ServerInfo::kPortFieldNumber;
const int ServerInfo::kIPv6FieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ipv6_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:msg.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (ip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ipv6_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ip()) {
      if (ip_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_ipv6()) {
      if (ipv6_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipv6_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ServerInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string IP = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Port;
        break;
      }

      // optional int32 Port = 2;
      case 2: {
        if (tag == 16) {
         parse_Port:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_IPv6;
        break;
      }

      // optional string IPv6 = 3;
      case 3: {
        if (tag == 26) {
         parse_IPv6:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6().data(), this->ipv6().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "ipv6");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ServerInfo)
  // optional string IP = 1;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 Port = 2;
  if (has_port()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string IPv6 = 3;
  if (has_ipv6()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ipv6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ServerInfo)
}

::google_public::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServerInfo)
  // optional string IP = 1;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 Port = 2;
  if (has_port()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string IPv6 = 3;
  if (has_ipv6()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ipv6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string IP = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 Port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string IPv6 = 3;
    if (has_ipv6()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ipv6()) {
      set_ipv6(from.ipv6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(ipv6_, other->ipv6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfos::kServerInfoFieldNumber;
#endif  // !_MSC_VER

ServerInfos::ServerInfos()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ServerInfos)
}

void ServerInfos::InitAsDefaultInstance() {
}

ServerInfos::ServerInfos(const ServerInfos& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ServerInfos)
}

void ServerInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfos::~ServerInfos() {
  // @@protoc_insertion_point(destructor:msg.ServerInfos)
  SharedDtor();
}

void ServerInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ServerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfos_descriptor_;
}

const ServerInfos& ServerInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ServerInfos* ServerInfos::default_instance_ = NULL;

ServerInfos* ServerInfos::New() const {
  return new ServerInfos;
}

void ServerInfos::Clear() {
  serverinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfos::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ServerInfos)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ServerInfo ServerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ServerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ServerInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ServerInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ServerInfos)
  return false;
#undef DO_
}

void ServerInfos::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ServerInfos)
  // repeated .msg.ServerInfo ServerInfo = 1;
  for (int i = 0; i < this->serverinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serverinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ServerInfos)
}

::google_public::protobuf::uint8* ServerInfos::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServerInfos)
  // repeated .msg.ServerInfo ServerInfo = 1;
  for (int i = 0; i < this->serverinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serverinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServerInfos)
  return target;
}

int ServerInfos::ByteSize() const {
  int total_size = 0;

  // repeated .msg.ServerInfo ServerInfo = 1;
  total_size += 1 * this->serverinfo_size();
  for (int i = 0; i < this->serverinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfos::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfos* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ServerInfos*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfos::MergeFrom(const ServerInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverinfo_.MergeFrom(from.serverinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfos::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfos::CopyFrom(const ServerInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfos::IsInitialized() const {

  return true;
}

void ServerInfos::Swap(ServerInfos* other) {
  if (other != this) {
    serverinfo_.Swap(&other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ServerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfos_descriptor_;
  metadata.reflection = ServerInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_HTMLRegister::kLoginInfoFieldNumber;
const int Processor_HTMLRegister::kRefereeUserIDFieldNumber;
const int Processor_HTMLRegister::kRefereeGroupIDFieldNumber;
const int Processor_HTMLRegister::kRefereeRoomIDFieldNumber;
const int Processor_HTMLRegister::kPhoneNumberFieldNumber;
const int Processor_HTMLRegister::kVerificationFieldNumber;
#endif  // !_MSC_VER

Processor_HTMLRegister::Processor_HTMLRegister()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_HTMLRegister)
}

void Processor_HTMLRegister::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::msg::UserLoginInfo*>(&::msg::UserLoginInfo::default_instance());
}

Processor_HTMLRegister::Processor_HTMLRegister(const Processor_HTMLRegister& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_HTMLRegister)
}

void Processor_HTMLRegister::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logininfo_ = NULL;
  refereeuserid_ = 0;
  refereegroupid_ = 0;
  refereeroomid_ = 0;
  phonenumber_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_HTMLRegister::~Processor_HTMLRegister() {
  // @@protoc_insertion_point(destructor:msg.Processor_HTMLRegister)
  SharedDtor();
}

void Processor_HTMLRegister::SharedDtor() {
  if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verification_;
  }
  if (this != default_instance_) {
    delete logininfo_;
  }
}

void Processor_HTMLRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_HTMLRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_HTMLRegister_descriptor_;
}

const Processor_HTMLRegister& Processor_HTMLRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_HTMLRegister* Processor_HTMLRegister::default_instance_ = NULL;

Processor_HTMLRegister* Processor_HTMLRegister::New() const {
  return new Processor_HTMLRegister;
}

void Processor_HTMLRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_HTMLRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(refereeuserid_, refereegroupid_);
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::msg::UserLoginInfo::Clear();
    }
    refereeroomid_ = 0;
    if (has_phonenumber()) {
      if (phonenumber_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_verification()) {
      if (verification_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verification_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_HTMLRegister::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_HTMLRegister)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserLoginInfo LoginInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefereeUserID;
        break;
      }

      // optional int32 RefereeUserID = 2;
      case 2: {
        if (tag == 16) {
         parse_RefereeUserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refereeuserid_)));
          set_has_refereeuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefereeGroupID;
        break;
      }

      // optional int32 RefereeGroupID = 3;
      case 3: {
        if (tag == 24) {
         parse_RefereeGroupID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refereegroupid_)));
          set_has_refereegroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefereeRoomID;
        break;
      }

      // optional int32 RefereeRoomID = 4;
      case 4: {
        if (tag == 32) {
         parse_RefereeRoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refereeroomid_)));
          set_has_refereeroomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PhoneNumber;
        break;
      }

      // optional string PhoneNumber = 5;
      case 5: {
        if (tag == 42) {
         parse_PhoneNumber:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Verification;
        break;
      }

      // optional string Verification = 6;
      case 6: {
        if (tag == 50) {
         parse_Verification:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verification().data(), this->verification().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "verification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_HTMLRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_HTMLRegister)
  return false;
#undef DO_
}

void Processor_HTMLRegister::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_HTMLRegister)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logininfo(), output);
  }

  // optional int32 RefereeUserID = 2;
  if (has_refereeuserid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->refereeuserid(), output);
  }

  // optional int32 RefereeGroupID = 3;
  if (has_refereegroupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->refereegroupid(), output);
  }

  // optional int32 RefereeRoomID = 4;
  if (has_refereeroomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->refereeroomid(), output);
  }

  // optional string PhoneNumber = 5;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phonenumber(), output);
  }

  // optional string Verification = 6;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->verification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_HTMLRegister)
}

::google_public::protobuf::uint8* Processor_HTMLRegister::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_HTMLRegister)
  // optional .msg.UserLoginInfo LoginInfo = 1;
  if (has_logininfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logininfo(), target);
  }

  // optional int32 RefereeUserID = 2;
  if (has_refereeuserid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refereeuserid(), target);
  }

  // optional int32 RefereeGroupID = 3;
  if (has_refereegroupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refereegroupid(), target);
  }

  // optional int32 RefereeRoomID = 4;
  if (has_refereeroomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refereeroomid(), target);
  }

  // optional string PhoneNumber = 5;
  if (has_phonenumber()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phonenumber(), target);
  }

  // optional string Verification = 6;
  if (has_verification()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verification().data(), this->verification().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "verification");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_HTMLRegister)
  return target;
}

int Processor_HTMLRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserLoginInfo LoginInfo = 1;
    if (has_logininfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }

    // optional int32 RefereeUserID = 2;
    if (has_refereeuserid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->refereeuserid());
    }

    // optional int32 RefereeGroupID = 3;
    if (has_refereegroupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->refereegroupid());
    }

    // optional int32 RefereeRoomID = 4;
    if (has_refereeroomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->refereeroomid());
    }

    // optional string PhoneNumber = 5;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string Verification = 6;
    if (has_verification()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->verification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_HTMLRegister::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_HTMLRegister* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_HTMLRegister*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_HTMLRegister::MergeFrom(const Processor_HTMLRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logininfo()) {
      mutable_logininfo()->::msg::UserLoginInfo::MergeFrom(from.logininfo());
    }
    if (from.has_refereeuserid()) {
      set_refereeuserid(from.refereeuserid());
    }
    if (from.has_refereegroupid()) {
      set_refereegroupid(from.refereegroupid());
    }
    if (from.has_refereeroomid()) {
      set_refereeroomid(from.refereeroomid());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_verification()) {
      set_verification(from.verification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_HTMLRegister::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_HTMLRegister::CopyFrom(const Processor_HTMLRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_HTMLRegister::IsInitialized() const {

  return true;
}

void Processor_HTMLRegister::Swap(Processor_HTMLRegister* other) {
  if (other != this) {
    std::swap(logininfo_, other->logininfo_);
    std::swap(refereeuserid_, other->refereeuserid_);
    std::swap(refereegroupid_, other->refereegroupid_);
    std::swap(refereeroomid_, other->refereeroomid_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(verification_, other->verification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_HTMLRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_HTMLRegister_descriptor_;
  metadata.reflection = Processor_HTMLRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_HTMLRegisterEnterRoom::kUserIDFieldNumber;
const int Processor_HTMLRegisterEnterRoom::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_HTMLRegisterEnterRoom::Processor_HTMLRegisterEnterRoom()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_HTMLRegisterEnterRoom)
}

void Processor_HTMLRegisterEnterRoom::InitAsDefaultInstance() {
}

Processor_HTMLRegisterEnterRoom::Processor_HTMLRegisterEnterRoom(const Processor_HTMLRegisterEnterRoom& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_HTMLRegisterEnterRoom)
}

void Processor_HTMLRegisterEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_HTMLRegisterEnterRoom::~Processor_HTMLRegisterEnterRoom() {
  // @@protoc_insertion_point(destructor:msg.Processor_HTMLRegisterEnterRoom)
  SharedDtor();
}

void Processor_HTMLRegisterEnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_HTMLRegisterEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_HTMLRegisterEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_HTMLRegisterEnterRoom_descriptor_;
}

const Processor_HTMLRegisterEnterRoom& Processor_HTMLRegisterEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_HTMLRegisterEnterRoom* Processor_HTMLRegisterEnterRoom::default_instance_ = NULL;

Processor_HTMLRegisterEnterRoom* Processor_HTMLRegisterEnterRoom::New() const {
  return new Processor_HTMLRegisterEnterRoom;
}

void Processor_HTMLRegisterEnterRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_HTMLRegisterEnterRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_HTMLRegisterEnterRoom::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_HTMLRegisterEnterRoom)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_HTMLRegisterEnterRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_HTMLRegisterEnterRoom)
  return false;
#undef DO_
}

void Processor_HTMLRegisterEnterRoom::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_HTMLRegisterEnterRoom)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_HTMLRegisterEnterRoom)
}

::google_public::protobuf::uint8* Processor_HTMLRegisterEnterRoom::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_HTMLRegisterEnterRoom)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_HTMLRegisterEnterRoom)
  return target;
}

int Processor_HTMLRegisterEnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_HTMLRegisterEnterRoom::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_HTMLRegisterEnterRoom* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_HTMLRegisterEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_HTMLRegisterEnterRoom::MergeFrom(const Processor_HTMLRegisterEnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_HTMLRegisterEnterRoom::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_HTMLRegisterEnterRoom::CopyFrom(const Processor_HTMLRegisterEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_HTMLRegisterEnterRoom::IsInitialized() const {

  return true;
}

void Processor_HTMLRegisterEnterRoom::Swap(Processor_HTMLRegisterEnterRoom* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_HTMLRegisterEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_HTMLRegisterEnterRoom_descriptor_;
  metadata.reflection = Processor_HTMLRegisterEnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1003_ChangeUserInfo_ResToCore::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_1003_ChangeUserInfo_ResToCore::Processor_1003_ChangeUserInfo_ResToCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1003_ChangeUserInfo_ResToCore)
}

void Processor_1003_ChangeUserInfo_ResToCore::InitAsDefaultInstance() {
}

Processor_1003_ChangeUserInfo_ResToCore::Processor_1003_ChangeUserInfo_ResToCore(const Processor_1003_ChangeUserInfo_ResToCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1003_ChangeUserInfo_ResToCore)
}

void Processor_1003_ChangeUserInfo_ResToCore::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1003_ChangeUserInfo_ResToCore::~Processor_1003_ChangeUserInfo_ResToCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_1003_ChangeUserInfo_ResToCore)
  SharedDtor();
}

void Processor_1003_ChangeUserInfo_ResToCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1003_ChangeUserInfo_ResToCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1003_ChangeUserInfo_ResToCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1003_ChangeUserInfo_ResToCore_descriptor_;
}

const Processor_1003_ChangeUserInfo_ResToCore& Processor_1003_ChangeUserInfo_ResToCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1003_ChangeUserInfo_ResToCore* Processor_1003_ChangeUserInfo_ResToCore::default_instance_ = NULL;

Processor_1003_ChangeUserInfo_ResToCore* Processor_1003_ChangeUserInfo_ResToCore::New() const {
  return new Processor_1003_ChangeUserInfo_ResToCore;
}

void Processor_1003_ChangeUserInfo_ResToCore::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1003_ChangeUserInfo_ResToCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1003_ChangeUserInfo_ResToCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1003_ChangeUserInfo_ResToCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1003_ChangeUserInfo_ResToCore)
  return false;
#undef DO_
}

void Processor_1003_ChangeUserInfo_ResToCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1003_ChangeUserInfo_ResToCore)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1003_ChangeUserInfo_ResToCore)
}

::google_public::protobuf::uint8* Processor_1003_ChangeUserInfo_ResToCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1003_ChangeUserInfo_ResToCore)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1003_ChangeUserInfo_ResToCore)
  return target;
}

int Processor_1003_ChangeUserInfo_ResToCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1003_ChangeUserInfo_ResToCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1003_ChangeUserInfo_ResToCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1003_ChangeUserInfo_ResToCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1003_ChangeUserInfo_ResToCore::MergeFrom(const Processor_1003_ChangeUserInfo_ResToCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1003_ChangeUserInfo_ResToCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1003_ChangeUserInfo_ResToCore::CopyFrom(const Processor_1003_ChangeUserInfo_ResToCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1003_ChangeUserInfo_ResToCore::IsInitialized() const {

  return true;
}

void Processor_1003_ChangeUserInfo_ResToCore::Swap(Processor_1003_ChangeUserInfo_ResToCore* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1003_ChangeUserInfo_ResToCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1003_ChangeUserInfo_ResToCore_descriptor_;
  metadata.reflection = Processor_1003_ChangeUserInfo_ResToCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1004_ChangeUserInfo_CoreToOther::kUserIDFieldNumber;
#endif  // !_MSC_VER

Processor_1004_ChangeUserInfo_CoreToOther::Processor_1004_ChangeUserInfo_CoreToOther()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1004_ChangeUserInfo_CoreToOther)
}

void Processor_1004_ChangeUserInfo_CoreToOther::InitAsDefaultInstance() {
}

Processor_1004_ChangeUserInfo_CoreToOther::Processor_1004_ChangeUserInfo_CoreToOther(const Processor_1004_ChangeUserInfo_CoreToOther& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1004_ChangeUserInfo_CoreToOther)
}

void Processor_1004_ChangeUserInfo_CoreToOther::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1004_ChangeUserInfo_CoreToOther::~Processor_1004_ChangeUserInfo_CoreToOther() {
  // @@protoc_insertion_point(destructor:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  SharedDtor();
}

void Processor_1004_ChangeUserInfo_CoreToOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1004_ChangeUserInfo_CoreToOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1004_ChangeUserInfo_CoreToOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1004_ChangeUserInfo_CoreToOther_descriptor_;
}

const Processor_1004_ChangeUserInfo_CoreToOther& Processor_1004_ChangeUserInfo_CoreToOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1004_ChangeUserInfo_CoreToOther* Processor_1004_ChangeUserInfo_CoreToOther::default_instance_ = NULL;

Processor_1004_ChangeUserInfo_CoreToOther* Processor_1004_ChangeUserInfo_CoreToOther::New() const {
  return new Processor_1004_ChangeUserInfo_CoreToOther;
}

void Processor_1004_ChangeUserInfo_CoreToOther::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1004_ChangeUserInfo_CoreToOther::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  return false;
#undef DO_
}

void Processor_1004_ChangeUserInfo_CoreToOther::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1004_ChangeUserInfo_CoreToOther)
}

::google_public::protobuf::uint8* Processor_1004_ChangeUserInfo_CoreToOther::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1004_ChangeUserInfo_CoreToOther)
  return target;
}

int Processor_1004_ChangeUserInfo_CoreToOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1004_ChangeUserInfo_CoreToOther::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1004_ChangeUserInfo_CoreToOther* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1004_ChangeUserInfo_CoreToOther*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1004_ChangeUserInfo_CoreToOther::MergeFrom(const Processor_1004_ChangeUserInfo_CoreToOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1004_ChangeUserInfo_CoreToOther::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1004_ChangeUserInfo_CoreToOther::CopyFrom(const Processor_1004_ChangeUserInfo_CoreToOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1004_ChangeUserInfo_CoreToOther::IsInitialized() const {

  return true;
}

void Processor_1004_ChangeUserInfo_CoreToOther::Swap(Processor_1004_ChangeUserInfo_CoreToOther* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1004_ChangeUserInfo_CoreToOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1004_ChangeUserInfo_CoreToOther_descriptor_;
  metadata.reflection = Processor_1004_ChangeUserInfo_CoreToOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1005_OnlineInfo_OtherToCore::kOnlineCountFieldNumber;
const int Processor_1005_OnlineInfo_OtherToCore::kIDFieldNumber;
#endif  // !_MSC_VER

Processor_1005_OnlineInfo_OtherToCore::Processor_1005_OnlineInfo_OtherToCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1005_OnlineInfo_OtherToCore)
}

void Processor_1005_OnlineInfo_OtherToCore::InitAsDefaultInstance() {
}

Processor_1005_OnlineInfo_OtherToCore::Processor_1005_OnlineInfo_OtherToCore(const Processor_1005_OnlineInfo_OtherToCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1005_OnlineInfo_OtherToCore)
}

void Processor_1005_OnlineInfo_OtherToCore::SharedCtor() {
  _cached_size_ = 0;
  onlinecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1005_OnlineInfo_OtherToCore::~Processor_1005_OnlineInfo_OtherToCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_1005_OnlineInfo_OtherToCore)
  SharedDtor();
}

void Processor_1005_OnlineInfo_OtherToCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1005_OnlineInfo_OtherToCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1005_OnlineInfo_OtherToCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1005_OnlineInfo_OtherToCore_descriptor_;
}

const Processor_1005_OnlineInfo_OtherToCore& Processor_1005_OnlineInfo_OtherToCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1005_OnlineInfo_OtherToCore* Processor_1005_OnlineInfo_OtherToCore::default_instance_ = NULL;

Processor_1005_OnlineInfo_OtherToCore* Processor_1005_OnlineInfo_OtherToCore::New() const {
  return new Processor_1005_OnlineInfo_OtherToCore;
}

void Processor_1005_OnlineInfo_OtherToCore::Clear() {
  onlinecount_ = 0;
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1005_OnlineInfo_OtherToCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1005_OnlineInfo_OtherToCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OnlineCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));
          set_has_onlinecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // repeated int32 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1005_OnlineInfo_OtherToCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1005_OnlineInfo_OtherToCore)
  return false;
#undef DO_
}

void Processor_1005_OnlineInfo_OtherToCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1005_OnlineInfo_OtherToCore)
  // optional int32 OnlineCount = 1;
  if (has_onlinecount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->onlinecount(), output);
  }

  // repeated int32 ID = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1005_OnlineInfo_OtherToCore)
}

::google_public::protobuf::uint8* Processor_1005_OnlineInfo_OtherToCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1005_OnlineInfo_OtherToCore)
  // optional int32 OnlineCount = 1;
  if (has_onlinecount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->onlinecount(), target);
  }

  // repeated int32 ID = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1005_OnlineInfo_OtherToCore)
  return target;
}

int Processor_1005_OnlineInfo_OtherToCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OnlineCount = 1;
    if (has_onlinecount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecount());
    }

  }
  // repeated int32 ID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1005_OnlineInfo_OtherToCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1005_OnlineInfo_OtherToCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1005_OnlineInfo_OtherToCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1005_OnlineInfo_OtherToCore::MergeFrom(const Processor_1005_OnlineInfo_OtherToCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlinecount()) {
      set_onlinecount(from.onlinecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1005_OnlineInfo_OtherToCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1005_OnlineInfo_OtherToCore::CopyFrom(const Processor_1005_OnlineInfo_OtherToCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1005_OnlineInfo_OtherToCore::IsInitialized() const {

  return true;
}

void Processor_1005_OnlineInfo_OtherToCore::Swap(Processor_1005_OnlineInfo_OtherToCore* other) {
  if (other != this) {
    std::swap(onlinecount_, other->onlinecount_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1005_OnlineInfo_OtherToCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1005_OnlineInfo_OtherToCore_descriptor_;
  metadata.reflection = Processor_1005_OnlineInfo_OtherToCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerRoomInfo::kRoomIDFieldNumber;
const int ServerRoomInfo::kPlayerCountFieldNumber;
const int ServerRoomInfo::kStatusFieldNumber;
const int ServerRoomInfo::kNoteFieldNumber;
#endif  // !_MSC_VER

ServerRoomInfo::ServerRoomInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ServerRoomInfo)
}

void ServerRoomInfo::InitAsDefaultInstance() {
}

ServerRoomInfo::ServerRoomInfo(const ServerRoomInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ServerRoomInfo)
}

void ServerRoomInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0;
  playercount_ = 0;
  status_ = 0;
  note_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerRoomInfo::~ServerRoomInfo() {
  // @@protoc_insertion_point(destructor:msg.ServerRoomInfo)
  SharedDtor();
}

void ServerRoomInfo::SharedDtor() {
  if (note_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void ServerRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ServerRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRoomInfo_descriptor_;
}

const ServerRoomInfo& ServerRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ServerRoomInfo* ServerRoomInfo::default_instance_ = NULL;

ServerRoomInfo* ServerRoomInfo::New() const {
  return new ServerRoomInfo;
}

void ServerRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, playercount_);
    status_ = 0;
    if (has_note()) {
      if (note_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerRoomInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ServerRoomInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlayerCount;
        break;
      }

      // optional int32 PlayerCount = 2;
      case 2: {
        if (tag == 16) {
         parse_PlayerCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // optional .msg.RoomStatus Status = 3;
      case 3: {
        if (tag == 24) {
         parse_Status:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomStatus_IsValid(value)) {
            set_status(static_cast< ::msg::RoomStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_note;
        break;
      }

      // optional string note = 4;
      case 4: {
        if (tag == 34) {
         parse_note:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ServerRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ServerRoomInfo)
  return false;
#undef DO_
}

void ServerRoomInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ServerRoomInfo)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 PlayerCount = 2;
  if (has_playercount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->playercount(), output);
  }

  // optional .msg.RoomStatus Status = 3;
  if (has_status()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional string note = 4;
  if (has_note()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->note(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ServerRoomInfo)
}

::google_public::protobuf::uint8* ServerRoomInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ServerRoomInfo)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 PlayerCount = 2;
  if (has_playercount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playercount(), target);
  }

  // optional .msg.RoomStatus Status = 3;
  if (has_status()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional string note = 4;
  if (has_note()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->note(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ServerRoomInfo)
  return target;
}

int ServerRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 PlayerCount = 2;
    if (has_playercount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->playercount());
    }

    // optional .msg.RoomStatus Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string note = 4;
    if (has_note()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRoomInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerRoomInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ServerRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerRoomInfo::MergeFrom(const ServerRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerRoomInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRoomInfo::CopyFrom(const ServerRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRoomInfo::IsInitialized() const {

  return true;
}

void ServerRoomInfo::Swap(ServerRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playercount_, other->playercount_);
    std::swap(status_, other->status_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ServerRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ServerRoomInfo_descriptor_;
  metadata.reflection = ServerRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1006_RoomInfo::kRoomInfoFieldNumber;
const int Processor_1006_RoomInfo::kRoomServerInfoFieldNumber;
#endif  // !_MSC_VER

Processor_1006_RoomInfo::Processor_1006_RoomInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1006_RoomInfo)
}

void Processor_1006_RoomInfo::InitAsDefaultInstance() {
  roomserverinfo_ = const_cast< ::msg::ServerInfo*>(&::msg::ServerInfo::default_instance());
}

Processor_1006_RoomInfo::Processor_1006_RoomInfo(const Processor_1006_RoomInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1006_RoomInfo)
}

void Processor_1006_RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomserverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1006_RoomInfo::~Processor_1006_RoomInfo() {
  // @@protoc_insertion_point(destructor:msg.Processor_1006_RoomInfo)
  SharedDtor();
}

void Processor_1006_RoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roomserverinfo_;
  }
}

void Processor_1006_RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1006_RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1006_RoomInfo_descriptor_;
}

const Processor_1006_RoomInfo& Processor_1006_RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1006_RoomInfo* Processor_1006_RoomInfo::default_instance_ = NULL;

Processor_1006_RoomInfo* Processor_1006_RoomInfo::New() const {
  return new Processor_1006_RoomInfo;
}

void Processor_1006_RoomInfo::Clear() {
  if (has_roomserverinfo()) {
    if (roomserverinfo_ != NULL) roomserverinfo_->::msg::ServerInfo::Clear();
  }
  roominfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1006_RoomInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1006_RoomInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ServerRoomInfo RoomInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_RoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RoomInfo;
        if (input->ExpectTag(18)) goto parse_RoomServerInfo;
        break;
      }

      // optional .msg.ServerInfo RoomServerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomServerInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomserverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1006_RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1006_RoomInfo)
  return false;
#undef DO_
}

void Processor_1006_RoomInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1006_RoomInfo)
  // repeated .msg.ServerRoomInfo RoomInfo = 1;
  for (int i = 0; i < this->roominfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(i), output);
  }

  // optional .msg.ServerInfo RoomServerInfo = 2;
  if (has_roomserverinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomserverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1006_RoomInfo)
}

::google_public::protobuf::uint8* Processor_1006_RoomInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1006_RoomInfo)
  // repeated .msg.ServerRoomInfo RoomInfo = 1;
  for (int i = 0; i < this->roominfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(i), target);
  }

  // optional .msg.ServerInfo RoomServerInfo = 2;
  if (has_roomserverinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomserverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1006_RoomInfo)
  return target;
}

int Processor_1006_RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .msg.ServerInfo RoomServerInfo = 2;
    if (has_roomserverinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomserverinfo());
    }

  }
  // repeated .msg.ServerRoomInfo RoomInfo = 1;
  total_size += 1 * this->roominfo_size();
  for (int i = 0; i < this->roominfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1006_RoomInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1006_RoomInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1006_RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1006_RoomInfo::MergeFrom(const Processor_1006_RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  roominfo_.MergeFrom(from.roominfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roomserverinfo()) {
      mutable_roomserverinfo()->::msg::ServerInfo::MergeFrom(from.roomserverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1006_RoomInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1006_RoomInfo::CopyFrom(const Processor_1006_RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1006_RoomInfo::IsInitialized() const {

  return true;
}

void Processor_1006_RoomInfo::Swap(Processor_1006_RoomInfo* other) {
  if (other != this) {
    roominfo_.Swap(&other->roominfo_);
    std::swap(roomserverinfo_, other->roomserverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1006_RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1006_RoomInfo_descriptor_;
  metadata.reflection = Processor_1006_RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1009_CreateRoom_ResToCore::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_1009_CreateRoom_ResToCore::Processor_1009_CreateRoom_ResToCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1009_CreateRoom_ResToCore)
}

void Processor_1009_CreateRoom_ResToCore::InitAsDefaultInstance() {
}

Processor_1009_CreateRoom_ResToCore::Processor_1009_CreateRoom_ResToCore(const Processor_1009_CreateRoom_ResToCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1009_CreateRoom_ResToCore)
}

void Processor_1009_CreateRoom_ResToCore::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1009_CreateRoom_ResToCore::~Processor_1009_CreateRoom_ResToCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_1009_CreateRoom_ResToCore)
  SharedDtor();
}

void Processor_1009_CreateRoom_ResToCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1009_CreateRoom_ResToCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1009_CreateRoom_ResToCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1009_CreateRoom_ResToCore_descriptor_;
}

const Processor_1009_CreateRoom_ResToCore& Processor_1009_CreateRoom_ResToCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1009_CreateRoom_ResToCore* Processor_1009_CreateRoom_ResToCore::default_instance_ = NULL;

Processor_1009_CreateRoom_ResToCore* Processor_1009_CreateRoom_ResToCore::New() const {
  return new Processor_1009_CreateRoom_ResToCore;
}

void Processor_1009_CreateRoom_ResToCore::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1009_CreateRoom_ResToCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1009_CreateRoom_ResToCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1009_CreateRoom_ResToCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1009_CreateRoom_ResToCore)
  return false;
#undef DO_
}

void Processor_1009_CreateRoom_ResToCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1009_CreateRoom_ResToCore)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1009_CreateRoom_ResToCore)
}

::google_public::protobuf::uint8* Processor_1009_CreateRoom_ResToCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1009_CreateRoom_ResToCore)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1009_CreateRoom_ResToCore)
  return target;
}

int Processor_1009_CreateRoom_ResToCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1009_CreateRoom_ResToCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1009_CreateRoom_ResToCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1009_CreateRoom_ResToCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1009_CreateRoom_ResToCore::MergeFrom(const Processor_1009_CreateRoom_ResToCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1009_CreateRoom_ResToCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1009_CreateRoom_ResToCore::CopyFrom(const Processor_1009_CreateRoom_ResToCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1009_CreateRoom_ResToCore::IsInitialized() const {

  return true;
}

void Processor_1009_CreateRoom_ResToCore::Swap(Processor_1009_CreateRoom_ResToCore* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1009_CreateRoom_ResToCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1009_CreateRoom_ResToCore_descriptor_;
  metadata.reflection = Processor_1009_CreateRoom_ResToCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1010_CreateRoom_CoreToRoom::kRoomIDFieldNumber;
#endif  // !_MSC_VER

Processor_1010_CreateRoom_CoreToRoom::Processor_1010_CreateRoom_CoreToRoom()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1010_CreateRoom_CoreToRoom)
}

void Processor_1010_CreateRoom_CoreToRoom::InitAsDefaultInstance() {
}

Processor_1010_CreateRoom_CoreToRoom::Processor_1010_CreateRoom_CoreToRoom(const Processor_1010_CreateRoom_CoreToRoom& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1010_CreateRoom_CoreToRoom)
}

void Processor_1010_CreateRoom_CoreToRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1010_CreateRoom_CoreToRoom::~Processor_1010_CreateRoom_CoreToRoom() {
  // @@protoc_insertion_point(destructor:msg.Processor_1010_CreateRoom_CoreToRoom)
  SharedDtor();
}

void Processor_1010_CreateRoom_CoreToRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1010_CreateRoom_CoreToRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1010_CreateRoom_CoreToRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1010_CreateRoom_CoreToRoom_descriptor_;
}

const Processor_1010_CreateRoom_CoreToRoom& Processor_1010_CreateRoom_CoreToRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1010_CreateRoom_CoreToRoom* Processor_1010_CreateRoom_CoreToRoom::default_instance_ = NULL;

Processor_1010_CreateRoom_CoreToRoom* Processor_1010_CreateRoom_CoreToRoom::New() const {
  return new Processor_1010_CreateRoom_CoreToRoom;
}

void Processor_1010_CreateRoom_CoreToRoom::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1010_CreateRoom_CoreToRoom::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1010_CreateRoom_CoreToRoom)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1010_CreateRoom_CoreToRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1010_CreateRoom_CoreToRoom)
  return false;
#undef DO_
}

void Processor_1010_CreateRoom_CoreToRoom::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1010_CreateRoom_CoreToRoom)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1010_CreateRoom_CoreToRoom)
}

::google_public::protobuf::uint8* Processor_1010_CreateRoom_CoreToRoom::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1010_CreateRoom_CoreToRoom)
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1010_CreateRoom_CoreToRoom)
  return target;
}

int Processor_1010_CreateRoom_CoreToRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1010_CreateRoom_CoreToRoom::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1010_CreateRoom_CoreToRoom* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1010_CreateRoom_CoreToRoom*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1010_CreateRoom_CoreToRoom::MergeFrom(const Processor_1010_CreateRoom_CoreToRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1010_CreateRoom_CoreToRoom::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1010_CreateRoom_CoreToRoom::CopyFrom(const Processor_1010_CreateRoom_CoreToRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1010_CreateRoom_CoreToRoom::IsInitialized() const {

  return true;
}

void Processor_1010_CreateRoom_CoreToRoom::Swap(Processor_1010_CreateRoom_CoreToRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1010_CreateRoom_CoreToRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1010_CreateRoom_CoreToRoom_descriptor_;
  metadata.reflection = Processor_1010_CreateRoom_CoreToRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1011_ChangeServerProp::kPropFieldNumber;
#endif  // !_MSC_VER

Processor_1011_ChangeServerProp::Processor_1011_ChangeServerProp()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1011_ChangeServerProp)
}

void Processor_1011_ChangeServerProp::InitAsDefaultInstance() {
  prop_ = const_cast< ::msg::Property*>(&::msg::Property::default_instance());
}

Processor_1011_ChangeServerProp::Processor_1011_ChangeServerProp(const Processor_1011_ChangeServerProp& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1011_ChangeServerProp)
}

void Processor_1011_ChangeServerProp::SharedCtor() {
  _cached_size_ = 0;
  prop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1011_ChangeServerProp::~Processor_1011_ChangeServerProp() {
  // @@protoc_insertion_point(destructor:msg.Processor_1011_ChangeServerProp)
  SharedDtor();
}

void Processor_1011_ChangeServerProp::SharedDtor() {
  if (this != default_instance_) {
    delete prop_;
  }
}

void Processor_1011_ChangeServerProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1011_ChangeServerProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1011_ChangeServerProp_descriptor_;
}

const Processor_1011_ChangeServerProp& Processor_1011_ChangeServerProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1011_ChangeServerProp* Processor_1011_ChangeServerProp::default_instance_ = NULL;

Processor_1011_ChangeServerProp* Processor_1011_ChangeServerProp::New() const {
  return new Processor_1011_ChangeServerProp;
}

void Processor_1011_ChangeServerProp::Clear() {
  if (has_prop()) {
    if (prop_ != NULL) prop_->::msg::Property::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1011_ChangeServerProp::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1011_ChangeServerProp)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.Property prop = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1011_ChangeServerProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1011_ChangeServerProp)
  return false;
#undef DO_
}

void Processor_1011_ChangeServerProp::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1011_ChangeServerProp)
  // optional .msg.Property prop = 1;
  if (has_prop()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1011_ChangeServerProp)
}

::google_public::protobuf::uint8* Processor_1011_ChangeServerProp::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1011_ChangeServerProp)
  // optional .msg.Property prop = 1;
  if (has_prop()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1011_ChangeServerProp)
  return target;
}

int Processor_1011_ChangeServerProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.Property prop = 1;
    if (has_prop()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1011_ChangeServerProp::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1011_ChangeServerProp* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1011_ChangeServerProp*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1011_ChangeServerProp::MergeFrom(const Processor_1011_ChangeServerProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prop()) {
      mutable_prop()->::msg::Property::MergeFrom(from.prop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1011_ChangeServerProp::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1011_ChangeServerProp::CopyFrom(const Processor_1011_ChangeServerProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1011_ChangeServerProp::IsInitialized() const {

  return true;
}

void Processor_1011_ChangeServerProp::Swap(Processor_1011_ChangeServerProp* other) {
  if (other != this) {
    std::swap(prop_, other->prop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1011_ChangeServerProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1011_ChangeServerProp_descriptor_;
  metadata.reflection = Processor_1011_ChangeServerProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameter::kParameterNameFieldNumber;
const int Parameter::kParameterValueFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Parameter)
}

void Parameter::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parametername_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  parametervalue_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:msg.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (parametername_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parametername_;
  }
  if (parametervalue_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parametervalue_;
  }
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parametername()) {
      if (parametername_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parametername_->clear();
      }
    }
    if (has_parametervalue()) {
      if (parametervalue_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parametervalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Parameter)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ParameterName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parametername()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parametername().data(), this->parametername().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "parametername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ParameterValue;
        break;
      }

      // optional string ParameterValue = 2;
      case 2: {
        if (tag == 18) {
         parse_ParameterValue:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parametervalue()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parametervalue().data(), this->parametervalue().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "parametervalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Parameter)
  // optional string ParameterName = 1;
  if (has_parametername()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parametername().data(), this->parametername().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "parametername");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parametername(), output);
  }

  // optional string ParameterValue = 2;
  if (has_parametervalue()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parametervalue().data(), this->parametervalue().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "parametervalue");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parametervalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Parameter)
}

::google_public::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Parameter)
  // optional string ParameterName = 1;
  if (has_parametername()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parametername().data(), this->parametername().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "parametername");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parametername(), target);
  }

  // optional string ParameterValue = 2;
  if (has_parametervalue()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parametervalue().data(), this->parametervalue().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "parametervalue");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parametervalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Parameter)
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ParameterName = 1;
    if (has_parametername()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->parametername());
    }

    // optional string ParameterValue = 2;
    if (has_parametervalue()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->parametervalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parametername()) {
      set_parametername(from.parametername());
    }
    if (from.has_parametervalue()) {
      set_parametervalue(from.parametervalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(parametername_, other->parametername_);
    std::swap(parametervalue_, other->parametervalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1012_WXPayMsg::kParameterFieldNumber;
#endif  // !_MSC_VER

Processor_1012_WXPayMsg::Processor_1012_WXPayMsg()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1012_WXPayMsg)
}

void Processor_1012_WXPayMsg::InitAsDefaultInstance() {
}

Processor_1012_WXPayMsg::Processor_1012_WXPayMsg(const Processor_1012_WXPayMsg& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1012_WXPayMsg)
}

void Processor_1012_WXPayMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1012_WXPayMsg::~Processor_1012_WXPayMsg() {
  // @@protoc_insertion_point(destructor:msg.Processor_1012_WXPayMsg)
  SharedDtor();
}

void Processor_1012_WXPayMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1012_WXPayMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1012_WXPayMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1012_WXPayMsg_descriptor_;
}

const Processor_1012_WXPayMsg& Processor_1012_WXPayMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1012_WXPayMsg* Processor_1012_WXPayMsg::default_instance_ = NULL;

Processor_1012_WXPayMsg* Processor_1012_WXPayMsg::New() const {
  return new Processor_1012_WXPayMsg;
}

void Processor_1012_WXPayMsg::Clear() {
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1012_WXPayMsg::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1012_WXPayMsg)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Parameter parameter = 1;
      case 1: {
        if (tag == 10) {
         parse_parameter:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_parameter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1012_WXPayMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1012_WXPayMsg)
  return false;
#undef DO_
}

void Processor_1012_WXPayMsg::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1012_WXPayMsg)
  // repeated .msg.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parameter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1012_WXPayMsg)
}

::google_public::protobuf::uint8* Processor_1012_WXPayMsg::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1012_WXPayMsg)
  // repeated .msg.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parameter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1012_WXPayMsg)
  return target;
}

int Processor_1012_WXPayMsg::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Parameter parameter = 1;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1012_WXPayMsg::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1012_WXPayMsg* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1012_WXPayMsg*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1012_WXPayMsg::MergeFrom(const Processor_1012_WXPayMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1012_WXPayMsg::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1012_WXPayMsg::CopyFrom(const Processor_1012_WXPayMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1012_WXPayMsg::IsInitialized() const {

  return true;
}

void Processor_1012_WXPayMsg::Swap(Processor_1012_WXPayMsg* other) {
  if (other != this) {
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1012_WXPayMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1012_WXPayMsg_descriptor_;
  metadata.reflection = Processor_1012_WXPayMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1100_ShutDown_ConsoleToCore::kTimeBeforeCloseFieldNumber;
#endif  // !_MSC_VER

Processor_1100_ShutDown_ConsoleToCore::Processor_1100_ShutDown_ConsoleToCore()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1100_ShutDown_ConsoleToCore)
}

void Processor_1100_ShutDown_ConsoleToCore::InitAsDefaultInstance() {
}

Processor_1100_ShutDown_ConsoleToCore::Processor_1100_ShutDown_ConsoleToCore(const Processor_1100_ShutDown_ConsoleToCore& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1100_ShutDown_ConsoleToCore)
}

void Processor_1100_ShutDown_ConsoleToCore::SharedCtor() {
  _cached_size_ = 0;
  timebeforeclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1100_ShutDown_ConsoleToCore::~Processor_1100_ShutDown_ConsoleToCore() {
  // @@protoc_insertion_point(destructor:msg.Processor_1100_ShutDown_ConsoleToCore)
  SharedDtor();
}

void Processor_1100_ShutDown_ConsoleToCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1100_ShutDown_ConsoleToCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1100_ShutDown_ConsoleToCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1100_ShutDown_ConsoleToCore_descriptor_;
}

const Processor_1100_ShutDown_ConsoleToCore& Processor_1100_ShutDown_ConsoleToCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1100_ShutDown_ConsoleToCore* Processor_1100_ShutDown_ConsoleToCore::default_instance_ = NULL;

Processor_1100_ShutDown_ConsoleToCore* Processor_1100_ShutDown_ConsoleToCore::New() const {
  return new Processor_1100_ShutDown_ConsoleToCore;
}

void Processor_1100_ShutDown_ConsoleToCore::Clear() {
  timebeforeclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1100_ShutDown_ConsoleToCore::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1100_ShutDown_ConsoleToCore)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TimeBeforeClose = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timebeforeclose_)));
          set_has_timebeforeclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1100_ShutDown_ConsoleToCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1100_ShutDown_ConsoleToCore)
  return false;
#undef DO_
}

void Processor_1100_ShutDown_ConsoleToCore::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1100_ShutDown_ConsoleToCore)
  // optional int32 TimeBeforeClose = 1;
  if (has_timebeforeclose()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->timebeforeclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1100_ShutDown_ConsoleToCore)
}

::google_public::protobuf::uint8* Processor_1100_ShutDown_ConsoleToCore::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1100_ShutDown_ConsoleToCore)
  // optional int32 TimeBeforeClose = 1;
  if (has_timebeforeclose()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timebeforeclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1100_ShutDown_ConsoleToCore)
  return target;
}

int Processor_1100_ShutDown_ConsoleToCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TimeBeforeClose = 1;
    if (has_timebeforeclose()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->timebeforeclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1100_ShutDown_ConsoleToCore::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1100_ShutDown_ConsoleToCore* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1100_ShutDown_ConsoleToCore*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1100_ShutDown_ConsoleToCore::MergeFrom(const Processor_1100_ShutDown_ConsoleToCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timebeforeclose()) {
      set_timebeforeclose(from.timebeforeclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1100_ShutDown_ConsoleToCore::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1100_ShutDown_ConsoleToCore::CopyFrom(const Processor_1100_ShutDown_ConsoleToCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1100_ShutDown_ConsoleToCore::IsInitialized() const {

  return true;
}

void Processor_1100_ShutDown_ConsoleToCore::Swap(Processor_1100_ShutDown_ConsoleToCore* other) {
  if (other != this) {
    std::swap(timebeforeclose_, other->timebeforeclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1100_ShutDown_ConsoleToCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1100_ShutDown_ConsoleToCore_descriptor_;
  metadata.reflection = Processor_1100_ShutDown_ConsoleToCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1101_ShutDown_CoreToOther::kTimeBeforeCloseFieldNumber;
#endif  // !_MSC_VER

Processor_1101_ShutDown_CoreToOther::Processor_1101_ShutDown_CoreToOther()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1101_ShutDown_CoreToOther)
}

void Processor_1101_ShutDown_CoreToOther::InitAsDefaultInstance() {
}

Processor_1101_ShutDown_CoreToOther::Processor_1101_ShutDown_CoreToOther(const Processor_1101_ShutDown_CoreToOther& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1101_ShutDown_CoreToOther)
}

void Processor_1101_ShutDown_CoreToOther::SharedCtor() {
  _cached_size_ = 0;
  timebeforeclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1101_ShutDown_CoreToOther::~Processor_1101_ShutDown_CoreToOther() {
  // @@protoc_insertion_point(destructor:msg.Processor_1101_ShutDown_CoreToOther)
  SharedDtor();
}

void Processor_1101_ShutDown_CoreToOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1101_ShutDown_CoreToOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1101_ShutDown_CoreToOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1101_ShutDown_CoreToOther_descriptor_;
}

const Processor_1101_ShutDown_CoreToOther& Processor_1101_ShutDown_CoreToOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1101_ShutDown_CoreToOther* Processor_1101_ShutDown_CoreToOther::default_instance_ = NULL;

Processor_1101_ShutDown_CoreToOther* Processor_1101_ShutDown_CoreToOther::New() const {
  return new Processor_1101_ShutDown_CoreToOther;
}

void Processor_1101_ShutDown_CoreToOther::Clear() {
  timebeforeclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1101_ShutDown_CoreToOther::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1101_ShutDown_CoreToOther)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TimeBeforeClose = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timebeforeclose_)));
          set_has_timebeforeclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1101_ShutDown_CoreToOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1101_ShutDown_CoreToOther)
  return false;
#undef DO_
}

void Processor_1101_ShutDown_CoreToOther::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1101_ShutDown_CoreToOther)
  // optional int32 TimeBeforeClose = 1;
  if (has_timebeforeclose()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->timebeforeclose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1101_ShutDown_CoreToOther)
}

::google_public::protobuf::uint8* Processor_1101_ShutDown_CoreToOther::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1101_ShutDown_CoreToOther)
  // optional int32 TimeBeforeClose = 1;
  if (has_timebeforeclose()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timebeforeclose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1101_ShutDown_CoreToOther)
  return target;
}

int Processor_1101_ShutDown_CoreToOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TimeBeforeClose = 1;
    if (has_timebeforeclose()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->timebeforeclose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1101_ShutDown_CoreToOther::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1101_ShutDown_CoreToOther* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1101_ShutDown_CoreToOther*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1101_ShutDown_CoreToOther::MergeFrom(const Processor_1101_ShutDown_CoreToOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timebeforeclose()) {
      set_timebeforeclose(from.timebeforeclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1101_ShutDown_CoreToOther::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1101_ShutDown_CoreToOther::CopyFrom(const Processor_1101_ShutDown_CoreToOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1101_ShutDown_CoreToOther::IsInitialized() const {

  return true;
}

void Processor_1101_ShutDown_CoreToOther::Swap(Processor_1101_ShutDown_CoreToOther* other) {
  if (other != this) {
    std::swap(timebeforeclose_, other->timebeforeclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1101_ShutDown_CoreToOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1101_ShutDown_CoreToOther_descriptor_;
  metadata.reflection = Processor_1101_ShutDown_CoreToOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1105_ServerInformation_CoreToConsole::kOnlineSizeFieldNumber;
const int Processor_1105_ServerInformation_CoreToConsole::kOpenRoomFieldNumber;
const int Processor_1105_ServerInformation_CoreToConsole::kCloseRoomFieldNumber;
#endif  // !_MSC_VER

Processor_1105_ServerInformation_CoreToConsole::Processor_1105_ServerInformation_CoreToConsole()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1105_ServerInformation_CoreToConsole)
}

void Processor_1105_ServerInformation_CoreToConsole::InitAsDefaultInstance() {
}

Processor_1105_ServerInformation_CoreToConsole::Processor_1105_ServerInformation_CoreToConsole(const Processor_1105_ServerInformation_CoreToConsole& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1105_ServerInformation_CoreToConsole)
}

void Processor_1105_ServerInformation_CoreToConsole::SharedCtor() {
  _cached_size_ = 0;
  onlinesize_ = 0;
  openroom_ = 0;
  closeroom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1105_ServerInformation_CoreToConsole::~Processor_1105_ServerInformation_CoreToConsole() {
  // @@protoc_insertion_point(destructor:msg.Processor_1105_ServerInformation_CoreToConsole)
  SharedDtor();
}

void Processor_1105_ServerInformation_CoreToConsole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1105_ServerInformation_CoreToConsole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1105_ServerInformation_CoreToConsole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1105_ServerInformation_CoreToConsole_descriptor_;
}

const Processor_1105_ServerInformation_CoreToConsole& Processor_1105_ServerInformation_CoreToConsole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1105_ServerInformation_CoreToConsole* Processor_1105_ServerInformation_CoreToConsole::default_instance_ = NULL;

Processor_1105_ServerInformation_CoreToConsole* Processor_1105_ServerInformation_CoreToConsole::New() const {
  return new Processor_1105_ServerInformation_CoreToConsole;
}

void Processor_1105_ServerInformation_CoreToConsole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Processor_1105_ServerInformation_CoreToConsole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(onlinesize_, closeroom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1105_ServerInformation_CoreToConsole::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1105_ServerInformation_CoreToConsole)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OnlineSize = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinesize_)));
          set_has_onlinesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenRoom;
        break;
      }

      // optional int32 OpenRoom = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenRoom:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openroom_)));
          set_has_openroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CloseRoom;
        break;
      }

      // optional int32 CloseRoom = 3;
      case 3: {
        if (tag == 24) {
         parse_CloseRoom:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closeroom_)));
          set_has_closeroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1105_ServerInformation_CoreToConsole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1105_ServerInformation_CoreToConsole)
  return false;
#undef DO_
}

void Processor_1105_ServerInformation_CoreToConsole::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1105_ServerInformation_CoreToConsole)
  // optional int32 OnlineSize = 1;
  if (has_onlinesize()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->onlinesize(), output);
  }

  // optional int32 OpenRoom = 2;
  if (has_openroom()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->openroom(), output);
  }

  // optional int32 CloseRoom = 3;
  if (has_closeroom()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->closeroom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1105_ServerInformation_CoreToConsole)
}

::google_public::protobuf::uint8* Processor_1105_ServerInformation_CoreToConsole::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1105_ServerInformation_CoreToConsole)
  // optional int32 OnlineSize = 1;
  if (has_onlinesize()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->onlinesize(), target);
  }

  // optional int32 OpenRoom = 2;
  if (has_openroom()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->openroom(), target);
  }

  // optional int32 CloseRoom = 3;
  if (has_closeroom()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->closeroom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1105_ServerInformation_CoreToConsole)
  return target;
}

int Processor_1105_ServerInformation_CoreToConsole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OnlineSize = 1;
    if (has_onlinesize()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinesize());
    }

    // optional int32 OpenRoom = 2;
    if (has_openroom()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->openroom());
    }

    // optional int32 CloseRoom = 3;
    if (has_closeroom()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->closeroom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1105_ServerInformation_CoreToConsole::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1105_ServerInformation_CoreToConsole* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1105_ServerInformation_CoreToConsole*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1105_ServerInformation_CoreToConsole::MergeFrom(const Processor_1105_ServerInformation_CoreToConsole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlinesize()) {
      set_onlinesize(from.onlinesize());
    }
    if (from.has_openroom()) {
      set_openroom(from.openroom());
    }
    if (from.has_closeroom()) {
      set_closeroom(from.closeroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1105_ServerInformation_CoreToConsole::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1105_ServerInformation_CoreToConsole::CopyFrom(const Processor_1105_ServerInformation_CoreToConsole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1105_ServerInformation_CoreToConsole::IsInitialized() const {

  return true;
}

void Processor_1105_ServerInformation_CoreToConsole::Swap(Processor_1105_ServerInformation_CoreToConsole* other) {
  if (other != this) {
    std::swap(onlinesize_, other->onlinesize_);
    std::swap(openroom_, other->openroom_);
    std::swap(closeroom_, other->closeroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1105_ServerInformation_CoreToConsole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1105_ServerInformation_CoreToConsole_descriptor_;
  metadata.reflection = Processor_1105_ServerInformation_CoreToConsole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1107_SERVER_RESET_TOURMENT_CREDIT::kCreditFieldNumber;
#endif  // !_MSC_VER

Processor_1107_SERVER_RESET_TOURMENT_CREDIT::Processor_1107_SERVER_RESET_TOURMENT_CREDIT()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::InitAsDefaultInstance() {
}

Processor_1107_SERVER_RESET_TOURMENT_CREDIT::Processor_1107_SERVER_RESET_TOURMENT_CREDIT(const Processor_1107_SERVER_RESET_TOURMENT_CREDIT& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::SharedCtor() {
  _cached_size_ = 0;
  credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1107_SERVER_RESET_TOURMENT_CREDIT::~Processor_1107_SERVER_RESET_TOURMENT_CREDIT() {
  // @@protoc_insertion_point(destructor:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  SharedDtor();
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1107_SERVER_RESET_TOURMENT_CREDIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_;
}

const Processor_1107_SERVER_RESET_TOURMENT_CREDIT& Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1107_SERVER_RESET_TOURMENT_CREDIT* Processor_1107_SERVER_RESET_TOURMENT_CREDIT::default_instance_ = NULL;

Processor_1107_SERVER_RESET_TOURMENT_CREDIT* Processor_1107_SERVER_RESET_TOURMENT_CREDIT::New() const {
  return new Processor_1107_SERVER_RESET_TOURMENT_CREDIT;
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::Clear() {
  credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1107_SERVER_RESET_TOURMENT_CREDIT::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Credit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  return false;
#undef DO_
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  // optional int32 Credit = 1;
  if (has_credit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
}

::google_public::protobuf::uint8* Processor_1107_SERVER_RESET_TOURMENT_CREDIT::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  // optional int32 Credit = 1;
  if (has_credit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1107_SERVER_RESET_TOURMENT_CREDIT)
  return target;
}

int Processor_1107_SERVER_RESET_TOURMENT_CREDIT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Credit = 1;
    if (has_credit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1107_SERVER_RESET_TOURMENT_CREDIT* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1107_SERVER_RESET_TOURMENT_CREDIT*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::MergeFrom(const Processor_1107_SERVER_RESET_TOURMENT_CREDIT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::CopyFrom(const Processor_1107_SERVER_RESET_TOURMENT_CREDIT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1107_SERVER_RESET_TOURMENT_CREDIT::IsInitialized() const {

  return true;
}

void Processor_1107_SERVER_RESET_TOURMENT_CREDIT::Swap(Processor_1107_SERVER_RESET_TOURMENT_CREDIT* other) {
  if (other != this) {
    std::swap(credit_, other->credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1107_SERVER_RESET_TOURMENT_CREDIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1107_SERVER_RESET_TOURMENT_CREDIT_descriptor_;
  metadata.reflection = Processor_1107_SERVER_RESET_TOURMENT_CREDIT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1108_SEARCH_CREDIT_RANK_UP::kRanknumFieldNumber;
#endif  // !_MSC_VER

Processor_1108_SEARCH_CREDIT_RANK_UP::Processor_1108_SEARCH_CREDIT_RANK_UP()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::InitAsDefaultInstance() {
}

Processor_1108_SEARCH_CREDIT_RANK_UP::Processor_1108_SEARCH_CREDIT_RANK_UP(const Processor_1108_SEARCH_CREDIT_RANK_UP& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::SharedCtor() {
  _cached_size_ = 0;
  ranknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1108_SEARCH_CREDIT_RANK_UP::~Processor_1108_SEARCH_CREDIT_RANK_UP() {
  // @@protoc_insertion_point(destructor:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  SharedDtor();
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1108_SEARCH_CREDIT_RANK_UP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_;
}

const Processor_1108_SEARCH_CREDIT_RANK_UP& Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1108_SEARCH_CREDIT_RANK_UP* Processor_1108_SEARCH_CREDIT_RANK_UP::default_instance_ = NULL;

Processor_1108_SEARCH_CREDIT_RANK_UP* Processor_1108_SEARCH_CREDIT_RANK_UP::New() const {
  return new Processor_1108_SEARCH_CREDIT_RANK_UP;
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::Clear() {
  ranknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1108_SEARCH_CREDIT_RANK_UP::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranknum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranknum_)));
          set_has_ranknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  return false;
#undef DO_
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  // optional int32 ranknum = 1;
  if (has_ranknum()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
}

::google_public::protobuf::uint8* Processor_1108_SEARCH_CREDIT_RANK_UP::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  // optional int32 ranknum = 1;
  if (has_ranknum()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1108_SEARCH_CREDIT_RANK_UP)
  return target;
}

int Processor_1108_SEARCH_CREDIT_RANK_UP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranknum = 1;
    if (has_ranknum()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ranknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1108_SEARCH_CREDIT_RANK_UP* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1108_SEARCH_CREDIT_RANK_UP*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::MergeFrom(const Processor_1108_SEARCH_CREDIT_RANK_UP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranknum()) {
      set_ranknum(from.ranknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::CopyFrom(const Processor_1108_SEARCH_CREDIT_RANK_UP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1108_SEARCH_CREDIT_RANK_UP::IsInitialized() const {

  return true;
}

void Processor_1108_SEARCH_CREDIT_RANK_UP::Swap(Processor_1108_SEARCH_CREDIT_RANK_UP* other) {
  if (other != this) {
    std::swap(ranknum_, other->ranknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1108_SEARCH_CREDIT_RANK_UP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1108_SEARCH_CREDIT_RANK_UP_descriptor_;
  metadata.reflection = Processor_1108_SEARCH_CREDIT_RANK_UP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1108_SEARCH_CREDIT_RANK_DOWN::kUserTourCreditInfoFieldNumber;
#endif  // !_MSC_VER

Processor_1108_SEARCH_CREDIT_RANK_DOWN::Processor_1108_SEARCH_CREDIT_RANK_DOWN()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::InitAsDefaultInstance() {
}

Processor_1108_SEARCH_CREDIT_RANK_DOWN::Processor_1108_SEARCH_CREDIT_RANK_DOWN(const Processor_1108_SEARCH_CREDIT_RANK_DOWN& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1108_SEARCH_CREDIT_RANK_DOWN::~Processor_1108_SEARCH_CREDIT_RANK_DOWN() {
  // @@protoc_insertion_point(destructor:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  SharedDtor();
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1108_SEARCH_CREDIT_RANK_DOWN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_;
}

const Processor_1108_SEARCH_CREDIT_RANK_DOWN& Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1108_SEARCH_CREDIT_RANK_DOWN* Processor_1108_SEARCH_CREDIT_RANK_DOWN::default_instance_ = NULL;

Processor_1108_SEARCH_CREDIT_RANK_DOWN* Processor_1108_SEARCH_CREDIT_RANK_DOWN::New() const {
  return new Processor_1108_SEARCH_CREDIT_RANK_DOWN;
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::Clear() {
  usertourcreditinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1108_SEARCH_CREDIT_RANK_DOWN::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.UserTourCreditInfo UserTourCreditInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_UserTourCreditInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usertourcreditinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserTourCreditInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  return false;
#undef DO_
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  // repeated .msg.UserTourCreditInfo UserTourCreditInfo = 1;
  for (int i = 0; i < this->usertourcreditinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usertourcreditinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
}

::google_public::protobuf::uint8* Processor_1108_SEARCH_CREDIT_RANK_DOWN::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  // repeated .msg.UserTourCreditInfo UserTourCreditInfo = 1;
  for (int i = 0; i < this->usertourcreditinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usertourcreditinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1108_SEARCH_CREDIT_RANK_DOWN)
  return target;
}

int Processor_1108_SEARCH_CREDIT_RANK_DOWN::ByteSize() const {
  int total_size = 0;

  // repeated .msg.UserTourCreditInfo UserTourCreditInfo = 1;
  total_size += 1 * this->usertourcreditinfo_size();
  for (int i = 0; i < this->usertourcreditinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usertourcreditinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1108_SEARCH_CREDIT_RANK_DOWN* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1108_SEARCH_CREDIT_RANK_DOWN*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::MergeFrom(const Processor_1108_SEARCH_CREDIT_RANK_DOWN& from) {
  GOOGLE_CHECK_NE(&from, this);
  usertourcreditinfo_.MergeFrom(from.usertourcreditinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::CopyFrom(const Processor_1108_SEARCH_CREDIT_RANK_DOWN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1108_SEARCH_CREDIT_RANK_DOWN::IsInitialized() const {

  return true;
}

void Processor_1108_SEARCH_CREDIT_RANK_DOWN::Swap(Processor_1108_SEARCH_CREDIT_RANK_DOWN* other) {
  if (other != this) {
    usertourcreditinfo_.Swap(&other->usertourcreditinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1108_SEARCH_CREDIT_RANK_DOWN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1108_SEARCH_CREDIT_RANK_DOWN_descriptor_;
  metadata.reflection = Processor_1108_SEARCH_CREDIT_RANK_DOWN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1109_PUBLISH_SYS_MESSAGE::kSYSMessageFieldNumber;
#endif  // !_MSC_VER

Processor_1109_PUBLISH_SYS_MESSAGE::Processor_1109_PUBLISH_SYS_MESSAGE()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
}

void Processor_1109_PUBLISH_SYS_MESSAGE::InitAsDefaultInstance() {
}

Processor_1109_PUBLISH_SYS_MESSAGE::Processor_1109_PUBLISH_SYS_MESSAGE(const Processor_1109_PUBLISH_SYS_MESSAGE& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
}

void Processor_1109_PUBLISH_SYS_MESSAGE::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sysmessage_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1109_PUBLISH_SYS_MESSAGE::~Processor_1109_PUBLISH_SYS_MESSAGE() {
  // @@protoc_insertion_point(destructor:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  SharedDtor();
}

void Processor_1109_PUBLISH_SYS_MESSAGE::SharedDtor() {
  if (sysmessage_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sysmessage_;
  }
  if (this != default_instance_) {
  }
}

void Processor_1109_PUBLISH_SYS_MESSAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1109_PUBLISH_SYS_MESSAGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_;
}

const Processor_1109_PUBLISH_SYS_MESSAGE& Processor_1109_PUBLISH_SYS_MESSAGE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1109_PUBLISH_SYS_MESSAGE* Processor_1109_PUBLISH_SYS_MESSAGE::default_instance_ = NULL;

Processor_1109_PUBLISH_SYS_MESSAGE* Processor_1109_PUBLISH_SYS_MESSAGE::New() const {
  return new Processor_1109_PUBLISH_SYS_MESSAGE;
}

void Processor_1109_PUBLISH_SYS_MESSAGE::Clear() {
  if (has_sysmessage()) {
    if (sysmessage_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sysmessage_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1109_PUBLISH_SYS_MESSAGE::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SYSMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysmessage()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sysmessage().data(), this->sysmessage().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sysmessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  return false;
#undef DO_
}

void Processor_1109_PUBLISH_SYS_MESSAGE::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  // optional string SYSMessage = 1;
  if (has_sysmessage()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sysmessage().data(), this->sysmessage().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sysmessage");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sysmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
}

::google_public::protobuf::uint8* Processor_1109_PUBLISH_SYS_MESSAGE::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  // optional string SYSMessage = 1;
  if (has_sysmessage()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sysmessage().data(), this->sysmessage().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sysmessage");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sysmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1109_PUBLISH_SYS_MESSAGE)
  return target;
}

int Processor_1109_PUBLISH_SYS_MESSAGE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SYSMessage = 1;
    if (has_sysmessage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sysmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1109_PUBLISH_SYS_MESSAGE::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1109_PUBLISH_SYS_MESSAGE* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1109_PUBLISH_SYS_MESSAGE*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1109_PUBLISH_SYS_MESSAGE::MergeFrom(const Processor_1109_PUBLISH_SYS_MESSAGE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysmessage()) {
      set_sysmessage(from.sysmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1109_PUBLISH_SYS_MESSAGE::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1109_PUBLISH_SYS_MESSAGE::CopyFrom(const Processor_1109_PUBLISH_SYS_MESSAGE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1109_PUBLISH_SYS_MESSAGE::IsInitialized() const {

  return true;
}

void Processor_1109_PUBLISH_SYS_MESSAGE::Swap(Processor_1109_PUBLISH_SYS_MESSAGE* other) {
  if (other != this) {
    std::swap(sysmessage_, other->sysmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1109_PUBLISH_SYS_MESSAGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1109_PUBLISH_SYS_MESSAGE_descriptor_;
  metadata.reflection = Processor_1109_PUBLISH_SYS_MESSAGE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::kGroupidFieldNumber;
const int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::kUseridFieldNumber;
const int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::kMsginfoFieldNumber;
const int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::kNumFieldNumber;
#endif  // !_MSC_VER

Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::InitAsDefaultInstance() {
}

Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE(const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msginfo_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::~Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE() {
  // @@protoc_insertion_point(destructor:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  SharedDtor();
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::SharedDtor() {
  if (msginfo_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msginfo_;
  }
  if (this != default_instance_) {
  }
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_;
}

const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE& Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE* Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::default_instance_ = NULL;

Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE* Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::New() const {
  return new Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE;
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_msginfo()) {
      if (msginfo_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msginfo_->clear();
      }
    }
    num_ = 0;
  }
  groupid_.Clear();
  userid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 groupid = 1;
      case 1: {
        if (tag == 8) {
         parse_groupid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_groupid())));
        } else if (tag == 10) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groupid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_groupid;
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // repeated int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_userid())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        if (input->ExpectTag(26)) goto parse_msginfo;
        break;
      }

      // optional string msginfo = 3;
      case 3: {
        if (tag == 26) {
         parse_msginfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msginfo()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msginfo().data(), this->msginfo().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "msginfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  return false;
#undef DO_
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  // repeated int32 groupid = 1;
  for (int i = 0; i < this->groupid_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->groupid(i), output);
  }

  // repeated int32 userid = 2;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->userid(i), output);
  }

  // optional string msginfo = 3;
  if (has_msginfo()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msginfo().data(), this->msginfo().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "msginfo");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msginfo(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
}

::google_public::protobuf::uint8* Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  // repeated int32 groupid = 1;
  for (int i = 0; i < this->groupid_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->groupid(i), target);
  }

  // repeated int32 userid = 2;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->userid(i), target);
  }

  // optional string msginfo = 3;
  if (has_msginfo()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msginfo().data(), this->msginfo().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "msginfo");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msginfo(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE)
  return target;
}

int Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string msginfo = 3;
    if (has_msginfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->msginfo());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated int32 groupid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupid_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->groupid(i));
    }
    total_size += 1 * this->groupid_size() + data_size;
  }

  // repeated int32 userid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::MergeFrom(const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupid_.MergeFrom(from.groupid_);
  userid_.MergeFrom(from.userid_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::CopyFrom(const Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::IsInitialized() const {

  return true;
}

void Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::Swap(Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE* other) {
  if (other != this) {
    groupid_.Swap(&other->groupid_);
    userid_.Swap(&other->userid_);
    std::swap(msginfo_, other->msginfo_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_descriptor_;
  metadata.reflection = Processor_1110_PUBLISH_CONSOLE_SYS_MESSAGE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTourCreditInfo::kUserinfoFieldNumber;
const int UserTourCreditInfo::kRankFieldNumber;
const int UserTourCreditInfo::kCreditFieldNumber;
#endif  // !_MSC_VER

UserTourCreditInfo::UserTourCreditInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.UserTourCreditInfo)
}

void UserTourCreditInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::msg::UserDetailInfo*>(&::msg::UserDetailInfo::default_instance());
}

UserTourCreditInfo::UserTourCreditInfo(const UserTourCreditInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.UserTourCreditInfo)
}

void UserTourCreditInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rank_ = 0;
  credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTourCreditInfo::~UserTourCreditInfo() {
  // @@protoc_insertion_point(destructor:msg.UserTourCreditInfo)
  SharedDtor();
}

void UserTourCreditInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void UserTourCreditInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UserTourCreditInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTourCreditInfo_descriptor_;
}

const UserTourCreditInfo& UserTourCreditInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

UserTourCreditInfo* UserTourCreditInfo::default_instance_ = NULL;

UserTourCreditInfo* UserTourCreditInfo::New() const {
  return new UserTourCreditInfo;
}

void UserTourCreditInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTourCreditInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, credit_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::msg::UserDetailInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTourCreditInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.UserTourCreditInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.UserDetailInfo userinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Credit;
        break;
      }

      // optional int32 Credit = 3;
      case 3: {
        if (tag == 24) {
         parse_Credit:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.UserTourCreditInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.UserTourCreditInfo)
  return false;
#undef DO_
}

void UserTourCreditInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.UserTourCreditInfo)
  // optional .msg.UserDetailInfo userinfo = 1;
  if (has_userinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 Credit = 3;
  if (has_credit()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.UserTourCreditInfo)
}

::google_public::protobuf::uint8* UserTourCreditInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UserTourCreditInfo)
  // optional .msg.UserDetailInfo userinfo = 1;
  if (has_userinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 Credit = 3;
  if (has_credit()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UserTourCreditInfo)
  return target;
}

int UserTourCreditInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.UserDetailInfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Credit = 3;
    if (has_credit()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTourCreditInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTourCreditInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UserTourCreditInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTourCreditInfo::MergeFrom(const UserTourCreditInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::msg::UserDetailInfo::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTourCreditInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTourCreditInfo::CopyFrom(const UserTourCreditInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTourCreditInfo::IsInitialized() const {

  return true;
}

void UserTourCreditInfo::Swap(UserTourCreditInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(credit_, other->credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UserTourCreditInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UserTourCreditInfo_descriptor_;
  metadata.reflection = UserTourCreditInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessages::kMessageFieldNumber;
const int ChatMessages::kIDFieldNumber;
const int ChatMessages::kCountFieldNumber;
#endif  // !_MSC_VER

ChatMessages::ChatMessages()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ChatMessages)
}

void ChatMessages::InitAsDefaultInstance() {
}

ChatMessages::ChatMessages(const ChatMessages& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ChatMessages)
}

void ChatMessages::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessages::~ChatMessages() {
  // @@protoc_insertion_point(destructor:msg.ChatMessages)
  SharedDtor();
}

void ChatMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ChatMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessages_descriptor_;
}

const ChatMessages& ChatMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ChatMessages* ChatMessages::default_instance_ = NULL;

ChatMessages* ChatMessages::New() const {
  return new ChatMessages;
}

void ChatMessages::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatMessages*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessages::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ChatMessages)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ChatMessage Message = 1;
      case 1: {
        if (tag == 10) {
         parse_Message:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Message;
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int32 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // optional int32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ChatMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ChatMessages)
  return false;
#undef DO_
}

void ChatMessages::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ChatMessages)
  // repeated .msg.ChatMessage Message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message(i), output);
  }

  // optional int32 ID = 2;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ChatMessages)
}

::google_public::protobuf::uint8* ChatMessages::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChatMessages)
  // repeated .msg.ChatMessage Message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(i), target);
  }

  // optional int32 ID = 2;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChatMessages)
  return target;
}

int ChatMessages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .msg.ChatMessage Message = 1;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessages::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessages* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ChatMessages*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessages::MergeFrom(const ChatMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessages::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessages::CopyFrom(const ChatMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessages::IsInitialized() const {

  return true;
}

void ChatMessages::Swap(ChatMessages* other) {
  if (other != this) {
    message_.Swap(&other->message_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ChatMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessages_descriptor_;
  metadata.reflection = ChatMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationsForSave::kInvitationsFieldNumber;
#endif  // !_MSC_VER

InvitationsForSave::InvitationsForSave()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.InvitationsForSave)
}

void InvitationsForSave::InitAsDefaultInstance() {
}

InvitationsForSave::InvitationsForSave(const InvitationsForSave& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.InvitationsForSave)
}

void InvitationsForSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationsForSave::~InvitationsForSave() {
  // @@protoc_insertion_point(destructor:msg.InvitationsForSave)
  SharedDtor();
}

void InvitationsForSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitationsForSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* InvitationsForSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationsForSave_descriptor_;
}

const InvitationsForSave& InvitationsForSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

InvitationsForSave* InvitationsForSave::default_instance_ = NULL;

InvitationsForSave* InvitationsForSave::New() const {
  return new InvitationsForSave;
}

void InvitationsForSave::Clear() {
  invitations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationsForSave::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.InvitationsForSave)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.Invitation Invitations = 1;
      case 1: {
        if (tag == 10) {
         parse_Invitations:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Invitations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.InvitationsForSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.InvitationsForSave)
  return false;
#undef DO_
}

void InvitationsForSave::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.InvitationsForSave)
  // repeated .msg.Invitation Invitations = 1;
  for (int i = 0; i < this->invitations_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.InvitationsForSave)
}

::google_public::protobuf::uint8* InvitationsForSave::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.InvitationsForSave)
  // repeated .msg.Invitation Invitations = 1;
  for (int i = 0; i < this->invitations_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.InvitationsForSave)
  return target;
}

int InvitationsForSave::ByteSize() const {
  int total_size = 0;

  // repeated .msg.Invitation Invitations = 1;
  total_size += 1 * this->invitations_size();
  for (int i = 0; i < this->invitations_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationsForSave::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationsForSave* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const InvitationsForSave*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationsForSave::MergeFrom(const InvitationsForSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  invitations_.MergeFrom(from.invitations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationsForSave::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationsForSave::CopyFrom(const InvitationsForSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationsForSave::IsInitialized() const {

  return true;
}

void InvitationsForSave::Swap(InvitationsForSave* other) {
  if (other != this) {
    invitations_.Swap(&other->invitations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata InvitationsForSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = InvitationsForSave_descriptor_;
  metadata.reflection = InvitationsForSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMessageForSave::kFriendMessageFieldNumber;
const int ChatMessageForSave::kGroupMessageFieldNumber;
#endif  // !_MSC_VER

ChatMessageForSave::ChatMessageForSave()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ChatMessageForSave)
}

void ChatMessageForSave::InitAsDefaultInstance() {
}

ChatMessageForSave::ChatMessageForSave(const ChatMessageForSave& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ChatMessageForSave)
}

void ChatMessageForSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessageForSave::~ChatMessageForSave() {
  // @@protoc_insertion_point(destructor:msg.ChatMessageForSave)
  SharedDtor();
}

void ChatMessageForSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMessageForSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ChatMessageForSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessageForSave_descriptor_;
}

const ChatMessageForSave& ChatMessageForSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ChatMessageForSave* ChatMessageForSave::default_instance_ = NULL;

ChatMessageForSave* ChatMessageForSave::New() const {
  return new ChatMessageForSave;
}

void ChatMessageForSave::Clear() {
  friendmessage_.Clear();
  groupmessage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessageForSave::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ChatMessageForSave)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.ChatMessages FriendMessage = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendMessage:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendMessage;
        if (input->ExpectTag(18)) goto parse_GroupMessage;
        break;
      }

      // repeated .msg.ChatMessages GroupMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupMessage:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupMessage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ChatMessageForSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ChatMessageForSave)
  return false;
#undef DO_
}

void ChatMessageForSave::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ChatMessageForSave)
  // repeated .msg.ChatMessages FriendMessage = 1;
  for (int i = 0; i < this->friendmessage_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendmessage(i), output);
  }

  // repeated .msg.ChatMessages GroupMessage = 2;
  for (int i = 0; i < this->groupmessage_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupmessage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ChatMessageForSave)
}

::google_public::protobuf::uint8* ChatMessageForSave::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChatMessageForSave)
  // repeated .msg.ChatMessages FriendMessage = 1;
  for (int i = 0; i < this->friendmessage_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendmessage(i), target);
  }

  // repeated .msg.ChatMessages GroupMessage = 2;
  for (int i = 0; i < this->groupmessage_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupmessage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChatMessageForSave)
  return target;
}

int ChatMessageForSave::ByteSize() const {
  int total_size = 0;

  // repeated .msg.ChatMessages FriendMessage = 1;
  total_size += 1 * this->friendmessage_size();
  for (int i = 0; i < this->friendmessage_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendmessage(i));
  }

  // repeated .msg.ChatMessages GroupMessage = 2;
  total_size += 1 * this->groupmessage_size();
  for (int i = 0; i < this->groupmessage_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupmessage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessageForSave::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessageForSave* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ChatMessageForSave*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessageForSave::MergeFrom(const ChatMessageForSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendmessage_.MergeFrom(from.friendmessage_);
  groupmessage_.MergeFrom(from.groupmessage_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessageForSave::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageForSave::CopyFrom(const ChatMessageForSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageForSave::IsInitialized() const {

  return true;
}

void ChatMessageForSave::Swap(ChatMessageForSave* other) {
  if (other != this) {
    friendmessage_.Swap(&other->friendmessage_);
    groupmessage_.Swap(&other->groupmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ChatMessageForSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessageForSave_descriptor_;
  metadata.reflection = ChatMessageForSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldChatMessageForSave::kFriendMessageFieldNumber;
const int OldChatMessageForSave::kGroupMessageFieldNumber;
#endif  // !_MSC_VER

OldChatMessageForSave::OldChatMessageForSave()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.OldChatMessageForSave)
}

void OldChatMessageForSave::InitAsDefaultInstance() {
  friendmessage_ = const_cast< ::msg::ChatMessages*>(&::msg::ChatMessages::default_instance());
  groupmessage_ = const_cast< ::msg::ChatMessages*>(&::msg::ChatMessages::default_instance());
}

OldChatMessageForSave::OldChatMessageForSave(const OldChatMessageForSave& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.OldChatMessageForSave)
}

void OldChatMessageForSave::SharedCtor() {
  _cached_size_ = 0;
  friendmessage_ = NULL;
  groupmessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldChatMessageForSave::~OldChatMessageForSave() {
  // @@protoc_insertion_point(destructor:msg.OldChatMessageForSave)
  SharedDtor();
}

void OldChatMessageForSave::SharedDtor() {
  if (this != default_instance_) {
    delete friendmessage_;
    delete groupmessage_;
  }
}

void OldChatMessageForSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OldChatMessageForSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldChatMessageForSave_descriptor_;
}

const OldChatMessageForSave& OldChatMessageForSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

OldChatMessageForSave* OldChatMessageForSave::default_instance_ = NULL;

OldChatMessageForSave* OldChatMessageForSave::New() const {
  return new OldChatMessageForSave;
}

void OldChatMessageForSave::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_friendmessage()) {
      if (friendmessage_ != NULL) friendmessage_->::msg::ChatMessages::Clear();
    }
    if (has_groupmessage()) {
      if (groupmessage_ != NULL) groupmessage_->::msg::ChatMessages::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldChatMessageForSave::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.OldChatMessageForSave)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.ChatMessages FriendMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupMessage;
        break;
      }

      // optional .msg.ChatMessages GroupMessage = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupMessage:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.OldChatMessageForSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.OldChatMessageForSave)
  return false;
#undef DO_
}

void OldChatMessageForSave::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.OldChatMessageForSave)
  // optional .msg.ChatMessages FriendMessage = 1;
  if (has_friendmessage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendmessage(), output);
  }

  // optional .msg.ChatMessages GroupMessage = 2;
  if (has_groupmessage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.OldChatMessageForSave)
}

::google_public::protobuf::uint8* OldChatMessageForSave::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OldChatMessageForSave)
  // optional .msg.ChatMessages FriendMessage = 1;
  if (has_friendmessage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendmessage(), target);
  }

  // optional .msg.ChatMessages GroupMessage = 2;
  if (has_groupmessage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OldChatMessageForSave)
  return target;
}

int OldChatMessageForSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.ChatMessages FriendMessage = 1;
    if (has_friendmessage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendmessage());
    }

    // optional .msg.ChatMessages GroupMessage = 2;
    if (has_groupmessage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldChatMessageForSave::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldChatMessageForSave* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OldChatMessageForSave*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldChatMessageForSave::MergeFrom(const OldChatMessageForSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendmessage()) {
      mutable_friendmessage()->::msg::ChatMessages::MergeFrom(from.friendmessage());
    }
    if (from.has_groupmessage()) {
      mutable_groupmessage()->::msg::ChatMessages::MergeFrom(from.groupmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldChatMessageForSave::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldChatMessageForSave::CopyFrom(const OldChatMessageForSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldChatMessageForSave::IsInitialized() const {

  return true;
}

void OldChatMessageForSave::Swap(OldChatMessageForSave* other) {
  if (other != this) {
    std::swap(friendmessage_, other->friendmessage_);
    std::swap(groupmessage_, other->groupmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OldChatMessageForSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OldChatMessageForSave_descriptor_;
  metadata.reflection = OldChatMessageForSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecord::kHandIDFieldNumber;
const int GameRecord::kRoomIDFieldNumber;
const int GameRecord::kPoolSizeFieldNumber;
const int GameRecord::kWinnerNameFieldNumber;
const int GameRecord::kHoleCardFieldNumber;
#endif  // !_MSC_VER

GameRecord::GameRecord()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GameRecord)
}

void GameRecord::InitAsDefaultInstance() {
}

GameRecord::GameRecord(const GameRecord& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GameRecord)
}

void GameRecord::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  handid_ = 0;
  roomid_ = 0;
  poolsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecord::~GameRecord() {
  // @@protoc_insertion_point(destructor:msg.GameRecord)
  SharedDtor();
}

void GameRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GameRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecord_descriptor_;
}

const GameRecord& GameRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GameRecord* GameRecord::default_instance_ = NULL;

GameRecord* GameRecord::New() const {
  return new GameRecord;
}

void GameRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(handid_, roomid_);
    poolsize_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  winnername_.Clear();
  holecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecord::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GameRecord)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handid_)));
          set_has_handid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PoolSize;
        break;
      }

      // optional int32 PoolSize = 3;
      case 3: {
        if (tag == 24) {
         parse_PoolSize:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolsize_)));
          set_has_poolsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_WinnerName;
        break;
      }

      // repeated string WinnerName = 4;
      case 4: {
        if (tag == 34) {
         parse_WinnerName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_winnername()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winnername(this->winnername_size() - 1).data(),
            this->winnername(this->winnername_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "winnername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_WinnerName;
        if (input->ExpectTag(40)) goto parse_HoleCard;
        break;
      }

      // repeated int32 HoleCard = 5;
      case 5: {
        if (tag == 40) {
         parse_HoleCard:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_holecard())));
        } else if (tag == 42) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_holecard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HoleCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GameRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GameRecord)
  return false;
#undef DO_
}

void GameRecord::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GameRecord)
  // optional int32 HandID = 1;
  if (has_handid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->handid(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 PoolSize = 3;
  if (has_poolsize()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->poolsize(), output);
  }

  // repeated string WinnerName = 4;
  for (int i = 0; i < this->winnername_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->winnername(i).data(), this->winnername(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "winnername");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->winnername(i), output);
  }

  // repeated int32 HoleCard = 5;
  for (int i = 0; i < this->holecard_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->holecard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GameRecord)
}

::google_public::protobuf::uint8* GameRecord::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GameRecord)
  // optional int32 HandID = 1;
  if (has_handid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handid(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 PoolSize = 3;
  if (has_poolsize()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poolsize(), target);
  }

  // repeated string WinnerName = 4;
  for (int i = 0; i < this->winnername_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winnername(i).data(), this->winnername(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "winnername");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->winnername(i), target);
  }

  // repeated int32 HoleCard = 5;
  for (int i = 0; i < this->holecard_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->holecard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GameRecord)
  return target;
}

int GameRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HandID = 1;
    if (has_handid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->handid());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 PoolSize = 3;
    if (has_poolsize()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->poolsize());
    }

  }
  // repeated string WinnerName = 4;
  total_size += 1 * this->winnername_size();
  for (int i = 0; i < this->winnername_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->winnername(i));
  }

  // repeated int32 HoleCard = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->holecard_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->holecard(i));
    }
    total_size += 1 * this->holecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecord::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecord* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GameRecord*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecord::MergeFrom(const GameRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  winnername_.MergeFrom(from.winnername_);
  holecard_.MergeFrom(from.holecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handid()) {
      set_handid(from.handid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_poolsize()) {
      set_poolsize(from.poolsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecord::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecord::CopyFrom(const GameRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecord::IsInitialized() const {

  return true;
}

void GameRecord::Swap(GameRecord* other) {
  if (other != this) {
    std::swap(handid_, other->handid_);
    std::swap(roomid_, other->roomid_);
    std::swap(poolsize_, other->poolsize_);
    winnername_.Swap(&other->winnername_);
    holecard_.Swap(&other->holecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GameRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GameRecord_descriptor_;
  metadata.reflection = GameRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecordForSave::kRecordFieldNumber;
const int GameRecordForSave::kUserIDFieldNumber;
#endif  // !_MSC_VER

GameRecordForSave::GameRecordForSave()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.GameRecordForSave)
}

void GameRecordForSave::InitAsDefaultInstance() {
}

GameRecordForSave::GameRecordForSave(const GameRecordForSave& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.GameRecordForSave)
}

void GameRecordForSave::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecordForSave::~GameRecordForSave() {
  // @@protoc_insertion_point(destructor:msg.GameRecordForSave)
  SharedDtor();
}

void GameRecordForSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRecordForSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GameRecordForSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecordForSave_descriptor_;
}

const GameRecordForSave& GameRecordForSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

GameRecordForSave* GameRecordForSave::default_instance_ = NULL;

GameRecordForSave* GameRecordForSave::New() const {
  return new GameRecordForSave;
}

void GameRecordForSave::Clear() {
  userid_ = 0;
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecordForSave::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.GameRecordForSave)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg.GameRecord Record = 1;
      case 1: {
        if (tag == 10) {
         parse_Record:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Record;
        if (input->ExpectTag(16)) goto parse_UserID;
        break;
      }

      // optional int32 UserID = 2;
      case 2: {
        if (tag == 16) {
         parse_UserID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.GameRecordForSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.GameRecordForSave)
  return false;
#undef DO_
}

void GameRecordForSave::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.GameRecordForSave)
  // repeated .msg.GameRecord Record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.GameRecordForSave)
}

::google_public::protobuf::uint8* GameRecordForSave::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GameRecordForSave)
  // repeated .msg.GameRecord Record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  // optional int32 UserID = 2;
  if (has_userid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GameRecordForSave)
  return target;
}

int GameRecordForSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated .msg.GameRecord Record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecordForSave::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecordForSave* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GameRecordForSave*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecordForSave::MergeFrom(const GameRecordForSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecordForSave::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecordForSave::CopyFrom(const GameRecordForSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecordForSave::IsInitialized() const {

  return true;
}

void GameRecordForSave::Swap(GameRecordForSave* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GameRecordForSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GameRecordForSave_descriptor_;
  metadata.reflection = GameRecordForSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomInfoForSave::kRoomTypeFieldNumber;
const int CreateRoomInfoForSave::kIsTournamentFieldNumber;
const int CreateRoomInfoForSave::kRoomInfoFieldNumber;
const int CreateRoomInfoForSave::kRoomPropFieldNumber;
const int CreateRoomInfoForSave::kTemplateSizeNameFieldNumber;
const int CreateRoomInfoForSave::kTemplateSpeedNameFieldNumber;
const int CreateRoomInfoForSave::kTournamentInfoFieldNumber;
#endif  // !_MSC_VER

CreateRoomInfoForSave::CreateRoomInfoForSave()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CreateRoomInfoForSave)
}

void CreateRoomInfoForSave::InitAsDefaultInstance() {
  roominfo_ = const_cast< ::msg::RoomInfo*>(&::msg::RoomInfo::default_instance());
  roomprop_ = const_cast< ::msg::RoomProp*>(&::msg::RoomProp::default_instance());
  tournamentinfo_ = const_cast< ::msg::TournamentInfo*>(&::msg::TournamentInfo::default_instance());
}

CreateRoomInfoForSave::CreateRoomInfoForSave(const CreateRoomInfoForSave& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.CreateRoomInfoForSave)
}

void CreateRoomInfoForSave::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomtype_ = 0;
  istournament_ = false;
  roominfo_ = NULL;
  roomprop_ = NULL;
  templatesizename_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  templatespeedname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  tournamentinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomInfoForSave::~CreateRoomInfoForSave() {
  // @@protoc_insertion_point(destructor:msg.CreateRoomInfoForSave)
  SharedDtor();
}

void CreateRoomInfoForSave::SharedDtor() {
  if (templatesizename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templatesizename_;
  }
  if (templatespeedname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templatespeedname_;
  }
  if (this != default_instance_) {
    delete roominfo_;
    delete roomprop_;
    delete tournamentinfo_;
  }
}

void CreateRoomInfoForSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CreateRoomInfoForSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomInfoForSave_descriptor_;
}

const CreateRoomInfoForSave& CreateRoomInfoForSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CreateRoomInfoForSave* CreateRoomInfoForSave::default_instance_ = NULL;

CreateRoomInfoForSave* CreateRoomInfoForSave::New() const {
  return new CreateRoomInfoForSave;
}

void CreateRoomInfoForSave::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateRoomInfoForSave*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roomtype_, istournament_);
    if (has_roominfo()) {
      if (roominfo_ != NULL) roominfo_->::msg::RoomInfo::Clear();
    }
    if (has_roomprop()) {
      if (roomprop_ != NULL) roomprop_->::msg::RoomProp::Clear();
    }
    if (has_templatesizename()) {
      if (templatesizename_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        templatesizename_->clear();
      }
    }
    if (has_templatespeedname()) {
      if (templatespeedname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        templatespeedname_->clear();
      }
    }
    if (has_tournamentinfo()) {
      if (tournamentinfo_ != NULL) tournamentinfo_->::msg::TournamentInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomInfoForSave::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.CreateRoomInfoForSave)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.RoomType RoomType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_roomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsTournament;
        break;
      }

      // optional bool IsTournament = 2;
      case 2: {
        if (tag == 16) {
         parse_IsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournament_)));
          set_has_istournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomInfo;
        break;
      }

      // optional .msg.RoomInfo RoomInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoomProp;
        break;
      }

      // optional .msg.RoomProp RoomProp = 4;
      case 4: {
        if (tag == 34) {
         parse_RoomProp:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TemplateSizeName;
        break;
      }

      // optional string TemplateSizeName = 5;
      case 5: {
        if (tag == 42) {
         parse_TemplateSizeName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatesizename()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatesizename().data(), this->templatesizename().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "templatesizename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TemplateSpeedName;
        break;
      }

      // optional string TemplateSpeedName = 6;
      case 6: {
        if (tag == 50) {
         parse_TemplateSpeedName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatespeedname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templatespeedname().data(), this->templatespeedname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "templatespeedname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_TournamentInfo;
        break;
      }

      // optional .msg.TournamentInfo TournamentInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_TournamentInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.CreateRoomInfoForSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.CreateRoomInfoForSave)
  return false;
#undef DO_
}

void CreateRoomInfoForSave::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.CreateRoomInfoForSave)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roomtype(), output);
  }

  // optional bool IsTournament = 2;
  if (has_istournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->istournament(), output);
  }

  // optional .msg.RoomInfo RoomInfo = 3;
  if (has_roominfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roominfo(), output);
  }

  // optional .msg.RoomProp RoomProp = 4;
  if (has_roomprop()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomprop(), output);
  }

  // optional string TemplateSizeName = 5;
  if (has_templatesizename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatesizename().data(), this->templatesizename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatesizename");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->templatesizename(), output);
  }

  // optional string TemplateSpeedName = 6;
  if (has_templatespeedname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatespeedname().data(), this->templatespeedname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatespeedname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->templatespeedname(), output);
  }

  // optional .msg.TournamentInfo TournamentInfo = 7;
  if (has_tournamentinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tournamentinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.CreateRoomInfoForSave)
}

::google_public::protobuf::uint8* CreateRoomInfoForSave::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreateRoomInfoForSave)
  // optional .msg.RoomType RoomType = 1;
  if (has_roomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roomtype(), target);
  }

  // optional bool IsTournament = 2;
  if (has_istournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istournament(), target);
  }

  // optional .msg.RoomInfo RoomInfo = 3;
  if (has_roominfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roominfo(), target);
  }

  // optional .msg.RoomProp RoomProp = 4;
  if (has_roomprop()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomprop(), target);
  }

  // optional string TemplateSizeName = 5;
  if (has_templatesizename()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatesizename().data(), this->templatesizename().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatesizename");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->templatesizename(), target);
  }

  // optional string TemplateSpeedName = 6;
  if (has_templatespeedname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templatespeedname().data(), this->templatespeedname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "templatespeedname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->templatespeedname(), target);
  }

  // optional .msg.TournamentInfo TournamentInfo = 7;
  if (has_tournamentinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tournamentinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreateRoomInfoForSave)
  return target;
}

int CreateRoomInfoForSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msg.RoomType RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional bool IsTournament = 2;
    if (has_istournament()) {
      total_size += 1 + 1;
    }

    // optional .msg.RoomInfo RoomInfo = 3;
    if (has_roominfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

    // optional .msg.RoomProp RoomProp = 4;
    if (has_roomprop()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomprop());
    }

    // optional string TemplateSizeName = 5;
    if (has_templatesizename()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->templatesizename());
    }

    // optional string TemplateSpeedName = 6;
    if (has_templatespeedname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->templatespeedname());
    }

    // optional .msg.TournamentInfo TournamentInfo = 7;
    if (has_tournamentinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomInfoForSave::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomInfoForSave* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CreateRoomInfoForSave*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomInfoForSave::MergeFrom(const CreateRoomInfoForSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_istournament()) {
      set_istournament(from.istournament());
    }
    if (from.has_roominfo()) {
      mutable_roominfo()->::msg::RoomInfo::MergeFrom(from.roominfo());
    }
    if (from.has_roomprop()) {
      mutable_roomprop()->::msg::RoomProp::MergeFrom(from.roomprop());
    }
    if (from.has_templatesizename()) {
      set_templatesizename(from.templatesizename());
    }
    if (from.has_templatespeedname()) {
      set_templatespeedname(from.templatespeedname());
    }
    if (from.has_tournamentinfo()) {
      mutable_tournamentinfo()->::msg::TournamentInfo::MergeFrom(from.tournamentinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomInfoForSave::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomInfoForSave::CopyFrom(const CreateRoomInfoForSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomInfoForSave::IsInitialized() const {

  return true;
}

void CreateRoomInfoForSave::Swap(CreateRoomInfoForSave* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(istournament_, other->istournament_);
    std::swap(roominfo_, other->roominfo_);
    std::swap(roomprop_, other->roomprop_);
    std::swap(templatesizename_, other->templatesizename_);
    std::swap(templatespeedname_, other->templatespeedname_);
    std::swap(tournamentinfo_, other->tournamentinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CreateRoomInfoForSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomInfoForSave_descriptor_;
  metadata.reflection = CreateRoomInfoForSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientUserSetting::kLastGroupIDFieldNumber;
const int ClientUserSetting::kLastRoomTypeFieldNumber;
const int ClientUserSetting::kLastIsTournamentFieldNumber;
const int ClientUserSetting::kLastRoomIDFieldNumber;
const int ClientUserSetting::kCreateRoomInfoForSaveFieldNumber;
#endif  // !_MSC_VER

ClientUserSetting::ClientUserSetting()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ClientUserSetting)
}

void ClientUserSetting::InitAsDefaultInstance() {
}

ClientUserSetting::ClientUserSetting(const ClientUserSetting& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.ClientUserSetting)
}

void ClientUserSetting::SharedCtor() {
  _cached_size_ = 0;
  lastgroupid_ = 0;
  lastroomtype_ = 0;
  lastistournament_ = false;
  lastroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientUserSetting::~ClientUserSetting() {
  // @@protoc_insertion_point(destructor:msg.ClientUserSetting)
  SharedDtor();
}

void ClientUserSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientUserSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ClientUserSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientUserSetting_descriptor_;
}

const ClientUserSetting& ClientUserSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

ClientUserSetting* ClientUserSetting::default_instance_ = NULL;

ClientUserSetting* ClientUserSetting::New() const {
  return new ClientUserSetting;
}

void ClientUserSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientUserSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lastgroupid_, lastroomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  createroominfoforsave_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientUserSetting::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.ClientUserSetting)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LastGroupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastgroupid_)));
          set_has_lastgroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LastRoomType;
        break;
      }

      // optional .msg.RoomType LastRoomType = 2;
      case 2: {
        if (tag == 16) {
         parse_LastRoomType:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg::RoomType_IsValid(value)) {
            set_lastroomtype(static_cast< ::msg::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastIsTournament;
        break;
      }

      // optional bool LastIsTournament = 3;
      case 3: {
        if (tag == 24) {
         parse_LastIsTournament:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastistournament_)));
          set_has_lastistournament();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LastRoomID;
        break;
      }

      // optional int32 LastRoomID = 4;
      case 4: {
        if (tag == 32) {
         parse_LastRoomID:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastroomid_)));
          set_has_lastroomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CreateRoomInfoForSave;
        break;
      }

      // repeated .msg.CreateRoomInfoForSave CreateRoomInfoForSave = 5;
      case 5: {
        if (tag == 42) {
         parse_CreateRoomInfoForSave:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createroominfoforsave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CreateRoomInfoForSave;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.ClientUserSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.ClientUserSetting)
  return false;
#undef DO_
}

void ClientUserSetting::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.ClientUserSetting)
  // optional int32 LastGroupID = 1;
  if (has_lastgroupid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->lastgroupid(), output);
  }

  // optional .msg.RoomType LastRoomType = 2;
  if (has_lastroomtype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lastroomtype(), output);
  }

  // optional bool LastIsTournament = 3;
  if (has_lastistournament()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->lastistournament(), output);
  }

  // optional int32 LastRoomID = 4;
  if (has_lastroomid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastroomid(), output);
  }

  // repeated .msg.CreateRoomInfoForSave CreateRoomInfoForSave = 5;
  for (int i = 0; i < this->createroominfoforsave_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->createroominfoforsave(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.ClientUserSetting)
}

::google_public::protobuf::uint8* ClientUserSetting::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ClientUserSetting)
  // optional int32 LastGroupID = 1;
  if (has_lastgroupid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lastgroupid(), target);
  }

  // optional .msg.RoomType LastRoomType = 2;
  if (has_lastroomtype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lastroomtype(), target);
  }

  // optional bool LastIsTournament = 3;
  if (has_lastistournament()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lastistournament(), target);
  }

  // optional int32 LastRoomID = 4;
  if (has_lastroomid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastroomid(), target);
  }

  // repeated .msg.CreateRoomInfoForSave CreateRoomInfoForSave = 5;
  for (int i = 0; i < this->createroominfoforsave_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->createroominfoforsave(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ClientUserSetting)
  return target;
}

int ClientUserSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LastGroupID = 1;
    if (has_lastgroupid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastgroupid());
    }

    // optional .msg.RoomType LastRoomType = 2;
    if (has_lastroomtype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->lastroomtype());
    }

    // optional bool LastIsTournament = 3;
    if (has_lastistournament()) {
      total_size += 1 + 1;
    }

    // optional int32 LastRoomID = 4;
    if (has_lastroomid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lastroomid());
    }

  }
  // repeated .msg.CreateRoomInfoForSave CreateRoomInfoForSave = 5;
  total_size += 1 * this->createroominfoforsave_size();
  for (int i = 0; i < this->createroominfoforsave_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createroominfoforsave(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientUserSetting::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientUserSetting* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ClientUserSetting*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientUserSetting::MergeFrom(const ClientUserSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  createroominfoforsave_.MergeFrom(from.createroominfoforsave_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastgroupid()) {
      set_lastgroupid(from.lastgroupid());
    }
    if (from.has_lastroomtype()) {
      set_lastroomtype(from.lastroomtype());
    }
    if (from.has_lastistournament()) {
      set_lastistournament(from.lastistournament());
    }
    if (from.has_lastroomid()) {
      set_lastroomid(from.lastroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientUserSetting::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientUserSetting::CopyFrom(const ClientUserSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUserSetting::IsInitialized() const {

  return true;
}

void ClientUserSetting::Swap(ClientUserSetting* other) {
  if (other != this) {
    std::swap(lastgroupid_, other->lastgroupid_);
    std::swap(lastroomtype_, other->lastroomtype_);
    std::swap(lastistournament_, other->lastistournament_);
    std::swap(lastroomid_, other->lastroomid_);
    createroominfoforsave_.Swap(&other->createroominfoforsave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ClientUserSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ClientUserSetting_descriptor_;
  metadata.reflection = ClientUserSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)
